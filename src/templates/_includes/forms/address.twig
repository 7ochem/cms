{% import '_includes/forms' as forms %}
{%- set static = static ?? false %}
{%- set useSlideout = useSlideout ?? true %}
{%- set initJs = not static and (initJs ?? true) -%}
{%- set availableCountries = availableCountries ?? craft.app.addresses.countryRepository.getList(craft.app.language) %}
{%- set defaultCountryCode = defaultCountryCode ?? availableCountries|keys|first -%}
{%- set address = address ?? create('craft\\models\\Address') %}
{%- set addressFormat = craft.app.addresses.addressFormatRepository.get(address.countryCode ?? defaultCountryCode) %}
{%- set id = id ?? "address#{random()}" %}
{%- set containerClasses = ['address-card'] -%}
{%- set hasErrors = hasErrors ?? false -%}

{% if hasErrors %}
    {%- set containerClasses = containerClasses|merge(['error']) -%}
{% endif %}

{% if address.getIsEmpty() %}
    {%- set containerClasses = containerClasses|merge(['address-empty']) -%}
{% endif %}

{% set containerAttributes = {
    id: id,
    class: containerClasses
}|merge(containerAttributes ?? [], recursive=true) %}

{% tag 'div' with containerAttributes %}
    <div class="address-card-header">
        {% if address.label %}
        <div class="address-card-label">
            {{ address.label }}
        </div>
        {% endif %}
        <div class="address-card-header-actions">
            <button type="button" class="btn menubtn" data-icon="settings"
                    aria-label="{{ 'Settings'|t('app') }}"></button>
            <div class="menu">
                <ul>
                    <li>
                        <a href="#" data-action="edit" title="{{ 'Edit'|t('app') }}" aria-label="{{ 'Edit'|t('app') }}"
                           role="button">Edit</a>
                    </li>

                    {% if not address.getIsEmpty() %}
                        <li>
                            <a href="#" data-action="remove" class="error" title="{{ 'Remove'|t('app') }}"
                               aria-label="{{ 'Remove'|t('app') }}" role="button">{{ 'Removeâ€¦'|t('app') }}</a>
                        </li>
                    {% endif %}
                </ul>
            </div>

        </div>
    </div>
    <div class="address-card-body">
        {% if not address.getIsEmpty() %}
            {{ craft.app.addresses.formatAddress(address)|raw }}
        {% endif %}
    </div>
    <div class="address-card-fields hidden">

        <div class="address-card-fields-content">
            {{ forms.textField({
                label: "Label"|t('app'),
                instructions: "Name the address. (e.g. Work or School) "|t('app'),
                id: 'label',
                name: "#{name}[label]",
                value: address.label,
                required: false,
                errors: address.getErrors('label'),
            }) }}

            {{ forms.selectField({
            label: "Country"|t('app'),
            id: 'countryCode',
            name: "#{name}[countryCode]",
            options: availableCountries,
            value: address.countryCode ?? defaultCountryCode,
        }) }}

        <div class="flex field">
            {{ forms.textField({
                label: "Given Name"|t('app'),
                id: 'givenName',
                name: "#{name}[givenName]",
                value: address.givenName,
                required: 'givenName' in addressFormat.getRequiredFields(),
                errors: address.getErrors('givenName'),
            }) }}

            {{ forms.textField({
                label: "Family Name"|t('app'),
                id: 'familyName',
                name: "#{name}[familyName]",
                value: address.familyName,
                required: 'familyName' in addressFormat.getRequiredFields(),
                errors: address.getErrors('familyName'),
                autofocus: true,
            }) }}

            {{ forms.textField({
                label: "Additional Name"|t('app'),
                id: 'additionalName',
                name: "#{name}[additionalName]",
                value: address.additionalName,
                required: 'additionalName' in addressFormat.getRequiredFields(),
                errors: address.getErrors('additionalName'),
            }) }}

        </div>

        {{ forms.textField({
            label: "Organization"|t('app'),
            id: 'organization',
            name: "#{name}[organization]",
            value: address.organization,
            required: 'organization' in addressFormat.getRequiredFields(),
            errors: address.getErrors('organization'),
        }) }}

        {{ forms.textField({
            label: "Address Line 1"|t('app'),
            id: 'addressLine1',
            name: "#{name}[addressLine1]",
            value: address.addressLine1,
            required: 'addressLine1' in addressFormat.getRequiredFields(),
            errors: address.getErrors('addressLine1'),
        }) }}

        {{ forms.textField({
            label: "Address Line 2"|t('app'),
            id: 'addressLine2',
            name: "#{name}[addressLine2]",
            value: address.addressLine2,
            required: 'addressLine2' in addressFormat.getRequiredFields(),
            errors: address.getErrors('addressLine2'),
        }) }}

        {{ forms.textField({
            label: "Sorting Code"|t('app'),
            id: 'sortingCode',
            name: "#{name}[sortingCode]",
            value: address.sortingCode,
            required: 'sortingCode' in addressFormat.getRequiredFields(),
            errors: address.getErrors('sortingCode'),
        }) }}

        {{ forms.textField({
            label: craft.app.addresses.getPostalCodeTypeLabel(addressFormat.postalCodeType),
            id: 'postalCode',
            name: "#{name}[postalCode]",
            value: address.postalCode,
            required: 'postalCode' in addressFormat.getRequiredFields(),
            errors: address.getErrors('postalCode'),
        }) }}

        <div class="field {% if 'administrativeArea' not in addressFormat.getUsedSubdivisionFields() %}hidden{% endif %}">
            {{ forms.selectField({
                label: craft.app.addresses.getAdministrativeAreaTypeLabel(addressFormat.administrativeAreaType),
                id: 'administrativeArea',
                name: "#{name}[administrativeArea]",
                required: 'administrativeArea' in addressFormat.getRequiredFields(),
                value: address.administrativeArea,
                options: craft.app.addresses.subdivisionRepository.getList([address.countryCode ?? defaultCountryCode], craft.app.language),
                errors: address.getErrors('administrativeArea'),
            }) }}
        </div>

        <div class="field {% if 'locality' not in addressFormat.getUsedSubdivisionFields() %}hidden{% endif %}">
            {{ forms.textField({
                label: craft.app.addresses.getLocalityTypeLabel(addressFormat.localityType),
                id: 'locality',
                name: "#{name}[locality]",
                required: 'locality' in addressFormat.getRequiredFields(),
                value: address.locality,
                errors: address.getErrors('locality'),
            }) }}
        </div>

        <div class="feild {% if 'dependentLocality' not in addressFormat.getUsedSubdivisionFields() %}hidden{% endif %}">
            {{ forms.textField({
                label: craft.app.addresses.getDependentLocalityTypeLabel(addressFormat.dependentLocalityType),
                id: 'dependentLocality',
                name: "#{name}[dependentLocality]",
                value: address.dependentLocality,
                errors: address.getErrors('dependentLocality'),
            }) }}
        </div>

        {% set metaErrors = address.getErrors('metadata') %}

        {{ forms.editableTableField({
            label: "Metadata"|t('app'),
            id: 'metadata',
            name: "#{name}[metadata]",
            cols: {
                key: {
                    type: 'singleline',
                    heading: "Key"|t('app'),
                },
                value: {
                    type: 'singleline',
                    heading: "Value"|t('app'),
                }
            }|filter,
            rows: address.metadata ? address.metadata : [[]],
            staticRows: false,
            errors: metaErrors|unique
        }) }}
        </div>
    </div>
{% endtag %}

{% if initJs %}
    {% set jsId = id|namespaceInputId|e('js') %}
    {% set jsName = name|namespaceInputName|e('js') %}
    {% js %}
    new Craft.AddressInput("{{ jsId }}", "{{ jsName }}", {
        static: {{ static ? 'true' : 'false'}},
    });
    {% endjs %}
{% endif %}