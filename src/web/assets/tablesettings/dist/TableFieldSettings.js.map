{"version":3,"file":"TableFieldSettings.js","mappings":"CAAA,SAAUA,GAGNC,MAAMC,mBAAqBC,QAAQC,KAAKC,OAAO,CAC3CC,iBAAkB,KAClBC,kBAAmB,KACnBC,YAAa,KACbC,eAAgB,KAChBC,gBAAiB,KACjBC,sBAAuB,KACvBC,uBAAwB,KAExBC,SAAU,KACVC,eAAgB,KAEhBC,qBAAsB,KACtBC,qBAAsB,KAEtBC,aAAc,KACdC,cAAe,KAEfC,KAAM,SAASb,EAAkBC,EAAmBC,EAAaK,EAAUC,EAAgBC,EAAsBC,GAC7GI,KAAKd,iBAAmBA,EACxBc,KAAKb,kBAAoBA,EACzBa,KAAKZ,YAAcA,EAEnBY,KAAKX,eAAiBR,MAAMoB,cAAcD,KAAKd,kBAC/Cc,KAAKV,gBAAkBT,MAAMoB,cAAcD,KAAKb,mBAEhDa,KAAKT,sBAAwBV,MAAMqB,YAAYF,KAAKd,iBAAiBiB,MAAM,YAC3EH,KAAKR,uBAAyBX,MAAMqB,YAAYF,KAAKb,kBAAkBgB,MAAM,YAE7EH,KAAKP,SAAWA,EAChBO,KAAKN,eAAiBA,EAEtBM,KAAKL,qBAAuBA,EAC5BK,KAAKJ,qBAAuBA,EAE5BI,KAAKI,mBACLJ,KAAKK,qBAGTD,iBAAkB,WACdJ,KAAKH,aAAe,IAAIS,EAAYN,KAAMA,KAAKX,eAAgBW,KAAKd,iBAAkBc,KAAKN,eAAgB,CACvGa,YAAa,MACbC,cAAe,CACXC,KAAM,cAEVC,SAAUV,KAAKW,YAAYC,KAAKZ,MAChCa,YAAab,KAAKc,yBAAyBF,KAAKZ,SAIxDK,kBAAmB,WACfL,KAAKF,cAAgB,IAAIjB,MAAMkC,cAAcf,KAAKV,gBAAiBU,KAAKb,kBAAmBa,KAAKZ,YAAa,CACzGmB,YAAa,SAIrBI,YAAa,SAASK,GAClBhB,KAAKc,2BACLd,KAAKiB,wBAAwBD,IAGjCC,wBAAyB,SAASC,GAC9B,IAAIC,EAAaD,EAAWE,KAAK,qDACjCpB,KAAKqB,YAAYF,EAAY,QAAS,6BAG1CL,yBAA0B,WACtBd,KAAKZ,YAAcP,MAAMyC,gBAAgBvC,QAAQwC,YAAYvB,KAAKH,aAAa2B,SAC/E,IAEIC,EAAGC,EAFHjC,EAAWZ,MAAMyC,gBAAgBvC,QAAQwC,YAAYvB,KAAKF,cAAc0B,SAI5E,IAAKC,EAAI,EAAGA,EAAIzB,KAAKT,sBAAsBoC,OAAQF,IAC/CC,EAAM1B,KAAKT,sBAAsBkC,GACjCzB,KAAKZ,YAAcY,KAAKZ,YAAYsC,GAIxC,IAAK,IAAIE,KAAS5B,KAAKZ,YACnB,GAAIY,KAAKZ,YAAYyC,eAAeD,IAA2C,WAAjC5B,KAAKZ,YAAYwC,GAAOnB,KAAmB,CACrF,IAAIqB,EAAS9B,KAAKH,aAAa2B,OAAOJ,KAAK,eAAiBQ,EAAQ,MAAMG,KAAK,sBAC/E/B,KAAKZ,YAAYwC,GAAOI,QAAUF,EAAOE,SAAW,GAI5D,IAAKP,EAAI,EAAGA,EAAIzB,KAAKR,uBAAuBmC,OAAQF,IAAK,CAGrD,QAA6B,IAAlBhC,EAFXiC,EAAM1B,KAAKR,uBAAuBiC,IAEQ,CACtChC,EAAW,GACX,MAEAA,EAAWA,EAASiC,GAI5B,IAAIO,EAAY,cAGhB,IAAK,IAAIL,KAAS5B,KAAKZ,YACdY,KAAKZ,YAAYyC,eAAeD,KAIrCK,GAAa,oBAAsBjC,KAAKZ,YAAYwC,GAAOM,QAAUlC,KAAKZ,YAAYwC,GAAOM,QAAU,UAAY,SAGvHD,GAAa,qCAIb,IAAIE,EAASvD,EAAE,WAAY,CACvBwD,GAAIpC,KAAKV,gBACT,MAAS,uBACV+C,OAAOJ,GAENT,EAAS5C,EAAE,YAAY0D,SAASH,GAEpC,IAAK,IAAII,KAAS9C,EACTA,EAASoC,eAAeU,IAI7B1D,MAAMkC,cAAcyB,UAAUD,EAAOvC,KAAKZ,YAAaY,KAAKb,kBAAmBM,EAAS8C,IAAQD,SAASd,GAG7GxB,KAAKF,cAAcqC,OAAOM,YAAYN,GACtCnC,KAAKF,cAAc4C,iBACZ1C,KAAKF,cACZE,KAAKK,uBAIb,IAAIC,EAAczB,MAAMkC,cAAc9B,OAAO,CACzC0D,cAAe,KAEf5C,KAAM,SAAS4C,EAAeP,EAAIQ,EAAUC,EAASC,GACjD9C,KAAK2C,cAAgBA,EACrB3C,KAAK+C,KAAKX,EAAIQ,EAAUC,EAASC,IAGrCE,WAAY,WACR,QAAKhD,KAAK+C,SAIV/C,KAAK2C,cAAc1B,wBAAwBjB,KAAKwB,QAChDxB,KAAKiD,OAAOH,SAASI,aAAelD,KAAK2C,cAAc7B,yBAAyBF,KAAKZ,KAAK2C,gBACnF,IAGXQ,aAAc,SAASnC,GACnB,OAAO,IAAIV,EAAY8C,IAAIpD,KAAMgB,MAIzCV,EAAY8C,IAAMvE,MAAMkC,cAAcqC,IAAInE,OAAO,CAC7CoE,YAAa,KACbC,aAAc,KAEdtB,QAAS,KACTuB,cAAe,KACfC,aAAc,KAEdzD,KAAM,SAAS0D,EAAOC,GAClB1D,KAAK+C,KAAKU,EAAOC,GAEb1D,KAAKyD,MAAMd,cAAcvD,YAAYY,KAAKoC,MAC1CpC,KAAKgC,QAAUhC,KAAKyD,MAAMd,cAAcvD,YAAYY,KAAKoC,IAAIJ,SAAW,MAG5E,IAAI2B,EAAY3D,KAAKgB,IAAII,KAAK,mBAC1BwC,EAAuBD,EAAUvC,KAAK,WAC1CpB,KAAKsD,aAAeK,EAAUvC,KAAK,aAE9BpB,KAAKsD,aAAa3B,SACnB3B,KAAKsD,aAAe1E,EAAE,OAAQ,CAC1B,MAAS,2BACTiF,KAAM,SACN,YAAa,aAEjBjF,EAAE,SAAU,CAAC,MAAS,qBACjB0D,SAASqB,GACTtB,OAAOuB,GACPvB,OAAOrC,KAAKsD,eAGrBtD,KAAKqD,YAAcO,EAAqBxC,KAAK,UAC7CpB,KAAKqB,YAAYrB,KAAKqD,YAAa,SAAU,oBAC7CrD,KAAKqB,YAAYrB,KAAKsD,aAAc,QAAS,qBAE7CtD,KAAKqB,YAAYrB,KAAKgB,IAAI8C,QAAQ,QAAS,SAAU,qBAGzDC,iBAAkB,WACiB,WAA3B/D,KAAKqD,YAAYW,MACjBhE,KAAKsD,aAAaW,YAAY,aAE9BjE,KAAKsD,aAAaY,SAAS,aAG/BlE,KAAKyD,MAAMd,cAAc7B,4BAG7BqD,kBAAmB,SAASC,GAAI,WAC5B,GAAKpE,KAAKuD,cAsCNvD,KAAKuD,cAAcc,WAtCE,CACrB,IAAIjC,EAAK,wBAA0BkC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC/CC,EAAS7F,EAAE,SAAU,CAAC,MAAS,gCAAgC0D,SAASvD,QAAQ2F,MAChFC,EAAQ/F,EAAE,SAAU,CAAC,MAAS,SAC7B0D,SAASmC,GACTG,KAAK5E,KAAKyD,MAAMd,cAAchD,qBAAqBkF,QAAQ,UAAWzC,IAO3E,GALApC,KAAKwD,aAAe,IAAI3E,MAAMkC,cAAcqB,EAAI,WAAYpC,KAAKyD,MAAMd,cAAc/C,qBAAsB,CACvGc,SAAUV,KAAK8E,uBAAuBlE,KAAKZ,MAC3Ca,YAAab,KAAK8E,uBAAuBlE,KAAKZ,QAG9CA,KAAKgC,SAAWhC,KAAKgC,QAAQL,OAE7B,IADA,IAAIoD,EACKtD,EAAI,EAAGA,EAAIzB,KAAKgC,QAAQL,OAAQF,KACrCsD,EAAM/E,KAAKwD,aAAawB,QAAO,IAC3BhE,IAAII,KAAK,0BAA0B4C,IAAIhE,KAAKgC,QAAQP,GAAGwD,OAC3DF,EAAI/D,IAAII,KAAK,0BAA0B4C,IAAIhE,KAAKgC,QAAQP,GAAGyD,OAC3DH,EAAI/D,IAAII,KAAK,0CAA0C+D,KAAK,YAAanF,KAAKgC,QAAQP,GAAb,cAG7EzB,KAAKwD,aAAawB,QAAO,GAG7B,IAAII,EAAexG,EAAE,YAAa,CAC9B6B,KAAM,SACN4E,MAAO,aACPC,KAAMzG,MAAM0G,EAAE,MAAO,UACtBjD,SAASqC,GAEZ3E,KAAKuD,cAAgB,IAAIxE,QAAQyG,MAAMf,EAAQ,CAC3CgB,OAAQzF,KAAK0F,wBAAwB9E,KAAKZ,QAG9CA,KAAKqB,YAAY+D,EAAc,SAAS,WACpCpF,KAAKuD,cAAcoC,UAM3BC,YAAW,WACP,EAAKpC,aAAahC,OAAOJ,KAAK,YAAYyE,QAAQC,QAAQ,WAC3D,MAGPhB,uBAAwB,WAChB9E,KAAKuD,eACLvD,KAAKuD,cAAcwC,yBAI3BL,wBAAyB,WACrB1F,KAAKgC,QAAU,GAEf,IADA,IAAIgE,EAAQhG,KAAKwD,aAAarB,OAAOf,KAAK,YACjCK,EAAI,EAAGA,EAAIuE,EAAMrE,OAAQF,IAAK,CACnC,IAAIwE,EAAOD,EAAME,GAAGzE,GACpBzB,KAAKgC,QAAQmE,KAAK,CACdlB,MAAOgB,EAAK7E,KAAK,0BAA0B4C,MAC3CkB,MAAOe,EAAK7E,KAAK,0BAA0B4C,MAC3CoC,QAASH,EAAK7E,KAAK,wCAAwC+D,KAAK,aAIxEnF,KAAKyD,MAAMd,cAAc7B,4BAG7BuF,iBAAkB,SAASjC,GACQ,WAA3BpE,KAAKqD,YAAYW,OACjBpF,EAAE,WAAY,CACV6B,KAAM,SACN6F,KAAMtG,KAAKyD,MAAMd,cAAczD,iBAAmB,IAAMc,KAAKoC,GAAK,aAClE8C,MAAOqB,KAAKC,UAAUxG,KAAKgC,WAC5BM,SAAS8B,EAAGqC,kBAzR/B,CA6RGC","sources":["webpack:///./TableFieldSettings.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.TableFieldSettings = Garnish.Base.extend({\n        columnsTableName: null,\n        defaultsTableName: null,\n        columnsData: null,\n        columnsTableId: null,\n        defaultsTableId: null,\n        columnsTableInputPath: null,\n        defaultsTableInputPath: null,\n\n        defaults: null,\n        columnSettings: null,\n\n        dropdownSettingsHtml: null,\n        dropdownSettingsCols: null,\n\n        columnsTable: null,\n        defaultsTable: null,\n\n        init: function(columnsTableName, defaultsTableName, columnsData, defaults, columnSettings, dropdownSettingsHtml, dropdownSettingsCols) {\n            this.columnsTableName = columnsTableName;\n            this.defaultsTableName = defaultsTableName;\n            this.columnsData = columnsData;\n\n            this.columnsTableId = Craft.formatInputId(this.columnsTableName);\n            this.defaultsTableId = Craft.formatInputId(this.defaultsTableName);\n\n            this.columnsTableInputPath = Craft.filterArray(this.columnsTableName.split(/[\\[\\]]+/));\n            this.defaultsTableInputPath = Craft.filterArray(this.defaultsTableName.split(/[\\[\\]]+/));\n\n            this.defaults = defaults;\n            this.columnSettings = columnSettings;\n\n            this.dropdownSettingsHtml = dropdownSettingsHtml;\n            this.dropdownSettingsCols = dropdownSettingsCols;\n\n            this.initColumnsTable();\n            this.initDefaultsTable();\n        },\n\n        initColumnsTable: function() {\n            this.columnsTable = new ColumnTable(this, this.columnsTableId, this.columnsTableName, this.columnSettings, {\n                rowIdPrefix: 'col',\n                defaultValues: {\n                    type: 'singleline'\n                },\n                onAddRow: this.onAddColumn.bind(this),\n                onDeleteRow: this.reconstructDefaultsTable.bind(this)\n            });\n        },\n\n        initDefaultsTable: function() {\n            this.defaultsTable = new Craft.EditableTable(this.defaultsTableId, this.defaultsTableName, this.columnsData, {\n                rowIdPrefix: 'row'\n            });\n        },\n\n        onAddColumn: function($tr) {\n            this.reconstructDefaultsTable();\n            this.initColumnSettingInputs($tr);\n        },\n\n        initColumnSettingInputs: function($container) {\n            var $textareas = $container.find('td:first-child textarea, td:nth-child(3) textarea');\n            this.addListener($textareas, 'input', 'reconstructDefaultsTable');\n        },\n\n        reconstructDefaultsTable: function() {\n            this.columnsData = Craft.expandPostArray(Garnish.getPostData(this.columnsTable.$tbody));\n            var defaults = Craft.expandPostArray(Garnish.getPostData(this.defaultsTable.$tbody));\n\n            var i, key;\n\n            for (i = 0; i < this.columnsTableInputPath.length; i++) {\n                key = this.columnsTableInputPath[i];\n                this.columnsData = this.columnsData[key];\n            }\n\n            // Add in the dropdown options\n            for (let colId in this.columnsData) {\n                if (this.columnsData.hasOwnProperty(colId) && this.columnsData[colId].type === 'select') {\n                    var rowObj = this.columnsTable.$tbody.find('tr[data-id=\"' + colId + '\"]').data('editable-table-row');\n                    this.columnsData[colId].options = rowObj.options || [];\n                }\n            }\n\n            for (i = 0; i < this.defaultsTableInputPath.length; i++) {\n                key = this.defaultsTableInputPath[i];\n\n                if (typeof defaults[key] === 'undefined') {\n                    defaults = {};\n                    break;\n                } else {\n                    defaults = defaults[key];\n                }\n            }\n\n            var theadHtml = '<thead>' +\n                '<tr>';\n\n            for (let colId in this.columnsData) {\n                if (!this.columnsData.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                theadHtml += '<th scope=\"col\">' + (this.columnsData[colId].heading ? this.columnsData[colId].heading : '&nbsp;') + '</th>';\n            }\n\n            theadHtml += '<th colspan=\"2\"></th>' +\n                '</tr>' +\n                '</thead>';\n\n            var $table = $('<table/>', {\n                id: this.defaultsTableId,\n                'class': 'editable fullwidth'\n            }).append(theadHtml);\n\n            var $tbody = $('<tbody/>').appendTo($table);\n\n            for (var rowId in defaults) {\n                if (!defaults.hasOwnProperty(rowId)) {\n                    continue;\n                }\n\n                Craft.EditableTable.createRow(rowId, this.columnsData, this.defaultsTableName, defaults[rowId]).appendTo($tbody);\n            }\n\n            this.defaultsTable.$table.replaceWith($table);\n            this.defaultsTable.destroy();\n            delete this.defaultsTable;\n            this.initDefaultsTable();\n        }\n    });\n\n    var ColumnTable = Craft.EditableTable.extend({\n        fieldSettings: null,\n\n        init: function(fieldSettings, id, baseName, columns, settings) {\n            this.fieldSettings = fieldSettings;\n            this.base(id, baseName, columns, settings);\n        },\n\n        initialize: function() {\n            if (!this.base()) {\n                return false;\n            }\n\n            this.fieldSettings.initColumnSettingInputs(this.$tbody);\n            this.sorter.settings.onSortChange = this.fieldSettings.reconstructDefaultsTable.bind(this.fieldSettings);\n            return true;\n        },\n\n        createRowObj: function($tr) {\n            return new ColumnTable.Row(this, $tr);\n        }\n    });\n\n    ColumnTable.Row = Craft.EditableTable.Row.extend({\n        $typeSelect: null,\n        $settingsBtn: null,\n\n        options: null,\n        settingsModal: null,\n        optionsTable: null,\n\n        init: function(table, tr) {\n            this.base(table, tr);\n\n            if (this.table.fieldSettings.columnsData[this.id]) {\n                this.options = this.table.fieldSettings.columnsData[this.id].options || null;\n            }\n\n            var $typeCell = this.$tr.find('td:nth-child(4)');\n            var $typeSelectContainer = $typeCell.find('.select');\n            this.$settingsBtn = $typeCell.find('.settings');\n\n            if (!this.$settingsBtn.length) {\n                this.$settingsBtn = $('<a/>', {\n                    'class': 'settings light invisible',\n                    role: 'button',\n                    'data-icon': 'settings'\n                });\n                $('<div/>', {'class': 'flex flex-nowrap'})\n                    .appendTo($typeCell)\n                    .append($typeSelectContainer)\n                    .append(this.$settingsBtn);\n            }\n\n            this.$typeSelect = $typeSelectContainer.find('select');\n            this.addListener(this.$typeSelect, 'change', 'handleTypeChange');\n            this.addListener(this.$settingsBtn, 'click', 'showSettingsModal');\n\n            this.addListener(this.$tr.closest('form'), 'submit', 'handleFormSubmit');\n        },\n\n        handleTypeChange: function() {\n            if (this.$typeSelect.val() === 'select') {\n                this.$settingsBtn.removeClass('invisible');\n            } else {\n                this.$settingsBtn.addClass('invisible');\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        showSettingsModal: function(ev) {\n            if (!this.settingsModal) {\n                var id = 'dropdownsettingsmodal' + Math.floor(Math.random() * 1000000);\n                var $modal = $('<div/>', {'class': 'modal dropdownsettingsmodal'}).appendTo(Garnish.$bod);\n                var $body = $('<div/>', {'class': 'body'})\n                    .appendTo($modal)\n                    .html(this.table.fieldSettings.dropdownSettingsHtml.replace(/__ID__/g, id));\n\n                this.optionsTable = new Craft.EditableTable(id, '__NAME__', this.table.fieldSettings.dropdownSettingsCols, {\n                    onAddRow: this.handleOptionsRowChange.bind(this),\n                    onDeleteRow: this.handleOptionsRowChange.bind(this)\n                });\n\n                if (this.options && this.options.length) {\n                    var row;\n                    for (var i = 0; i < this.options.length; i++) {\n                        row = this.optionsTable.addRow(false);\n                        row.$tr.find('.option-label textarea').val(this.options[i].label);\n                        row.$tr.find('.option-value textarea').val(this.options[i].value);\n                        row.$tr.find('.option-default input[type=\"checkbox\"]').prop('checked', !!this.options[i].default);\n                    }\n                } else {\n                    this.optionsTable.addRow(false);\n                }\n\n                var $closeButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Done')\n                }).appendTo($body);\n\n                this.settingsModal = new Garnish.Modal($modal, {\n                    onHide: this.handleSettingsModalHide.bind(this)\n                });\n\n                this.addListener($closeButton, 'click', function() {\n                    this.settingsModal.hide();\n                });\n            } else {\n                this.settingsModal.show();\n            }\n\n            setTimeout(() => {\n                this.optionsTable.$tbody.find('textarea').first().trigger('focus')\n            }, 100);\n        },\n\n        handleOptionsRowChange: function() {\n            if (this.settingsModal) {\n                this.settingsModal.updateSizeAndPosition();\n            }\n        },\n\n        handleSettingsModalHide: function() {\n            this.options = [];\n            var $rows = this.optionsTable.$table.find('tbody tr');\n            for (var i = 0; i < $rows.length; i++) {\n                let $row = $rows.eq(i);\n                this.options.push({\n                    label: $row.find('.option-label textarea').val(),\n                    value: $row.find('.option-value textarea').val(),\n                    default: $row.find('.option-default input[type=checkbox]').prop('checked')\n                })\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        handleFormSubmit: function(ev) {\n            if (this.$typeSelect.val() === 'select') {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: this.table.fieldSettings.columnsTableName + '[' + this.id + '][options]',\n                    value: JSON.stringify(this.options)\n                }).appendTo(ev.currentTarget);\n            }\n        }\n    });\n})(jQuery);\n"],"names":["$","Craft","TableFieldSettings","Garnish","Base","extend","columnsTableName","defaultsTableName","columnsData","columnsTableId","defaultsTableId","columnsTableInputPath","defaultsTableInputPath","defaults","columnSettings","dropdownSettingsHtml","dropdownSettingsCols","columnsTable","defaultsTable","init","this","formatInputId","filterArray","split","initColumnsTable","initDefaultsTable","ColumnTable","rowIdPrefix","defaultValues","type","onAddRow","onAddColumn","bind","onDeleteRow","reconstructDefaultsTable","EditableTable","$tr","initColumnSettingInputs","$container","$textareas","find","addListener","expandPostArray","getPostData","$tbody","i","key","length","colId","hasOwnProperty","rowObj","data","options","theadHtml","heading","$table","id","append","appendTo","rowId","createRow","replaceWith","destroy","fieldSettings","baseName","columns","settings","base","initialize","sorter","onSortChange","createRowObj","Row","$typeSelect","$settingsBtn","settingsModal","optionsTable","table","tr","$typeCell","$typeSelectContainer","role","closest","handleTypeChange","val","removeClass","addClass","showSettingsModal","ev","show","Math","floor","random","$modal","$bod","$body","html","replace","handleOptionsRowChange","row","addRow","label","value","prop","$closeButton","class","text","t","Modal","onHide","handleSettingsModalHide","hide","setTimeout","first","trigger","updateSizeAndPosition","$rows","$row","eq","push","default","handleFormSubmit","name","JSON","stringify","currentTarget","jQuery"],"sourceRoot":""}