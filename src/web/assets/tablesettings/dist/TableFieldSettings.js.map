{"version":3,"file":"TableFieldSettings.js","mappings":"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","sources":["webpack:///./TableFieldSettings.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.TableFieldSettings = Garnish.Base.extend({\n        columnsTableName: null,\n        defaultsTableName: null,\n        columnsData: null,\n        columnsTableId: null,\n        defaultsTableId: null,\n        columnsTableInputPath: null,\n        defaultsTableInputPath: null,\n\n        defaults: null,\n        columnSettings: null,\n\n        dropdownSettingsHtml: null,\n        dropdownSettingsCols: null,\n\n        columnsTable: null,\n        defaultsTable: null,\n\n        init: function(columnsTableName, defaultsTableName, columnsData, defaults, columnSettings, dropdownSettingsHtml, dropdownSettingsCols) {\n            this.columnsTableName = columnsTableName;\n            this.defaultsTableName = defaultsTableName;\n            this.columnsData = columnsData;\n\n            this.columnsTableId = Craft.formatInputId(this.columnsTableName);\n            this.defaultsTableId = Craft.formatInputId(this.defaultsTableName);\n\n            this.columnsTableInputPath = Craft.filterArray(this.columnsTableName.split(/[\\[\\]]+/));\n            this.defaultsTableInputPath = Craft.filterArray(this.defaultsTableName.split(/[\\[\\]]+/));\n\n            this.defaults = defaults;\n            this.columnSettings = columnSettings;\n\n            this.dropdownSettingsHtml = dropdownSettingsHtml;\n            this.dropdownSettingsCols = dropdownSettingsCols;\n\n            this.initColumnsTable();\n            this.initDefaultsTable();\n        },\n\n        initColumnsTable: function() {\n            this.columnsTable = new ColumnTable(this, this.columnsTableId, this.columnsTableName, this.columnSettings, {\n                rowIdPrefix: 'col',\n                defaultValues: {\n                    type: 'singleline'\n                },\n                allowAdd: true,\n                allowReorder: true,\n                allowDelete: true,\n                onAddRow: this.onAddColumn.bind(this),\n                onDeleteRow: this.reconstructDefaultsTable.bind(this)\n            });\n        },\n\n        initDefaultsTable: function() {\n            this.defaultsTable = new Craft.EditableTable(this.defaultsTableId, this.defaultsTableName, this.columnsData, {\n                rowIdPrefix: 'row',\n                allowAdd: true,\n                allowReorder: true,\n                allowDelete: true,\n            });\n        },\n\n        onAddColumn: function($tr) {\n            this.reconstructDefaultsTable();\n            this.initColumnSettingInputs($tr);\n        },\n\n        initColumnSettingInputs: function($container) {\n            const $textareas = $container.find('td:first-child textarea, td:nth-child(3) textarea');\n            this.addListener($textareas, 'input', 'reconstructDefaultsTable');\n        },\n\n        reconstructDefaultsTable: function() {\n            this.columnsData = Craft.expandPostArray(Garnish.getPostData(this.columnsTable.$tbody));\n            let defaults = Craft.expandPostArray(Garnish.getPostData(this.defaultsTable.$tbody));\n\n            // If there are no columns, drop the defaults table rows and disable add row button\n            if (!Object.keys(this.columnsData).length) {\n                const $rows = this.defaultsTable.$tbody.children();\n                for (let r = 0; r < $rows.length; r++) {\n                  this.defaultsTable.deleteRow(this.defaultsTable.createRowObj($rows[r]));\n                }\n                this.defaultsTable.$addRowBtn.css('opacity', '0.2');\n                this.defaultsTable.$addRowBtn.css('pointer-events', 'none');\n                return;\n            }\n\n            for (let i = 0; i < this.columnsTableInputPath.length; i++) {\n                const key = this.columnsTableInputPath[i];\n                if (typeof this.columnsData[key] !== 'undefined') {\n                  this.columnsData = this.columnsData[key];\n                }\n            }\n\n            // Add in the dropdown options\n            for (let colId in this.columnsData) {\n                if (this.columnsData.hasOwnProperty(colId) && this.columnsData[colId].type === 'select') {\n                    const rowObj = this.columnsTable.$tbody.find('tr[data-id=\"' + colId + '\"]').data('editable-table-row');\n                    this.columnsData[colId].options = rowObj.options || [];\n                }\n            }\n\n            for (let i = 0; i < this.defaultsTableInputPath.length; i++) {\n                const key = this.defaultsTableInputPath[i];\n\n                if (typeof defaults[key] === 'undefined') {\n                    defaults = {};\n                    break;\n                } else {\n                    defaults = defaults[key];\n                }\n            }\n\n            let theadHtml = '<thead>' +\n                '<tr>';\n\n            for (let colId in this.columnsData) {\n                if (!this.columnsData.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                theadHtml += '<th scope=\"col\">' + (this.columnsData[colId].heading ? this.columnsData[colId].heading : '&nbsp;') + '</th>';\n            }\n\n            theadHtml += '<th colspan=\"2\"></th>' +\n                '</tr>' +\n                '</thead>';\n\n            const $table = $('<table/>', {\n                id: this.defaultsTableId,\n                'class': 'editable fullwidth'\n            }).append(theadHtml);\n\n            const $tbody = $('<tbody/>').appendTo($table);\n\n            for (let rowId in defaults) {\n                if (!defaults.hasOwnProperty(rowId)) {\n                    continue;\n                }\n\n                Craft.EditableTable.createRow(rowId, this.columnsData, this.defaultsTableName, defaults[rowId]).appendTo($tbody);\n            }\n\n            this.defaultsTable.$table.replaceWith($table);\n            this.defaultsTable.destroy();\n            delete this.defaultsTable;\n            this.initDefaultsTable();\n        }\n    });\n\n    const ColumnTable = Craft.EditableTable.extend({\n        fieldSettings: null,\n\n        init: function(fieldSettings, id, baseName, columns, settings) {\n            this.fieldSettings = fieldSettings;\n            this.base(id, baseName, columns, settings);\n        },\n\n        initialize: function() {\n            if (!this.base()) {\n                return false;\n            }\n\n            this.fieldSettings.initColumnSettingInputs(this.$tbody);\n            this.sorter.settings.onSortChange = this.fieldSettings.reconstructDefaultsTable.bind(this.fieldSettings);\n            return true;\n        },\n\n        createRowObj: function($tr) {\n            return new ColumnTable.Row(this, $tr);\n        }\n    });\n\n    ColumnTable.Row = Craft.EditableTable.Row.extend({\n        $typeSelect: null,\n        $settingsBtn: null,\n\n        options: null,\n        settingsModal: null,\n        optionsTable: null,\n\n        init: function(table, tr) {\n            this.base(table, tr);\n\n            if (this.table.fieldSettings.columnsData[this.id]) {\n                this.options = this.table.fieldSettings.columnsData[this.id].options || null;\n            }\n\n            const $typeCell = this.$tr.find('td:nth-child(4)');\n            const $typeSelectContainer = $typeCell.find('.select');\n            this.$settingsBtn = $typeCell.find('.settings');\n\n            if (!this.$settingsBtn.length) {\n                this.$settingsBtn = $('<a/>', {\n                    'class': 'settings light invisible',\n                    role: 'button',\n                    'data-icon': 'settings'\n                });\n                $('<div/>', {'class': 'flex flex-nowrap'})\n                    .appendTo($typeCell)\n                    .append($typeSelectContainer)\n                    .append(this.$settingsBtn);\n            }\n\n            this.$typeSelect = $typeSelectContainer.find('select');\n            this.addListener(this.$typeSelect, 'change', 'handleTypeChange');\n            this.addListener(this.$settingsBtn, 'click', 'showSettingsModal');\n\n            this.addListener(this.$tr.closest('form'), 'submit', 'handleFormSubmit');\n        },\n\n        handleTypeChange: function() {\n            if (this.$typeSelect.val() === 'select') {\n                this.$settingsBtn.removeClass('invisible');\n            } else {\n                this.$settingsBtn.addClass('invisible');\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        showSettingsModal: function(ev) {\n            if (!this.settingsModal) {\n                const id = 'dropdownsettingsmodal' + Math.floor(Math.random() * 1000000);\n                const $modal = $('<div/>', {'class': 'modal dropdownsettingsmodal'}).appendTo(Garnish.$bod);\n                const $body = $('<div/>', {'class': 'body'})\n                    .appendTo($modal)\n                    .html(this.table.fieldSettings.dropdownSettingsHtml.replace(/__ID__/g, id));\n\n                this.optionsTable = new Craft.EditableTable(id, '__NAME__', this.table.fieldSettings.dropdownSettingsCols, {\n                    onAddRow: this.handleOptionsRowChange.bind(this),\n                    onDeleteRow: this.handleOptionsRowChange.bind(this)\n                });\n\n                if (this.options && this.options.length) {\n                    for (let i = 0; i < this.options.length; i++) {\n                        const row = this.optionsTable.addRow(false);\n                        row.$tr.find('.option-label textarea').val(this.options[i].label);\n                        row.$tr.find('.option-value textarea').val(this.options[i].value);\n                        row.$tr.find('.option-default input[type=\"checkbox\"]').prop('checked', !!this.options[i].default);\n                    }\n                } else {\n                    this.optionsTable.addRow(false);\n                }\n\n                const $closeButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Done')\n                }).appendTo($body);\n\n                this.settingsModal = new Garnish.Modal($modal, {\n                    onHide: this.handleSettingsModalHide.bind(this)\n                });\n\n                this.addListener($closeButton, 'click', function() {\n                    this.settingsModal.hide();\n                });\n            } else {\n                this.settingsModal.show();\n            }\n\n            setTimeout(() => {\n                this.optionsTable.$tbody.find('textarea').first().trigger('focus')\n            }, 100);\n        },\n\n        handleOptionsRowChange: function() {\n            if (this.settingsModal) {\n                this.settingsModal.updateSizeAndPosition();\n            }\n        },\n\n        handleSettingsModalHide: function() {\n            this.options = [];\n            const $rows = this.optionsTable.$table.find('tbody tr');\n            for (let i = 0; i < $rows.length; i++) {\n                let $row = $rows.eq(i);\n                this.options.push({\n                    label: $row.find('.option-label textarea').val(),\n                    value: $row.find('.option-value textarea').val(),\n                    default: $row.find('.option-default input[type=checkbox]').prop('checked')\n                })\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        handleFormSubmit: function(ev) {\n            if (this.$typeSelect.val() === 'select') {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: this.table.fieldSettings.columnsTableName + '[' + this.id + '][options]',\n                    value: JSON.stringify(this.options)\n                }).appendTo(ev.currentTarget);\n            }\n        }\n    });\n})(jQuery);\n"],"names":["$","Craft","TableFieldSettings","Garnish","Base","extend","columnsTableName","defaultsTableName","columnsData","columnsTableId","defaultsTableId","columnsTableInputPath","defaultsTableInputPath","defaults","columnSettings","dropdownSettingsHtml","dropdownSettingsCols","columnsTable","defaultsTable","init","this","formatInputId","filterArray","split","initColumnsTable","initDefaultsTable","ColumnTable","rowIdPrefix","defaultValues","type","allowAdd","allowReorder","allowDelete","onAddRow","onAddColumn","bind","onDeleteRow","reconstructDefaultsTable","EditableTable","$tr","initColumnSettingInputs","$container","$textareas","find","addListener","expandPostArray","getPostData","$tbody","Object","keys","length","$rows","children","r","deleteRow","createRowObj","$addRowBtn","css","i","key","colId","hasOwnProperty","rowObj","data","options","theadHtml","heading","$table","id","append","appendTo","rowId","createRow","replaceWith","destroy","fieldSettings","baseName","columns","settings","base","initialize","sorter","onSortChange","Row","$typeSelect","$settingsBtn","settingsModal","optionsTable","table","tr","$typeCell","$typeSelectContainer","role","closest","handleTypeChange","val","removeClass","addClass","showSettingsModal","ev","show","Math","floor","random","$modal","$bod","$body","html","replace","handleOptionsRowChange","row","addRow","label","value","prop","$closeButton","class","text","t","Modal","onHide","handleSettingsModalHide","hide","setTimeout","first","trigger","updateSizeAndPosition","$row","eq","push","default","handleFormSubmit","name","JSON","stringify","currentTarget","jQuery"],"sourceRoot":""}