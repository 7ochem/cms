"use strict";class LoginForm{constructor(){this.disabled=!1,Craft.AuthenticationChainHandler=new AuthenticationChainHandler(this),this.$loginForm.on("submit",e=>{this.clearErrors(),this.clearMessages();let r={rememberMe:this.$rememberMe.find("input").prop("checked")};Craft.AuthenticationChainHandler.isExistingChain()||(r.loginName=this.$username.val()),Craft.AuthenticationChainHandler.handleFormSubmit(e,r),e.preventDefault()}),this.$pendingSpinner.length&&this.$loginForm.trigger("submit")}get $loginForm(){return $("#login-form")}get $errors(){return $("#login-errors")}get $messages(){return $("#login-messages")}get $spinner(){return $("#spinner")}get $pendingSpinner(){return $("#spinner-pending")}get $submit(){return $("#submit")}get $rememberMe(){return $("#remember-me-container")}get $username(){return $("#username-field input")}get $cancelRecover(){return $("#cancel-recover")}get $recoverAccount(){return $("#recover-account")}get canRememberUser(){return this.$loginForm.data("can-remember")}showError(e){this.clearErrors(),$('<p style="display: none;">'+e+"</p>").appendTo(this.$errors).velocity("fadeIn")}showMessage(e){this.clearMessages(),$('<p style="display: none;">'+e+"</p>").appendTo(this.$messages).velocity("fadeIn")}clearErrors(){this.$errors.empty()}clearMessages(){this.$messages.empty()}enableForm(){this.$submit.addClass("active"),this.$spinner.addClass("hidden"),this.$loginForm.fadeTo(100,1),this.disabled=!1}disableForm(){this.$submit.removeClass("active"),this.$spinner.removeClass("hidden"),this.$loginForm.fadeTo(100,.2),this.disabled=!0}isDisabled(){return this.disabled}showRememberMe(){this.canRememberUser&&(this.$loginForm.addClass("remember-me"),this.$rememberMe.removeClass("hidden"))}hideRememberMe(){this.$loginForm.removeClass("remember-me"),this.$rememberMe.addClass("hidden")}showSubmitButton(){this.$submit.removeClass("hidden")}hideSubmitButton(){this.$submit.addClass("hidden")}}new LoginForm;
//# sourceMappingURL=LoginForm.min.js.map
