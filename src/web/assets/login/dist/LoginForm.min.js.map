{"version":3,"sources":["login/src/LoginForm.js"],"names":["LoginForm","constructor","disabled","Craft","AuthenticationChainHandler","this","event","$loginForm","clearErrors","clearMessages","additionalData","$rememberMe","find","prop","isExistingChain","loginName","$username","val","preventDefault","trigger","$pendingSpinner","length","$errors","$messages","$","$spinner","$submit","$cancelRecover","$recoverAccount","canRememberUser","data","showError","error","appendTo","showMessage","message","empty","enableForm","addClass","fadeTo","velocity","removeClass","isDisabled","showRememberMe","hideRememberMe","showSubmitButton"],"mappings":"AAAA,aACA,MAAMA,UAANC,cACIA,KAAWC,UAAG,EAGVC,MAAMC,2BAA6B,IAAIA,2BAA2BC,MAAlEF,KAAMC,WAAAA,GAAAA,SAANE,IACKC,KAAAA,cACIC,KAAAA,gBACAC,IAAAA,EAAL,CACIC,WAAiBL,KAAAM,YAAAC,KAAA,SAAAC,KAAA,YAArBV,MAAAC,2BAAAU,oBAIIJ,EAAeK,UAAYV,KAAKW,UAAUC,OAA1CP,MAAAA,2BAAgCM,iBAAhCV,EAAAI,GACHJ,EAAAY,mBACKd,KAAAA,gBAAAA,QACAc,KAAAA,WAANC,QAAA,UAEJZ,iBAASa,OAAgBC,EAAAA,eACrBC,cAAKf,OAAWY,EAAhB,iBACHI,gBAAA,OAAAC,EAAA,mBACJC,eAAA,OAAAD,EAAA,YAKDJ,sBAAwB,OAAOI,EAAE,oBAJjCE,cAAiB,OAAAF,EAAA,WAAEb,kBAAS,OAATa,EAAA,0BAA0BR,gBAAA,OAAAQ,EAAA,yBAQ7CG,qBAAuB,OAAOH,EAAE,mBAPhCI,sBAAc,OAAAJ,EAAA,oBAAEK,sBAAQ,OAARxB,KAAAE,WAAAuB,KAAA,gBAehBC,UAAUC,GAbNP,KAAAA,cAAaD,EAAA,6BAAAQ,EAAA,QAAuBC,SAAA5B,KAAAiB,SACpCF,SAAJ,UAwBAc,YAAYC,GAtBRxB,KAAAA,gBAAgBa,EAAA,6BAAAW,EAAA,QAAqCF,SAAA5B,KAAAkB,WACrDP,SAAY,UAiChBR,cA/BIoB,KAAAA,QAAJQ,QAEA3B,gBACJJ,KAAAkB,UAAAa,QAEAC,aACAhC,KAAAqB,QAAAY,SAAA,UAsCQjC,KAAKoB,SAASa,SAAS,UACvBjC,KAAKE,WAAWgC,OAAO,IAAK,GAtChCR,KAAUC,UAAO,EAEbR,cAGKgB,KAHLd,QAGce,YAHd,UAIHpC,KAAAoB,SAAAgB,YAAA,UACDpC,KAAAE,WAAAgC,OAAA,IAAA,IACJlC,KAAAH,UAAA,EAEAwC,aACA,OAAArC,KAAAH,SAuCIyC,iBAtCAT,KAAYC,kBACH1B,KAAAA,WAAL6B,SAAA,eACEjC,KAAAM,YAAA8B,YAA+BN,WAKrCS,iBACJvC,KAAAE,WAAAkC,YAAA,eACApC,KAAAM,YAAA2B,SAAA,UAEAO,mBAsCQxC,KAAKqB,QAAQe,YAAY,UArC7BjC,mBACIH,KAAKiB,QAAQc,SAAb,WAGR,IAAApC","file":"LoginForm.min.js","sourcesContent":["\"use strict\";\nclass LoginForm {\n    constructor() {\n        this.disabled = false;\n        // todo allow constructor to pass in other login handlers\n        Craft.AuthenticationChainHandler = new AuthenticationChainHandler(this);\n        this.$loginForm.on('submit', (event) => {\n            this.clearErrors();\n            this.clearMessages();\n            let additionalData = {\n                rememberMe: this.$rememberMe.find('input').prop('checked'),\n            };\n            if (!Craft.AuthenticationChainHandler.isExistingChain()) {\n                additionalData.loginName = this.$username.val();\n            }\n            Craft.AuthenticationChainHandler.handleFormSubmit(event, additionalData);\n            event.preventDefault();\n        });\n        if (this.$pendingSpinner.length) {\n            this.$loginForm.trigger('submit');\n        }\n    }\n    get $loginForm() { return $('#login-form'); }\n    get $errors() { return $('#login-errors'); }\n    get $messages() { return $('#login-messages'); }\n    get $spinner() { return $('#spinner'); }\n    get $pendingSpinner() { return $('#spinner-pending'); }\n    get $submit() { return $('#submit'); }\n    get $rememberMe() { return $('#remember-me-container'); }\n    get $username() { return $('#username-field input'); }\n    get $cancelRecover() { return $('#cancel-recover'); }\n    get $recoverAccount() { return $('#recover-account'); }\n    get canRememberUser() { return this.$loginForm.data('can-remember'); }\n    /**\n     * Show an error.\n     *\n     * @param error\n     */\n    showError(error) {\n        this.clearErrors();\n        $('<p style=\"display: none;\">' + error + '</p>')\n            .appendTo(this.$errors)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Show a message.\n     *\n     * @param message\n     */\n    showMessage(message) {\n        this.clearMessages();\n        $('<p style=\"display: none;\">' + message + '</p>')\n            .appendTo(this.$messages)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Clear all the errors.\n     *\n     * @protected\n     */\n    clearErrors() {\n        this.$errors.empty();\n    }\n    /**\n     * Clear all the messages.\n     *\n     * @protected\n     */\n    clearMessages() {\n        this.$messages.empty();\n    }\n    enableForm() {\n        this.$submit.addClass('active');\n        this.$spinner.addClass('hidden');\n        this.$loginForm.fadeTo(100, 1);\n        this.disabled = false;\n    }\n    disableForm() {\n        this.$submit.removeClass('active');\n        this.$spinner.removeClass('hidden');\n        this.$loginForm.fadeTo(100, 0.2);\n        this.disabled = true;\n    }\n    isDisabled() {\n        return this.disabled;\n    }\n    showRememberMe() {\n        if (this.canRememberUser) {\n            this.$loginForm.addClass('remember-me');\n            this.$rememberMe.removeClass('hidden');\n        }\n    }\n    hideRememberMe() {\n        this.$loginForm.removeClass('remember-me');\n        this.$rememberMe.addClass('hidden');\n    }\n    showSubmitButton() {\n        this.$submit.removeClass('hidden');\n    }\n    hideSubmitButton() {\n        this.$submit.addClass('hidden');\n    }\n}\nnew LoginForm();\n"]}