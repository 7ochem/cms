{"version":3,"sources":["login/src/LoginForm.js"],"names":["LoginForm","constructor","authenticationTarget","this","$loginForm","$","$authContainer","$errors","$messages","$spinner","$submit","$rememberMeCheckbox","$forgotPassword","$rememberPassword","invokeStepHandler","bind","performAuthentication","request","scenario","Craft","cpLoginChain","response","textStatus","postActionRequest","clearMessages","clearErrors","success","window","location","href","returnUrl","showError","error","shake","showMessage","message","html","stepHandler","undefined","footHtml","appendTo","velocity","registerStepHandler","handler","ev","data","disableForm","empty","enableForm","addClass","removeClass"],"mappings":"AAAA,aACA,MAAMA,UAANC,cACIA,KAAWC,qBAAG,wCACVC,KAAKD,WAAAA,EAAAA,eACLC,KAAKC,eAAeC,EAAA,6BACpBF,KAAKG,QAALD,EAAA,iBACAF,KAAKI,UAAYF,EAAA,mBACjBF,KAAKK,SAAcH,EAAA,YACnBF,KAAKM,QAAaJ,EAAA,WAClBF,KAAKO,oBAALL,EAAA,eACAF,KAAKQ,gBAAsBN,EAAE,oBAC7BF,KAAKS,kBAAoBP,EAAA,sBACzBF,KAAKU,WAAAA,GAAL,SAA2BV,KAAAW,kBAA3BC,KAAAZ,OAYJa,sBAAsBC,GAClBA,EAAQC,SAAWC,MAAMC,aAD7BJ,MAAAA,kBAAqBb,KAAUD,qBAAAe,EAAA,CAAAI,EAAAC,KACnBJ,KAAAA,gBACFK,KAAAA,cACF,WAAKC,IACAC,EAALC,QAGQC,OAAOC,SAASC,KAAOR,EAASS,WAAzBF,EAAgBP,QAEtBlB,KAAA4B,UAAAV,EAAAW,OACYA,QAAOC,MAAA9B,KAAAC,aAER6B,EAAW7B,SACtBD,KAAA+B,YAAAb,EAAAc,SACYA,EAASC,OACbF,KAAYb,eAASc,KAA1Bd,EAAAe,MACHjC,KAAAkC,iBAAAC,GACYF,EAAMG,UACVjC,MAAAA,eAA4Be,EAAjCkB,YAGJpC,KAAIkB,eAOnBU,UAAAC,GACD7B,KAAAsB,cACJpB,EAAA,6BAAA2B,EAAA,QACAQ,SAAArC,KAAAI,SAEAkC,SAAA,UAOKP,YAAAC,GACDhC,KAAAqB,gBACJnB,EAAA,6BAAA8B,EAAA,QACAK,SAAArC,KAAAK,WAEAiC,SAAA,UASAC,oBAAAC,GACAxC,KAAAkC,YAAAM,EAEA7B,kBAAA8B,GACA,GAAA,mBAAAzC,KAAAkC,YAAA,CACA,MAAAQ,EAAA1C,KAAAkC,YAAAO,GAO+B,iBAARC,GACP1C,KAAK2C,cAPjBJ,KAAmB1B,sBAAU6B,IAWjB1C,KAAK4B,UAAUc,GANnB,OAAMA,EAOLpB,cACJtB,KAAAI,QAAAwC,QAMTvB,gBACArB,KAAAK,UAAAuC,QAYIC,aAXAvB,KAAWf,QAAGuC,SAAA,UACV9C,KAAKI,SAAL0C,SAAA,UAEJH,cACJ3C,KAAAO,QAAAwC,YAAA,UACA/C,KAAAM,SAAAyC,YAAA,WAeA/B,MAAMnB,UAAY,IAAIA","file":"LoginForm.min.js","sourcesContent":["\"use strict\";\nclass LoginForm {\n    constructor() {\n        this.authenticationTarget = 'authentication/perform-authentication';\n        this.$loginForm = $('#login-form');\n        this.$authContainer = $('#authentication-container');\n        this.$errors = $('#login-errors');\n        this.$messages = $('#login-messages');\n        this.$spinner = $('#spinner');\n        this.$submit = $('#submit');\n        this.$rememberMeCheckbox = $('#rememberMe');\n        this.$forgotPassword = $('#forgot-password');\n        this.$rememberPassword = $('#remember-password');\n        this.$loginForm.on('submit', this.invokeStepHandler.bind(this));\n        // TODO this form must handle \"remember me\" functionality.\n        // this.$forgotPassword.on('click', 'onSwitchForm');\n        // this.$rememberPassword.on('click', 'onSwitchForm');\n    }\n    /**\n     * Perform the authentication against the endpoint.\n     *\n     * @param request\n     * @param cb\n     */\n    performAuthentication(request) {\n        request.scenario = Craft.cpLoginChain;\n        Craft.postActionRequest(this.authenticationTarget, request, (response, textStatus) => {\n            this.clearMessages();\n            this.clearErrors();\n            if (textStatus == 'success') {\n                if (response.success) {\n                    window.location.href = response.returnUrl;\n                }\n                else {\n                    if (response.error) {\n                        this.showError(response.error);\n                        Garnish.shake(this.$loginForm);\n                    }\n                    if (response.message) {\n                        this.showMessage(response.message);\n                    }\n                    if (response.html) {\n                        this.$authContainer.html(response.html);\n                        this.stepHandler = undefined;\n                    }\n                    if (response.footHtml) {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n            }\n            this.enableForm();\n        });\n    }\n    /**\n     * Show an error.\n     *\n     * @param error\n     */\n    showError(error) {\n        this.clearErrors();\n        $('<p style=\"display: none;\">' + error + '</p>')\n            .appendTo(this.$errors)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Show a message.\n     *\n     * @param message\n     */\n    showMessage(message) {\n        this.clearMessages();\n        $('<p style=\"display: none;\">' + message + '</p>')\n            .appendTo(this.$messages)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Register an authentication step handler function that performs validation and data preparation.\n     * It must return either a hash of data to be submitted for authentication or a string which is then interpreted as an error message.\n     * If an empty string is returned, no action is taken.\n     *\n     * @param handler\n     */\n    registerStepHandler(handler) {\n        this.stepHandler = handler;\n    }\n    invokeStepHandler(ev) {\n        if (typeof this.stepHandler == \"function\") {\n            const data = this.stepHandler(ev);\n            if (typeof data == \"object\") {\n                this.disableForm();\n                this.performAuthentication(data);\n            }\n            else {\n                this.showError(data);\n            }\n        }\n        return false;\n    }\n    /**\n     * Clear all the errors.\n     *\n     * @protected\n     */\n    clearErrors() {\n        this.$errors.empty();\n    }\n    /**\n     * Clear all the messages.\n     *\n     * @protected\n     */\n    clearMessages() {\n        this.$messages.empty();\n    }\n    enableForm() {\n        this.$submit.addClass('active');\n        this.$spinner.addClass('hidden');\n    }\n    disableForm() {\n        this.$submit.removeClass('active');\n        this.$spinner.removeClass('hidden');\n    }\n}\nCraft.LoginForm = new LoginForm();\n"]}