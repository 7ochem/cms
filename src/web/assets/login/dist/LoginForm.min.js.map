{"version":3,"sources":["login/src/LoginForm.js"],"names":["LoginForm","constructor","authenticationTarget","this","$loginForm","$","$authContainer","$errors","$messages","$spinner","$pendingSpinner","$submit","$rememberMeCheckbox","$forgotPassword","$rememberPassword","invokeStepHandler","bind","length","trigger","performAuthentication","request","scenario","Craft","cpLoginChain","prop","rememberMe","clearErrors","response","textStatus","success","window","location","href","returnUrl","postActionRequest","showError","error","shake","message","showMessage","html","stepHandler","undefined","appendFootHtml","footHtml","parent","remove","enableForm","appendTo","velocity","handler","ev","data","disableForm","empty","clearMessages","addClass","removeClass"],"mappings":"AAAA,aACA,MAAMA,UAANC,cACIA,KAAWC,qBAAG,wCACVC,KAAKD,WAAAA,EAAAA,eACLC,KAAKC,eAAeC,EAAA,6BACpBF,KAAKG,QAALD,EAAA,iBACAF,KAAKI,UAAYF,EAAA,mBACjBF,KAAKK,SAAcH,EAAA,YACnBF,KAAKM,gBAAaJ,EAAlB,oBACAF,KAAKO,QAAAA,EAAL,WACAP,KAAKQ,oBAALN,EAAA,eACAF,KAAKS,gBAAsBP,EAAE,oBAC7BF,KAAKU,kBAAoBR,EAAA,sBACzBF,KAAKW,WAAAA,GAAL,SAA2BX,KAAAY,kBAA3BC,KAAAb,OACKC,KAAAA,gBAAwBa,QAEzBd,KAAKC,WAAWc,QAAQ,UAUpCC,sBAAAC,GACAA,EAAAC,SAAAC,MAAAC,aAGYpB,KAAKS,oBAAoBY,KAAK,aAC9BJ,EAAQK,YAAa,GAFzBL,KAAQC,gBAKRlB,KAAKuB,cAJDJ,MAAKV,kBAALT,KAAAD,qBAA0CkB,EAAA,CAAAO,EAAAC,KACrB,WAAbH,IACXE,EAAAE,QAMWC,OAAOC,SAASC,KAAOL,EAASM,WAHtCC,EAAuBhC,QACPC,KAAAgC,UAAWR,EAAAS,OACZP,QAASQ,MAAAlC,KAAAC,aAGjBuB,EAAAW,SACYF,KAAbG,YAAoBZ,EAAAW,SAERD,EAAWjC,OACtBD,KAAAG,eAAAkC,KAAAb,EAAAa,MAMGrC,KAAKsC,iBAAcC,GAJdH,EAAYZ,UACpBL,MAAAqB,eAAAhB,EAAAiB,UAEQtC,EAAekC,eACfC,KAAL7B,oBAAAiC,SAAAC,SACH3C,KAAAU,gBAAAiC,SAQG3C,KAAKW,kBAAkBgC,YAInC3C,KAAK4C,eADJZ,UAAAC,GAULjC,KAAKuB,cATDrB,EAAA,6BAAA+B,EAAA,QA5BJY,SAAA7C,KAAAI,SA+BJ0C,SAAA,UAKAd,YAAUC,GACNjC,KAAKuB,gBACHrB,EAAA,6BAA+B+B,EAAhC,QAADY,SAAA7C,KAAAK,WAKJyC,SAAA,UAOI5C,oBAAE6C,GAGGD,KAHLR,YAAAS,EAKJnC,kBAAAoC,GACJ,GAAA,mBAAAhD,KAAAsC,YAAA,CACA,MAAAW,EAAAjD,KAAAsC,YAAAU,GACA,iBAAAC,GACAjD,KAAAkD,cACAlD,KAAAgB,sBAAAiC,IAagBjD,KAAKgC,UAAUiB,QAInBjD,KAAKgB,sBAAsB,IAX3B,OAAO,EAOHO,cACHvB,KAAAI,QAAA+C,QAOTC,gBACJpD,KAAAK,UAAA8C,QAEAP,aACA5C,KAAAQ,QAAA6C,SAAA,UAcQrD,KAAKM,SAAS+C,SAAS,UAb3B9B,cACIvB,KAAKI,QAAQ+C,YAAb,UACHnD,KAAAM,SAAAgD,YAAA,WAGLnC,MAAAtB,UAAA,IAAAA","file":"LoginForm.min.js","sourcesContent":["\"use strict\";\nclass LoginForm {\n    constructor() {\n        this.authenticationTarget = 'authentication/perform-authentication';\n        this.$loginForm = $('#login-form');\n        this.$authContainer = $('#authentication-container');\n        this.$errors = $('#login-errors');\n        this.$messages = $('#login-messages');\n        this.$spinner = $('#spinner');\n        this.$pendingSpinner = $('#spinner-pending');\n        this.$submit = $('#submit');\n        this.$rememberMeCheckbox = $('#rememberMe');\n        this.$forgotPassword = $('#forgot-password');\n        this.$rememberPassword = $('#remember-password');\n        this.$loginForm.on('submit', this.invokeStepHandler.bind(this));\n        if (this.$pendingSpinner.length) {\n            this.$loginForm.trigger('submit');\n        }\n        // TODO this form must handle \"remember me\" functionality.\n        // this.$forgotPassword.on('click', 'onSwitchForm');\n        // this.$rememberPassword.on('click', 'onSwitchForm');\n    }\n    /**\n     * Perform the authentication against the endpoint.\n     *\n     * @param request\n     * @param cb\n     */\n    performAuthentication(request) {\n        request.scenario = Craft.cpLoginChain;\n        if (this.$rememberMeCheckbox.prop('checked')) {\n            request.rememberMe = true;\n        }\n        this.clearMessages();\n        this.clearErrors();\n        Craft.postActionRequest(this.authenticationTarget, request, (response, textStatus) => {\n            if (textStatus == 'success') {\n                if (response.success) {\n                    window.location.href = response.returnUrl;\n                }\n                else {\n                    if (response.error) {\n                        this.showError(response.error);\n                        Garnish.shake(this.$loginForm);\n                    }\n                    if (response.message) {\n                        this.showMessage(response.message);\n                    }\n                    if (response.html) {\n                        this.$authContainer.html(response.html);\n                        this.stepHandler = undefined;\n                    }\n                    if (response.footHtml) {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                    // Just in case this was the first step, remove all the misc things.\n                    if (response.stepComplete) {\n                        this.$rememberMeCheckbox.parent().remove();\n                        this.$forgotPassword.remove();\n                        this.$rememberPassword.remove();\n                    }\n                }\n            }\n            this.enableForm();\n        });\n    }\n    /**\n     * Show an error.\n     *\n     * @param error\n     */\n    showError(error) {\n        this.clearErrors();\n        $('<p style=\"display: none;\">' + error + '</p>')\n            .appendTo(this.$errors)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Show a message.\n     *\n     * @param message\n     */\n    showMessage(message) {\n        this.clearMessages();\n        $('<p style=\"display: none;\">' + message + '</p>')\n            .appendTo(this.$messages)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Register an authentication step handler function that performs validation and data preparation.\n     * It must return either a hash of data to be submitted for authentication or a string which is then interpreted as an error message.\n     * If an empty string is returned, no action is taken.\n     *\n     * @param handler\n     */\n    registerStepHandler(handler) {\n        this.stepHandler = handler;\n    }\n    invokeStepHandler(ev) {\n        if (typeof this.stepHandler == \"function\") {\n            const data = this.stepHandler(ev);\n            if (typeof data == \"object\") {\n                this.disableForm();\n                this.performAuthentication(data);\n            }\n            else {\n                this.showError(data);\n            }\n        }\n        else {\n            this.performAuthentication({});\n        }\n        return false;\n    }\n    /**\n     * Clear all the errors.\n     *\n     * @protected\n     */\n    clearErrors() {\n        this.$errors.empty();\n    }\n    /**\n     * Clear all the messages.\n     *\n     * @protected\n     */\n    clearMessages() {\n        this.$messages.empty();\n    }\n    enableForm() {\n        this.$submit.addClass('active');\n        this.$spinner.addClass('hidden');\n    }\n    disableForm() {\n        this.$submit.removeClass('active');\n        this.$spinner.removeClass('hidden');\n    }\n}\nCraft.LoginForm = new LoginForm();\n"]}