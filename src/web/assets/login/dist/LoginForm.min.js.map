{"version":3,"sources":["login/src/LoginForm.js"],"names":["LoginForm","constructor","disabled","this","$loginForm","on","switchForm","bind","Craft","AuthenticationChainHandler","event","clearErrors","clearMessages","additionalData","$rememberMeCheckbox","prop","isExistingChain","username","$username","val","preventDefault","trigger","$pendingSpinner","length","$errors","$messages","$","$spinner","$submit","$cancelRecover","$recoverAccount","showError","error","appendTo","velocity","showMessage","message","empty","enableForm","addClass","fadeTo","disableForm","removeClass","isDisabled","toggleClass"],"mappings":"AAAA,aACA,MAAMA,UAANC,cACIA,KAAWC,UAAG,EAGVC,KAAKC,WAAWC,GAAG,QAAS,mBAAoBF,KAAKG,WAAWC,KAAKJ,OAArEA,KAAKC,WAAcC,GAAA,QAAS,kBAAoBF,KAAKG,WAAWC,KAAKJ,OACrEK,MAAKJ,2BAAuB,IAAAK,2BAAwCN,MACpEK,KAAMC,WAAAA,GAAAA,SAANC,IACKN,KAAAA,cACIO,KAAAA,gBACAC,IAAAA,EAAL,CACIC,WAAiBV,KAAAW,oBAAAC,KAAA,YAArBP,MAAAC,2BAAAO,oBAIIH,EAAeI,SAAWd,KAAKe,UAAUC,OAAzCN,MAAAA,2BAA+BK,iBAA/BR,EAAAG,GACHH,EAAAU,mBACKX,KAAAA,gBAAAA,QACAW,KAAAA,WAANC,QAAA,UAEJjB,iBAASkB,OAAgBC,EAAAA,eACrBC,cAAKpB,OAAWiB,EAAhB,iBACHI,gBAAA,OAAAC,EAAA,mBACJC,eAAA,OAAAD,EAAA,YAKDJ,sBAAwB,OAAOI,EAAE,oBAJjCE,cAAiB,OAAAF,EAAA,WAAEZ,0BAAA,OAAAY,EAAA,eAA0BR,gBAAA,OAAAQ,EAAA,+BAQ7CG,qBAAuB,OAAOH,EAAE,mBAPhCI,sBAAc,OAAAJ,EAAA,oBACkCK,UAAAC,GAc5C7B,KAAKQ,cAbLgB,EAAAA,6BAAWK,EAAA,QAAWC,SAAA9B,KAATqB,SAiBRU,SAAS,UAfoBC,YAAAC,GAuBlCjC,KAAKS,gBAtBLE,EAAAA,6BAAsBsB,EAAA,QAAWH,SAAA9B,KAATsB,WA0BnBS,SAAS,UAxBmCvB,cAgCjDR,KAAKqB,QAAQa,QA3BrBzB,gBACAT,KAAAsB,UAAAY,QAoCIC,aAnCAP,KAAUC,QAAOO,SAAA,UACbpC,KAAKQ,SAAL4B,SAAA,UACEpC,KAAAC,WAAAoC,OAAA,IAAA,GAGGN,KAHLhC,UAAA,EAKJuC,cACJtC,KAAAyB,QAAAc,YAAA,UACAvC,KAAAwB,SAAAe,YAAA,UACAvC,KAAAC,WAAAoC,OAAA,IAAA,IACArC,KAAAD,UAAA,EAoCIyC,aAnCAR,OAAYC,KAAAA,SAShB9B,aACAH,KAAA0B,eAAAe,YAAA,UACAzC,KAAA2B,gBAAAc,YAAA,WACIjC,IAAAA","file":"LoginForm.min.js","sourcesContent":["\"use strict\";\nclass LoginForm {\n    constructor() {\n        this.disabled = false;\n        // todo allow constructor to pass in other login handlers\n        this.$loginForm.on('click', '#recover-account', this.switchForm.bind(this));\n        this.$loginForm.on('click', '#cancel-recover', this.switchForm.bind(this));\n        Craft.AuthenticationChainHandler = new AuthenticationChainHandler(this);\n        this.$loginForm.on('submit', (event) => {\n            this.clearErrors();\n            this.clearMessages();\n            let additionalData = {\n                rememberMe: this.$rememberMeCheckbox.prop('checked'),\n            };\n            if (!Craft.AuthenticationChainHandler.isExistingChain()) {\n                additionalData.username = this.$username.val();\n            }\n            Craft.AuthenticationChainHandler.handleFormSubmit(event, additionalData);\n            event.preventDefault();\n        });\n        if (this.$pendingSpinner.length) {\n            this.$loginForm.trigger('submit');\n        }\n    }\n    get $loginForm() { return $('#login-form'); }\n    get $errors() { return $('#login-errors'); }\n    get $messages() { return $('#login-messages'); }\n    get $spinner() { return $('#spinner'); }\n    get $pendingSpinner() { return $('#spinner-pending'); }\n    get $submit() { return $('#submit'); }\n    get $rememberMeCheckbox() { return $('#rememberMe'); }\n    get $username() { return $('#start-authentication input'); }\n    get $cancelRecover() { return $('#cancel-recover'); }\n    get $recoverAccount() { return $('#recover-account'); }\n    /**\n     * Show an error.\n     *\n     * @param error\n     */\n    showError(error) {\n        this.clearErrors();\n        $('<p style=\"display: none;\">' + error + '</p>')\n            .appendTo(this.$errors)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Show a message.\n     *\n     * @param message\n     */\n    showMessage(message) {\n        this.clearMessages();\n        $('<p style=\"display: none;\">' + message + '</p>')\n            .appendTo(this.$messages)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Clear all the errors.\n     *\n     * @protected\n     */\n    clearErrors() {\n        this.$errors.empty();\n    }\n    /**\n     * Clear all the messages.\n     *\n     * @protected\n     */\n    clearMessages() {\n        this.$messages.empty();\n    }\n    enableForm() {\n        this.$submit.addClass('active');\n        this.$spinner.addClass('hidden');\n        this.$loginForm.fadeTo(100, 1);\n        this.disabled = false;\n    }\n    disableForm() {\n        this.$submit.removeClass('active');\n        this.$spinner.removeClass('hidden');\n        this.$loginForm.fadeTo(100, 0.2);\n        this.disabled = true;\n    }\n    isDisabled() {\n        return this.disabled;\n    }\n    /**\n     * Switch the displayed form between authentication and recovery.\n     *\n     * @protected\n     */\n    switchForm() {\n        this.$cancelRecover.toggleClass('hidden');\n        this.$recoverAccount.toggleClass('hidden');\n    }\n}\nnew LoginForm();\n"]}