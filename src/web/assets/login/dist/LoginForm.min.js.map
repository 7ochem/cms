{"version":3,"sources":["login/src/LoginForm.js"],"names":["LoginForm","constructor","$chainContainers","switchEndpoint","this","$","$loginForm","$errors","$messages","$spinner","$pendingSpinner","$submit","$rememberMeCheckbox","$cancelRecover","$recoverAccount","$alternatives","disabled","stepHandlers","endpoints","container","id","data","ev","invokeStepHandler","length","trigger","on","switchForm","bind","switchStep","target","attr","registerStepHandler","stepType","handler","performStep","request","isDisabled","disableForm","prop","rememberMe","clearMessages","clearErrors","Craft","getActiveContainer","processResponse","postActionRequest","switch","response","textStatus","_a","success","returnUrl","href","error","showError","Garnish","shake","message","showMessage","html","empty","alternatives","Object","keys","hideAlternatives","footHtml","jsFiles","match","Array","from","document","scripts","map","node","getAttribute","filter","val","jsFile","existingSources","includes","setAttribute","body","appendChild","appendFootHtml","stepComplete","parent","remove","enableForm","appendTo","velocity","showAlternatives","removeClass","$ul","find","description","entries","append","addClass","[object Object]","toggleClass","containerId","fadeTo","not"],"mappings":"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","file":"LoginForm.min.js","sourcesContent":["\"use strict\";\nclass LoginForm {\n    constructor($chainContainers) {\n        this.switchEndpoint = 'authentication/switch-authentication-step';\n        this.$loginForm = $('#login-form');\n        this.$errors = $('#login-errors');\n        this.$messages = $('#login-messages');\n        this.$spinner = $('#spinner');\n        this.$pendingSpinner = $('#spinner-pending');\n        this.$submit = $('#submit');\n        this.$rememberMeCheckbox = $('#rememberMe');\n        this.$cancelRecover = $('#cancel-recover');\n        this.$recoverAccount = $('#recover-account');\n        this.$alternatives = $('#alternatives');\n        this.disabled = false;\n        this.stepHandlers = {};\n        this.endpoints = {};\n        for (const container of $chainContainers) {\n            this.endpoints[container.id] = $(container).data('endpoint');\n        }\n        this.$loginForm.on('submit', (ev) => {\n            this.invokeStepHandler(ev);\n            return false;\n        });\n        if (this.$pendingSpinner.length) {\n            this.$loginForm.trigger('submit');\n        }\n        this.$recoverAccount.on('click', this.switchForm.bind(this));\n        this.$cancelRecover.on('click', this.switchForm.bind(this));\n        this.$alternatives.on('click', 'li', (ev) => {\n            this.switchStep($(ev.target).attr('rel'));\n        });\n    }\n    /**\n     * Register a step handler for a specific type\n     *\n     * @param stepType\n     * @param handler\n     */\n    registerStepHandler(stepType, handler) {\n        this.stepHandlers[stepType] = handler;\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param request\n     * @param cb\n     */\n    performStep(request) {\n        if (this.isDisabled()) {\n            return;\n        }\n        this.disableForm();\n        if (this.$rememberMeCheckbox.prop('checked')) {\n            request.rememberMe = true;\n        }\n        this.clearMessages();\n        this.clearErrors();\n        Craft.postActionRequest(this.getActiveContainer().data('endpoint'), request, this.processResponse.bind(this));\n    }\n    /**\n     * Switch the current authentication step to an alternative.\n     *\n     * @param stepType\n     */\n    switchStep(stepType) {\n        if (this.isDisabled()) {\n            return;\n        }\n        this.disableForm();\n        Craft.postActionRequest(this.getActiveContainer().data('endpoint'), {\n            stepType: stepType,\n            switch: true\n        }, this.processResponse.bind(this));\n    }\n    /**\n     * Process authentication response.\n     * @param response\n     * @param textStatus\n     * @protected\n     */\n    processResponse(response, textStatus) {\n        var _a;\n        if (textStatus == 'success') {\n            if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                window.location.href = response.returnUrl;\n                // Keep the form disabled\n                return;\n            }\n            else {\n                if (response.error) {\n                    this.showError(response.error);\n                    Garnish.shake(this.$loginForm);\n                }\n                if (response.message) {\n                    this.showMessage(response.message);\n                }\n                if (response.html) {\n                    this.getActiveContainer().empty();\n                    this.getActiveContainer().html(response.html);\n                }\n                if (response.alternatives && Object.keys(response.alternatives).length > 0) {\n                    this.showAlternatives(response.alternatives);\n                }\n                else {\n                    this.hideAlternatives();\n                }\n                if (response.stepType) {\n                    this.getActiveContainer().attr('rel', response.stepType);\n                }\n                if (response.footHtml) {\n                    const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                    const existingSources = Array.from(document.scripts).map(node => node.getAttribute('src')).filter(val => val && val.length > 0);\n                    // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                    // So roll our own JS file append-thing.\n                    if (jsFiles) {\n                        for (const jsFile of jsFiles) {\n                            if (!existingSources.includes(jsFile)) {\n                                let node = document.createElement('script');\n                                node.setAttribute('src', jsFile);\n                                document.body.appendChild(node);\n                            }\n                        }\n                        // If that fails, use Craft's thing.\n                    }\n                    else {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n                // Just in case this was the first step, remove all the misc things.\n                if (response.stepComplete) {\n                    this.$rememberMeCheckbox.parent().remove();\n                    this.$cancelRecover.remove();\n                    this.$recoverAccount.remove();\n                }\n            }\n        }\n        this.enableForm();\n    }\n    /**\n     * Show an error.\n     *\n     * @param error\n     */\n    showError(error) {\n        this.clearErrors();\n        $('<p style=\"display: none;\">' + error + '</p>')\n            .appendTo(this.$errors)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Show a message.\n     *\n     * @param message\n     */\n    showMessage(message) {\n        this.clearMessages();\n        $('<p style=\"display: none;\">' + message + '</p>')\n            .appendTo(this.$messages)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    showAlternatives(alternatives) {\n        this.$alternatives.removeClass('hidden');\n        const $ul = this.$alternatives.find('ul').empty();\n        for (const [stepType, description] of Object.entries(alternatives)) {\n            $ul.append($(`<li rel=\"${stepType}\">${description}</li>`));\n        }\n    }\n    hideAlternatives() {\n        this.$alternatives.addClass('hidden');\n        this.$alternatives.find('ul').empty();\n    }\n    /**\n     * Invoke the current step handler bound to the authentication container\n     * @param ev\n     */\n    async invokeStepHandler(ev) {\n        const stepType = this.getActiveContainer().attr('rel');\n        const handler = this.stepHandlers[stepType].bind(this);\n        try {\n            this.performStep(await handler());\n        }\n        catch (error) {\n            this.showError(error);\n        }\n    }\n    /**\n     * Clear all the errors.\n     *\n     * @protected\n     */\n    clearErrors() {\n        this.$errors.empty();\n    }\n    /**\n     * Switch the displayed form between authentication and recovery.\n     *\n     * @protected\n     */\n    switchForm() {\n        this.$cancelRecover.toggleClass('hidden');\n        this.$recoverAccount.toggleClass('hidden');\n        for (const containerId of Object.keys(this.endpoints)) {\n            $('#' + containerId).toggleClass('hidden');\n        }\n    }\n    /**\n     * Clear all the messages.\n     *\n     * @protected\n     */\n    clearMessages() {\n        this.$messages.empty();\n    }\n    enableForm() {\n        this.$submit.addClass('active');\n        this.$spinner.addClass('hidden');\n        this.$loginForm.fadeTo(100, 1);\n        this.disabled = false;\n    }\n    disableForm() {\n        this.$submit.removeClass('active');\n        this.$spinner.removeClass('hidden');\n        this.$loginForm.fadeTo(100, 0.2);\n        this.disabled = true;\n    }\n    isDisabled() {\n        return this.disabled;\n    }\n    getActiveContainer() {\n        return $('.authentication-chain').not('.hidden');\n    }\n}\nCraft.LoginForm = new LoginForm($('.authentication-chain'));\n"]}