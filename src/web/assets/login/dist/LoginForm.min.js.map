{"version":3,"sources":["login/src/LoginForm.js"],"names":["LoginForm","constructor","$chainContainers","switchEndpoint","this","$","$loginForm","$errors","$messages","$spinner","$pendingSpinner","$submit","$rememberMeCheckbox","$cancelRecover","$recoverAccount","$alternatives","endpoints","container","id","data","bind","length","trigger","on","switchForm","ev","switchStep","target","attr","performStep","request","prop","rememberMe","clearMessages","clearErrors","Craft","postActionRequest","getActiveContainer","processResponse","response","textStatus","_a","stepType","success","returnUrl","window","location","href","showError","error","Garnish","shake","message","showMessage","html","alternatives","showAlternatives","hideAlternatives","jsFiles","footHtml","match","jsFile","node","document","createElement","setAttribute","body","appendChild","stepComplete","parent","remove","enableForm","appendTo","velocity","removeClass","find","empty","description","Object","entries","$ul","append","addClass","invokeStepHandler","handler","disableForm","toggleClass","containerId","keys","not"],"mappings":"AAAA,aACA,MAAMA,UAANC,YAAgBC,GACZD,KAAWE,eAAA,4CACPC,KAAKD,WAAiBE,EAAA,eACtBD,KAAKE,QAAcD,EAAC,iBACpBD,KAAKG,UAAYF,EAAA,mBACjBD,KAAKI,SAAcH,EAAA,YACnBD,KAAKK,gBAAaJ,EAAlB,oBACAD,KAAKM,QAAAA,EAAL,WACAN,KAAKO,oBAALN,EAAA,eACAD,KAAKQ,eAALP,EAA4B,mBAC5BD,KAAKS,gBAAmBR,EAAA,oBACxBD,KAAKU,cAAoBT,EAAA,iBACzBD,KAAKW,UAAgBV,GACrB,IAAKW,MAALC,KAAAf,EAEIE,KAAKY,UAAUC,EAAUC,IAAMb,EAAEY,GAAWE,KAAK,YAAjDf,KAAKY,WAAUC,GAAAA,SAAgBZ,KAAEY,kBAAgBG,KAAlBhB,OAClCA,KAAAM,gBAAAW,QAGGjB,KAAKE,WAAWgB,QAAQ,UAE5BlB,KAAKU,gBAAgBS,GAAG,QAASnB,KAAKoB,WAAWJ,KAAKhB,OAHlDA,KAAKM,eAALa,GAAqBF,QAAQjB,KAAAoB,WAAAJ,KAAAhB,OAC7BA,KAAKE,cAAWgB,GAAQ,QAAxB,KAAAG,IACHrB,KAAAsB,WAAArB,EAAAoB,EAAAE,QAAAC,KAAA,UAQTC,YAAAC,GACA1B,KAAAQ,oBAAAmB,KAAA,aACAD,EAAAE,YAAA,GAEA5B,KAAA6B,gBAMQ7B,KAAK8B,cACLC,MAAMC,kBAAkBhC,KAAKiC,qBAAqBlB,KAAK,YAAaW,EAAS1B,KAAKkC,gBAAgBlB,KAAKhB,OADvGsB,WAAKQ,GACLC,MAAMC,kBAAkBhC,KAAKiC,qBAALlB,KAA+B,YAAaW,CAAAA,SAAcQ,EAAAA,QAAL,GAA7ElC,KAAAkC,gBAAAlB,KAAAhB,OAgBJkC,gBAAgBC,EAAUC,GAT1Bd,IAAUe,EACNN,GAAMC,WAAAA,EAAgEM,GAAUA,EAAZC,UAAA,QAAAF,EAAAF,EAAAK,iBAAA,IAAAH,OAAA,EAAAA,EAAApB,QAA8BwB,OAAAC,SAAAC,KAAAR,EAAAK,cACrG,CAeoBI,GAdrBT,EAAAU,QACJ7C,KAAA4C,UAAAT,EAAAU,OACAC,QAAAC,MAAA/C,KAAAE,aAEAiC,EAAAa,SACAhD,KAAAiD,YAAAd,EAAAa,SAeoBb,EAASe,MAdTf,KAAAA,qBAAsBe,KAAAf,EAAAe,MAiBtBf,EAASgB,aAfPnD,KAAIoD,iBAAWjB,EAAAgB,cAIpBnD,KAAAqD,mBAEQT,EAAUT,SAAf,CACQY,MAAMO,EAAKpD,EAAnBqD,SAAAC,MAAA,kBAEQ,GAACR,EACJC,IAAYd,MAAQsB,KAAzBH,EAAA,CACH,IAAAI,EAAAC,SAAAC,cAAA,UAiBWF,EAAKG,aAAa,MAAOJ,GAhBlBE,SAAAG,KAAAC,YAAAL,QAIVN,MAAAA,eAA0BD,EAA/BI,UAsBApB,EAAS6B,eAjBDhE,KAACuD,oBAAUU,SAAAC,SACbZ,KAAO7C,eAAY8C,SAEzBvD,KAAAU,gBAAAwD,UAGQlE,KAAAmE,aAQPvB,UAAAC,GACJ7C,KACD8B,cAiBR7B,EAAE,6BAA+B4C,EAAQ,QACpCuB,SAASpE,KAAKG,SAhBPkE,SAAK7D,UAMjByC,YAAKkB,GACRnE,KAAA6B,gBACD5B,EAAA,6BAAA+C,EAAA,QACJoB,SAAApE,KAAAI,WAEAiE,SAAA,UAqBIjB,iBAAiBD,GACbnD,KAAKW,cAAc2D,YAAY,UApBnC1B,MAAUC,EAAO7C,KAAAW,cAAA4D,KAAA,MAAAC,QACb,IAAK1C,MAALQ,EAAAmC,KAAAC,OAAAC,QAAAxB,GACEyB,EAAAC,OAAA5E,EAAA,YAA+B4C,MAAQ4B,WAK7CpB,mBACJrD,KAAAW,cAAAmE,SAAA,UACA9E,KAAAW,cAAA4D,KAAA,MAAAC,QAIQO,kBAAA1D,GACE,MAAA2D,EAAAhF,KAAAiC,qBAAyClB,KACtCqD,WAEAC,GAHL,mBAGcW,EAHd,CAIH,MAAAjE,EAAAiE,EAAA3D,GAoB0B,iBAARN,GAnBnBqC,KAAiBD,cACRxC,KAAAA,YAAc2D,IAEPhC,KAAAA,UAAUmC,QAyBlBzE,KAAKyB,YAAY,IApBrB,OAAKd,EA6BTmB,cACI9B,KAAKG,QAAQqE,QAnBTpD,aACIpB,KAAKiF,eAALC,YAAA,UACAlF,KAAKyB,gBAALyD,YAAA,UAFJ,IAIK,MAAAC,KAAAT,OAAAU,KAAApF,KAAAY,WACDX,EAAK2C,IAAAA,GAALsC,YAAA,UAQZrD,gBACJ7B,KAAAI,UAAAoE,QAEAL,aACAnE,KAAAO,QAAAuE,SAAA,UA0BQ9E,KAAKK,SAASyE,SAAS,UAzB3BhD,cACI9B,KAAKG,QAAQqE,YAAb,UACHxE,KAAAK,SAAAiE,YAAA,UAELrC,qBACA,OAAAhC,EAAA,yBAAAoF,IAAA","file":"LoginForm.min.js","sourcesContent":["\"use strict\";\nclass LoginForm {\n    constructor($chainContainers) {\n        this.switchEndpoint = 'authentication/switch-authentication-step';\n        this.$loginForm = $('#login-form');\n        this.$errors = $('#login-errors');\n        this.$messages = $('#login-messages');\n        this.$spinner = $('#spinner');\n        this.$pendingSpinner = $('#spinner-pending');\n        this.$submit = $('#submit');\n        this.$rememberMeCheckbox = $('#rememberMe');\n        this.$cancelRecover = $('#cancel-recover');\n        this.$recoverAccount = $('#recover-account');\n        this.$alternatives = $('#alternatives');\n        this.endpoints = {};\n        for (const container of $chainContainers) {\n            this.endpoints[container.id] = $(container).data('endpoint');\n        }\n        this.$loginForm.on('submit', this.invokeStepHandler.bind(this));\n        if (this.$pendingSpinner.length) {\n            this.$loginForm.trigger('submit');\n        }\n        this.$recoverAccount.on('click', this.switchForm.bind(this));\n        this.$cancelRecover.on('click', this.switchForm.bind(this));\n        this.$alternatives.on('click', 'li', (ev) => {\n            this.switchStep($(ev.target).attr('rel'));\n        });\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param request\n     * @param cb\n     */\n    performStep(request) {\n        if (this.$rememberMeCheckbox.prop('checked')) {\n            request.rememberMe = true;\n        }\n        this.clearMessages();\n        this.clearErrors();\n        Craft.postActionRequest(this.getActiveContainer().data('endpoint'), request, this.processResponse.bind(this));\n    }\n    /**\n     * Switch the current authentication step to an alternative.\n     *\n     * @param stepType\n     */\n    switchStep(stepType) {\n        Craft.postActionRequest(this.getActiveContainer().data('endpoint'), { stepType: stepType, switch: true }, this.processResponse.bind(this));\n    }\n    /**\n     * Process authentication response.\n     * @param response\n     * @param textStatus\n     * @protected\n     */\n    processResponse(response, textStatus) {\n        var _a;\n        if (textStatus == 'success') {\n            if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                window.location.href = response.returnUrl;\n            }\n            else {\n                if (response.error) {\n                    this.showError(response.error);\n                    Garnish.shake(this.$loginForm);\n                }\n                if (response.message) {\n                    this.showMessage(response.message);\n                }\n                if (response.html) {\n                    this.getActiveContainer().html(response.html);\n                }\n                if (response.alternatives) {\n                    this.showAlternatives(response.alternatives);\n                }\n                else {\n                    this.hideAlternatives();\n                }\n                if (response.footHtml) {\n                    const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                    // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                    // So roll our own JS file append-thing.\n                    if (jsFiles) {\n                        for (const jsFile of jsFiles) {\n                            let node = document.createElement('script');\n                            node.setAttribute('src', jsFile);\n                            document.body.appendChild(node);\n                        }\n                        // If that fails, use Craft's thing.\n                    }\n                    else {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n                // Just in case this was the first step, remove all the misc things.\n                if (response.stepComplete) {\n                    this.$rememberMeCheckbox.parent().remove();\n                    this.$cancelRecover.remove();\n                    this.$recoverAccount.remove();\n                }\n            }\n        }\n        this.enableForm();\n    }\n    /**\n     * Show an error.\n     *\n     * @param error\n     */\n    showError(error) {\n        this.clearErrors();\n        $('<p style=\"display: none;\">' + error + '</p>')\n            .appendTo(this.$errors)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Show a message.\n     *\n     * @param message\n     */\n    showMessage(message) {\n        this.clearMessages();\n        $('<p style=\"display: none;\">' + message + '</p>')\n            .appendTo(this.$messages)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    showAlternatives(alternatives) {\n        this.$alternatives.removeClass('hidden');\n        const $ul = this.$alternatives.find('ul').empty();\n        for (const [stepType, description] of Object.entries(alternatives)) {\n            $ul.append($(`<li rel=\"${stepType}\">${description}</li>`));\n        }\n    }\n    hideAlternatives() {\n        this.$alternatives.addClass('hidden');\n        this.$alternatives.find('ul').empty();\n    }\n    /**\n     * Invoke the current step handler bound to the authentication container\n     * @param ev\n     */\n    invokeStepHandler(ev) {\n        const handler = this.getActiveContainer().data('handler');\n        if (typeof handler == \"function\") {\n            const data = handler(ev);\n            if (typeof data == \"object\") {\n                this.disableForm();\n                this.performStep(data);\n            }\n            else {\n                this.showError(data);\n            }\n        }\n        else {\n            this.performStep({});\n        }\n        return false;\n    }\n    /**\n     * Clear all the errors.\n     *\n     * @protected\n     */\n    clearErrors() {\n        this.$errors.empty();\n    }\n    /**\n     * Switch the displayed form between authentication and recovery.\n     *\n     * @protected\n     */\n    switchForm() {\n        this.$cancelRecover.toggleClass('hidden');\n        this.$recoverAccount.toggleClass('hidden');\n        for (const containerId of Object.keys(this.endpoints)) {\n            $('#' + containerId).toggleClass('hidden');\n        }\n    }\n    /**\n     * Clear all the messages.\n     *\n     * @protected\n     */\n    clearMessages() {\n        this.$messages.empty();\n    }\n    enableForm() {\n        this.$submit.addClass('active');\n        this.$spinner.addClass('hidden');\n    }\n    disableForm() {\n        this.$submit.removeClass('active');\n        this.$spinner.removeClass('hidden');\n    }\n    getActiveContainer() {\n        return $('.authentication-chain').not('.hidden');\n    }\n}\n"]}