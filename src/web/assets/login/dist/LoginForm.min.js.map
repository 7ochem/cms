{"version":3,"sources":["login/src/LoginForm.js"],"names":["LoginForm","constructor","$chainContainers","switchEndpoint","this","$","$loginForm","$errors","$messages","$spinner","$pendingSpinner","$submit","$rememberMeCheckbox","$cancelRecover","$recoverAccount","$alternatives","endpoints","container","id","data","bind","length","trigger","on","switchForm","ev","switchStep","target","attr","performStep","request","$container","getActiveContainer","prop","rememberMe","clearMessages","clearErrors","processResponse","stepType","Craft","response","textStatus","_a","postActionRequest","href","returnUrl","Garnish","error","showError","shake","message","showMessage","html","alternatives","success","jsFiles","footHtml","match","jsFile","node","document","createElement","setAttribute","appendFootHtml","stepComplete","remove","velocity","appendTo","showAlternatives","removeClass","find","description","Object","append","hideAlternatives","addClass","empty","handler","invokeStepHandler","toggleClass","keys","containerId","enableForm","disableForm","not"],"mappings":"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","file":"LoginForm.min.js","sourcesContent":["\"use strict\";\nclass LoginForm {\n    constructor($chainContainers) {\n        this.switchEndpoint = 'authentication/switch-authentication-step';\n        this.$loginForm = $('#login-form');\n        this.$errors = $('#login-errors');\n        this.$messages = $('#login-messages');\n        this.$spinner = $('#spinner');\n        this.$pendingSpinner = $('#spinner-pending');\n        this.$submit = $('#submit');\n        this.$rememberMeCheckbox = $('#rememberMe');\n        this.$cancelRecover = $('#cancel-recover');\n        this.$recoverAccount = $('#recover-account');\n        this.$alternatives = $('#alternatives');\n        this.endpoints = {};\n        for (const container of $chainContainers) {\n            this.endpoints[container.id] = $(container).data('endpoint');\n        }\n        this.$loginForm.on('submit', this.invokeStepHandler.bind(this));\n        if (this.$pendingSpinner.length) {\n            this.$loginForm.trigger('submit');\n        }\n        this.$recoverAccount.on('click', this.switchForm.bind(this));\n        this.$cancelRecover.on('click', this.switchForm.bind(this));\n        this.$alternatives.on('click', 'li', (ev) => {\n            this.switchStep($(ev.target).attr('rel'));\n        });\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param request\n     * @param cb\n     */\n    performStep(request) {\n        const $container = this.getActiveContainer();\n        if (this.$rememberMeCheckbox.prop('checked')) {\n            request.rememberMe = true;\n        }\n        this.clearMessages();\n        this.clearErrors();\n        Craft.postActionRequest($container.data('endpoint'), request, this.processResponse.bind(this));\n    }\n    switchStep(stepType) {\n        Craft.postActionRequest(this.switchEndpoint, { stepType: stepType, }, this.processResponse.bind(this));\n    }\n    /**\n     * Process authentication response.\n     * @param response\n     * @param textStatus\n     * @protected\n     */\n    processResponse(response, textStatus) {\n        var _a;\n        if (textStatus == 'success') {\n            if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                window.location.href = response.returnUrl;\n            }\n            else {\n                if (response.error) {\n                    this.showError(response.error);\n                    Garnish.shake(this.$loginForm);\n                }\n                if (response.message) {\n                    this.showMessage(response.message);\n                }\n                if (response.html) {\n                    this.getActiveContainer().html(response.html);\n                }\n                if (response.alternatives) {\n                    this.showAlternatives(response.alternatives);\n                }\n                else {\n                    this.hideAlternatives();\n                }\n                if (response.footHtml) {\n                    const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                    // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                    // So roll our own JS file append-thing.\n                    if (jsFiles) {\n                        for (const jsFile of jsFiles) {\n                            let node = document.createElement('script');\n                            node.setAttribute('src', jsFile);\n                            document.body.appendChild(node);\n                        }\n                        // If that fails, use Craft's thing.\n                    }\n                    else {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n                // Just in case this was the first step, remove all the misc things.\n                if (response.stepComplete) {\n                    this.$rememberMeCheckbox.parent().remove();\n                    this.$cancelRecover.remove();\n                    this.$recoverAccount.remove();\n                }\n            }\n        }\n        this.enableForm();\n    }\n    /**\n     * Show an error.\n     *\n     * @param error\n     */\n    showError(error) {\n        this.clearErrors();\n        $('<p style=\"display: none;\">' + error + '</p>')\n            .appendTo(this.$errors)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Show a message.\n     *\n     * @param message\n     */\n    showMessage(message) {\n        this.clearMessages();\n        $('<p style=\"display: none;\">' + message + '</p>')\n            .appendTo(this.$messages)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    showAlternatives(alternatives) {\n        this.$alternatives.removeClass('hidden');\n        const $ul = this.$alternatives.find('ul');\n        for (const [stepType, description] of Object.entries(alternatives)) {\n            $ul.append($(`<li rel=\"${stepType}\">${description}</li>`));\n        }\n    }\n    hideAlternatives() {\n        this.$alternatives.addClass('hidden');\n        this.$alternatives.find('ul').empty();\n    }\n    /**\n     * Invoke the current step handler bound to the authentication container\n     * @param ev\n     */\n    invokeStepHandler(ev) {\n        const handler = this.getActiveContainer().data('handler');\n        if (typeof handler == \"function\") {\n            const data = handler(ev);\n            if (typeof data == \"object\") {\n                this.disableForm();\n                this.performStep(data);\n            }\n            else {\n                this.showError(data);\n            }\n        }\n        else {\n            this.performStep({});\n        }\n        return false;\n    }\n    /**\n     * Clear all the errors.\n     *\n     * @protected\n     */\n    clearErrors() {\n        this.$errors.empty();\n    }\n    /**\n     * Switch the displayed form between authentication and recovery.\n     *\n     * @protected\n     */\n    switchForm() {\n        this.$cancelRecover.toggleClass('hidden');\n        this.$recoverAccount.toggleClass('hidden');\n        for (const containerId of Object.keys(this.endpoints)) {\n            $('#' + containerId).toggleClass('hidden');\n        }\n    }\n    /**\n     * Clear all the messages.\n     *\n     * @protected\n     */\n    clearMessages() {\n        this.$messages.empty();\n    }\n    enableForm() {\n        this.$submit.addClass('active');\n        this.$spinner.addClass('hidden');\n    }\n    disableForm() {\n        this.$submit.removeClass('active');\n        this.$spinner.removeClass('hidden');\n    }\n    getActiveContainer() {\n        return $('.authentication-chain').not('.hidden');\n    }\n}\n"]}