{"version":3,"sources":["login/src/LoginForm.js"],"names":["LoginForm","constructor","authenticationEndpoint","this","recoverEndpoint","$","$loginForm","$authContainer","$recoverContainer","$errors","$messages","$spinner","$pendingSpinner","$submit","$rememberMeCheckbox","$cancelRecover","showingRecoverForm","on","invokeStepHandler","bind","length","trigger","switchForm","performStep","request","scenario","handler","endpoint","Craft","cpLoginChain","prop","rememberMe","clearMessages","clearErrors","container","postActionRequest","response","textStatus","_a","success","returnUrl","window","error","showError","message","showMessage","location","html","undefined","shake","appendFootHtml","footHtml","parent","remove","$recoverAccount","enableForm","appendTo","velocity","registerStepHandler","isRecoveryStep","authenticationStepHandler","ev","recoveryStepHandler","data","empty","toggleClass","addClass","disableForm","removeClass"],"mappings":"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","file":"LoginForm.min.js","sourcesContent":["\"use strict\";\nclass LoginForm {\n    constructor() {\n        this.authenticationEndpoint = 'authentication/perform-authentication';\n        this.recoverEndpoint = 'authentication/recover-account';\n        this.$loginForm = $('#login-form');\n        this.$authContainer = $('#authentication-container');\n        this.$recoverContainer = $('#recovery-container');\n        this.$errors = $('#login-errors');\n        this.$messages = $('#login-messages');\n        this.$spinner = $('#spinner');\n        this.$pendingSpinner = $('#spinner-pending');\n        this.$submit = $('#submit');\n        this.$rememberMeCheckbox = $('#rememberMe');\n        this.$cancelRecover = $('#cancel-recover');\n        this.$recoverAccount = $('#recover-account');\n        /**\n         * Whether currently the account recovery form is shown.\n         *\n         * @private\n         */\n        this.showingRecoverForm = false;\n        this.$loginForm.on('submit', this.invokeStepHandler.bind(this));\n        if (this.$pendingSpinner.length) {\n            this.$loginForm.trigger('submit');\n        }\n        this.$recoverAccount.on('click', this.switchForm.bind(this));\n        this.$cancelRecover.on('click', this.switchForm.bind(this));\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param request\n     * @param cb\n     */\n    performStep(request) {\n        request.scenario = Craft.cpLoginChain;\n        if (this.$rememberMeCheckbox.prop('checked')) {\n            request.rememberMe = true;\n        }\n        this.clearMessages();\n        this.clearErrors();\n        let container;\n        let handler;\n        let endpoint;\n        if (this.showingRecoverForm) {\n            endpoint = this.recoverEndpoint;\n            container = this.$recoverContainer;\n            handler = \"recoveryStepHandler\";\n        }\n        else {\n            endpoint = this.authenticationEndpoint;\n            container = this.$authContainer;\n            handler = \"authenticationStepHandler\";\n        }\n        Craft.postActionRequest(endpoint, request, (response, textStatus) => {\n            var _a;\n            if (textStatus == 'success') {\n                if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                    window.location.href = response.returnUrl;\n                }\n                else {\n                    if (response.error) {\n                        this.showError(response.error);\n                        Garnish.shake(this.$loginForm);\n                    }\n                    if (response.message) {\n                        this.showMessage(response.message);\n                    }\n                    if (response.html) {\n                        container.html(response.html);\n                        this[handler] = undefined;\n                    }\n                    if (response.footHtml) {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                    // Just in case this was the first step, remove all the misc things.\n                    if (response.stepComplete) {\n                        this.$rememberMeCheckbox.parent().remove();\n                        this.$cancelRecover.remove();\n                        this.$recoverAccount.remove();\n                    }\n                }\n            }\n            this.enableForm();\n        });\n    }\n    /**\n     * Show an error.\n     *\n     * @param error\n     */\n    showError(error) {\n        this.clearErrors();\n        $('<p style=\"display: none;\">' + error + '</p>')\n            .appendTo(this.$errors)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Show a message.\n     *\n     * @param message\n     */\n    showMessage(message) {\n        this.clearMessages();\n        $('<p style=\"display: none;\">' + message + '</p>')\n            .appendTo(this.$messages)\n            // @ts-ignore\n            .velocity('fadeIn');\n    }\n    /**\n     * Register an authentication step handler function that performs validation and data preparation.\n     * It must return either a hash of data to be submitted for authentication or a string which is then interpreted as an error message.\n     * If an empty string is returned, no action is taken.\n     *\n     * @param handler\n     * @param isRecoveryStep whether this is an account recovery step handler.\n     */\n    registerStepHandler(handler, isRecoveryStep = false) {\n        if (isRecoveryStep) {\n            this.recoveryStepHandler = handler;\n        }\n        else {\n            this.authenticationStepHandler = handler;\n        }\n    }\n    /**\n     * Invoke the current authentication or recovery step handler.\n     * @param ev\n     */\n    invokeStepHandler(ev) {\n        const handler = this.showingRecoverForm ? this.recoveryStepHandler : this.authenticationStepHandler;\n        if (typeof handler == \"function\") {\n            const data = handler(ev);\n            if (typeof data == \"object\") {\n                this.disableForm();\n                this.performStep(data);\n            }\n            else {\n                this.showError(data);\n            }\n        }\n        else {\n            this.performStep({});\n        }\n        return false;\n    }\n    /**\n     * Clear all the errors.\n     *\n     * @protected\n     */\n    clearErrors() {\n        this.$errors.empty();\n    }\n    /**\n     * Switch the displayed form between authentication and recovery.\n     *\n     * @protected\n     */\n    switchForm() {\n        this.$authContainer.toggleClass('hidden');\n        this.$recoverContainer.toggleClass('hidden');\n        this.$cancelRecover.toggleClass('hidden');\n        this.$recoverAccount.toggleClass('hidden');\n        this.showingRecoverForm = !this.showingRecoverForm;\n    }\n    /**\n     * Clear all the messages.\n     *\n     * @protected\n     */\n    clearMessages() {\n        this.$messages.empty();\n    }\n    enableForm() {\n        this.$submit.addClass('active');\n        this.$spinner.addClass('hidden');\n    }\n    disableForm() {\n        this.$submit.removeClass('active');\n        this.$spinner.removeClass('hidden');\n    }\n}\nCraft.LoginForm = new LoginForm();\n"]}