{"version":3,"file":"NewUsersWidget.js","mappings":"YAAA,IAAUA,EAAAA,EA0HPC,OAvHCC,MAAMC,eAAiBC,QAAQC,KAAKC,OAAO,CACvCC,SAAU,KACVC,KAAM,KACNC,UAAW,KACXC,QAAS,KAETC,QAAS,KACTC,MAAO,KAEPC,KAAM,SAASC,EAAUP,GAAU,WAU/B,OATAQ,KAAKC,YAAYT,GAEjBQ,KAAKJ,QAAUX,EAAE,UAAYc,GAC7BC,KAAKH,MAAQG,KAAKJ,QAAQM,KAAK,eAC/BF,KAAKG,gBAAkBlB,EAAE,oCAAoCmB,SAASJ,KAAKH,OAC3EG,KAAKK,OAASpB,EAAE,wBAAwBmB,SAASJ,KAAKH,OAEtCG,KAAKR,SAASc,WAG1B,IAAK,KACDN,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,GACpDP,KAAKL,QAAU,IAAIa,KACnB,MAEJ,IAAK,MACDR,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAU,IAAIa,KACnB,MAEJ,IAAK,WACDR,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAUR,MAAMC,eAAemB,cAAc,GAClD,MAEJ,IAAK,YACDP,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAUR,MAAMC,eAAemB,cAAc,IAK1D,IAAId,EAAO,CACPC,UAAWP,MAAMC,eAAeqB,aAAaT,KAAKN,WAClDC,QAASR,MAAMC,eAAeqB,aAAaT,KAAKL,SAChDe,YAAaV,KAAKR,SAASkB,aAG/BvB,MAAMwB,kBAAkB,OAAQ,4BAA6B,CAAClB,KAAAA,IACzDmB,MAAK,SAACC,GAGH,GAFA,EAAKV,gBAAgBW,YAAY,UAE7BD,EAASpB,KAAKsB,QAAUF,EAASpB,KAAKsB,OAAOC,OAC7C,OAAOC,QAAQC,SAInB,EAAKC,MAAQ,IAAIhC,MAAMiC,OAAOC,KAAK,EAAKlB,gBAAiB,CACrDmB,MAAO,CACHC,UAAW,SAASJ,GAChB,OAAO,SAASK,GACZ,IAAIC,EAAS,OAMb,OAJID,GAAKE,KAAKC,MAAMH,KAChBC,EAAS,QAGNN,EAAMS,aAAaH,OAAOA,EAA1BN,CAAkCK,QAMzD,IAAIK,EAAiB,IAAI1C,MAAMiC,OAAOU,UAAUjB,EAASpB,KAAKsC,WAE1DC,EAAgB,CAChBC,YAAapB,EAASpB,KAAKwC,YAC3BC,UAAWrB,EAASpB,KAAK0C,MACzBC,QAASvB,EAASpB,KAAK2C,SAG3B,EAAKjB,MAAMkB,KAAKR,EAAgBG,GAGhCM,OAAOC,UAAUC,KAAKC,GAAG,cAAe,EAAKC,kBAAkBC,KAAK,OApC5E,OAsCW,YAAgB,IACfC,EADe,EAAd/B,SACcpB,KAAKoD,SAAW1D,MAAM2D,EAAE,4BAE3C,EAAKzC,OAAO0C,KAAKH,GACjB,EAAKvC,OAAOS,YAAY,aAGhCd,KAAKJ,QAAQH,KAAK,UAAUgD,GAAG,UAAWzC,KAAKgD,QAAQL,KAAK3C,OAE5Db,MAAMC,eAAe6D,UAAUC,KAAKlD,OAGxC0C,kBAAmB,WACf1C,KAAKmB,MAAMgC,UAGfH,QAAS,WACL7D,MAAMC,eAAe6D,UAAUG,OAAOnE,EAAEoE,QAAQrD,KAAMb,MAAMC,eAAe6D,WAAY,GACvFjD,KAAKsD,SAEV,CACCL,UAAW,GAEX1C,cAAe,SAASgD,GACpB,IAAIC,EAAO,IAAIhD,KAEf,OADAgD,EAAOA,EAAKC,UAAa,MAAeF,EAAO,IACxC,IAAI/C,KAAKgD,IAGpB/C,aAAc,SAAS+C,GACnB,OAAO9B,KAAKgC,MAAMF,EAAKC,UAAY,Q","sources":["webpack:///./NewUsersWidget.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.NewUsersWidget = Garnish.Base.extend({\n        settings: null,\n        data: null,\n        startDate: null,\n        endDate: null,\n\n        $widget: null,\n        $body: null,\n\n        init: function(widgetId, settings) {\n            this.setSettings(settings);\n\n            this.$widget = $('#widget' + widgetId);\n            this.$body = this.$widget.find('.body:first');\n            this.$chartContainer = $('<div class=\"chart hidden\"></div>').appendTo(this.$body);\n            this.$error = $('<div class=\"error\"/>').appendTo(this.$body);\n\n            var dateRange = this.settings.dateRange;\n\n            switch (dateRange) {\n                case 'd7':\n                    this.startDate = Craft.NewUsersWidget.getDateByDays(6);\n                    this.endDate = new Date();\n                    break;\n\n                case 'd30':\n                    this.startDate = Craft.NewUsersWidget.getDateByDays(30);\n                    this.endDate = new Date();\n                    break;\n\n                case 'lastweek':\n                    this.startDate = Craft.NewUsersWidget.getDateByDays(13);\n                    this.endDate = Craft.NewUsersWidget.getDateByDays(7);\n                    break;\n\n                case 'lastmonth':\n                    this.startDate = Craft.NewUsersWidget.getDateByDays(60);\n                    this.endDate = Craft.NewUsersWidget.getDateByDays(30);\n                    break;\n            }\n\n            // Request orders report\n            var data = {\n                startDate: Craft.NewUsersWidget.getDateValue(this.startDate),\n                endDate: Craft.NewUsersWidget.getDateValue(this.endDate),\n                userGroupId: this.settings.userGroupId\n            };\n\n            Craft.sendActionRequest('POST', 'charts/get-new-users-data', {data})\n                .then((response) => {\n                    this.$chartContainer.removeClass('hidden');\n\n                    if (response.data.errors && response.data.errors.length) {\n                        return Promise.reject();\n                    }\n\n                    // Create chart\n                    this.chart = new Craft.charts.Area(this.$chartContainer, {\n                        yAxis: {\n                            formatter: function(chart) {\n                                return function(d) {\n                                    var format = ',.0f';\n\n                                    if (d != Math.round(d)) {\n                                        format = ',.1f';\n                                    }\n\n                                    return chart.formatLocale.format(format)(d);\n                                };\n                            }\n                        }\n                    });\n\n                    var chartDataTable = new Craft.charts.DataTable(response.data.dataTable);\n\n                    var chartSettings = {\n                        orientation: response.data.orientation,\n                        dataScale: response.data.scale,\n                        formats: response.data.formats\n                    };\n\n                    this.chart.draw(chartDataTable, chartSettings);\n\n                    // Resize chart when grid is refreshed\n                    window.dashboard.grid.on('refreshCols', this.handleGridRefresh.bind(this));\n                })\n                .catch(({response}) => {\n                    var msg = response.data.message || Craft.t('A server error occurred.');\n\n                    this.$error.html(msg);\n                    this.$error.removeClass('hidden');\n                });\n\n            this.$widget.data('widget').on('destroy', this.destroy.bind(this));\n\n            Craft.NewUsersWidget.instances.push(this);\n        },\n\n        handleGridRefresh: function() {\n            this.chart.resize();\n        },\n\n        destroy: function() {\n            Craft.NewUsersWidget.instances.splice($.inArray(this, Craft.NewUsersWidget.instances), 1);\n            this.base();\n        }\n    }, {\n        instances: [],\n\n        getDateByDays: function(days) {\n            var date = new Date();\n            date = date.getTime() - (60 * 60 * 24 * days * 1000);\n            return new Date(date);\n        },\n\n        getDateValue: function(date) {\n            return Math.floor(date.getTime() / 1000);\n        }\n    });\n})(jQuery);\n"],"names":["$","jQuery","Craft","NewUsersWidget","Garnish","Base","extend","settings","data","startDate","endDate","$widget","$body","init","widgetId","this","setSettings","find","$chartContainer","appendTo","$error","dateRange","getDateByDays","Date","getDateValue","userGroupId","sendActionRequest","then","response","removeClass","errors","length","Promise","reject","chart","charts","Area","yAxis","formatter","d","format","Math","round","formatLocale","chartDataTable","DataTable","dataTable","chartSettings","orientation","dataScale","scale","formats","draw","window","dashboard","grid","on","handleGridRefresh","bind","msg","message","t","html","destroy","instances","push","resize","splice","inArray","base","days","date","getTime","floor"],"sourceRoot":""}