{"version":3,"sources":["credentials/src/Credentials.js"],"names":["Credentials","constructor","$loginNameInput","$","this","$passwordInput","Craft","validateOnInput","registerStepHandler","prepareData","bind","LoginForm","$newPasswordInput","onToggleInput","onInput","on","validate","loginNameVal","val","length","t","window","match","passwordLength","minPasswordLength","attribute","min","maxPasswordLength","max","ev","clearErrors","error","loginName"],"mappings":"AAAA,aACA,MAAMA,YAANC,cACIA,KAAWC,gBAAGC,EAAA,cACVC,KAAKF,eAAoBC,EAAA,aACzBC,KAAKC,iBAAmB,EACxBC,MAAKC,UAALC,oBAAAJ,KAAAK,YAAAC,KAAAN,OACAE,IAAMK,MAAAA,cAAUH,KAAAA,eAAyBC,CACrCH,cAAoBM,IACpBC,KAAgBD,eAAAA,IAAD,SACNP,KAAAA,eAAmBO,EACnBP,KAAAA,eAAiBO,GAAAA,QAAtBR,KAAAU,QAAAJ,KAAAN,UAHRA,KAAAF,gBAAAa,GAAA,QAAAX,KAAAU,QAAAJ,KAAAN,OAOAA,KAAKF,eAAmBa,GAAA,QAASX,KAAKU,QAAQJ,KAAKN,OAIvDY,WAAAA,MAAWC,EAAAb,KAAAF,gBAAAgB,MACP,GAA0BhB,IAApBe,EAAeE,OACjBF,OAAAA,OAAaE,mBACbb,MAAAc,EAAA,MAAA,kBAEWd,MAAQc,EAAA,MAAO,8BAE1B,GAAAC,OAAaD,qBAASH,EAAAK,MAAtB,YAEJ,OAAAhB,MAAAc,EAAA,MAAA,kBAIA,MAAMG,EAAiBnB,KAAKC,eAAea,MAAMC,OAF7C,OAAAI,EAAsBF,OAAAG,kBACzBlB,MAAAc,EAAA,MAAA,qGAAA,CAKOK,UAAWnB,MAAMc,EAAE,MAAO,YAE1BM,IAAKL,OAAOG,sBADZD,EAAAF,OAAAM,oBACWrB,MAACkB,EAAAA,MAAAA,oGAAAA,CAHhBC,UAAAnB,MAAAc,EAAA,MAAA,YAWIQ,IAAKP,OAAOM,oBADZb,QAAAe,GACGzB,KAAEiB,kBAAOM,IAAAA,KAAAA,YAHhBrB,MAAAK,UAAAmB,cAMJrB,YAAAoB,GACH,MAAAE,EAAA3B,KAAAY,WAQG,OAAc,IAAVe,GAPD3B,KAAKG,iBAAA,EACCA,IAERH,KAAAG,iBAAA,EACJ,CASOyB,UAAW5B,KAAKF,gBAAgBgB,MARxCT,SAAgBL,KAAAC,eAAAa,SAGR,IAAAlB","file":"Credentials.min.js","sourcesContent":["\"use strict\";\nclass Credentials {\n    constructor() {\n        this.$loginNameInput = $('#loginName');\n        this.$passwordInput = $('#password');\n        this.validateOnInput = false;\n        Craft.LoginForm.registerStepHandler(this.prepareData.bind(this));\n        new Craft.PasswordInput(this.$passwordInput, {\n            onToggleInput: ($newPasswordInput) => {\n                this.$passwordInput.off('input');\n                this.$passwordInput = $newPasswordInput;\n                this.$passwordInput.on('input', this.onInput.bind(this));\n            }\n        });\n        this.$loginNameInput.on('input', this.onInput.bind(this));\n        this.$passwordInput.on('input', this.onInput.bind(this));\n        // TODO this class must handle forgotten password functionality.\n    }\n    validate() {\n        const loginNameVal = this.$loginNameInput.val();\n        if (loginNameVal.length === 0) {\n            // @ts-ignore\n            if (window.useEmailAsUsername) {\n                return Craft.t('app', 'Invalid email.');\n            }\n            return Craft.t('app', 'Invalid username or email.');\n        }\n        // @ts-ignore\n        if (window.useEmailAsUsername && !loginNameVal.match('.+@.+\\..+')) {\n            return Craft.t('app', 'Invalid email.');\n        }\n        const passwordLength = this.$passwordInput.val().length;\n        // @ts-ignore\n        if (passwordLength < window.minPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at least {min, number} {min, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                min: window.minPasswordLength,\n            });\n        }\n        // @ts-ignore\n        if (passwordLength > window.maxPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at most {max, number} {max, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                max: window.maxPasswordLength,\n            });\n        }\n        return true;\n    }\n    onInput(ev) {\n        if (this.validateOnInput && this.validate() === true) {\n            Craft.LoginForm.clearErrors();\n        }\n    }\n    prepareData(ev) {\n        const error = this.validate();\n        if (error !== true) {\n            this.validateOnInput = true;\n            return error;\n        }\n        this.validateOnInput = false;\n        return {\n            loginName: this.$loginNameInput.val(),\n            password: this.$passwordInput.val(),\n        };\n    }\n}\nnew Credentials();\n"]}