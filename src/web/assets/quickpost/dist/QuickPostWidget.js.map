{"version":3,"file":"QuickPostWidget.js","mappings":"YAAA,IAAUA,EAAAA,EA6HPC,OA1HCC,MAAMC,gBAAkBC,QAAQC,KAAKC,OAAO,CACxCC,OAAQ,KACRC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTC,MAAO,KACPC,SAAU,KACVC,WAAY,KACZC,SAAS,EAETC,KAAM,SAASC,EAAUT,EAAQC,EAAYC,GACzCQ,KAAKV,OAASA,EACdU,KAAKT,WAAaA,EAClBS,KAAKR,SAAWA,EAChBQ,KAAKP,QAAUV,EAAE,UAAYgB,GAE7BC,KAAKC,SAASD,KAAKP,QAAQS,KAAK,gBAGpCD,SAAU,SAASP,GACfM,KAAKN,MAAQA,EACbM,KAAKL,SAAWK,KAAKN,MAAMQ,KAAK,uBAEhCF,KAAKT,aAEL,IAAIY,EAAWH,KAAKN,MAAMQ,KAAK,qCAC3BE,EAA6BD,EAASE,KAAK,WAAWC,KAAKC,WAAWL,KAAK,iBAE/EC,EAASK,UAETR,KAAKS,YAAYT,KAAKN,MAAO,SAAU,oBACvCM,KAAKS,YAAYL,EAA4B,QAAS,2BAG1DM,iBAAkB,SAASC,GACvBA,EAAMC,iBAENZ,KAAKa,KAAKb,KAAKc,OAAOC,KAAKf,QAG/BgB,uBAAwB,WACpBhB,KAAKa,KAAKb,KAAKiB,UAAUF,KAAKf,QAGlCa,KAAM,SAASK,GAAU,WACrB,IAAIlB,KAAKH,QAAT,CAIAG,KAAKH,SAAU,EACfG,KAAKL,SAASwB,SAAS,WAEvB,IAAIC,EAAWjC,QAAQkC,YAAYrB,KAAKN,OACpCW,EAAOtB,EAAEM,OAAO,CAACiC,QAAS,GAAIF,EAAUpB,KAAKV,QAEjDL,MAAMsC,kBAAkB,OAAQ,qBAAsB,CAAClB,KAAAA,IAClDmB,MAAK,SAACC,GACC,EAAK7B,YACL,EAAKA,WAAW8B,WAAWC,SAG/B1C,MAAM2C,GAAGC,cAAc5C,MAAM6C,EAAE,MAAO,iBACtCZ,EAASO,EAASpB,SAP1B,OASW,YAAgB,IAAdoB,EAAc,EAAdA,SAOL,GANI,EAAK7B,YACL,EAAKA,WAAW8B,WAAWC,SAG/B1C,MAAM2C,GAAGG,aAAa9C,MAAM6C,EAAE,MAAO,yBAEjCL,EAASpB,KAAK2B,OAKd,IAAK,IAAIC,KAJJ,EAAKrC,aACN,EAAKA,WAAab,EAAE,wBAAwBmD,YAAY,EAAKxC,QAG3C+B,EAASpB,KAAK2B,OAChC,GAAKP,EAASpB,KAAK2B,OAAOG,eAAeF,GAIzC,IAAK,IAAIG,EAAI,EAAGA,EAAIX,EAASpB,KAAK2B,OAAOC,GAAWI,OAAQD,IAAK,CAC7D,IAAIE,EAAQb,EAASpB,KAAK2B,OAAOC,GAAWG,GAC5CrD,EAAE,OAASuD,EAAQ,SAASC,SAAS,EAAK3C,gBA5B9D,SAiCa,WACL,EAAKC,SAAU,EACf,EAAKF,SAAS6C,YAAY,gBAItC1B,OAAQ,SAASW,GAEb,IAAIgB,EAAW1D,EAAEiB,KAAKR,UAMtB,GALAQ,KAAKN,MAAMgD,YAAYD,GACvBxD,MAAM0D,eAAeF,GACrBzC,KAAKC,SAASwC,QAG2B,IAA9BxD,MAAM2D,oBACb,IAAK,IAAIR,EAAI,EAAGA,EAAInD,MAAM2D,oBAAoBC,UAAUR,OAAQD,IAAK,CACjE,IAAIU,EAAS7D,MAAM2D,oBAAoBC,UAAUT,GAC5CU,EAAOxD,OAAOyD,WAAaD,EAAOxD,OAAOyD,WAAa/C,KAAKV,OAAOyD,WACnED,EAAOE,SAAS,CACZC,IAAKxB,EAASyB,UACdC,MAAO1B,EAAS0B,MAChBC,YAAa3B,EAAS2B,YACtBC,SAAU5B,EAAS6B,mBAOvCrC,UAAW,SAASQ,GAEhBxC,MAAMsE,WAAW9B,EAASyB,c","sources":["webpack:///./QuickPostWidget.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.QuickPostWidget = Garnish.Base.extend({\n        params: null,\n        initFields: null,\n        formHtml: null,\n        $widget: null,\n        $form: null,\n        $saveBtn: null,\n        $errorList: null,\n        loading: false,\n\n        init: function(widgetId, params, initFields, formHtml) {\n            this.params = params;\n            this.initFields = initFields;\n            this.formHtml = formHtml;\n            this.$widget = $('#widget' + widgetId);\n\n            this.initForm(this.$widget.find('form:first'));\n        },\n\n        initForm: function($form) {\n            this.$form = $form;\n            this.$saveBtn = this.$form.find('button[type=submit]');\n\n            this.initFields();\n\n            var $menuBtn = this.$form.find('> .buttons > .btngroup > .menubtn'),\n                $saveAndContinueEditingBtn = $menuBtn.data('menubtn').menu.$container.find('> ul > li > a');\n\n            $menuBtn.menubtn();\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n            this.addListener($saveAndContinueEditingBtn, 'click', 'saveAndContinueEditing');\n        },\n\n        handleFormSubmit: function(event) {\n            event.preventDefault();\n\n            this.save(this.onSave.bind(this));\n        },\n\n        saveAndContinueEditing: function() {\n            this.save(this.gotoEntry.bind(this));\n        },\n\n        save: function(callback) {\n            if (this.loading) {\n                return;\n            }\n\n            this.loading = true;\n            this.$saveBtn.addClass('loading');\n\n            var formData = Garnish.getPostData(this.$form),\n                data = $.extend({enabled: 1}, formData, this.params);\n\n            Craft.sendActionRequest('POST', 'entries/save-entry', {data})\n                .then((response) => {\n                    if (this.$errorList) {\n                        this.$errorList.children().remove();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Entry saved.'));\n                    callback(response.data);\n                })\n                .catch(({response}) => {\n                    if (this.$errorList) {\n                        this.$errorList.children().remove();\n                    }\n\n                    Craft.cp.displayError(Craft.t('app', 'Couldnâ€™t save entry.'));\n\n                    if (response.data.errors) {\n                        if (!this.$errorList) {\n                            this.$errorList = $('<ul class=\"errors\"/>').insertAfter(this.$form);\n                        }\n\n                        for (var attribute in response.data.errors) {\n                            if (!response.data.errors.hasOwnProperty(attribute)) {\n                                continue;\n                            }\n\n                            for (var i = 0; i < response.data.errors[attribute].length; i++) {\n                                var error = response.data.errors[attribute][i];\n                                $('<li>' + error + '</li>').appendTo(this.$errorList);\n                            }\n                        }\n                    }\n                })\n                .finally(() => {\n                    this.loading = false;\n                    this.$saveBtn.removeClass('loading');\n                });\n        },\n\n        onSave: function(response) {\n            // Reset the widget\n            var $newForm = $(this.formHtml);\n            this.$form.replaceWith($newForm);\n            Craft.initUiElements($newForm);\n            this.initForm($newForm);\n\n            // Are there any Recent Entries widgets to notify?\n            if (typeof Craft.RecentEntriesWidget !== 'undefined') {\n                for (var i = 0; i < Craft.RecentEntriesWidget.instances.length; i++) {\n                    var widget = Craft.RecentEntriesWidget.instances[i];\n                    if (!widget.params.sectionId || widget.params.sectionId == this.params.sectionId) {\n                        widget.addEntry({\n                            url: response.cpEditUrl,\n                            title: response.title,\n                            dateCreated: response.dateCreated,\n                            username: response.authorUsername\n                        });\n                    }\n                }\n            }\n        },\n\n        gotoEntry: function(response) {\n            // Redirect to the entry's edit URL\n            Craft.redirectTo(response.cpEditUrl);\n        }\n    });\n})(jQuery);\n"],"names":["$","jQuery","Craft","QuickPostWidget","Garnish","Base","extend","params","initFields","formHtml","$widget","$form","$saveBtn","$errorList","loading","init","widgetId","this","initForm","find","$menuBtn","$saveAndContinueEditingBtn","data","menu","$container","menubtn","addListener","handleFormSubmit","event","preventDefault","save","onSave","bind","saveAndContinueEditing","gotoEntry","callback","addClass","formData","getPostData","enabled","sendActionRequest","then","response","children","remove","cp","displayNotice","t","displayError","errors","attribute","insertAfter","hasOwnProperty","i","length","error","appendTo","removeClass","$newForm","replaceWith","initUiElements","RecentEntriesWidget","instances","widget","sectionId","addEntry","url","cpEditUrl","title","dateCreated","username","authorUsername","redirectTo"],"sourceRoot":""}