{"version":3,"sources":["edituser/src/WebAuthnFormHandler.js"],"names":["WebAuthnFormHandler","constructor","attachEndpoint","this","disabled","$","$container","attachEvents","$button","on","ev","stopImmediatePropagation","data","optionData","Object","assign","user","excludeCredentials","keyCredentialOptions","challenge","atob","replace","id","Uint8Array","from","c","charCodeAt","idx","excluded","credentials","elevatedSessionManager","attachWebAuthnCredential","log","Craft","catch","disable","requestData","credentialName","prompt","t","type","response","attestationObject","btoa","String","fromCharCode","clientDataJSON","textStatus","replaceWith","html","footHtml","jsFiles","match","existingSources","Array","document","scripts","map","node","getAttribute","filter","val","length","includes","jsFile","createElement","setAttribute","body","appendChild","appendFootHtml","enable","[object Object]","navigator","create","err","console","fadeTo","credentialId","newExcluded","push"],"mappings":"AAAA,aACA,MAAMA,oBAANC,cACIA,KAAWC,eAAG,8CACVC,KAAKD,UAAL,EACAC,KAAKC,WAALC,EAAA,sBACAF,KAAKG,eAERC,eAEGP,oBAAoBQ,QAAUH,EAAE,oBADpCE,oBAAeC,QAAAC,GAAA,QAAAC,IACXV,EAAAA,2BACAA,MACOW,EADaH,EAAAA,EAAQC,QACxBG,KAAA,sBAEMC,EAA0BC,OAAAC,OAAAD,OAChCC,OAAA,GAAAF,GAAA,CAAAG,KAAAF,OAAAC,OAAA,GAAAF,EAAAG,QAEIH,EAAWI,qBADTC,EAAuBJ,mBAAqBC,IAAPF,EAAkBA,qBAK7DK,EAAqBC,UAAYC,KAAKF,EAAqBC,UAAUE,QAAQ,KAAM,KAAKA,QAAQ,KAAM,MAJlGR,EAAWI,KAAAA,GAAoBG,KAAAF,EAAAF,KAAAM,GAAAD,QAAA,KAAA,KAAAA,QAAA,KAAA,MAGnCH,EAAAC,UAAAI,WAAAC,KAAAN,EAAAC,UAAAM,GAAAA,EAAAC,WAAA,IAKAR,EAAqBF,KAAKM,GAAKC,WAAWC,KAAKN,EAAqBF,KAAKM,GAAIG,GAAKA,EAAEC,WAAW,IAC/F,IAAK,MAAMC,KAAOT,EAAqBD,mBAAoB,CAL3DC,IAAAA,EAAqBC,EAAiBD,mBAAqBC,GAC3DD,EAA+BE,mBAAKF,GAAqBF,CAOjDM,GAAIC,WAAWC,KAAKJ,KAAKQ,EAASN,GAAGD,QAAQ,KAAM,KAAKA,QAAQ,KAAM,MAAOI,GAAKA,EAAEC,WAAW,IALvGR,KAAoBU,EAACT,MAIjB,OAFChB,KAAMwB,kBAAOT,GAAqBD,KAAvCY,IACQD,MAAQE,uBAAwBb,uBAApC,IAAAd,KAAA4B,yBAAAF,MACAX,MAAAA,IACQK,QAAUS,IAACR,MADnB,IAKJO,yBAAuBb,GACnBe,GAAAA,KAAMH,SACPI,OAAM,EAFT/B,KAAAgC,UAKA,MA3BJC,EAAA,CA6BHC,eAFOC,OAAAL,MAAAM,EAAA,MAAA,2CAAA,sBAWAV,YAAa,CARrBE,GAAAA,EAAyBF,GACZzB,MAAUyB,EAAAP,GACRkB,KAAPX,EAAAW,KACHC,SAAA,CAUWC,kBAAmBC,KAAKC,OAAOC,gBAAgB,IAAItB,WAAWM,EAAYY,SAASC,qBAT/FI,eAAAH,KAAAC,OAAAC,gBAAA,IAAAtB,WAAAM,EAAAY,SAAAK,qBAIIjB,MAAAA,kBAAa1B,KAAAD,eAAAkC,EAAA,CAAAK,EAAAM,KAMLD,GALAjB,EAAYP,OACTO,KAAAA,WAFEmB,YAAAP,EAAAQ,MAGHpB,KAAAA,WAHGxB,EAAA,sBAIDF,KAAEI,gBAENuC,EAAcI,SAAON,CAFf,MAAAO,EAAAV,EAAAS,SAAAE,MAAA,kBAJDC,EAAAC,MAAA9B,KAAA+B,SAAAC,SAAAC,IAAAC,GAAAA,EAAAC,aAAA,QAAAC,OAAAC,GAAAA,GAAAA,EAAAC,OAAA,GAWTrB,GAASQ,GACJ3C,IAAW0C,MAAAA,KAAYP,EAC5B,IAAoBY,EAAAU,SAApBC,GAAA,CACA,IAAAN,EAAAH,SAAAU,cAAA,UACHP,EAAAQ,aAAA,MAAAF,GAWeT,SAASY,KAAKC,YAAYV,SALtCzB,MAAaoC,eAAA5B,EAAAS,UAGD/C,KAAAmE,WAUfC,wBAAArD,GAWL,MAAMW,QAAoB2C,UAAU3C,YAAY4C,OAAO,CAV9CH,UAALpD,IAzBJgB,MAAAwC,IA2BHC,QAAA3C,IAAA0C,KAEL,IAAA7C,EACA,KAAA,+BAEA,OAAAA,EAG+DM,UAGnDwC,KAAOvE,UAAP,EAHJJ,oBAAAQ,QAAAoE,OAAA,IAAA,IASHN,SACDnE,KAAAC,UAAA,EACJJ,oBAAAQ,QAAAoE,OAAA,IAAA,GAKQL,gCAAAM,GACA7E,MAAAA,EAAoBQ,oBAApBA,QAAAI,KAAA,sBACH,IAAAkE,EAAA,GACD,IAAA,MAAAlD,KAAAf,EAAAI,mBAEJW,EAAAN,GAAAD,QAAA,YAAA,MAAAwD,EAAAxD,QAAA,YAAA,KACAyD,EAAAC,KAAAnD,GAoBQf,EAAWI,mBAAqB6D,EAlB9B9E,oBAAGQ,QAAAI,KAAA,qBAAAC,IAGRb,oBAAAQ,QAAAH,EAAA,oBACD,IAAAL","file":"WebAuthnFormHandler.min.js","sourcesContent":["\"use strict\";\nclass WebAuthnFormHandler {\n    constructor() {\n        this.attachEndpoint = 'authentication/attach-web-authn-credentials';\n        this.disabled = false;\n        this.$container = $('#webauthn-settings');\n        this.attachEvents();\n    }\n    attachEvents() {\n        WebAuthnFormHandler.$button = $('#attach-webauthn');\n        WebAuthnFormHandler.$button.on('click', (ev) => {\n            ev.stopImmediatePropagation();\n            const $button = $(ev.target);\n            const optionData = $button.data('credential-options');\n            // Sort-of deep copy\n            const keyCredentialOptions = Object.assign(Object.assign({}, optionData), { user: Object.assign({}, optionData.user) });\n            if (optionData.excludeCredentials) {\n                keyCredentialOptions.excludeCredentials = [...optionData.excludeCredentials];\n            }\n            // proprietary base 64 decode, for some reason\n            keyCredentialOptions.challenge = atob(keyCredentialOptions.challenge.replace(/-/g, '+').replace(/_/g, '/'));\n            keyCredentialOptions.user.id = atob(keyCredentialOptions.user.id.replace(/-/g, '+').replace(/_/g, '/'));\n            // Unpack to binary data\n            keyCredentialOptions.challenge = Uint8Array.from(keyCredentialOptions.challenge, c => c.charCodeAt(0));\n            keyCredentialOptions.user.id = Uint8Array.from(keyCredentialOptions.user.id, c => c.charCodeAt(0));\n            for (const idx in keyCredentialOptions.excludeCredentials) {\n                let excluded = keyCredentialOptions.excludeCredentials[idx];\n                keyCredentialOptions.excludeCredentials[idx] = {\n                    id: Uint8Array.from(atob(excluded.id.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0)),\n                    type: excluded.type\n                };\n            }\n            this.createCredentials(keyCredentialOptions).then((credentials) => {\n                Craft.elevatedSessionManager.requireElevatedSession(() => this.attachWebAuthnCredential(credentials));\n            }).catch((err) => {\n                console.log(err);\n            });\n            return false;\n        });\n    }\n    attachWebAuthnCredential(credentials) {\n        if (this.disabled) {\n            return false;\n        }\n        this.disable();\n        const credentialName = prompt(Craft.t('app', 'Please enter a name for the credentials'), 'Secure credentials');\n        const requestData = {\n            credentialName: credentialName,\n            credentials: {\n                id: credentials.id,\n                rawId: credentials.id,\n                type: credentials.type,\n                response: {\n                    attestationObject: btoa(String.fromCharCode(...new Uint8Array(credentials.response.attestationObject))),\n                    clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(credentials.response.clientDataJSON))),\n                }\n            }\n        };\n        Craft.postActionRequest(this.attachEndpoint, requestData, (response, textStatus) => {\n            if (response.html) {\n                this.$container.replaceWith(response.html);\n                this.$container = $('#webauthn-settings');\n                this.attachEvents();\n            }\n            if (response.footHtml) {\n                const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                const existingSources = Array.from(document.scripts).map(node => node.getAttribute('src')).filter(val => val && val.length > 0);\n                // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                // So roll our own JS file append-thing.\n                if (jsFiles) {\n                    for (const jsFile of jsFiles) {\n                        if (!existingSources.includes(jsFile)) {\n                            let node = document.createElement('script');\n                            node.setAttribute('src', jsFile);\n                            document.body.appendChild(node);\n                        }\n                    }\n                    // If that fails, use Craft's thing.\n                }\n                else {\n                    Craft.appendFootHtml(response.footHtml);\n                }\n            }\n            this.enable();\n        });\n    }\n    /**\n     * Get the WebAuthn server options based on a random string and user info.\n     *\n     * @param randomString\n     * @param userInfo\n     */\n    async createCredentials(keyCredentialOptions) {\n        const credentials = await navigator.credentials.create({\n            publicKey: keyCredentialOptions\n        }).catch((err) => {\n            console.log(err);\n        });\n        if (!credentials) {\n            throw \"Failed to create credentials\";\n        }\n        return credentials;\n    }\n    /**\n     * Disable the setting fields.\n     *\n     * @protected\n     */\n    disable() {\n        this.disabled = true;\n        WebAuthnFormHandler.$button.fadeTo(100, 0.5);\n    }\n    /**\n     * Enable the setting fields.\n     *\n     * @protected\n     */\n    enable() {\n        this.disabled = false;\n        WebAuthnFormHandler.$button.fadeTo(100, 1);\n    }\n    /**\n     * Remove an excluded credential by its id.\n     *\n     * @param credentialId\n     */\n    static removeExcludedCredential(credentialId) {\n        const optionData = WebAuthnFormHandler.$button.data('credential-options');\n        let newExcluded = [];\n        for (const excluded of optionData.excludeCredentials) {\n            // Adjust for the proprietary base64 encode thing.\n            if (excluded.id.replace(/[-_=+\\/]/g, '') !== credentialId.replace(/[-_=+\\/]/g, '')) {\n                newExcluded.push(excluded);\n            }\n        }\n        optionData.excludeCredentials = newExcluded;\n        WebAuthnFormHandler.$button.data('credential-options', optionData);\n    }\n}\nWebAuthnFormHandler.$button = $('#attach-webauthn');\nnew WebAuthnFormHandler();\n"]}