{"version":3,"sources":["edituser/src/WebAuthnFormHandler.js"],"names":["WebAuthnFormHandler","constructor","attachEndpoint","this","disabled","$","$button","$container","attachEvents","on","ev","stopImmediatePropagation","target","data","optionData","Object","assign","user","excludeCredentials","keyCredentialOptions","challenge","atob","replace","id","Uint8Array","from","c","charCodeAt","idx","excluded","credentials","elevatedSessionManager","attachWebAuthnCredential","createCredentials","catch","console","requestData","credentialName","prompt","Craft","t","rawId","attestationObject","btoa","String","fromCharCode","response","clientDataJSON","textStatus","replaceWith","html","enable","[object Object]","navigator","create","publicKey","err","log","disable","fadeTo"],"mappings":"AAAA,aACA,MAAMA,oBAANC,cACIA,KAAWC,eAAG,8CACVC,KAAKD,UAAL,EACAC,KAAKC,QAAWC,EAAhB,oBACAF,KAAKG,WAAYD,EAAA,sBACjBF,KAAKI,eAERC,eAEGL,KAAKG,QAAQG,GAAG,QAAUC,IAD9BF,EAAYG,2BACHL,MACEK,EADPN,EAA0BK,EAADE,QACrBC,KAAA,sBAEMC,EAA0BC,OAAAC,OAAAD,OAChCC,OAAA,GAAAF,GAAA,CAAAG,KAAAF,OAAAC,OAAA,GAAAF,EAAAG,QAEIH,EAAWI,qBADTC,EAAuBJ,mBAAqBC,IAAPF,EAAkBA,qBAK7DK,EAAqBC,UAAYC,KAAKF,EAAqBC,UAAUE,QAAQ,KAAM,KAAKA,QAAQ,KAAM,MAJlGR,EAAWI,KAAAA,GAAoBG,KAAAF,EAAAF,KAAAM,GAAAD,QAAA,KAAA,KAAAA,QAAA,KAAA,MAGnCH,EAAAC,UAAAI,WAAAC,KAAAN,EAAAC,UAAAM,GAAAA,EAAAC,WAAA,IAKAR,EAAqBF,KAAKM,GAAKC,WAAWC,KAAKN,EAAqBF,KAAKM,GAAIG,GAAKA,EAAEC,WAAW,IAC/F,IAAK,MAAMC,KAAOT,EAAqBD,mBAAoB,CAL3DC,IAAAA,EAAqBC,EAAiBD,mBAAqBC,GAC3DD,EAA+BE,mBAAKF,GAAqBF,CAOjDM,GAAIC,WAAWC,KAAKJ,KAAKQ,EAASN,GAAGD,QAAQ,KAAM,KAAKA,QAAQ,KAAM,MAAOI,GAAKA,EAAEC,WAAW,IALvGR,KAAoBU,EAACT,MAKX,OAHLjB,KAAMyB,kBAAOT,GAAqBD,KAAvCY,IACQD,MAAQE,uBAAwBb,uBAApC,IAAAf,KAAA6B,yBAAAF,MACAX,MAAAA,IAAqBD,QAAAA,IAAAA,MACbM,IAGXQ,yBAAAF,GAQL,GAAI3B,KAAKC,SAPA6B,OAAAA,EAAL9B,KAEG+B,UAAiBC,MAFpBC,EAAA,CAGAC,eADoBC,OAAAC,MAAAC,EAAA,MAAA,2CAAA,sBAxBxBV,YAAA,CA2BHP,GAAAO,EAAAP,GAWWkB,MAAOX,EAAYP,GAV/BS,KAAAA,EAAyBF,KACZ1B,SAAU,CACfsC,kBAAAC,KAAAC,OAAAC,gBAAA,IAAArB,WAAAM,EAAAgB,SAAAJ,qBACHK,eAAAJ,KAAAC,OAAAC,gBAAA,IAAArB,WAAAM,EAAAgB,SAAAC,qBAGDR,MAAMH,kBAAcjC,KAAAD,eAAAkC,EAAA,CAAAU,EAAAE,KAChBX,EAAgBA,OAChBP,KAAavB,WAAA0C,YAAAH,EAAAI,MACLpB,KAAAA,WADKzB,EAAA,sBAEFyB,KAAAA,gBAEPgB,KAAQK,WASRC,wBAAoBjC,GACpB,MAAKX,QAAL6C,UAAAvB,YAAAwB,OAAA,CACHC,UAAApC,IAaFe,MAAOsB,IAAUrB,QAAQsB,IAAID,KAZ5B,IAAKL,EANT,KAAA,+BASJ,OAAArB,EAoBA4B,UAdMzB,KAAAA,UAAAA,EACF9B,KAAM2B,QAAW6B,OAAG,IAAMN,IAItBF,SACHhD,KAAAC,UAAA,EAmBDD,KAAKG,QAAQqD,OAAO,IAAK,IAhB7B,IAAA3D","file":"WebAuthnFormHandler.min.js","sourcesContent":["\"use strict\";\nclass WebAuthnFormHandler {\n    constructor() {\n        this.attachEndpoint = 'authentication/attach-web-authn-credentials';\n        this.disabled = false;\n        this.$button = $('#attach-webauthn');\n        this.$container = $('#webauthn-settings');\n        this.attachEvents();\n    }\n    attachEvents() {\n        this.$button.on('click', (ev) => {\n            ev.stopImmediatePropagation();\n            const $button = $(ev.target);\n            const optionData = $button.data('credential-options');\n            // Sort-of deep copy\n            const keyCredentialOptions = Object.assign(Object.assign({}, optionData), { user: Object.assign({}, optionData.user) });\n            if (optionData.excludeCredentials) {\n                keyCredentialOptions.excludeCredentials = [...optionData.excludeCredentials];\n            }\n            // proprietary base 64 decode, for some reason\n            keyCredentialOptions.challenge = atob(keyCredentialOptions.challenge.replace(/-/g, '+').replace(/_/g, '/'));\n            keyCredentialOptions.user.id = atob(keyCredentialOptions.user.id.replace(/-/g, '+').replace(/_/g, '/'));\n            // Unpack to binary data\n            keyCredentialOptions.challenge = Uint8Array.from(keyCredentialOptions.challenge, c => c.charCodeAt(0));\n            keyCredentialOptions.user.id = Uint8Array.from(keyCredentialOptions.user.id, c => c.charCodeAt(0));\n            for (const idx in keyCredentialOptions.excludeCredentials) {\n                let excluded = keyCredentialOptions.excludeCredentials[idx];\n                keyCredentialOptions.excludeCredentials[idx] = {\n                    id: Uint8Array.from(atob(excluded.id.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0)),\n                    type: excluded.type\n                };\n            }\n            this.createCredentials(keyCredentialOptions).then((credentials) => {\n                Craft.elevatedSessionManager.requireElevatedSession(() => this.attachWebAuthnCredential(credentials));\n            }).catch((err) => { console.log(err); });\n            return false;\n        });\n    }\n    attachWebAuthnCredential(credentials) {\n        if (this.disabled) {\n            return false;\n        }\n        this.disable();\n        const credentialName = prompt(Craft.t('app', 'Please enter a name for the credentials'), 'Secure credentials');\n        const requestData = {\n            credentialName: credentialName,\n            credentials: {\n                id: credentials.id,\n                rawId: credentials.id,\n                type: credentials.type,\n                response: {\n                    attestationObject: btoa(String.fromCharCode(...new Uint8Array(credentials.response.attestationObject))),\n                    clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(credentials.response.clientDataJSON))),\n                }\n            }\n        };\n        Craft.postActionRequest(this.attachEndpoint, requestData, (response, textStatus) => {\n            if (response.html) {\n                this.$container.replaceWith(response.html);\n                this.$container = $('#webauthn-settings');\n                this.attachEvents();\n            }\n            this.enable();\n        });\n    }\n    /**\n     * Get the WebAuthn server options based on a random string and user info.\n     *\n     * @param randomString\n     * @param userInfo\n     */\n    async createCredentials(keyCredentialOptions) {\n        const credentials = await navigator.credentials.create({\n            publicKey: keyCredentialOptions\n        }).catch((err) => { console.log(err); });\n        if (!credentials) {\n            throw \"Failed to create credentials\";\n        }\n        return credentials;\n    }\n    /**\n     * Disable the setting fields.\n     *\n     * @protected\n     */\n    disable() {\n        this.disabled = true;\n        this.$button.fadeTo(100, 0.5);\n    }\n    /**\n     * Enable the setting fields.\n     *\n     * @protected\n     */\n    enable() {\n        this.disabled = false;\n        this.$button.fadeTo(100, 1);\n    }\n}\nnew WebAuthnFormHandler();\n"]}