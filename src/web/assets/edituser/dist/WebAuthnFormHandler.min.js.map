{"version":3,"sources":["edituser/src/WebAuthnFormHandler.js"],"names":["WebAuthnFormHandler","constructor","on","ev","stopImmediatePropagation","target","$button","keyCredentialOptions","from","data","c","charCodeAt","challenge","Uint8Array","id","window","location","hostname","name","user","displayName","pubKeyCredParams","alg","type","clientDataJSON","createCredentials","then","credentials","requestData","credentialId","attestationObject","btoa","String","fromCharCode","response","[object Object]","navigator","create","publicKey","catch","err","alert"],"mappings":"AAAA,aACA,MAAMA,oBAANC,cACIA,EAAAA,oBAAcC,GAAA,QAAAC,IACRA,EAAAC,2BACKA,MAAAA,EAAAA,EAAAA,EAAHC,QACMC,EAAN,CACMC,UAAAA,WAAuBC,KAAAF,EAAAG,KAAA,aAAAC,GAAAA,EAAAC,WAAA,IACzBC,GAAWC,CACPC,GAAAC,OAAAC,SAAAC,SACUC,KAACF,EAASC,KADpB,YAFqBE,KAAA,CAMnBC,YAAAd,EAAAG,KAAA,gBACFW,KAAad,EAAQG,KAAK,QACpBH,GAAQG,WAARD,KAFJF,EAAAG,KAAA,OAAAC,GAAAA,EAAAC,WAAA,KANmBU,iBAAA,CAAA,CAAAC,KAAA,EAAAC,KAAA,eAWzBF,QAAgB,KAOZG,OAP0BD,KAAME,kBAAAlB,GAAAmB,KAAAC,IAXX,MAAAC,EAAA,CAYhBC,aAAAF,EAAAb,GAZbgB,kBAAAC,KAAAC,OAAAC,gBAAA,IAAApB,WAAAc,EAAAO,SAAAJ,qBAcKL,eAAkBlB,KAAAA,OAAAA,gBAA4BoB,IAADd,WAAiBc,EAAAO,SAAAV,mBAE3DK,QAAcF,IAAAA,MAEdH,IASpBW,wBAAA5B,GACA,MAAAoB,QAAAS,UAAAT,YAAAU,OAAA,CACAC,UAAA/B,IACAgC,MAAAC,IAAAC,MAAAD,KAKQ,IAAKb,EACD,KAAM,+BAJV,OAAMA,GAEcc,IAAAA","file":"WebAuthnFormHandler.min.js","sourcesContent":["\"use strict\";\nclass WebAuthnFormHandler {\n    constructor() {\n        $('#attach-webauthn').on('click', (ev) => {\n            ev.stopImmediatePropagation();\n            const $button = $(ev.target);\n            const keyCredentialOptions = {\n                challenge: Uint8Array.from($button.data('challenge'), c => c.charCodeAt(0)),\n                rp: {\n                    id: window.location.hostname,\n                    name: $button.data('rp-name'),\n                },\n                user: {\n                    displayName: $button.data('display-name'),\n                    name: $button.data('name'),\n                    id: Uint8Array.from($button.data('uid'), c => c.charCodeAt(0))\n                },\n                pubKeyCredParams: [{ alg: -7, type: \"public-key\" }],\n                timeout: 60000\n            };\n            this.createCredentials(keyCredentialOptions).then((credentials) => {\n                const requestData = {\n                    credentialId: credentials.id,\n                    attestationObject: btoa(String.fromCharCode(...new Uint8Array(credentials.response.attestationObject))),\n                    clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(credentials.response.clientDataJSON))),\n                };\n                console.log(requestData);\n            });\n            return false;\n        });\n    }\n    /**\n     * Get the WebAuthn server options based on a random string and user info.\n     *\n     * @param randomString\n     * @param userInfo\n     */\n    async createCredentials(keyCredentialOptions) {\n        const credentials = await navigator.credentials.create({\n            publicKey: keyCredentialOptions\n        }).catch((err) => { alert(err); });\n        if (!credentials) {\n            throw \"Failed to create credentials\";\n        }\n        return credentials;\n    }\n}\nnew WebAuthnFormHandler();\n"]}