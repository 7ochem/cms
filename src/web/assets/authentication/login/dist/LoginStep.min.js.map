{"version":3,"sources":["authentication/login/src/LoginStep.js"],"names":["LoginStep","AuthenticationStep","constructor","this","loginNameSelector","passwordSelector","Craft","$newPasswordInput","onToggleInput","off","getPasswordInput","replaceWith","bind","$loginForm","on","onInput","validate","loginNameVal","getLoginNameInput","val","length","window","useEmailAsUsername","t","match","passwordLength","minPasswordLength","attribute","maxPasswordLength","max","loginName","password","find","returnFormData"],"mappings":"AAAA,aACA,MAAMA,kBAAkBC,mBAAxBC,cACIA,MAAW,sCACPC,KAAMC,kBAAA,aACND,KAAKC,iBAAoB,YACzB,IAAKC,MAAAA,cAAmBF,KAAAE,iBAAxB,CACIC,cAAoBC,IACpBC,KAAgBD,mBAADE,IAAuB,SAC7BC,KAAAA,mBAAuBC,YAA5BJ,GACKG,KAAAA,mBAAmBC,GAAxB,QAAoCJ,KAAAA,QAApCK,KAAAT,UAHRA,KAAAU,WAAAC,GAAA,QAAAX,KAAAC,kBAAAD,KAAAY,QAAAH,KAAAT,OAOAA,KAAKU,WAAcC,GAAA,QAASX,KAAKC,iBAAmBD,KAAKY,QAAQH,KAAKT,OAEzEa,WAEG,MAAMC,EAAed,KAAKe,oBAAoBC,MADlDH,GAAW,IAAHC,EAAGG,OAIH,OAAIC,OAAOC,mBAFEF,MAAbG,EAAA,MAA2B,kBAEhBD,MAAAA,EAAAA,MAAAA,8BAMf,GAAID,OAAOC,qBAAuBL,EAAaO,MAAM,YAHjD,OAAaD,MAAEA,EAAR,MAAe,kBAM1B,MAAME,EAAiBtB,KAAKO,mBAAmBS,MAAMC,OAHjDC,OAAAA,EAAOC,OAAPI,kBACaH,MAAEA,EAAR,MAAe,qGAAtB,CACHI,UAAArB,MAAAiB,EAAA,MAAA,YACKE,IAAAA,OAAiBC,sBAIfC,EAAmBN,OAAOO,oBAC1BtB,MAAAiB,EAAA,MAAA,oGAAA,CACKF,UAAOK,MAAAA,EAAAA,MAAAA,YAGpBG,IAAAR,OAAAO,oBAGQD,iBACA,MAAA,CACGG,UAASF,KAAAA,oBAAAA,MAHhBG,SAAA5B,KAAAO,mBAAAS,OAMJD,oBACH,OAAAf,KAAAU,WAAAmB,KAAA7B,KAAAC,mBACD6B,mBACI,OAAO9B,KAAAU,WAAAmB,KAAA7B,KAAAE,mBAAA,IAAAL","file":"LoginStep.min.js","sourcesContent":["\"use strict\";\nclass LoginStep extends AuthenticationStep {\n    constructor() {\n        super('craft\\\\authentication\\\\type\\\\Login');\n        this.loginNameSelector = '#loginName';\n        this.passwordSelector = '#password';\n        new Craft.PasswordInput(this.passwordSelector, {\n            onToggleInput: ($newPasswordInput) => {\n                this.getPasswordInput().off('input');\n                this.getPasswordInput().replaceWith($newPasswordInput);\n                this.getPasswordInput().on('input', this.onInput.bind(this));\n            }\n        });\n        this.$loginForm.on('input', this.loginNameSelector, this.onInput.bind(this));\n        this.$loginForm.on('input', this.passwordSelector, this.onInput.bind(this));\n    }\n    validate() {\n        const loginNameVal = this.getLoginNameInput().val();\n        if (loginNameVal.length === 0) {\n            // @ts-ignore\n            if (window.useEmailAsUsername) {\n                return Craft.t('app', 'Invalid email.');\n            }\n            return Craft.t('app', 'Invalid username or email.');\n        }\n        // @ts-ignore\n        if (window.useEmailAsUsername && !loginNameVal.match('.+@.+\\..+')) {\n            return Craft.t('app', 'Invalid email.');\n        }\n        const passwordLength = this.getPasswordInput().val().length;\n        // @ts-ignore\n        if (passwordLength < window.minPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at least {min, number} {min, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                min: window.minPasswordLength,\n            });\n        }\n        // @ts-ignore\n        if (passwordLength > window.maxPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at most {max, number} {max, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                max: window.maxPasswordLength,\n            });\n        }\n        return true;\n    }\n    returnFormData() {\n        return {\n            loginName: this.getLoginNameInput().val(),\n            password: this.getPasswordInput().val(),\n        };\n    }\n    getLoginNameInput() {\n        return this.$loginForm.find(this.loginNameSelector);\n    }\n    getPasswordInput() {\n        return this.$loginForm.find(this.passwordSelector);\n    }\n}\nnew LoginStep();\n"]}