{"version":3,"sources":["authentication/credentials/src/Credentials.js"],"names":["Credentials","AuthenticationStep","constructor","this","$loginNameInput","$","$passwordInput","stepType","parents","data","prepareData","bind","Craft","$newPasswordInput","onToggleInput","onInput","on","validate","loginNameVal","val","length","window","useEmailAsUsername","t","match","passwordLength","minPasswordLength","attribute","maxPasswordLength","max","loginName","password"],"mappings":"AAAA,aACA,MAAMA,oBAAoBC,mBAA1BC,cACIA,QACIC,KAAAC,gBAAAC,EAAA,cACAF,KAAKC,eAAoBC,EAAA,aACzBF,KAAKG,SAAL,2CACAH,KAAKI,gBAAWC,QAAA,yBAAhBC,KAAA,UAAAN,KAAAO,YAAAC,KAAAR,OACA,IAAKC,MAAAA,cAALD,KAA6BG,eAAA,CACzBM,cAAoBC,IACpBC,KAAgBD,eAAAA,IAAD,SACNP,KAAAA,eAAmBO,EACnBP,KAAAA,eAAiBO,GAAAA,QAAtBV,KAAAY,QAAAJ,KAAAR,UAHRA,KAAAC,gBAAAY,GAAA,QAAAb,KAAAY,QAAAJ,KAAAR,OAOAA,KAAKC,eAAmBY,GAAA,QAASb,KAAKY,QAAQJ,KAAKR,OAEtDc,WAEG,MAAMC,EAAef,KAAKC,gBAAgBe,MAD9CF,GAAW,IAAHC,EAAGE,OAIH,OAAIC,OAAOC,mBAFEF,MAAbG,EAAA,MAA2B,kBAEhBD,MAAAA,EAAAA,MAAAA,8BAMf,GAAID,OAAOC,qBAAuBJ,EAAaM,MAAM,YAHjD,OAAaD,MAAEA,EAAR,MAAe,kBAM1B,MAAME,EAAiBtB,KAAKG,eAAea,MAAMC,OAH7CC,OAAAA,EAAOC,OAAPI,kBACaH,MAAEA,EAAR,MAAe,qGAAtB,CACHI,UAAAf,MAAAW,EAAA,MAAA,YACKE,IAAAA,OAAiBC,sBAIfC,EAAmBN,OAAOO,oBAC1BhB,MAAAW,EAAA,MAAA,oGAAA,CACKF,UAAOK,MAAAA,EAAAA,MAAAA,YAGpBG,IAAAR,OAAAO,oBAGQD,iBACA,MAAA,CACGG,UAASF,KAAAA,gBAAAA,MAHhBG,SAAA5B,KAAAG,eAAAa,QAOP,IAAAnB","file":"Credentials.min.js","sourcesContent":["\"use strict\";\nclass Credentials extends AuthenticationStep {\n    constructor() {\n        super();\n        this.$loginNameInput = $('#loginName');\n        this.$passwordInput = $('#password');\n        this.stepType = \"craft\\\\authentication\\\\type\\\\Credentials\";\n        this.$loginNameInput.parents('.authentication-chain').data('handler', this.prepareData.bind(this));\n        new Craft.PasswordInput(this.$passwordInput, {\n            onToggleInput: ($newPasswordInput) => {\n                this.$passwordInput.off('input');\n                this.$passwordInput = $newPasswordInput;\n                this.$passwordInput.on('input', this.onInput.bind(this));\n            }\n        });\n        this.$loginNameInput.on('input', this.onInput.bind(this));\n        this.$passwordInput.on('input', this.onInput.bind(this));\n    }\n    validate() {\n        const loginNameVal = this.$loginNameInput.val();\n        if (loginNameVal.length === 0) {\n            // @ts-ignore\n            if (window.useEmailAsUsername) {\n                return Craft.t('app', 'Invalid email.');\n            }\n            return Craft.t('app', 'Invalid username or email.');\n        }\n        // @ts-ignore\n        if (window.useEmailAsUsername && !loginNameVal.match('.+@.+\\..+')) {\n            return Craft.t('app', 'Invalid email.');\n        }\n        const passwordLength = this.$passwordInput.val().length;\n        // @ts-ignore\n        if (passwordLength < window.minPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at least {min, number} {min, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                min: window.minPasswordLength,\n            });\n        }\n        // @ts-ignore\n        if (passwordLength > window.maxPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at most {max, number} {max, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                max: window.maxPasswordLength,\n            });\n        }\n        return true;\n    }\n    returnFormData() {\n        return {\n            loginName: this.$loginNameInput.val(),\n            password: this.$passwordInput.val(),\n        };\n    }\n}\nnew Credentials();\n"]}