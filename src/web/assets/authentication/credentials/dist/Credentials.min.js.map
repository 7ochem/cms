{"version":3,"sources":["authentication/credentials/src/Credentials.js"],"names":["Credentials","AuthenticationStep","constructor","this","$loginNameInput","$","$passwordInput","stepType","parents","length","Craft","isRecoveryStep","registerStepHandler","bind","LoginForm","prepareData","$newPasswordInput","onToggleInput","onInput","on","validate","loginNameVal","val","window","useEmailAsUsername","t","match","passwordLength","minPasswordLength","attribute","maxPasswordLength","max","loginName","password"],"mappings":"AAAA,aACA,MAAMA,oBAAoBC,mBAA1BC,cACIA,QACIC,KAAAC,gBAAAC,EAAA,cACAF,KAAKC,eAAoBC,EAAA,aACzBF,KAAKG,SAAL,2CACA,MAAKC,EAAWJ,KAAAC,gBAAAI,QAAA,uBAAhBC,OAAA,EACAC,MAAMC,UAAcC,oBAAQR,KAAgBI,YAAQK,KAAAV,MAAAQ,GACpDD,IAAMI,MAAAA,cAAUF,KAAAA,eAAyBG,CACrCL,cAAoBM,IACpBC,KAAgBD,eAAAA,IAAD,SACNV,KAAAA,eAAmBU,EACnBV,KAAAA,eAAiBU,GAAAA,QAAtBb,KAAAe,QAAAL,KAAAV,UAHRA,KAAAC,gBAAAe,GAAA,QAAAhB,KAAAe,QAAAL,KAAAV,OAOAA,KAAKC,eAAmBe,GAAA,QAAShB,KAAKe,QAAQL,KAAKV,OAEtDiB,WAEG,MAAMC,EAAelB,KAAKC,gBAAgBkB,MAD9CF,GAAW,IAAHC,EAAGZ,OAIH,OAAIc,OAAOC,mBAFEf,MAAbgB,EAAA,MAA2B,kBAEhBD,MAAAA,EAAAA,MAAAA,8BAMf,GAAID,OAAOC,qBAAuBH,EAAaK,MAAM,YAHjD,OAAaD,MAAEA,EAAR,MAAe,kBAM1B,MAAME,EAAiBxB,KAAKG,eAAegB,MAAMb,OAH7Cc,OAAAA,EAAOC,OAAPI,kBACaH,MAAEA,EAAR,MAAe,qGAAtB,CACHI,UAAAnB,MAAAe,EAAA,MAAA,YACKE,IAAAA,OAAiBC,sBAIfC,EAAmBN,OAAOO,oBAC1BpB,MAAAe,EAAA,MAAA,oGAAA,CACKF,UAAOK,MAAAA,EAAAA,MAAAA,YAGpBG,IAAAR,OAAAO,oBAGQD,iBACA,MAAA,CACGG,UAASF,KAAAA,gBAAAA,MAHhBG,SAAA9B,KAAAG,eAAAgB,QAOP,IAAAtB","file":"Credentials.min.js","sourcesContent":["\"use strict\";\nclass Credentials extends AuthenticationStep {\n    constructor() {\n        super();\n        this.$loginNameInput = $('#loginName');\n        this.$passwordInput = $('#password');\n        this.stepType = \"craft\\\\authentication\\\\type\\\\Credentials\";\n        const isRecoveryStep = this.$loginNameInput.parents('#recovery-container').length > 0;\n        Craft.LoginForm.registerStepHandler(this.prepareData.bind(this), isRecoveryStep);\n        new Craft.PasswordInput(this.$passwordInput, {\n            onToggleInput: ($newPasswordInput) => {\n                this.$passwordInput.off('input');\n                this.$passwordInput = $newPasswordInput;\n                this.$passwordInput.on('input', this.onInput.bind(this));\n            }\n        });\n        this.$loginNameInput.on('input', this.onInput.bind(this));\n        this.$passwordInput.on('input', this.onInput.bind(this));\n    }\n    validate() {\n        const loginNameVal = this.$loginNameInput.val();\n        if (loginNameVal.length === 0) {\n            // @ts-ignore\n            if (window.useEmailAsUsername) {\n                return Craft.t('app', 'Invalid email.');\n            }\n            return Craft.t('app', 'Invalid username or email.');\n        }\n        // @ts-ignore\n        if (window.useEmailAsUsername && !loginNameVal.match('.+@.+\\..+')) {\n            return Craft.t('app', 'Invalid email.');\n        }\n        const passwordLength = this.$passwordInput.val().length;\n        // @ts-ignore\n        if (passwordLength < window.minPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at least {min, number} {min, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                min: window.minPasswordLength,\n            });\n        }\n        // @ts-ignore\n        if (passwordLength > window.maxPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at most {max, number} {max, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                max: window.maxPasswordLength,\n            });\n        }\n        return true;\n    }\n    returnFormData() {\n        return {\n            loginName: this.$loginNameInput.val(),\n            password: this.$passwordInput.val(),\n        };\n    }\n}\nnew Credentials();\n"]}