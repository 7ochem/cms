"use strict";class WebAuthn extends AuthenticationStep{constructor(){super("craft\\authentication\\type\\mfa\\WebAuthn"),this.$button=$("#verify-webauthn"),Craft.LoginForm.$submit.hide().click()}validate(){return!0}getVerificationCodeInput(){return $()}async returnFormData(){const t=this.$button.data("request-options"),e=Object.assign({},t);t.allowCredentials&&(e.allowCredentials=[...t.allowCredentials]),e.challenge=atob(e.challenge.replace(/-/g,"+").replace(/_/g,"/")),e.challenge=Uint8Array.from(e.challenge,t=>t.charCodeAt(0));for(const t in e.allowCredentials){let a=e.allowCredentials[t];e.allowCredentials[t]={id:Uint8Array.from(atob(a.id.replace(/-/g,"+").replace(/_/g,"/")),t=>t.charCodeAt(0)),type:a.type}}let a;try{a=await navigator.credentials.get({publicKey:e})}catch(t){throw console.log(t),Craft.t("app","Failed to authenticate")}const r=a.response;return{credentialResponse:{id:a.id,rawId:a.id,response:{authenticatorData:btoa(String.fromCharCode(...new Uint8Array(r.authenticatorData))),clientDataJSON:btoa(String.fromCharCode(...new Uint8Array(r.clientDataJSON))),signature:btoa(String.fromCharCode(...new Uint8Array(r.signature))),userHandle:r.userHandle?btoa(String.fromCharCode(...new Uint8Array(r.userHandle))):null},type:a.type}}}}new WebAuthn;
//# sourceMappingURL=WebAuthn.min.js.map
