{"version":3,"sources":["authentication/webauthn/src/WebAuthnStep.js"],"names":["WebAuthnStep","AuthenticationStep","constructor","this","$button","$","validate","getVerificationCodeInput","optionData","data","requestOptions","Object","assign","returnFormData","allowCredentials","challenge","atob","replace","c","charCodeAt","idx","allowed","type","credential","credentials","get","Uint8Array","error","console","log","Craft","t","response","publicKey","id","authenticatorData","btoa","String","fromCharCode","clientDataJSON","signature","userHandle","credentialResponse"],"mappings":"AAAA,aACA,MAAMA,qBAAqBC,mBAA3BC,cACIA,MAAW,8CACPC,KAAMC,QAAAC,EAAA,oBAETC,WAEG,OAAO,EAAPC,2BACH,OAAAF,IACDE,uBACI,MAAAC,EAAAL,KAAAC,QAAAK,KAAA,mBAKMC,EAAiBC,OAAOC,OAAO,GAAIJ,GAHvCK,EAANC,mBACUN,EAAaM,iBAAkB,IAAAN,EACrCM,mBAMAJ,EAAeK,UAAYC,KAAKN,EAAeK,UAAUE,QAAQ,KAAM,KAAKA,QAAQ,KAAM,MAHtFP,EAAeI,UAAAA,WAAuBN,KAAAA,EAAWM,UAAjDI,GAAAA,EAAAC,WAAA,IAEJ,IAAA,MAAAC,KAAAV,EAAAI,iBAAA,CAKI,IAAIO,EAAUX,EAAeI,iBAAiBM,GAC9CV,EAAeI,iBAAiBM,GAAO,CAL3CV,GAAeK,WAAYC,KAAKN,KAAAA,EAAAA,GAAeK,QAAf,KAAyBE,KAAQA,QAAjC,KAA4CA,MAA5CC,GAAAA,EAAhCC,WACA,IAMQG,KAAMD,EAAQC,MAJtB,IAAKC,EACD,IACAb,QAAeI,UAAfU,YAAuCC,IAAA,CAC/BC,UAAAhB,IAGX,MAAAiB,GACGJ,MAOAK,QAAQC,IAAIF,GAPhBG,MAAAC,EAAA,MAAA,0BACI,MAAAC,EAAAT,EAAAS,SACAT,MAAAA,CACIU,mBAAWvB,CADfwB,GAAAX,EAAAW,GAIGP,MAAOJ,EAAAW,GACFL,SAAR,CACcM,kBAAOC,KAAAC,OAAfC,gBAAN,IAAAZ,WAAAM,EAAAG,qBACHI,eAAAH,KAAAC,OAAAC,gBAAA,IAAAZ,WAAAM,EAAAO,kBASWC,UAAWJ,KAAKC,OAAOC,gBAAgB,IAAIZ,WAAWM,EAASQ,aAR7DC,WAAcT,EAA5BS,WAAAL,KAAAC,OAAAC,gBAAA,IAAAZ,WAAAM,EAAAS,cAAA,MAEIC,KAAAA,EAAoBpB,QAKZiB,IAAAA","file":"WebAuthnStep.min.js","sourcesContent":["\"use strict\";\nclass WebAuthnStep extends AuthenticationStep {\n    constructor() {\n        super('craft\\\\authentication\\\\type\\\\mfa\\\\WebAuthn');\n        this.$button = $('#verify-webauthn');\n    }\n    validate() {\n        return true;\n    }\n    getVerificationCodeInput() {\n        return $();\n    }\n    async returnFormData() {\n        const optionData = this.$button.data('request-options');\n        // Sort-of deep copy\n        const requestOptions = Object.assign({}, optionData);\n        if (optionData.allowCredentials) {\n            requestOptions.allowCredentials = [...optionData.allowCredentials];\n        }\n        // proprietary base 64 decode, for some reason\n        requestOptions.challenge = atob(requestOptions.challenge.replace(/-/g, '+').replace(/_/g, '/'));\n        // Unpack to binary data\n        requestOptions.challenge = Uint8Array.from(requestOptions.challenge, c => c.charCodeAt(0));\n        for (const idx in requestOptions.allowCredentials) {\n            let allowed = requestOptions.allowCredentials[idx];\n            requestOptions.allowCredentials[idx] = {\n                id: Uint8Array.from(atob(allowed.id.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0)),\n                type: allowed.type\n            };\n        }\n        let credential;\n        try {\n            credential = await navigator.credentials.get({\n                publicKey: requestOptions\n            });\n        }\n        catch (error) {\n            console.log(error);\n            throw Craft.t('app', 'Failed to authenticate');\n        }\n        const response = credential.response;\n        return {\n            credentialResponse: {\n                id: credential.id,\n                rawId: credential.id,\n                response: {\n                    authenticatorData: btoa(String.fromCharCode(...new Uint8Array(response.authenticatorData))),\n                    clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(response.clientDataJSON))),\n                    signature: btoa(String.fromCharCode(...new Uint8Array(response.signature))),\n                    userHandle: response.userHandle ? btoa(String.fromCharCode(...new Uint8Array(response.userHandle))) : null,\n                },\n                type: credential.type,\n            }\n        };\n    }\n}\nnew WebAuthnStep();\n"]}