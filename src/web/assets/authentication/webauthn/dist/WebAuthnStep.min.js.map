{"version":3,"sources":["authentication/webauthn/src/WebAuthnStep.js"],"names":["WebAuthnStep","AuthenticationStep","constructor","$button","$","validate","this","addClass","on","onButtonClick","bind","$submit","init","$loginForm","trigger","removeClass","[object Object]","optionData","data","requestOptions","Object","assign","allowCredentials","returnFormData","challenge","atob","replace","Uint8Array","from","c","charCodeAt","allowed","idx","type","credential","navigator","credentials","get","id","Craft","t","response","credentialResponse","publicKey","authenticatorData","btoa","String","fromCharCode","clientDataJSON","signature","userHandle","rawId"],"mappings":"AAAA,aACA,MAAMA,qBAAqBC,mBAA3BC,cACIA,MAAW,8CAEVC,cAAA,OAAAC,EAAA,oBACDC,WAA+C,OAA/BC,KAASH,QAAAI,SAAA,WAAsB,EAE/CF,OACIC,KAAKH,WAAQI,QAAS,UACtBD,KAAOH,QAAPK,GAAA,QAAAF,KAAAG,cAAAC,KAAAJ,OACHA,KAAAK,QAAAJ,SAAA,UACDK,UACIN,KAAKO,QAAWC,IAAAA,QAAQR,KAAxBG,cAAAC,KAAAJ,OACAA,KAAKH,QAAWY,YAAS,UAIzBN,gBACAH,KAAKK,WAAQI,QAAY,UAGjCC,uBACA,MAAAC,EAAAX,KAAAH,QAAAe,KAAA,mBAQcC,EAAiBC,OAAOC,OAAO,GAAIJ,GAP7CR,EAAgBa,mBACPT,EAALS,iBAAA,IAAAL,EAAAK,mBAGEC,EAANC,UAAuBC,KAAAN,EAAAK,UAAAE,QAAA,KAAA,KAAAA,QAAA,KAAA,MAUnBP,EAAeK,UAAYG,WAAWC,KAAKT,EAAeK,UAAWK,GAAKA,EAAEC,WAAW,IAPvF,IAAMX,MAAAA,KAAcA,EAAiBG,iBAArC,CASI,IAAIS,EAAUZ,EAAeG,iBAAiBU,GAR9Cf,EAAWK,iBAAkBU,GAAA,CAC7Bb,GAAcQ,WAACL,KAAAA,KAAoBS,EAAGd,GAAAA,QAAWK,KAAAA,KAAfI,QAAlC,KAAA,MAAAG,GAAAA,EAAAC,WAAA,IAEJG,KAAAF,EAAAE,MACAd,IAAAA,EAEAA,IAWIe,QAAmBC,UAAUC,YAAYC,IAAI,CAVtCL,UAAOb,IAGVmB,MAAIX,GADR,MAEQrB,KAAEyB,QAAQE,YAAAA,UAFlBM,MAAAC,EAAA,MAAA,0BAgBJ,MAAMC,EAAWP,EAAWO,SAE5B,MAAO,CAXHC,mBAAA,CACUJ,GAAGJ,EAAMC,GACfQ,MAAWxB,EAAAA,GADfsB,SAAA,CAIUG,kBAAAC,KAAAC,OAAAC,gBAAA,IAAApB,WAAAc,EAAAG,qBACG7B,eAAY8B,KAAzBC,OAAAC,gBAAA,IAAApB,WAAAc,EAAAO,kBACcC,UAAOJ,KAAAC,OAAAC,gBAArB,IAAApB,WAAAc,EAAAQ,aACHC,WAAAT,EAAAS,WAAAL,KAAAC,OAAAC,gBAAA,IAAApB,WAAAc,EAAAS,cAAA,MACKT,KAAWP,EAAWO,QAKpBU,IAAAA","file":"WebAuthnStep.min.js","sourcesContent":["\"use strict\";\nclass WebAuthnStep extends AuthenticationStep {\n    constructor() {\n        super('craft\\\\authentication\\\\type\\\\mfa\\\\WebAuthn');\n    }\n    get $button() { return $('#verify-webauthn'); }\n    ;\n    validate() {\n        this.$button.addClass('hidden');\n        return true;\n    }\n    init() {\n        this.$loginForm.trigger('submit');\n        this.$button.on('click', this.onButtonClick.bind(this));\n        this.$submit.addClass('hidden');\n    }\n    cleanup() {\n        this.$button.off('click', this.onButtonClick.bind(this));\n        this.$submit.removeClass('hidden');\n    }\n    /**\n     * Submit the form again, when the authentication button is clicked.\n     */\n    onButtonClick() {\n        this.$loginForm.trigger('submit');\n    }\n    ;\n    async returnFormData() {\n        const optionData = this.$button.data('request-options');\n        // Sort-of deep copy\n        const requestOptions = Object.assign({}, optionData);\n        if (optionData.allowCredentials) {\n            requestOptions.allowCredentials = [...optionData.allowCredentials];\n        }\n        // proprietary base 64 decode, for some reason\n        requestOptions.challenge = atob(requestOptions.challenge.replace(/-/g, '+').replace(/_/g, '/'));\n        // Unpack to binary data\n        requestOptions.challenge = Uint8Array.from(requestOptions.challenge, c => c.charCodeAt(0));\n        for (const idx in requestOptions.allowCredentials) {\n            let allowed = requestOptions.allowCredentials[idx];\n            requestOptions.allowCredentials[idx] = {\n                id: Uint8Array.from(atob(allowed.id.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0)),\n                type: allowed.type\n            };\n        }\n        let credential;\n        // Finally, try to get the credentials based on the provided data.\n        try {\n            credential = await navigator.credentials.get({\n                publicKey: requestOptions\n            });\n        }\n        catch (error) {\n            this.$button.removeClass('hidden');\n            throw Craft.t('app', 'Failed to authenticate');\n        }\n        const response = credential.response;\n        // Prep and return the data for the request\n        return {\n            credentialResponse: {\n                id: credential.id,\n                rawId: credential.id,\n                response: {\n                    authenticatorData: btoa(String.fromCharCode(...new Uint8Array(response.authenticatorData))),\n                    clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(response.clientDataJSON))),\n                    signature: btoa(String.fromCharCode(...new Uint8Array(response.signature))),\n                    userHandle: response.userHandle ? btoa(String.fromCharCode(...new Uint8Array(response.userHandle))) : null,\n                },\n                type: credential.type,\n            }\n        };\n    }\n}\nnew WebAuthnStep();\n"]}