{"version":3,"sources":["authentication/webauthn/src/WebAuthnStep.js"],"names":["WebAuthnStep","AuthenticationStep","constructor","this","$button","$","trigger","$loginForm","hide","validate","$submit","addClass","data","requestOptions","Object","assign","optionData","allowCredentials","returnFormData","challenge","replace","Uint8Array","from","c","charCodeAt","allowed","idx","id","atob","type","credential","error","removeClass","Craft","t","response","navigator","publicKey","rawId","btoa","String","fromCharCode","authenticatorData","clientDataJSON","signature","userHandle"],"mappings":"AAAA,aACA,MAAMA,qBAAqBC,mBAA3BC,cACIA,MAAW,8CACPC,KAAMC,QAAAC,EAAA,oBACNF,KAAKC,WAAYE,QAAA,UACjBH,KAAKI,QAAWD,GAAAA,QAAQ,KAAxBH,KAAAI,WAAAD,QAAA,YACAH,KAAKC,QAAWI,OAAqDC,WAExE,OADGN,KAAKO,QAALC,SAAA,WACH,EACDF,uBACI,MAAKL,EAAiBD,KAAAC,QAAtBQ,KAAA,mBAEHC,EAAAC,OAAAC,OAAA,GAAAC,GAKOA,EAAWC,mBAJbC,EAAiBD,iBAAA,IAAAD,EAAAC,mBAGnBJ,EAAMA,UAAwBE,KAAPF,EAAAM,UAAvBC,QAAA,KAAA,KAAAA,QAAA,KAAA,MACIJ,EAAWC,UAAfI,WAAiCC,KAAAT,EAAAM,UAAAI,GAAAA,EAAAC,WAAA,IAC7BX,IAAAA,MAAAA,KAAeI,EAAoBA,iBAAcA,CAErD,IAAAQ,EAAAZ,EAAAI,iBAAAS,GAMIb,EAAeI,iBAAiBS,GAAO,CACnCC,GAAIN,WAAWC,KAAKM,KAAKH,EAAQE,GAAGP,QAAQ,KAAM,KAAKA,QAAQ,KAAM,MAAOG,GAAKA,EAAEC,WAAW,IANtGX,KAAeM,EAAfU,MAUA,IAAIC,EAPJ,IACQL,QAAUZ,UAAeI,YAAiBS,IAA9C,CACAb,UAAeI,IAAf,MAAAc,GAaA,MATH5B,KAAAC,QAAA4B,YAAA,UASSC,MAAMC,EAAE,MAAO,0BAEzB,MAAMC,EAAWL,EAAWK,SATxB,MAAA,CACAL,mBAAmBM,CACfC,GAAWxB,EAAAA,GADfyB,MAAAR,EAAAH,GAIGI,SAAO,CACGC,kBAAbO,KAAAC,OAAAC,gBAAA,IAAApB,WAAAc,EAAAO,qBACcC,eAAOJ,KAAAC,OAAAC,gBAArB,IAAApB,WAAAc,EAAAQ,kBACHC,UAAAL,KAAAC,OAAAC,gBAAA,IAAApB,WAAAc,EAAAS,aAUWC,WAAYV,EAASU,WAAaN,KAAKC,OAAOC,gBAAgB,IAAIpB,WAAWc,EAASU,cAAgB,MAR3GhB,KAAAC,EAAAD,QAKKa,IAAAA","file":"WebAuthnStep.min.js","sourcesContent":["\"use strict\";\nclass WebAuthnStep extends AuthenticationStep {\n    constructor() {\n        super('craft\\\\authentication\\\\type\\\\mfa\\\\WebAuthn');\n        this.$button = $('#verify-webauthn');\n        this.$loginForm.trigger('submit');\n        this.$button.on('click', () => { this.$loginForm.trigger('submit'); });\n        this.$submit.hide();\n    }\n    validate() {\n        this.$button.addClass('hidden');\n        return true;\n    }\n    async returnFormData() {\n        const optionData = this.$button.data('request-options');\n        // Sort-of deep copy\n        const requestOptions = Object.assign({}, optionData);\n        if (optionData.allowCredentials) {\n            requestOptions.allowCredentials = [...optionData.allowCredentials];\n        }\n        // proprietary base 64 decode, for some reason\n        requestOptions.challenge = atob(requestOptions.challenge.replace(/-/g, '+').replace(/_/g, '/'));\n        // Unpack to binary data\n        requestOptions.challenge = Uint8Array.from(requestOptions.challenge, c => c.charCodeAt(0));\n        for (const idx in requestOptions.allowCredentials) {\n            let allowed = requestOptions.allowCredentials[idx];\n            requestOptions.allowCredentials[idx] = {\n                id: Uint8Array.from(atob(allowed.id.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0)),\n                type: allowed.type\n            };\n        }\n        let credential;\n        try {\n            credential = await navigator.credentials.get({\n                publicKey: requestOptions\n            });\n        }\n        catch (error) {\n            this.$button.removeClass('hidden');\n            throw Craft.t('app', 'Failed to authenticate');\n        }\n        const response = credential.response;\n        return {\n            credentialResponse: {\n                id: credential.id,\n                rawId: credential.id,\n                response: {\n                    authenticatorData: btoa(String.fromCharCode(...new Uint8Array(response.authenticatorData))),\n                    clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(response.clientDataJSON))),\n                    signature: btoa(String.fromCharCode(...new Uint8Array(response.signature))),\n                    userHandle: response.userHandle ? btoa(String.fromCharCode(...new Uint8Array(response.userHandle))) : null,\n                },\n                type: credential.type,\n            }\n        };\n    }\n}\nnew WebAuthnStep();\n"]}