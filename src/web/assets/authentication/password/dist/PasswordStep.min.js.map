{"version":3,"sources":["authentication/password/src/PasswordStep.js"],"names":["PasswordStep","AuthenticationStep","constructor","this","passwordSelector","$passwordField","$","init","Craft","PasswordInput","onToggleInput","off","replaceWith","$newPasswordInput","on","onInput","bind","cleanup","passwordInput","validate","passwordLength","val","length","window","minPasswordLength","attribute","t","min","maxPasswordLength","max","returnFormData","password"],"mappings":"AAAA,aACA,MAAMA,qBAAqBC,mBAA3BC,cACIA,MAAW,yCACPC,KAAMC,iBAAA,YAETC,qBAAA,OAAAC,EAAAH,KAAAC,kBAEDG,OADIF,KAAAA,cAAiB,IAAAG,MAAAC,cAAAN,KAAAC,iBAAA,CAAUM,cAAMN,IAAoBD,KAAAE,eAAAM,IAAA,SAK7CR,KAAKE,eAAeO,YAAYC,GAJrCV,KAAAE,eAAAS,GAAA,QAAAX,KAAAY,QAAAC,KAAAb,UAGKA,KAAKE,eAAeM,GAApB,QAAAR,KAAAY,QAAAC,KAAAb,OAEAc,iBACHd,KAAAe,qBALLf,KAAAe,cAOAf,KAAKE,eAAkBM,IAAA,QAAcI,KAAAA,QAAaC,KAAlDb,OAOJgB,WALAF,MAAUG,EAAAjB,KAAAE,eAAAgB,MAAAC,OAEN,OAAOF,EAAPG,OAAAC,kBACKnB,MAAeM,EAApB,MAAwB,qGAAxB,CACHc,UAAAjB,MAAAkB,EAAA,MAAA,YACUC,IAAAJ,OAAAC,sBAIHJ,EAAsBG,OAAAK,oBACPpB,MAAMkB,EAAE,MAAO,oGAD8F,CAExHD,UAAAjB,MAAAkB,EAAA,MAAA,YAFJG,IAAAN,OAAAK,oBAQAE,iBACIL,MAAAA,CACAM,SAAA5B,KAAAE,eAAAgB,QAYhB,IAAIrB","file":"PasswordStep.min.js","sourcesContent":["\"use strict\";\nclass PasswordStep extends AuthenticationStep {\n    constructor() {\n        super('craft\\\\authentication\\\\type\\\\Password');\n        this.passwordSelector = '#password';\n    }\n    get $passwordField() { return $(this.passwordSelector); }\n    init() {\n        this.passwordInput = new Craft.PasswordInput(this.passwordSelector, {\n            onToggleInput: ($newPasswordInput) => {\n                this.$passwordField.off('input');\n                this.$passwordField.replaceWith($newPasswordInput);\n                this.$passwordField.on('input', this.onInput.bind(this));\n            }\n        });\n        this.$passwordField.on('input', this.onInput.bind(this));\n    }\n    cleanup() {\n        delete this.passwordInput;\n        delete this.passwordInput;\n        this.$passwordField.off('input', this.onInput.bind(this));\n    }\n    validate() {\n        const passwordLength = this.$passwordField.val().length;\n        // @ts-ignore\n        if (passwordLength < window.minPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at least {min, number} {min, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                min: window.minPasswordLength,\n            });\n        }\n        // @ts-ignore\n        if (passwordLength > window.maxPasswordLength) {\n            return Craft.t('yii', '{attribute} should contain at most {max, number} {max, plural, one{character} other{characters}}.', {\n                attribute: Craft.t('app', 'Password'),\n                // @ts-ignore\n                max: window.maxPasswordLength,\n            });\n        }\n        return true;\n    }\n    returnFormData() {\n        return {\n            password: this.$passwordField.val(),\n        };\n    }\n}\nnew PasswordStep();\n"]}