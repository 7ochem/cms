{"version":3,"sources":["authentication/email/src/Email.js"],"names":["Email","AuthenticationStep","constructor","this","$email","$","stepType","parents","length","Craft","isRecoveryStep","registerStepHandler","prepareData","bind","LoginForm","validate","val","emailAddress","t","returnFormData","email"],"mappings":"AAAA,aACA,MAAMA,cAAcC,mBAApBC,cACIA,QACIC,KAAAC,OAAAC,EAAA,UACAF,KAAKC,SAAW,qCAChB,MAAKE,EAAWH,KAAAC,OAAAG,QAAA,uBAAhBC,OAAA,EACAC,MAAMC,UAAcC,oBAAeJ,KAAQK,YAAAC,KAAAV,MAAuBK,GAClEC,KAAMK,OAAUH,GAAAA,QAAAA,KAAAA,QAAyBC,KAAAA,OAE5CG,WACDA,OAAW,IACcZ,KAAKC,OAAOY,MAD1BR,QACDS,MAAeC,EAAA,MAAKd,sCAGzBe,iBAID,MAAO,CAHAC,MAAPjB,KAAAC,OAAAY,QAGA,IAAAhB","file":"Email.min.js","sourcesContent":["\"use strict\";\nclass Email extends AuthenticationStep {\n    constructor() {\n        super();\n        this.$email = $('#email');\n        this.stepType = \"craft\\\\authentication\\\\type\\\\Email\";\n        const isRecoveryStep = this.$email.parents('#recovery-container').length > 0;\n        Craft.LoginForm.registerStepHandler(this.prepareData.bind(this), isRecoveryStep);\n        this.$email.on('input', this.onInput.bind(this));\n    }\n    validate() {\n        const emailAddress = this.$email.val();\n        if (emailAddress.length === 0) {\n            return Craft.t('app', 'Please enter a valid email address');\n        }\n        return true;\n    }\n    returnFormData() {\n        return {\n            \"email\": this.$email.val(),\n        };\n    }\n}\nnew Email();\n"]}