{"version":3,"sources":["authentication/chain/src/AuthenticationChainHandler.js"],"names":["AuthenticationChainHandler","constructor","performAuthenticationEndpoint","this","startAuthenticationEndpoint","stepHandlers","loginHandler","$alternatives","$","$authenticationStep","$restartAuthentication","$startAuthentication","$authenticationGreeting","attachListeners","on","ev","switchStep","target","attr","event","empty","remove","removeClass","registerStepHandler","stepType","handler","preventDefault","request","Craft","postActionRequest","endpoint","processResponse","bind","isDisabled","switch","response","textStatus","_a","success","returnUrl","length","window","location","href","showError","error","Garnish","shake","$loginForm","disableForm","html","loginFormHtml","alternatives","Object","keys","showAlternatives","footHtml","jsFiles","match","existingSources","Array","from","document","scripts","map","node","getAttribute","filter","val","includes","jsFile","createElement","setAttribute","showMessage","appendFootHtml","stepComplete","$rememberMeCheckbox","parent","enableForm","$ul","find","description","entries","hideAlternatives","addClass","handleFormSubmit","additionalData","requestData","isExistingChain","performStep"],"mappings":"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","file":"AuthenticationChainHandler.min.js","sourcesContent":["\"use strict\";\nclass AuthenticationChainHandler {\n    constructor(loginHandler) {\n        this.performAuthenticationEndpoint = 'authentication/perform-authentication';\n        this.startAuthenticationEndpoint = 'authentication/start-authentication';\n        this.stepHandlers = {};\n        this.loginHandler = loginHandler;\n        this.attachListeners();\n    }\n    get $alternatives() { return $('#alternative-types'); }\n    get $authenticationStep() { return $('#authentication-step'); }\n    get $restartAuthentication() { return $('#restart-authentication'); }\n    get $startAuthentication() { return $('#start-authentication'); }\n    get $authenticationGreeting() { return $('#authentication-greeting'); }\n    /**\n     * Attach relevant event listeners.\n     *\n     * @protected\n     */\n    attachListeners() {\n        this.$alternatives.on('click', 'li', (ev) => {\n            this.switchStep($(ev.target).attr('rel'));\n        });\n        this.$restartAuthentication.on('click', (event) => {\n            this.$authenticationStep.empty().attr('rel', '');\n            this.$authenticationGreeting.remove();\n            this.$startAuthentication.removeClass('hidden');\n            event.preventDefault();\n        });\n    }\n    /**\n     * Register a step handler for a specific type\n     *\n     * @param stepType\n     * @param handler\n     */\n    registerStepHandler(stepType, handler) {\n        this.stepHandlers[stepType] = handler;\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param {string} endpoint\n     * @param {AuthenticationRequest} request\n     */\n    performStep(endpoint, request) {\n        Craft.postActionRequest(endpoint, request, this.processResponse.bind(this));\n    }\n    /**\n     * Switch the current authentication step to an alternative.\n     *\n     * @param stepType\n     */\n    switchStep(stepType) {\n        if (this.loginHandler.isDisabled()) {\n            return;\n        }\n        this.loginHandler.disableForm();\n        Craft.postActionRequest(this.performAuthenticationEndpoint, {\n            stepType: stepType,\n            switch: true\n        }, this.processResponse.bind(this));\n    }\n    /**\n     * Process authentication response.\n     * @param response\n     * @param textStatus\n     * @protected\n     */\n    processResponse(response, textStatus) {\n        var _a;\n        if (textStatus == 'success') {\n            if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                window.location.href = response.returnUrl;\n                // Keep the form disabled\n                return;\n            }\n            else {\n                if (response.error) {\n                    this.loginHandler.showError(response.error);\n                    Garnish.shake(this.loginHandler.$loginForm);\n                }\n                if (response.message) {\n                    this.loginHandler.showMessage(response.message);\n                }\n                if (response.html) {\n                    this.$authenticationStep.html(response.html);\n                }\n                if (response.loginFormHtml) {\n                    this.loginHandler.$loginForm.html(response.loginFormHtml);\n                    this.attachListeners();\n                }\n                if (response.alternatives && Object.keys(response.alternatives).length > 0) {\n                    this.showAlternatives(response.alternatives);\n                }\n                else {\n                    this.hideAlternatives();\n                }\n                if (response.stepType) {\n                    this.$authenticationStep.attr('rel', response.stepType);\n                }\n                if (response.footHtml) {\n                    const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                    const existingSources = Array.from(document.scripts).map(node => node.getAttribute('src')).filter(val => val && val.length > 0);\n                    // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                    // So roll our own JS file append-thing.\n                    if (jsFiles) {\n                        for (const jsFile of jsFiles) {\n                            if (!existingSources.includes(jsFile)) {\n                                let node = document.createElement('script');\n                                node.setAttribute('src', jsFile);\n                                document.body.appendChild(node);\n                            }\n                        }\n                        // If that fails, use Craft's thing.\n                    }\n                    else {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n                // Just in case this was the first step, remove all the misc things.\n                if (response.stepComplete) {\n                    this.loginHandler.$rememberMeCheckbox.parent().remove();\n                    this.loginHandler.$cancelRecover.remove();\n                    this.loginHandler.$recoverAccount.remove();\n                }\n            }\n        }\n        this.loginHandler.enableForm();\n    }\n    showAlternatives(alternatives) {\n        this.$alternatives.removeClass('hidden');\n        const $ul = this.$alternatives.find('ul').empty();\n        for (const [stepType, description] of Object.entries(alternatives)) {\n            $ul.append($(`<li rel=\"${stepType}\">${description}</li>`));\n        }\n    }\n    hideAlternatives() {\n        this.$alternatives.addClass('hidden');\n        this.$alternatives.find('ul').empty();\n    }\n    handleFormSubmit(ev, additionalData) {\n        this.invokeStepHandler(ev, additionalData);\n    }\n    /**\n     * Invoke the current step handler bound to the authentication container\n     * @param ev\n     */\n    async invokeStepHandler(ev, additionalData) {\n        try {\n            let requestData;\n            if (this.isExistingChain()) {\n                const stepType = this.$authenticationStep.attr('rel');\n                const handler = this.stepHandlers[stepType];\n                requestData = Object.assign(Object.assign({}, await handler()), additionalData);\n            }\n            else {\n                requestData = additionalData;\n            }\n            if (this.loginHandler.isDisabled()) {\n                return;\n            }\n            this.loginHandler.disableForm();\n            this.performStep(this.isExistingChain() ? this.performAuthenticationEndpoint : this.startAuthenticationEndpoint, requestData);\n        }\n        catch (error) {\n            this.loginHandler.showError(error);\n            this.loginHandler.enableForm();\n        }\n    }\n    isExistingChain() {\n        return this.$authenticationStep.attr('rel').length > 0;\n    }\n    clearErrors() {\n        this.loginHandler.clearErrors();\n    }\n}\n"]}