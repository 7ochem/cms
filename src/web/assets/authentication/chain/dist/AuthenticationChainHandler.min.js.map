{"version":3,"sources":["authentication/chain/src/AuthenticationChainHandler.js"],"names":["AuthenticationChainHandler","constructor","performAuthenticationEndpoint","this","startAuthenticationEndpoint","recoverAccountEndpoint","recoverAccount","authenticationSteps","loginForm","$alternatives","$","$authenticationStep","$restartAuthentication","$usernameField","$recoveryButtons","$authenticationGreeting","$toggleRecover","attachListeners","on","ev","target","attr","restartAuthentication","bind","toggleRecoverAccountForm","resetAuthenticationControls","empty","remove","removeClass","$rememberMeCheckbox","parents","$submit","hideAlternatives","clearErrors","registerAuthenticationStep","stepType","switchStep","step","event","preventDefault","addClass","length","init","performStep","endpoint","request","processResponse","isDisabled","Craft","response","textStatus","postActionRequest","success","_a","returnUrl","window","location","href","error","showError","$loginForm","message","showMessage","passwordReset","alternatives","Object","keys","showAlternatives","footHtml","jsFiles","match","existingSources","Array","from","document","scripts","map","node","getAttribute","filter","val","jsFile","includes","createElement","initStepType","currentStep","_b","cleanup","html","loginFormHtml","_c","stepComplete","enableForm","$ul","find","description","entries","append","setAttribute","handleFormSubmit","additionalData","invokeStepHandler","[object Object]","requestData","stepHandler","assign","prepareData","isExistingChain"],"mappings":"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","file":"AuthenticationChainHandler.min.js","sourcesContent":["\"use strict\";\nclass AuthenticationChainHandler {\n    constructor(loginForm) {\n        this.performAuthenticationEndpoint = 'authentication/perform-authentication';\n        this.startAuthenticationEndpoint = 'authentication/start-authentication';\n        this.recoverAccountEndpoint = 'users/send-password-reset-email';\n        this.recoverAccount = false;\n        this.authenticationSteps = {};\n        this.loginForm = loginForm;\n        this.attachListeners();\n    }\n    get $alternatives() { return $('#alternative-types'); }\n    get $authenticationStep() { return $('#authentication-step'); }\n    get $restartAuthentication() { return $('#restart-authentication'); }\n    get $usernameField() { return $('#username-field'); }\n    get $recoveryButtons() { return $('#recover-account, #cancel-recover'); }\n    get $authenticationGreeting() { return $('#authentication-greeting'); }\n    get $toggleRecover() { return $('.toggle-recover'); }\n    /**\n     * Attach relevant event listeners.\n     *\n     * @protected\n     */\n    attachListeners() {\n        this.$alternatives.on('click', 'li', (ev) => {\n            this.switchStep($(ev.target).attr('rel'));\n        });\n        this.$restartAuthentication.on('click', this.restartAuthentication.bind(this));\n        this.$recoveryButtons.on('click', this.toggleRecoverAccountForm.bind(this));\n    }\n    /**\n     * Reset the authentication chain controls and anything related in the login form.\n     */\n    resetAuthenticationControls() {\n        this.$authenticationStep.empty().attr('rel', '');\n        this.$authenticationGreeting.remove();\n        this.$usernameField.removeClass('hidden');\n        this.loginForm.$rememberMeCheckbox.parents('.field').removeClass('hidden');\n        this.loginForm.$submit.removeClass('hidden');\n        this.hideAlternatives();\n        this.clearErrors();\n    }\n    /**\n     * Register an authentication step\n     *\n     * @param stepType\n     * @param step\n     */\n    registerAuthenticationStep(stepType, step) {\n        this.authenticationSteps[stepType] = step;\n    }\n    /**\n     * Restart authentication from scratch.\n     * @param event\n     */\n    restartAuthentication(event) {\n        this.resetAuthenticationControls();\n        if (event) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * Toggle the account recovery form\n     */\n    toggleRecoverAccountForm() {\n        this.recoverAccount = !this.recoverAccount;\n        if (this.recoverAccount) {\n            this.$usernameField.removeClass('hidden');\n            this.loginForm.$submit.removeClass('hidden');\n            this.$authenticationStep.addClass('hidden');\n        }\n        else {\n            this.$usernameField.addClass('hidden');\n            this.loginForm.$submit.addClass('hidden');\n            this.$authenticationStep.removeClass('hidden');\n            this.$authenticationStep.attr('rel');\n            if (this.$authenticationStep.attr('rel').length > 0) {\n                const stepType = this.authenticationSteps[this.$authenticationStep.attr('rel')];\n                stepType.init();\n            }\n        }\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param {string} endpoint\n     * @param {AuthenticationRequest} request\n     */\n    performStep(endpoint, request) {\n        Craft.postActionRequest(endpoint, request, this.processResponse.bind(this));\n    }\n    /**\n     * Switch the current authentication step to an alternative.\n     *\n     * @param stepType\n     */\n    switchStep(stepType) {\n        if (this.loginForm.isDisabled()) {\n            return;\n        }\n        this.loginForm.disableForm();\n        Craft.postActionRequest(this.performAuthenticationEndpoint, {\n            stepType: stepType,\n            switch: true\n        }, this.processResponse.bind(this));\n    }\n    //     Garnish.Modal.extend({\n    //                              init: function() {\n    //     var $container = $('<div class=\"modal fitted email-sent\"><div class=\"body\">' + Craft.t('app', 'Check your email for instructions to reset your password.') + '</div></div>')\n    //     .appendTo(Garnish.$bod);\n    //\n    //     this.base($container);\n    // },\n    //\n    // hide: function() {\n    // }\n    // });\n    /**\n     * Process authentication response.\n     * @param response\n     * @param textStatus\n     * @protected\n     */\n    processResponse(response, textStatus) {\n        var _a, _b, _c;\n        if (textStatus == 'success') {\n            if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                window.location.href = response.returnUrl;\n                // Keep the form disabled\n                return;\n            }\n            else {\n                // Take not of errors and messages\n                if (response.error) {\n                    this.loginForm.showError(response.error);\n                    Garnish.shake(this.loginForm.$loginForm);\n                }\n                if (response.message) {\n                    this.loginForm.showMessage(response.message);\n                }\n                // Handle password reset response early and bail\n                if (response.passwordReset) {\n                    if (!response.error) {\n                        this.toggleRecoverAccountForm();\n                        this.restartAuthentication();\n                    }\n                }\n                // Ensure alternative login options are handled\n                if (response.alternatives && Object.keys(response.alternatives).length > 0) {\n                    this.showAlternatives(response.alternatives);\n                }\n                else {\n                    this.hideAlternatives();\n                }\n                // Keep track of current step type\n                if (response.stepType) {\n                    this.$authenticationStep.attr('rel', response.stepType);\n                }\n                // Load any JS files if needed\n                if (response.footHtml) {\n                    const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                    const existingSources = Array.from(document.scripts).map(node => node.getAttribute('src')).filter(val => val && val.length > 0);\n                    // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                    // So roll our own JS file append-thing.\n                    if (jsFiles) {\n                        for (const jsFile of jsFiles) {\n                            if (!existingSources.includes(jsFile)) {\n                                let node = document.createElement('script');\n                                node.setAttribute('src', jsFile);\n                                document.body.appendChild(node);\n                            }\n                        }\n                        // If that fails, use Craft's thing.\n                    }\n                    else {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n                const initStepType = (stepType) => {\n                    if (this.authenticationSteps[stepType]) {\n                        this.authenticationSteps[stepType].init();\n                    }\n                };\n                // Display the HTML\n                if (response.html) {\n                    (_b = this.currentStep) === null || _b === void 0 ? void 0 : _b.cleanup();\n                    this.$authenticationStep.html(response.html);\n                    initStepType(response.stepType);\n                }\n                // Display the HTML\n                if (response.loginFormHtml) {\n                    (_c = this.currentStep) === null || _c === void 0 ? void 0 : _c.cleanup();\n                    this.loginForm.$loginForm.html(response.loginFormHtml);\n                    this.attachListeners();\n                    initStepType(response.stepType);\n                }\n                // Just in case this was the first step, remove all the misc things.\n                if (response.stepComplete) {\n                    this.loginForm.$rememberMeCheckbox.parents('.field').addClass('hidden');\n                }\n            }\n        }\n        this.loginForm.enableForm();\n    }\n    showAlternatives(alternatives) {\n        this.$alternatives.removeClass('hidden');\n        const $ul = this.$alternatives.find('ul').empty();\n        for (const [stepType, description] of Object.entries(alternatives)) {\n            $ul.append($(`<li rel=\"${stepType}\">${description}</li>`));\n        }\n    }\n    hideAlternatives() {\n        this.$alternatives.addClass('hidden');\n        this.$alternatives.find('ul').empty();\n    }\n    handleFormSubmit(ev, additionalData) {\n        this.invokeStepHandler(ev, additionalData);\n    }\n    /**\n     * Invoke the current step handler bound to the authentication container\n     * @param ev\n     */\n    async invokeStepHandler(ev, additionalData) {\n        try {\n            let requestData;\n            if (this.isExistingChain()) {\n                const stepType = this.$authenticationStep.attr('rel');\n                const stepHandler = this.authenticationSteps[stepType];\n                requestData = Object.assign(Object.assign({}, await stepHandler.prepareData()), additionalData);\n                this.currentStep = stepHandler;\n            }\n            else {\n                requestData = additionalData;\n            }\n            if (this.loginForm.isDisabled()) {\n                return;\n            }\n            this.loginForm.disableForm();\n            const endpoint = this.recoverAccount ? this.recoverAccountEndpoint : (this.isExistingChain() ? this.performAuthenticationEndpoint : this.startAuthenticationEndpoint);\n            this.performStep(endpoint, requestData);\n        }\n        catch (error) {\n            this.loginForm.showError(error);\n            this.loginForm.enableForm();\n        }\n    }\n    isExistingChain() {\n        return this.$authenticationStep.attr('rel').length > 0;\n    }\n    clearErrors() {\n        this.loginForm.clearErrors();\n    }\n}\n"]}