{"version":3,"sources":["authentication/chain/src/AuthenticationChainHandler.js"],"names":["AuthenticationChainHandler","constructor","performAuthenticationEndpoint","this","startAuthenticationEndpoint","recoverAccountEndpoint","recoverAccount","authenticationSteps","loginForm","$alternatives","$","$authenticationStep","$restartAuthentication","$usernameField","$recoveryButtons","$authenticationGreeting","$recoveryMessage","attachListeners","on","ev","target","attr","canRememberUser","isExistingChain","hideRememberMe","showRememberMe","restartAuthentication","bind","toggleRecoverAccountForm","resetAuthenticationControls","empty","remove","removeClass","addClass","showSubmitButton","switchStep","toggleClass","registerAuthenticationStep","stepType","step","length","cleanup","event","preventDefault","init","performStep","endpoint","request","Craft","processResponse","isDisabled","disableForm","switch","response","textStatus","_a","returnUrl","error","showError","Garnish","shake","$loginForm","message","showMessage","passwordReset","alternatives","Object","keys","showAlternatives","hideAlternatives","postActionRequest","footHtml","jsFiles","match","existingSources","Array","from","document","scripts","map","node","getAttribute","filter","val","jsFile","includes","createElement","body","appendChild","appendFootHtml","_b","currentStep","html","initStepType","_c","loginFormHtml","enableForm","$ul","find","description","entries","handleFormSubmit","invokeStepHandler","additionalData","[object Object]","requestData","assign","stepHandler","clearErrors"],"mappings":"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","file":"AuthenticationChainHandler.min.js","sourcesContent":["\"use strict\";\nclass AuthenticationChainHandler {\n    constructor(loginForm) {\n        this.performAuthenticationEndpoint = 'authentication/perform-authentication';\n        this.startAuthenticationEndpoint = 'authentication/start-authentication';\n        this.recoverAccountEndpoint = 'users/send-password-reset-email';\n        this.recoverAccount = false;\n        this.authenticationSteps = {};\n        this.loginForm = loginForm;\n        this.attachListeners();\n    }\n    get $alternatives() { return $('#alternative-types'); }\n    get $authenticationStep() { return $('#authentication-step'); }\n    get $restartAuthentication() { return $('#restart-authentication'); }\n    get $usernameField() { return $('#username-field'); }\n    get $recoveryButtons() { return $('#recover-account, #cancel-recover'); }\n    get $authenticationGreeting() { return $('#authentication-greeting'); }\n    get $recoveryMessage() { return $('#recovery-message'); }\n    /**\n     * Attach relevant event listeners.\n     *\n     * @protected\n     */\n    attachListeners() {\n        this.$alternatives.on('click', 'li', (ev) => {\n            this.switchStep($(ev.target).attr('rel'));\n        });\n        if (this.loginForm.canRememberUser) {\n            if (!this.isExistingChain()) {\n                this.loginForm.showRememberMe();\n            }\n            else {\n                this.loginForm.hideRememberMe();\n            }\n        }\n        this.$restartAuthentication.on('click', this.restartAuthentication.bind(this));\n        this.$recoveryButtons.on('click', this.toggleRecoverAccountForm.bind(this));\n    }\n    /**\n     * Reset the authentication chain controls and anything related in the login form.\n     */\n    resetAuthenticationControls() {\n        this.$authenticationStep.empty().attr('rel', '');\n        this.$authenticationGreeting.remove();\n        this.$usernameField.removeClass('hidden');\n        this.$recoveryMessage.addClass('hidden');\n        this.loginForm.showSubmitButton();\n        this.loginForm.showRememberMe();\n        this.hideAlternatives();\n        this.clearErrors();\n        if (this.recoverAccount) {\n            this.$recoveryButtons.toggleClass('hidden');\n            this.recoverAccount = false;\n        }\n    }\n    /**\n     * Register an authentication step\n     *\n     * @param stepType\n     * @param step\n     */\n    registerAuthenticationStep(stepType, step) {\n        this.authenticationSteps[stepType] = step;\n    }\n    /**\n     * Restart authentication from scratch.\n     * @param event\n     */\n    restartAuthentication(event) {\n        this.resetAuthenticationControls();\n        if (event) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * Toggle the account recovery form\n     */\n    toggleRecoverAccountForm() {\n        this.recoverAccount = !this.recoverAccount;\n        this.$recoveryButtons.toggleClass('hidden');\n        if (this.recoverAccount) {\n            this.$recoveryMessage.removeClass('hidden');\n        }\n        else {\n            this.$recoveryMessage.addClass('hidden');\n        }\n        // Presumably, the login name input is shown already.\n        if (!this.isExistingChain()) {\n            return;\n        }\n        // Determine if we have an auth step type\n        let stepType = null;\n        if (this.$authenticationStep.attr('rel').length > 0) {\n            stepType = this.authenticationSteps[this.$authenticationStep.attr('rel')];\n        }\n        if (this.recoverAccount) {\n            this.$usernameField.removeClass('hidden');\n            this.$authenticationStep.addClass('hidden');\n            this.$alternatives.addClass('hidden');\n            stepType === null || stepType === void 0 ? void 0 : stepType.cleanup();\n        }\n        else {\n            this.$usernameField.addClass('hidden');\n            this.$authenticationStep.removeClass('hidden');\n            this.$authenticationStep.attr('rel');\n            this.$alternatives.removeClass('hidden');\n            stepType === null || stepType === void 0 ? void 0 : stepType.init();\n        }\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param {string} endpoint\n     * @param {AuthenticationRequest} request\n     */\n    performStep(endpoint, request) {\n        Craft.postActionRequest(endpoint, request, this.processResponse.bind(this));\n    }\n    /**\n     * Switch the current authentication step to an alternative.\n     *\n     * @param stepType\n     */\n    switchStep(stepType) {\n        if (this.loginForm.isDisabled()) {\n            return;\n        }\n        this.loginForm.disableForm();\n        Craft.postActionRequest(this.performAuthenticationEndpoint, {\n            stepType: stepType,\n            switch: true\n        }, this.processResponse.bind(this));\n    }\n    /**\n     * Process authentication response.\n     * @param response\n     * @param textStatus\n     * @protected\n     */\n    processResponse(response, textStatus) {\n        var _a, _b, _c;\n        if (textStatus == 'success') {\n            if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                window.location.href = response.returnUrl;\n                // Keep the form disabled\n                return;\n            }\n            else {\n                // Take not of errors and messages\n                if (response.error) {\n                    this.loginForm.showError(response.error);\n                    Garnish.shake(this.loginForm.$loginForm);\n                }\n                if (response.message) {\n                    this.loginForm.showMessage(response.message);\n                }\n                // Handle password reset response early and bail\n                if (response.passwordReset) {\n                    if (!response.error) {\n                        this.toggleRecoverAccountForm();\n                        this.restartAuthentication();\n                    }\n                }\n                // Ensure alternative login options are handled\n                if (response.alternatives && Object.keys(response.alternatives).length > 0) {\n                    this.showAlternatives(response.alternatives);\n                }\n                else {\n                    this.hideAlternatives();\n                }\n                // Keep track of current step type\n                if (response.stepType) {\n                    this.$authenticationStep.attr('rel', response.stepType);\n                }\n                // Load any JS files if needed\n                if (response.footHtml) {\n                    const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                    const existingSources = Array.from(document.scripts).map(node => node.getAttribute('src')).filter(val => val && val.length > 0);\n                    // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                    // So roll our own JS file append-thing.\n                    if (jsFiles) {\n                        for (const jsFile of jsFiles) {\n                            if (!existingSources.includes(jsFile)) {\n                                let node = document.createElement('script');\n                                node.setAttribute('src', jsFile);\n                                document.body.appendChild(node);\n                            }\n                        }\n                        // If that fails, use Craft's thing.\n                    }\n                    else {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n                const initStepType = (stepType) => {\n                    if (this.authenticationSteps[stepType]) {\n                        this.authenticationSteps[stepType].init();\n                    }\n                };\n                // Display the HTML for the auth step.\n                if (response.html) {\n                    (_b = this.currentStep) === null || _b === void 0 ? void 0 : _b.cleanup();\n                    this.$authenticationStep.html(response.html);\n                    initStepType(response.stepType);\n                }\n                // Display the HTML for the entire login form, in case we just started an authentication chain\n                if (response.loginFormHtml) {\n                    (_c = this.currentStep) === null || _c === void 0 ? void 0 : _c.cleanup();\n                    this.loginForm.$loginForm.html(response.loginFormHtml);\n                    this.attachListeners();\n                    initStepType(response.stepType);\n                }\n                // Just in case this was the first step, remove all the misc things.\n                if (response.stepComplete) {\n                    this.loginForm.hideRememberMe();\n                }\n            }\n        }\n        this.loginForm.enableForm();\n    }\n    /**\n     * Show the alternative authentication methods available at this point.\n     *\n     * @param alternatives\n     */\n    showAlternatives(alternatives) {\n        this.$alternatives.removeClass('hidden');\n        const $ul = this.$alternatives.find('ul').empty();\n        for (const [stepType, description] of Object.entries(alternatives)) {\n            $ul.append($(`<li rel=\"${stepType}\">${description}</li>`));\n        }\n    }\n    /**\n     * Hide the alternative authentication methods.\n     */\n    hideAlternatives() {\n        this.$alternatives.addClass('hidden');\n        this.$alternatives.find('ul').empty();\n    }\n    /**\n     * Handle the login form submission.\n     *\n     * @param ev\n     * @param additionalData\n     */\n    handleFormSubmit(ev, additionalData) {\n        this.invokeStepHandler(ev, additionalData);\n    }\n    /**\n     * Invoke the current step handler\n     * @param ev\n     */\n    async invokeStepHandler(ev, additionalData) {\n        try {\n            let requestData;\n            if (this.isExistingChain()) {\n                const stepType = this.$authenticationStep.attr('rel');\n                const stepHandler = this.authenticationSteps[stepType];\n                requestData = Object.assign(Object.assign({}, await stepHandler.prepareData()), additionalData);\n                this.currentStep = stepHandler;\n            }\n            else {\n                requestData = additionalData;\n            }\n            if (this.loginForm.isDisabled()) {\n                return;\n            }\n            this.loginForm.disableForm();\n            const endpoint = this.recoverAccount ? this.recoverAccountEndpoint : (this.isExistingChain() ? this.performAuthenticationEndpoint : this.startAuthenticationEndpoint);\n            this.performStep(endpoint, requestData);\n        }\n        catch (error) {\n            this.loginForm.showError(error);\n            this.loginForm.enableForm();\n        }\n    }\n    /**\n     * Return true if there is an existing authentication chain being traversed\n     */\n    isExistingChain() {\n        return this.$authenticationStep.attr('rel').length > 0;\n    }\n    /**\n     * Clear the error from the login form.\n     */\n    clearErrors() {\n        this.loginForm.clearErrors();\n    }\n}\n"]}