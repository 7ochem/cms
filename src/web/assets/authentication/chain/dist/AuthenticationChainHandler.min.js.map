{"version":3,"sources":["authentication/chain/src/AuthenticationChainHandler.js"],"names":["AuthenticationChainHandler","constructor","performAuthenticationEndpoint","this","startAuthenticationEndpoint","recoverAccountEndpoint","recoverAccount","authenticationSteps","loginForm","$alternatives","$","$authenticationStep","$restartAuthentication","$usernameField","$recoveryButtons","$authenticationGreeting","$recoveryMessage","attachListeners","on","ev","target","attr","restartAuthentication","bind","toggleRecoverAccountForm","canRememberUser","isExistingChain","hideRememberMe","showRememberMe","resetAuthenticationControls","empty","remove","removeClass","addClass","showSubmitButton","switchStep","toggleClass","registerAuthenticationStep","stepType","step","length","cleanup","event","preventDefault","init","performStep","Craft","request","processResponse","isDisabled","disableForm","postActionRequest","_a","response","returnUrl","window","location","error","showError","Garnish","shake","$loginForm","message","endpoint","showMessage","passwordReset","alternatives","Object","keys","hideAlternatives","footHtml","jsFiles","match","existingSources","Array","from","document","scripts","map","node","getAttribute","filter","val","jsFile","includes","textStatus","createElement","setAttribute","body","appendChild","appendFootHtml","html","_b","currentStep","initStepType","_c","loginFormHtml","stepComplete","showAlternatives","$ul","find","description","entries","handleFormSubmit","additionalData","requestData","assign","stepHandler","prepareData","clearErrors"],"mappings":"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","file":"AuthenticationChainHandler.min.js","sourcesContent":["\"use strict\";\nclass AuthenticationChainHandler {\n    constructor(loginForm) {\n        this.performAuthenticationEndpoint = 'authentication/perform-authentication';\n        this.startAuthenticationEndpoint = 'authentication/start-authentication';\n        this.recoverAccountEndpoint = 'users/send-password-reset-email';\n        this.recoverAccount = false;\n        this.authenticationSteps = {};\n        this.loginForm = loginForm;\n        this.attachListeners();\n    }\n    get $alternatives() { return $('#alternative-types'); }\n    get $authenticationStep() { return $('#authentication-step'); }\n    get $restartAuthentication() { return $('#restart-authentication'); }\n    get $usernameField() { return $('#username-field'); }\n    get $recoveryButtons() { return $('#recover-account, #cancel-recover'); }\n    get $authenticationGreeting() { return $('#authentication-greeting'); }\n    get $recoveryMessage() { return $('#recovery-message'); }\n    /**\n     * Attach relevant event listeners.\n     *\n     * @protected\n     */\n    attachListeners() {\n        this.$alternatives.on('click', 'li', (ev) => {\n            this.switchStep($(ev.target).attr('rel'));\n        });\n        this.$restartAuthentication.on('click', this.restartAuthentication.bind(this));\n        this.$recoveryButtons.on('click', this.toggleRecoverAccountForm.bind(this));\n        if (this.loginForm.canRememberUser) {\n            if (!this.isExistingChain()) {\n                this.loginForm.showRememberMe();\n            }\n            else {\n                this.loginForm.hideRememberMe();\n            }\n        }\n    }\n    /**\n     * Reset the authentication chain controls and anything related in the login form.\n     */\n    resetAuthenticationControls() {\n        this.$authenticationStep.empty().attr('rel', '');\n        this.$authenticationGreeting.remove();\n        this.$usernameField.removeClass('hidden');\n        this.$recoveryMessage.addClass('hidden');\n        this.loginForm.showSubmitButton();\n        this.loginForm.showRememberMe();\n        this.hideAlternatives();\n        this.clearErrors();\n        if (this.recoverAccount) {\n            this.$recoveryButtons.toggleClass('hidden');\n            this.recoverAccount = false;\n        }\n    }\n    /**\n     * Register an authentication step\n     *\n     * @param stepType\n     * @param step\n     */\n    registerAuthenticationStep(stepType, step) {\n        this.authenticationSteps[stepType] = step;\n    }\n    /**\n     * Restart authentication from scratch.\n     * @param event\n     */\n    restartAuthentication(event) {\n        this.resetAuthenticationControls();\n        if (event) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * Toggle the account recovery form\n     */\n    toggleRecoverAccountForm() {\n        this.recoverAccount = !this.recoverAccount;\n        this.$recoveryButtons.toggleClass('hidden');\n        if (this.recoverAccount) {\n            this.$recoveryMessage.removeClass('hidden');\n        }\n        else {\n            this.$recoveryMessage.addClass('hidden');\n        }\n        // Presumably, the login name input is shown already.\n        if (!this.isExistingChain()) {\n            return;\n        }\n        // Determine if we have an auth step type\n        let stepType = null;\n        if (this.$authenticationStep.attr('rel').length > 0) {\n            stepType = this.authenticationSteps[this.$authenticationStep.attr('rel')];\n        }\n        if (this.recoverAccount) {\n            this.$usernameField.removeClass('hidden');\n            this.$authenticationStep.addClass('hidden');\n            this.$alternatives.addClass('hidden');\n            stepType === null || stepType === void 0 ? void 0 : stepType.cleanup();\n        }\n        else {\n            this.$usernameField.addClass('hidden');\n            this.$authenticationStep.removeClass('hidden');\n            this.$authenticationStep.attr('rel');\n            this.$alternatives.removeClass('hidden');\n            stepType === null || stepType === void 0 ? void 0 : stepType.init();\n        }\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param {string} endpoint\n     * @param {AuthenticationRequest} request\n     */\n    performStep(endpoint, request) {\n        Craft.postActionRequest(endpoint, request, this.processResponse.bind(this));\n    }\n    /**\n     * Switch the current authentication step to an alternative.\n     *\n     * @param stepType\n     */\n    switchStep(stepType) {\n        if (this.loginForm.isDisabled()) {\n            return;\n        }\n        this.loginForm.disableForm();\n        Craft.postActionRequest(this.performAuthenticationEndpoint, {\n            stepType: stepType,\n            switch: true\n        }, this.processResponse.bind(this));\n    }\n    /**\n     * Process authentication response.\n     * @param response\n     * @param textStatus\n     * @protected\n     */\n    processResponse(response, textStatus) {\n        var _a, _b, _c;\n        if (textStatus == 'success') {\n            if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                window.location.href = response.returnUrl;\n                // Keep the form disabled\n                return;\n            }\n            else {\n                // Take not of errors and messages\n                if (response.error) {\n                    this.loginForm.showError(response.error);\n                    Garnish.shake(this.loginForm.$loginForm);\n                }\n                if (response.message) {\n                    this.loginForm.showMessage(response.message);\n                }\n                // Handle password reset response early and bail\n                if (response.passwordReset) {\n                    if (!response.error) {\n                        this.toggleRecoverAccountForm();\n                        this.restartAuthentication();\n                    }\n                }\n                // Ensure alternative login options are handled\n                if (response.alternatives && Object.keys(response.alternatives).length > 0) {\n                    this.showAlternatives(response.alternatives);\n                }\n                else {\n                    this.hideAlternatives();\n                }\n                // Keep track of current step type\n                if (response.stepType) {\n                    this.$authenticationStep.attr('rel', response.stepType);\n                }\n                // Load any JS files if needed\n                if (response.footHtml) {\n                    const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                    const existingSources = Array.from(document.scripts).map(node => node.getAttribute('src')).filter(val => val && val.length > 0);\n                    // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                    // So roll our own JS file append-thing.\n                    if (jsFiles) {\n                        for (const jsFile of jsFiles) {\n                            if (!existingSources.includes(jsFile)) {\n                                let node = document.createElement('script');\n                                node.setAttribute('src', jsFile);\n                                document.body.appendChild(node);\n                            }\n                        }\n                        // If that fails, use Craft's thing.\n                    }\n                    else {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n                const initStepType = (stepType) => {\n                    if (this.authenticationSteps[stepType]) {\n                        this.authenticationSteps[stepType].init();\n                    }\n                };\n                // Display the HTML\n                if (response.html) {\n                    (_b = this.currentStep) === null || _b === void 0 ? void 0 : _b.cleanup();\n                    this.$authenticationStep.html(response.html);\n                    initStepType(response.stepType);\n                }\n                // Display the HTML\n                if (response.loginFormHtml) {\n                    (_c = this.currentStep) === null || _c === void 0 ? void 0 : _c.cleanup();\n                    this.loginForm.$loginForm.html(response.loginFormHtml);\n                    this.attachListeners();\n                    initStepType(response.stepType);\n                }\n                // Just in case this was the first step, remove all the misc things.\n                if (response.stepComplete) {\n                    this.loginForm.hideRememberMe();\n                }\n            }\n        }\n        this.loginForm.enableForm();\n    }\n    showAlternatives(alternatives) {\n        this.$alternatives.removeClass('hidden');\n        const $ul = this.$alternatives.find('ul').empty();\n        for (const [stepType, description] of Object.entries(alternatives)) {\n            $ul.append($(`<li rel=\"${stepType}\">${description}</li>`));\n        }\n    }\n    hideAlternatives() {\n        this.$alternatives.addClass('hidden');\n        this.$alternatives.find('ul').empty();\n    }\n    handleFormSubmit(ev, additionalData) {\n        this.invokeStepHandler(ev, additionalData);\n    }\n    /**\n     * Invoke the current step handler bound to the authentication container\n     * @param ev\n     */\n    async invokeStepHandler(ev, additionalData) {\n        try {\n            let requestData;\n            if (this.isExistingChain()) {\n                const stepType = this.$authenticationStep.attr('rel');\n                const stepHandler = this.authenticationSteps[stepType];\n                requestData = Object.assign(Object.assign({}, await stepHandler.prepareData()), additionalData);\n                this.currentStep = stepHandler;\n            }\n            else {\n                requestData = additionalData;\n            }\n            if (this.loginForm.isDisabled()) {\n                return;\n            }\n            this.loginForm.disableForm();\n            const endpoint = this.recoverAccount ? this.recoverAccountEndpoint : (this.isExistingChain() ? this.performAuthenticationEndpoint : this.startAuthenticationEndpoint);\n            this.performStep(endpoint, requestData);\n        }\n        catch (error) {\n            this.loginForm.showError(error);\n            this.loginForm.enableForm();\n        }\n    }\n    isExistingChain() {\n        return this.$authenticationStep.attr('rel').length > 0;\n    }\n    clearErrors() {\n        this.loginForm.clearErrors();\n    }\n}\n"]}