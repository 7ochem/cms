{"version":3,"sources":["authentication/chain/src/AuthenticationChainHandler.js"],"names":["AuthenticationChainHandler","constructor","performAuthenticationEndpoint","this","startAuthenticationEndpoint","authenticationSteps","loginForm","$alternatives","$","$authenticationStep","$restartAuthentication","$startAuthentication","$authenticationGreeting","attachListeners","on","ev","switchStep","target","attr","event","resetAuthenticationControls","preventDefault","empty","remove","removeClass","$rememberMeCheckbox","parents","$submit","registerAuthenticationStep","stepType","step","performStep","Craft","request","processResponse","bind","isDisabled","disableForm","switch","endpoint","postActionRequest","textStatus","response","success","_a","returnUrl","length","window","location","href","error","showError","$loginForm","message","showMessage","alternatives","showAlternatives","hideAlternatives","footHtml","jsFiles","match","existingSources","Array","from","document","scripts","map","node","getAttribute","filter","val","jsFile","includes","body","appendChild","appendFootHtml","init","html","currentStep","_b","cleanup","initStepType","_c","loginFormHtml","stepComplete","addClass","setAttribute","$ul","find","description","Object","entries","handleFormSubmit","additionalData","invokeStepHandler","[object Object]","assign","stepHandler","prepareData","isExistingChain","requestData","append","clearErrors"],"mappings":"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","file":"AuthenticationChainHandler.min.js","sourcesContent":["\"use strict\";\nclass AuthenticationChainHandler {\n    constructor(loginForm) {\n        this.performAuthenticationEndpoint = 'authentication/perform-authentication';\n        this.startAuthenticationEndpoint = 'authentication/start-authentication';\n        this.authenticationSteps = {};\n        this.loginForm = loginForm;\n        this.attachListeners();\n    }\n    get $alternatives() { return $('#alternative-types'); }\n    get $authenticationStep() { return $('#authentication-step'); }\n    get $restartAuthentication() { return $('#restart-authentication'); }\n    get $startAuthentication() { return $('#start-authentication'); }\n    get $authenticationGreeting() { return $('#authentication-greeting'); }\n    /**\n     * Attach relevant event listeners.\n     *\n     * @protected\n     */\n    attachListeners() {\n        this.$alternatives.on('click', 'li', (ev) => {\n            this.switchStep($(ev.target).attr('rel'));\n        });\n        this.$restartAuthentication.on('click', (event) => {\n            this.resetAuthenticationControls();\n            event.preventDefault();\n        });\n    }\n    /**\n     * Reset the authentication chain controls and anything related in the login form.\n     */\n    resetAuthenticationControls() {\n        this.$authenticationStep.empty().attr('rel', '');\n        this.$authenticationGreeting.remove();\n        this.$startAuthentication.removeClass('hidden');\n        this.loginForm.$rememberMeCheckbox.parents('.field').removeClass('hidden');\n        this.loginForm.$submit.removeClass('hidden');\n        this.hideAlternatives();\n        this.clearErrors();\n    }\n    /**\n     * Register an authentication step\n     *\n     * @param stepType\n     * @param step\n     */\n    registerAuthenticationStep(stepType, step) {\n        this.authenticationSteps[stepType] = step;\n    }\n    /**\n     * Perform the authentication step against the endpoint.\n     *\n     * @param {string} endpoint\n     * @param {AuthenticationRequest} request\n     */\n    performStep(endpoint, request) {\n        Craft.postActionRequest(endpoint, request, this.processResponse.bind(this));\n    }\n    /**\n     * Switch the current authentication step to an alternative.\n     *\n     * @param stepType\n     */\n    switchStep(stepType) {\n        if (this.loginForm.isDisabled()) {\n            return;\n        }\n        this.loginForm.disableForm();\n        Craft.postActionRequest(this.performAuthenticationEndpoint, {\n            stepType: stepType,\n            switch: true\n        }, this.processResponse.bind(this));\n    }\n    /**\n     * Process authentication response.\n     * @param response\n     * @param textStatus\n     * @protected\n     */\n    processResponse(response, textStatus) {\n        var _a, _b, _c;\n        if (textStatus == 'success') {\n            if (response.success && ((_a = response.returnUrl) === null || _a === void 0 ? void 0 : _a.length)) {\n                window.location.href = response.returnUrl;\n                // Keep the form disabled\n                return;\n            }\n            else {\n                if (response.error) {\n                    this.loginForm.showError(response.error);\n                    Garnish.shake(this.loginForm.$loginForm);\n                }\n                if (response.message) {\n                    this.loginForm.showMessage(response.message);\n                }\n                if (response.alternatives && Object.keys(response.alternatives).length > 0) {\n                    this.showAlternatives(response.alternatives);\n                }\n                else {\n                    this.hideAlternatives();\n                }\n                if (response.stepType) {\n                    this.$authenticationStep.attr('rel', response.stepType);\n                }\n                if (response.footHtml) {\n                    const jsFiles = response.footHtml.match(/([^\"']+\\.js)/gm);\n                    const existingSources = Array.from(document.scripts).map(node => node.getAttribute('src')).filter(val => val && val.length > 0);\n                    // For some reason, Chrome will fail to load sourcemap properly when jQuery append is used\n                    // So roll our own JS file append-thing.\n                    if (jsFiles) {\n                        for (const jsFile of jsFiles) {\n                            if (!existingSources.includes(jsFile)) {\n                                let node = document.createElement('script');\n                                node.setAttribute('src', jsFile);\n                                document.body.appendChild(node);\n                            }\n                        }\n                        // If that fails, use Craft's thing.\n                    }\n                    else {\n                        Craft.appendFootHtml(response.footHtml);\n                    }\n                }\n                const initStepType = (stepType) => {\n                    if (this.authenticationSteps[stepType]) {\n                        this.authenticationSteps[stepType].init();\n                    }\n                };\n                if (response.html) {\n                    (_b = this.currentStep) === null || _b === void 0 ? void 0 : _b.cleanup();\n                    this.$authenticationStep.html(response.html);\n                    initStepType(response.stepType);\n                }\n                if (response.loginFormHtml) {\n                    (_c = this.currentStep) === null || _c === void 0 ? void 0 : _c.cleanup();\n                    this.loginForm.$loginForm.html(response.loginFormHtml);\n                    this.attachListeners();\n                    initStepType(response.stepType);\n                }\n                // Just in case this was the first step, remove all the misc things.\n                if (response.stepComplete) {\n                    this.loginForm.$rememberMeCheckbox.parents('.field').addClass('hidden');\n                }\n            }\n        }\n        this.loginForm.enableForm();\n    }\n    showAlternatives(alternatives) {\n        this.$alternatives.removeClass('hidden');\n        const $ul = this.$alternatives.find('ul').empty();\n        for (const [stepType, description] of Object.entries(alternatives)) {\n            $ul.append($(`<li rel=\"${stepType}\">${description}</li>`));\n        }\n    }\n    hideAlternatives() {\n        this.$alternatives.addClass('hidden');\n        this.$alternatives.find('ul').empty();\n    }\n    handleFormSubmit(ev, additionalData) {\n        this.invokeStepHandler(ev, additionalData);\n    }\n    /**\n     * Invoke the current step handler bound to the authentication container\n     * @param ev\n     */\n    async invokeStepHandler(ev, additionalData) {\n        try {\n            let requestData;\n            if (this.isExistingChain()) {\n                const stepType = this.$authenticationStep.attr('rel');\n                const stepHandler = this.authenticationSteps[stepType];\n                requestData = Object.assign(Object.assign({}, await stepHandler.prepareData()), additionalData);\n                this.currentStep = stepHandler;\n            }\n            else {\n                requestData = additionalData;\n            }\n            if (this.loginForm.isDisabled()) {\n                return;\n            }\n            this.loginForm.disableForm();\n            this.performStep(this.isExistingChain() ? this.performAuthenticationEndpoint : this.startAuthenticationEndpoint, requestData);\n        }\n        catch (error) {\n            this.loginForm.showError(error);\n            this.loginForm.enableForm();\n        }\n    }\n    isExistingChain() {\n        return this.$authenticationStep.attr('rel').length > 0;\n    }\n    clearErrors() {\n        this.loginForm.clearErrors();\n    }\n}\n"]}