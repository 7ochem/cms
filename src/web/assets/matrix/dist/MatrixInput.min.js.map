{"version":3,"sources":["matrix/src/MatrixInput.js"],"names":["$","Craft","MatrixInput","Garnish","Base","extend","id","blockTypesByHandle","blockTypes","inputIdPrefix","showingAddBlockMenu","addBlockBtnGroupWidth","$container","$blockContainer","$addBlockBtnContainer","$addBlockBtnGroup","$addBlockBtnGroupBtns","blockSelect","totalNewBlocks","init","inputNamePrefix","settings","i","$blocks","this","formatInputId","maxBlocks","setSettings","defaults","children","$addBlockMenuBtn","setNewBlockBtn","blockType","collapsedBlocks","getCollapsedBlockIds","blockSort","DragSort","filter","getSelectedItems","handle","axis","proxy","collapseDraggees","$targetItem","hasClass","magnetStrength","helperOpacity","onSortChange","resetItemOrder","checkboxMode","length","Select","$block","blockId","newMatch","parseInt","data","block","match","target","inArray","MenuBtn","collapse","addListener","ev","type","updateAddBlockBtn","trigger","onOptionSelect","option","$doc","ready","addBlockBtnContainerWidth","width","requestAnimationFrame","addClass","removeClass","navigator","userAgent","indexOf","css","canAddMoreBlocks","$actionMenu","$items","eq","find","parent","getBlockTypeByHandle","addBlock","$insertBefore","html","staticBlocks","name","t","footHtml","getHiddenBlockCss","window","draftEditor","pause","MatrixBlock","addItems","scrollContainerToElement","appendTo","bodyHtml","getParsedBlockHtml","first","$fieldsContainer","velocity","opacity","margin-bottom","$bod","append","collapseSelectedBlocks","callOnSelectedBlocks","expandSelectedBlocks","disableSelectedBlocks","resume","marginBottom","outerHeight","localStorage","fn","$selectedItems","rememberCollapsedBlockId","Storage","replace","RegExp","placeholderKey","collapsedBlocksIndex","$titlebar","systemUid","$previewContainer","collapsedBlockStorageKey","filterArray","split","setCollapsedBlockIds","ids","join","menu","forgetCollapsedBlockId","splice","matrix","hasAttr","_handleTitleBarClick","isNew","collapsed","expand","substr","previewHtml","$fields","$inputs","$field","menuBtn","on","prev","next","$maybeLightswitchContainer","value","getText","getInputPostVal","preventDefault","toggle","inputPreviewText","animate","height","duration","j","$input","$collapsedInput","text","val","Array","trim","expandedContainerHeight","show","setTimeout","collapsedContainerHeight","$prev","displayValue","onMenuOptionSelect","insertBefore","display","insertAfter","$next","batchAction","totalSelected","$option","disable","enable","moveUp","moveDown","isSelected","confirm","selfDestruct","enableSelectedBlocks","deleteSelectedBlocks","remove","jQuery"],"mappings":"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","file":"MatrixInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix input class\n     */\n    Craft.MatrixInput = Garnish.Base.extend({\n        id: null,\n        blockTypes: null,\n        blockTypesByHandle: null,\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        showingAddBlockMenu: false,\n        addBlockBtnGroupWidth: null,\n        addBlockBtnContainerWidth: null,\n\n        $container: null,\n        $blockContainer: null,\n        $addBlockBtnContainer: null,\n        $addBlockBtnGroup: null,\n        $addBlockBtnGroupBtns: null,\n\n        blockSort: null,\n        blockSelect: null,\n        totalNewBlocks: 0,\n\n        init: function(id, blockTypes, inputNamePrefix, settings) {\n            this.id = id;\n            this.blockTypes = blockTypes;\n            this.inputNamePrefix = inputNamePrefix;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n            // see if settings was actually set to the maxBlocks value\n            if (typeof settings === 'number') {\n                settings = {maxBlocks: settings};\n            }\n            this.setSettings(settings, Craft.MatrixInput.defaults);\n\n            this.$container = $('#' + this.id);\n            this.$blockContainer = this.$container.children('.blocks');\n            this.$addBlockBtnContainer = this.$container.children('.buttons');\n            this.$addBlockBtnGroup = this.$addBlockBtnContainer.children('.btngroup');\n            this.$addBlockBtnGroupBtns = this.$addBlockBtnGroup.children('.btn');\n            this.$addBlockMenuBtn = this.$addBlockBtnContainer.children('.menubtn');\n\n            this.$container.data('matrix', this);\n\n            this.setNewBlockBtn();\n\n            this.blockTypesByHandle = {};\n\n            var i;\n\n            for (i = 0; i < this.blockTypes.length; i++) {\n                var blockType = this.blockTypes[i];\n                this.blockTypesByHandle[blockType.handle] = blockType;\n            }\n\n            var $blocks = this.$blockContainer.children(),\n                collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n            this.blockSort = new Garnish.DragSort($blocks, {\n                handle: '> .actions > .move',\n                axis: 'y',\n                filter: $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.blockSort.$targetItem.hasClass('sel')) {\n                        return this.blockSelect.getSelectedItems();\n                    } else {\n                        return this.blockSort.$targetItem;\n                    }\n                }, this),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                helperOpacity: 0.9,\n                onSortChange: $.proxy(function() {\n                    this.blockSelect.resetItemOrder();\n                }, this)\n            });\n\n            this.blockSelect = new Garnish.Select(this.$blockContainer, $blocks, {\n                multi: true,\n                vertical: true,\n                handle: '> .checkbox, > .titlebar',\n                checkboxMode: true\n            });\n\n            for (i = 0; i < $blocks.length; i++) {\n                var $block = $($blocks[i]),\n                    blockId = $block.data('id');\n\n                // Is this a new block?\n                var newMatch = (typeof blockId === 'string' && blockId.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlocks) {\n                    this.totalNewBlocks = parseInt(newMatch[1]);\n                }\n\n                var block = new MatrixBlock(this, $block);\n\n                if (block.id && $.inArray('' + block.id, collapsedBlocks) !== -1) {\n                    block.collapse();\n                }\n            }\n\n            this.addListener(this.$addBlockBtnGroupBtns, 'click', function(ev) {\n                var type = $(ev.target).data('type');\n                this.addBlock(type);\n            });\n\n            new Garnish.MenuBtn(this.$addBlockMenuBtn,\n                {\n                    onOptionSelect: $.proxy(function(option) {\n                        var type = $(option).data('type');\n                        this.addBlock(type);\n                    }, this)\n                });\n\n            this.updateAddBlockBtn();\n\n            this.addListener(this.$container, 'resize', 'setNewBlockBtn');\n            Garnish.$doc.ready($.proxy(this, 'setNewBlockBtn'));\n\n            this.trigger('afterInit');\n        },\n\n        setNewBlockBtn: function() {\n            // Do we know what the button group width is yet?\n            if (!this.addBlockBtnGroupWidth) {\n                this.addBlockBtnGroupWidth = this.$addBlockBtnGroup.width();\n\n                if (!this.addBlockBtnGroupWidth) {\n                    return;\n                }\n            }\n\n            // Only check if the container width has resized\n            if (this.addBlockBtnContainerWidth !== (this.addBlockBtnContainerWidth = this.$addBlockBtnContainer.width())) {\n                if (this.addBlockBtnGroupWidth > this.addBlockBtnContainerWidth) {\n                    if (!this.showingAddBlockMenu) {\n                        this.$addBlockBtnGroup.addClass('hidden');\n                        this.$addBlockMenuBtn.removeClass('hidden');\n                        this.showingAddBlockMenu = true;\n                    }\n                } else {\n                    if (this.showingAddBlockMenu) {\n                        this.$addBlockMenuBtn.addClass('hidden');\n                        this.$addBlockBtnGroup.removeClass('hidden');\n                        this.showingAddBlockMenu = false;\n\n                        // Because Safari is awesome\n                        if (navigator.userAgent.indexOf('Safari') !== -1) {\n                            Garnish.requestAnimationFrame($.proxy(function() {\n                                this.$addBlockBtnGroup.css('opacity', 0.99);\n\n                                Garnish.requestAnimationFrame($.proxy(function() {\n                                    this.$addBlockBtnGroup.css('opacity', '');\n                                }, this));\n                            }, this));\n                        }\n                    }\n                }\n            }\n        },\n\n        canAddMoreBlocks: function() {\n            return (!this.maxBlocks || this.$blockContainer.children().length < this.maxBlocks);\n        },\n\n        updateAddBlockBtn: function() {\n            var i, block;\n\n            if (this.canAddMoreBlocks()) {\n                this.$addBlockBtnGroup.removeClass('disabled');\n                this.$addBlockMenuBtn.removeClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().removeClass('disabled');\n                    }\n                }\n            } else {\n                this.$addBlockBtnGroup.addClass('disabled');\n                this.$addBlockMenuBtn.addClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().addClass('disabled');\n                    }\n                }\n            }\n        },\n\n        addBlock: function(type, $insertBefore) {\n            if (!this.canAddMoreBlocks()) {\n                return;\n            }\n\n            this.totalNewBlocks++;\n\n            var id = 'new' + this.totalNewBlocks;\n\n            var html = `\n<div class=\"matrixblock\" data-id=\"${id}\" data-type=\"${type}\">\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[sortOrder][]\" value=\"${id}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][type]\" value=\"${type}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][enabled]\" value=\"1\"/>\n  <div class=\"titlebar\">\n    <div class=\"blocktype\">${this.getBlockTypeByHandle(type).name}</div>\n    <div class=\"preview\"></div>\n  </div>\n  <div class=\"checkbox\" title=\"${Craft.t('app', 'Select')}\"></div>\n  <div class=\"actions\">\n    <div class=\"status off\" title=\"${Craft.t('app', 'Disabled')}\"></div>\n    <a class=\"settings icon menubtn\" title=\"${Craft.t('app', 'Actions')}\" role=\"button\"></a> \n    <div class=\"menu\">\n      <ul class=\"padded\">\n        <li><a data-icon=\"collapse\" data-action=\"collapse\">${Craft.t('app', 'Collapse')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"expand\" data-action=\"expand\">${Craft.t('app', 'Expand')}</a></li>\n        <li><a data-icon=\"disabled\" data-action=\"disable\">${Craft.t('app', 'Disable')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"enabled\" data-action=\"enable\">${Craft.t('app', 'Enable')}</a></li>\n        <li><a data-icon=\"uarr\" data-action=\"moveUp\">${Craft.t('app', 'Move up')}</a></li>\n        <li><a data-icon=\"darr\" data-action=\"moveDown\">${Craft.t('app', 'Move down')}</a></li>\n      </ul>`;\n\n            if (!this.settings.staticBlocks) {\n                html += `\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">\n        <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('app', 'Delete')}</a></li>\n      </ul>\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">`;\n\n                for (var i = 0; i < this.blockTypes.length; i++) {\n                    var blockType = this.blockTypes[i];\n                    html += `\n        <li><a data-icon=\"plus\" data-action=\"add\" data-type=\"${blockType.handle}\">${Craft.t('app', 'Add {type} above', {type: blockType.name})}</a></li>`;\n                }\n\n                html += `\n      </ul>`\n            }\n\n            html += `\n    </div>\n    <a class=\"move icon\" title=\"${Craft.t('app', 'Reorder')}\" role=\"button\"></a>\n  </div>\n</div>`;\n\n            var $block = $(html);\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            if ($insertBefore) {\n                $block.insertBefore($insertBefore);\n            } else {\n                $block.appendTo(this.$blockContainer);\n            }\n\n            var $fieldsContainer = $('<div class=\"fields\"/>').appendTo($block),\n                bodyHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].bodyHtml, id),\n                footHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].footHtml, id);\n\n            $(bodyHtml).appendTo($fieldsContainer);\n\n            this.trigger('blockAdded', {\n                $block: $block\n            });\n\n            // Animate the block into position\n            $block.css(this.getHiddenBlockCss($block)).velocity({\n                opacity: 1,\n                'margin-bottom': 10\n            }, 'fast', $.proxy(function() {\n                $block.css('margin-bottom', '');\n                Garnish.$bod.append(footHtml);\n                Craft.initUiElements($fieldsContainer);\n                new MatrixBlock(this, $block);\n                this.blockSort.addItems($block);\n                this.blockSelect.addItems($block);\n                this.updateAddBlockBtn();\n\n                Garnish.requestAnimationFrame(function() {\n                    // Scroll to the block\n                    Garnish.scrollContainerToElement($block);\n\n                    // Focus on the first text input\n                    $block.find('.text,[contenteditable]').first().trigger('focus');\n\n                    // Resume the draft editor\n                    if (window.draftEditor) {\n                        window.draftEditor.resume();\n                    }\n                });\n            }, this));\n        },\n\n        getBlockTypeByHandle: function(handle) {\n            for (var i = 0; i < this.blockTypes.length; i++) {\n                if (this.blockTypes[i].handle === handle) {\n                    return this.blockTypes[i];\n                }\n            }\n        },\n\n        collapseSelectedBlocks: function() {\n            this.callOnSelectedBlocks('collapse');\n        },\n\n        expandSelectedBlocks: function() {\n            this.callOnSelectedBlocks('expand');\n        },\n\n        disableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('disable');\n        },\n\n        enableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('enable');\n        },\n\n        deleteSelectedBlocks: function() {\n            this.callOnSelectedBlocks('selfDestruct');\n        },\n\n        callOnSelectedBlocks: function(fn) {\n            for (var i = 0; i < this.blockSelect.$selectedItems.length; i++) {\n                this.blockSelect.$selectedItems.eq(i).data('block')[fn]();\n            }\n        },\n\n        getHiddenBlockCss: function($block) {\n            return {\n                opacity: 0,\n                marginBottom: -($block.outerHeight())\n            };\n        },\n\n        getParsedBlockHtml: function(html, id) {\n            if (typeof html === 'string') {\n                return html.replace(new RegExp(`__BLOCK_${this.settings.placeholderKey}__`, 'g'), id);\n            } else {\n                return '';\n            }\n        },\n\n        get maxBlocks() {\n            return this.settings.maxBlocks;\n        },\n    }, {\n        defaults: {\n            placeholderKey: null,\n            maxBlocks: null,\n            staticBlocks: false,\n        },\n\n        collapsedBlockStorageKey: 'Craft-' + Craft.systemUid + '.MatrixInput.collapsedBlocks',\n\n        getCollapsedBlockIds: function() {\n            if (typeof localStorage[Craft.MatrixInput.collapsedBlockStorageKey] === 'string') {\n                return Craft.filterArray(localStorage[Craft.MatrixInput.collapsedBlockStorageKey].split(','));\n            } else {\n                return [];\n            }\n        },\n\n        setCollapsedBlockIds: function(ids) {\n            localStorage[Craft.MatrixInput.collapsedBlockStorageKey] = ids.join(',');\n        },\n\n        rememberCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                if ($.inArray('' + id, collapsedBlocks) === -1) {\n                    collapsedBlocks.push(id);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        },\n\n        forgetCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        }\n    });\n\n    var MatrixBlock = Garnish.Base.extend({\n        matrix: null,\n        $container: null,\n        $titlebar: null,\n        $fieldsContainer: null,\n        $previewContainer: null,\n        $actionMenu: null,\n        $collapsedInput: null,\n\n        isNew: null,\n        id: null,\n\n        collapsed: false,\n\n        init: function(matrix, $container) {\n            this.matrix = matrix;\n            this.$container = $container;\n            this.$titlebar = $container.children('.titlebar');\n            this.$previewContainer = this.$titlebar.children('.preview');\n            this.$fieldsContainer = $container.children('.fields');\n\n            this.$container.data('block', this);\n\n            this.id = this.$container.data('id');\n            this.isNew = (!this.id || (typeof this.id === 'string' && this.id.substr(0, 3) === 'new'));\n\n            var $menuBtn = this.$container.find('> .actions > .settings'),\n                menuBtn = new Garnish.MenuBtn($menuBtn);\n\n            this.$actionMenu = menuBtn.menu.$container;\n\n            menuBtn.menu.settings.onOptionSelect = $.proxy(this, 'onMenuOptionSelect');\n\n            menuBtn.menu.on('show', () => {\n                this.$container.addClass('active');\n                if (this.$container.prev('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().addClass('hidden');\n                }\n                if (this.$container.next('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().addClass('hidden');\n                }\n            });\n            menuBtn.menu.on('hide', () => {\n                this.$container.removeClass('active');\n            });\n\n            // Was this block already collapsed?\n            if (Garnish.hasAttr(this.$container, 'data-collapsed')) {\n                this.collapse();\n            }\n\n            this._handleTitleBarClick = function(ev) {\n                ev.preventDefault();\n                this.toggle();\n            };\n\n            this.addListener(this.$titlebar, 'doubletap', this._handleTitleBarClick);\n        },\n\n        toggle: function() {\n            if (this.collapsed) {\n                this.expand();\n            } else {\n                this.collapse(true);\n            }\n        },\n\n        collapse: function(animate) {\n            if (this.collapsed) {\n                return;\n            }\n\n            this.$container.addClass('collapsed');\n\n            var previewHtml = '',\n                $fields = this.$fieldsContainer.children().children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $inputs = $field.children('.input').find('select,input[type!=\"hidden\"],textarea,.label'),\n                    inputPreviewText = '';\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $($inputs[j]),\n                        value;\n\n                    if ($input.hasClass('label')) {\n                        var $maybeLightswitchContainer = $input.parent().parent();\n\n                        if ($maybeLightswitchContainer.hasClass('lightswitch') && (\n                            ($maybeLightswitchContainer.hasClass('on') && $input.hasClass('off')) ||\n                            (!$maybeLightswitchContainer.hasClass('on') && $input.hasClass('on'))\n                        )) {\n                            continue;\n                        }\n\n                        value = $input.text();\n                    } else {\n                        value = Craft.getText(Garnish.getInputPostVal($input));\n                    }\n\n                    if (value instanceof Array) {\n                        value = value.join(', ');\n                    }\n\n                    if (value) {\n                        value = Craft.trim(value);\n\n                        if (value) {\n                            if (inputPreviewText) {\n                                inputPreviewText += ', ';\n                            }\n\n                            inputPreviewText += value;\n                        }\n                    }\n                }\n\n                if (inputPreviewText) {\n                    previewHtml += (previewHtml ? ' <span>|</span> ' : '') + inputPreviewText;\n                }\n            }\n\n            this.$previewContainer.html(previewHtml);\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            if (animate) {\n                this.$fieldsContainer.velocity('fadeOut', {duration: 'fast'});\n                this.$container.velocity({height: 16}, 'fast');\n            } else {\n                this.$previewContainer.show();\n                this.$fieldsContainer.hide();\n                this.$container.css({height: 16});\n            }\n\n            setTimeout($.proxy(function() {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().removeClass('hidden');\n            }, this), 200);\n\n            // Remember that?\n            if (!this.isNew) {\n                Craft.MatrixInput.rememberCollapsedBlockId(this.id);\n            } else {\n                if (!this.$collapsedInput) {\n                    this.$collapsedInput = $('<input type=\"hidden\" name=\"' + this.matrix.inputNamePrefix + '[blocks][' + this.id + '][collapsed]\" value=\"1\"/>').appendTo(this.$container);\n                } else {\n                    this.$collapsedInput.val('1');\n                }\n            }\n\n            this.collapsed = true;\n        },\n\n        expand: function() {\n            if (!this.collapsed) {\n                return;\n            }\n\n            this.$container.removeClass('collapsed');\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            var collapsedContainerHeight = this.$container.height();\n            this.$container.height('auto');\n            this.$fieldsContainer.show();\n            var expandedContainerHeight = this.$container.height();\n            var displayValue = this.$fieldsContainer.css('display') || 'block';\n            this.$container.height(collapsedContainerHeight);\n            this.$fieldsContainer.hide().velocity('fadeIn', {duration: 'fast', display: displayValue});\n            this.$container.velocity({height: expandedContainerHeight}, 'fast', $.proxy(function() {\n                this.$previewContainer.html('');\n                this.$container.height('auto');\n            }, this));\n\n            setTimeout($.proxy(function() {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().addClass('hidden');\n            }, this), 200);\n\n            // Remember that?\n            if (!this.isNew && typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + this.id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n\n            if (!this.isNew) {\n                Craft.MatrixInput.forgetCollapsedBlockId(this.id);\n            } else if (this.$collapsedInput) {\n                this.$collapsedInput.val('');\n            }\n\n            this.collapsed = false;\n        },\n\n        disable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('');\n            this.$container.addClass('disabled');\n\n            setTimeout($.proxy(function() {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().removeClass('hidden');\n            }, this), 200);\n\n            this.collapse(true);\n        },\n\n        enable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('1');\n            this.$container.removeClass('disabled');\n\n            setTimeout($.proxy(function() {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().addClass('hidden');\n            }, this), 200);\n        },\n\n        moveUp: function() {\n            let $prev = this.$container.prev('.matrixblock');\n            if ($prev.length) {\n                this.$container.insertBefore($prev);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        moveDown: function() {\n            let $next = this.$container.next('.matrixblock');\n            if ($next.length) {\n                this.$container.insertAfter($next);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        onMenuOptionSelect: function(option) {\n            var batchAction = (this.matrix.blockSelect.totalSelected > 1 && this.matrix.blockSelect.isSelected(this.$container)),\n                $option = $(option);\n\n            switch ($option.data('action')) {\n                case 'collapse': {\n                    if (batchAction) {\n                        this.matrix.collapseSelectedBlocks();\n                    } else {\n                        this.collapse(true);\n                    }\n\n                    break;\n                }\n\n                case 'expand': {\n                    if (batchAction) {\n                        this.matrix.expandSelectedBlocks();\n                    } else {\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'disable': {\n                    if (batchAction) {\n                        this.matrix.disableSelectedBlocks();\n                    } else {\n                        this.disable();\n                    }\n\n                    break;\n                }\n\n                case 'enable': {\n                    if (batchAction) {\n                        this.matrix.enableSelectedBlocks();\n                    } else {\n                        this.enable();\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'moveUp': {\n                    this.moveUp();\n                    break;\n                }\n\n                case 'moveDown': {\n                    this.moveDown();\n                    break;\n                }\n\n                case 'add': {\n                    var type = $option.data('type');\n                    this.matrix.addBlock(type, this.$container);\n                    break;\n                }\n\n                case 'delete': {\n                    if (batchAction) {\n                        if (confirm(Craft.t('app', 'Are you sure you want to delete the selected blocks?'))) {\n                            this.matrix.deleteSelectedBlocks();\n                        }\n                    } else {\n                        this.selfDestruct();\n                    }\n\n                    break;\n                }\n            }\n        },\n\n        selfDestruct: function() {\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            this.$container.velocity(this.matrix.getHiddenBlockCss(this.$container), 'fast', $.proxy(function() {\n                this.$container.remove();\n                this.matrix.updateAddBlockBtn();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n\n                this.matrix.trigger('blockDeleted', {\n                    $block: this.$container,\n                });\n            }, this));\n        }\n    });\n})(jQuery);\n"]}