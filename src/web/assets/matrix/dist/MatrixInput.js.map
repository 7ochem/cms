{"version":3,"file":"MatrixInput.js","mappings":"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","sources":["webpack:///./MatrixInput.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix input class\n     */\n    Craft.MatrixInput = Garnish.Base.extend({\n        id: null,\n        blockTypes: null,\n        blockTypesByHandle: null,\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        showingAddBlockMenu: false,\n        addBlockBtnGroupWidth: null,\n        addBlockBtnContainerWidth: null,\n\n        $container: null,\n        $form: null,\n        $blockContainer: null,\n        $addBlockBtnContainer: null,\n        $addBlockBtnGroup: null,\n        $addBlockBtnGroupBtns: null,\n\n        blockSort: null,\n        blockSelect: null,\n        totalNewBlocks: 0,\n\n        init: function(id, blockTypes, inputNamePrefix, settings) {\n            this.id = id;\n            this.blockTypes = blockTypes;\n            this.inputNamePrefix = inputNamePrefix;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n            // see if settings was actually set to the maxBlocks value\n            if (typeof settings === 'number') {\n                settings = {maxBlocks: settings};\n            }\n            this.setSettings(settings, Craft.MatrixInput.defaults);\n\n            this.$container = $('#' + this.id);\n            this.$form = this.$container.closest('form');\n            this.$blockContainer = this.$container.children('.blocks');\n            this.$addBlockBtnContainer = this.$container.children('.buttons');\n            this.$addBlockBtnGroup = this.$addBlockBtnContainer.children('.btngroup');\n            this.$addBlockBtnGroupBtns = this.$addBlockBtnGroup.children('.btn');\n            this.$addBlockMenuBtn = this.$addBlockBtnContainer.children('.menubtn');\n\n            this.$container.data('matrix', this);\n\n            this.setNewBlockBtn();\n\n            this.blockTypesByHandle = {};\n\n            var i;\n\n            for (i = 0; i < this.blockTypes.length; i++) {\n                var blockType = this.blockTypes[i];\n                this.blockTypesByHandle[blockType.handle] = blockType;\n            }\n\n            var $blocks = this.$blockContainer.children(),\n                collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n            this.blockSort = new Garnish.DragSort($blocks, {\n                handle: '> .actions > .move',\n                axis: 'y',\n                filter: () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.blockSort.$targetItem.hasClass('sel')) {\n                        return this.blockSelect.getSelectedItems();\n                    } else {\n                        return this.blockSort.$targetItem;\n                    }\n                },\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                helperOpacity: 0.9,\n                onSortChange: () => {\n                    this.blockSelect.resetItemOrder();\n                },\n            });\n\n            this.blockSelect = new Garnish.Select(this.$blockContainer, $blocks, {\n                multi: true,\n                vertical: true,\n                handle: '> .checkbox, > .titlebar',\n                checkboxMode: true\n            });\n\n            for (i = 0; i < $blocks.length; i++) {\n                var $block = $($blocks[i]),\n                    blockId = $block.data('id');\n\n                // Is this a new block?\n                var newMatch = (typeof blockId === 'string' && blockId.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlocks) {\n                    this.totalNewBlocks = parseInt(newMatch[1]);\n                }\n\n                var block = new MatrixBlock(this, $block);\n\n                if (block.id && $.inArray('' + block.id, collapsedBlocks) !== -1) {\n                    block.collapse();\n                }\n            }\n\n            this.addListener(this.$addBlockBtnGroupBtns, 'click', function(ev) {\n                var type = $(ev.target).data('type');\n                this.addBlock(type);\n            });\n\n            new Garnish.MenuBtn(this.$addBlockMenuBtn,\n                {\n                    onOptionSelect: option => {\n                        this.addBlock($(option).data('type'));\n                    },\n                });\n\n            this.updateAddBlockBtn();\n\n            this.addListener(this.$container, 'resize', 'setNewBlockBtn');\n            Garnish.$doc.ready(this.setNewBlockBtn.bind(this));\n\n            this.trigger('afterInit');\n        },\n\n        setNewBlockBtn: function() {\n            // Do we know what the button group width is yet?\n            if (!this.addBlockBtnGroupWidth) {\n                this.addBlockBtnGroupWidth = this.$addBlockBtnGroup.width();\n\n                if (!this.addBlockBtnGroupWidth) {\n                    return;\n                }\n            }\n\n            // Only check if the container width has resized\n            if (this.addBlockBtnContainerWidth !== (this.addBlockBtnContainerWidth = this.$addBlockBtnContainer.width())) {\n                if (this.addBlockBtnGroupWidth > this.addBlockBtnContainerWidth) {\n                    if (!this.showingAddBlockMenu) {\n                        this.$addBlockBtnGroup.addClass('hidden');\n                        this.$addBlockMenuBtn.removeClass('hidden');\n                        this.showingAddBlockMenu = true;\n                    }\n                } else {\n                    if (this.showingAddBlockMenu) {\n                        this.$addBlockMenuBtn.addClass('hidden');\n                        this.$addBlockBtnGroup.removeClass('hidden');\n                        this.showingAddBlockMenu = false;\n\n                        // Because Safari is awesome\n                        if (navigator.userAgent.indexOf('Safari') !== -1) {\n                            Garnish.requestAnimationFrame(() => {\n                                this.$addBlockBtnGroup.css('opacity', 0.99);\n\n                                Garnish.requestAnimationFrame(() => {\n                                    this.$addBlockBtnGroup.css('opacity', '');\n                                });\n                            });\n                        }\n                    }\n                }\n            }\n        },\n\n        canAddMoreBlocks: function() {\n            return (!this.maxBlocks || this.$blockContainer.children().length < this.maxBlocks);\n        },\n\n        updateAddBlockBtn: function() {\n            var i, block;\n\n            if (this.canAddMoreBlocks()) {\n                this.$addBlockBtnGroup.removeClass('disabled');\n                this.$addBlockMenuBtn.removeClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().removeClass('disabled');\n                    }\n                }\n            } else {\n                this.$addBlockBtnGroup.addClass('disabled');\n                this.$addBlockMenuBtn.addClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().addClass('disabled');\n                    }\n                }\n            }\n        },\n\n        addBlock: function(type, $insertBefore, autofocus) {\n            if (!this.canAddMoreBlocks()) {\n                return;\n            }\n\n            this.totalNewBlocks++;\n\n            var id = 'new' + this.totalNewBlocks;\n\n            var html = `\n<div class=\"matrixblock\" data-id=\"${id}\" data-type=\"${type}\">\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[sortOrder][]\" value=\"${id}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][type]\" value=\"${type}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][enabled]\" value=\"1\"/>\n  <div class=\"titlebar\">\n    <div class=\"blocktype\">${this.getBlockTypeByHandle(type).name}</div>\n    <div class=\"preview\"></div>\n  </div>\n  <div class=\"checkbox\" title=\"${Craft.t('app', 'Select')}\"></div>\n  <div class=\"actions\">\n    <div class=\"status off\" title=\"${Craft.t('app', 'Disabled')}\"></div>\n    <button type=\"button\" class=\"btn settings icon menubtn\" title=\"${Craft.t('app', 'Actions')}\"></button> \n    <div class=\"menu\">\n      <ul class=\"padded\">\n        <li><a data-icon=\"collapse\" data-action=\"collapse\">${Craft.t('app', 'Collapse')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"expand\" data-action=\"expand\">${Craft.t('app', 'Expand')}</a></li>\n        <li><a data-icon=\"disabled\" data-action=\"disable\">${Craft.t('app', 'Disable')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"enabled\" data-action=\"enable\">${Craft.t('app', 'Enable')}</a></li>\n        <li><a data-icon=\"uarr\" data-action=\"moveUp\">${Craft.t('app', 'Move up')}</a></li>\n        <li><a data-icon=\"darr\" data-action=\"moveDown\">${Craft.t('app', 'Move down')}</a></li>\n      </ul>`;\n\n            if (!this.settings.staticBlocks) {\n                html += `\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">\n        <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('app', 'Delete')}</a></li>\n      </ul>\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">`;\n\n                for (var i = 0; i < this.blockTypes.length; i++) {\n                    var blockType = this.blockTypes[i];\n                    html += `\n        <li><a data-icon=\"plus\" data-action=\"add\" data-type=\"${blockType.handle}\">${Craft.t('app', 'Add {type} above', {type: blockType.name})}</a></li>`;\n                }\n\n                html += `\n      </ul>`\n            }\n\n            html += `\n    </div>\n    <a class=\"move icon\" title=\"${Craft.t('app', 'Reorder')}\" role=\"button\"></a>\n  </div>\n</div>`;\n\n            var $block = $(html);\n\n            // Pause the draft editor\n            if (this.$form.data('elementEditor')) {\n                this.$form.data('elementEditor').pause();\n            }\n\n            if ($insertBefore) {\n                $block.insertBefore($insertBefore);\n            } else {\n                $block.appendTo(this.$blockContainer);\n            }\n\n            var $fieldsContainer = $('<div class=\"fields\"/>').appendTo($block),\n                bodyHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].bodyHtml, id),\n                js = this.getParsedBlockHtml(this.blockTypesByHandle[type].js, id);\n\n            $(bodyHtml).appendTo($fieldsContainer);\n\n            this.trigger('blockAdded', {\n                $block: $block\n            });\n\n            // Animate the block into position\n            $block.css(this.getHiddenBlockCss($block)).velocity({\n                opacity: 1,\n                'margin-bottom': 10\n            }, 'fast', () => {\n                $block.css('margin-bottom', '');\n                Garnish.$bod.append(js);\n                Craft.initUiElements($fieldsContainer);\n                new MatrixBlock(this, $block);\n                this.blockSort.addItems($block);\n                this.blockSelect.addItems($block);\n                this.updateAddBlockBtn();\n\n                Garnish.requestAnimationFrame(() => {\n                    if (typeof autofocus === 'undefined' || autofocus) {\n                        // Scroll to the block\n                        Garnish.scrollContainerToElement($block);\n                        // Focus on the first text input\n                        $block.find('.text,[contenteditable]').first().trigger('focus');\n                    }\n\n                    // Resume the draft editor\n                    if (this.$form.data('elementEditor')) {\n                        this.$form.data('elementEditor').resume();\n                    }\n                });\n            });\n        },\n\n        getBlockTypeByHandle: function(handle) {\n            for (var i = 0; i < this.blockTypes.length; i++) {\n                if (this.blockTypes[i].handle === handle) {\n                    return this.blockTypes[i];\n                }\n            }\n        },\n\n        collapseSelectedBlocks: function() {\n            this.callOnSelectedBlocks('collapse');\n        },\n\n        expandSelectedBlocks: function() {\n            this.callOnSelectedBlocks('expand');\n        },\n\n        disableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('disable');\n        },\n\n        enableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('enable');\n        },\n\n        deleteSelectedBlocks: function() {\n            this.callOnSelectedBlocks('selfDestruct');\n        },\n\n        callOnSelectedBlocks: function(fn) {\n            for (var i = 0; i < this.blockSelect.$selectedItems.length; i++) {\n                this.blockSelect.$selectedItems.eq(i).data('block')[fn]();\n            }\n        },\n\n        getHiddenBlockCss: function($block) {\n            return {\n                opacity: 0,\n                marginBottom: -($block.outerHeight())\n            };\n        },\n\n        getParsedBlockHtml: function(html, id) {\n            if (typeof html === 'string') {\n                return html.replace(new RegExp(`__BLOCK_${this.settings.placeholderKey}__`, 'g'), id);\n            } else {\n                return '';\n            }\n        },\n\n        get maxBlocks() {\n            return this.settings.maxBlocks;\n        },\n    }, {\n        defaults: {\n            placeholderKey: null,\n            maxBlocks: null,\n            staticBlocks: false,\n        },\n\n        collapsedBlockStorageKey: 'Craft-' + Craft.systemUid + '.MatrixInput.collapsedBlocks',\n\n        getCollapsedBlockIds: function() {\n            if (typeof localStorage[Craft.MatrixInput.collapsedBlockStorageKey] === 'string') {\n                return Craft.filterArray(localStorage[Craft.MatrixInput.collapsedBlockStorageKey].split(','));\n            } else {\n                return [];\n            }\n        },\n\n        setCollapsedBlockIds: function(ids) {\n            localStorage[Craft.MatrixInput.collapsedBlockStorageKey] = ids.join(',');\n        },\n\n        rememberCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                if ($.inArray('' + id, collapsedBlocks) === -1) {\n                    collapsedBlocks.push(id);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        },\n\n        forgetCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        }\n    });\n\n    var MatrixBlock = Garnish.Base.extend({\n        matrix: null,\n        $container: null,\n        $titlebar: null,\n        $fieldsContainer: null,\n        $previewContainer: null,\n        $actionMenu: null,\n        $collapsedInput: null,\n\n        isNew: null,\n        id: null,\n\n        collapsed: false,\n\n        init: function(matrix, $container) {\n            this.matrix = matrix;\n            this.$container = $container;\n            this.$titlebar = $container.children('.titlebar');\n            this.$previewContainer = this.$titlebar.children('.preview');\n            this.$fieldsContainer = $container.children('.fields');\n\n            this.$container.data('block', this);\n\n            this.id = this.$container.data('id');\n            this.isNew = (!this.id || (typeof this.id === 'string' && this.id.substr(0, 3) === 'new'));\n\n            var $menuBtn = this.$container.find('> .actions > .settings'),\n                menuBtn = new Garnish.MenuBtn($menuBtn);\n\n            this.$actionMenu = menuBtn.menu.$container;\n\n            menuBtn.menu.settings.onOptionSelect = this.onMenuOptionSelect.bind(this);\n\n            menuBtn.menu.on('show', () => {\n                this.$container.addClass('active');\n                if (this.$container.prev('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().addClass('hidden');\n                }\n                if (this.$container.next('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().addClass('hidden');\n                }\n            });\n            menuBtn.menu.on('hide', () => {\n                this.$container.removeClass('active');\n            });\n\n            // Was this block already collapsed?\n            if (Garnish.hasAttr(this.$container, 'data-collapsed')) {\n                this.collapse();\n            }\n\n            this._handleTitleBarClick = function(ev) {\n                ev.preventDefault();\n                this.toggle();\n            };\n\n            this.addListener(this.$titlebar, 'doubletap', this._handleTitleBarClick);\n        },\n\n        toggle: function() {\n            if (this.collapsed) {\n                this.expand();\n            } else {\n                this.collapse(true);\n            }\n        },\n\n        collapse: function(animate) {\n            if (this.collapsed) {\n                return;\n            }\n\n            this.$container.addClass('collapsed');\n\n            var previewHtml = '',\n                $fields = this.$fieldsContainer.children().children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $inputs = $field.children('.input').find('select,input[type!=\"hidden\"],textarea,.label'),\n                    inputPreviewText = '';\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $($inputs[j]),\n                        value;\n\n                    if ($input.hasClass('label')) {\n                        var $maybeLightswitchContainer = $input.parent().parent();\n\n                        if ($maybeLightswitchContainer.hasClass('lightswitch') && (\n                            ($maybeLightswitchContainer.hasClass('on') && $input.hasClass('off')) ||\n                            (!$maybeLightswitchContainer.hasClass('on') && $input.hasClass('on'))\n                        )) {\n                            continue;\n                        }\n\n                        value = $input.text();\n                    } else {\n                        value = Craft.getText(Garnish.getInputPostVal($input));\n                    }\n\n                    if (value instanceof Array) {\n                        value = value.join(', ');\n                    }\n\n                    if (value) {\n                        value = Craft.trim(Craft.escapeHtml(value));\n\n                        if (value) {\n                            if (inputPreviewText) {\n                                inputPreviewText += ', ';\n                            }\n\n                            inputPreviewText += value;\n                        }\n                    }\n                }\n\n                if (inputPreviewText) {\n                    previewHtml += (previewHtml ? ' <span>|</span> ' : '') + inputPreviewText;\n                }\n            }\n\n            this.$previewContainer.html(previewHtml);\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            if (animate) {\n                this.$fieldsContainer.velocity('fadeOut', {duration: 'fast'});\n                this.$container.velocity({height: 16}, 'fast');\n            } else {\n                this.$previewContainer.show();\n                this.$fieldsContainer.hide();\n                this.$container.css({height: 16});\n            }\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().removeClass('hidden');\n            }, 200);\n\n            // Remember that?\n            if (!this.isNew) {\n                Craft.MatrixInput.rememberCollapsedBlockId(this.id);\n            } else {\n                if (!this.$collapsedInput) {\n                    this.$collapsedInput = $('<input type=\"hidden\" name=\"' + this.matrix.inputNamePrefix + '[blocks][' + this.id + '][collapsed]\" value=\"1\"/>').appendTo(this.$container);\n                } else {\n                    this.$collapsedInput.val('1');\n                }\n            }\n\n            this.collapsed = true;\n        },\n\n        expand: function() {\n            if (!this.collapsed) {\n                return;\n            }\n\n            this.$container.removeClass('collapsed');\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            var collapsedContainerHeight = this.$container.height();\n            this.$container.height('auto');\n            this.$fieldsContainer.show();\n            var expandedContainerHeight = this.$container.height();\n            var displayValue = this.$fieldsContainer.css('display') || 'block';\n            this.$container.height(collapsedContainerHeight);\n            this.$fieldsContainer.hide().velocity('fadeIn', {duration: 'fast', display: displayValue});\n            this.$container.velocity({height: expandedContainerHeight}, 'fast', () => {\n                this.$previewContainer.html('');\n                this.$container.height('auto');\n            });\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().addClass('hidden');\n            }, 200);\n\n            // Remember that?\n            if (!this.isNew && typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + this.id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n\n            if (!this.isNew) {\n                Craft.MatrixInput.forgetCollapsedBlockId(this.id);\n            } else if (this.$collapsedInput) {\n                this.$collapsedInput.val('');\n            }\n\n            this.collapsed = false;\n        },\n\n        disable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('');\n            this.$container.addClass('disabled');\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().removeClass('hidden');\n            }, 200);\n\n            this.collapse(true);\n        },\n\n        enable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('1');\n            this.$container.removeClass('disabled');\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().addClass('hidden');\n            }, 200);\n        },\n\n        moveUp: function() {\n            let $prev = this.$container.prev('.matrixblock');\n            if ($prev.length) {\n                this.$container.insertBefore($prev);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        moveDown: function() {\n            let $next = this.$container.next('.matrixblock');\n            if ($next.length) {\n                this.$container.insertAfter($next);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        onMenuOptionSelect: function(option) {\n            var batchAction = (this.matrix.blockSelect.totalSelected > 1 && this.matrix.blockSelect.isSelected(this.$container)),\n                $option = $(option);\n\n            switch ($option.data('action')) {\n                case 'collapse': {\n                    if (batchAction) {\n                        this.matrix.collapseSelectedBlocks();\n                    } else {\n                        this.collapse(true);\n                    }\n\n                    break;\n                }\n\n                case 'expand': {\n                    if (batchAction) {\n                        this.matrix.expandSelectedBlocks();\n                    } else {\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'disable': {\n                    if (batchAction) {\n                        this.matrix.disableSelectedBlocks();\n                    } else {\n                        this.disable();\n                    }\n\n                    break;\n                }\n\n                case 'enable': {\n                    if (batchAction) {\n                        this.matrix.enableSelectedBlocks();\n                    } else {\n                        this.enable();\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'moveUp': {\n                    this.moveUp();\n                    break;\n                }\n\n                case 'moveDown': {\n                    this.moveDown();\n                    break;\n                }\n\n                case 'add': {\n                    var type = $option.data('type');\n                    this.matrix.addBlock(type, this.$container);\n                    break;\n                }\n\n                case 'delete': {\n                    if (batchAction) {\n                        if (confirm(Craft.t('app', 'Are you sure you want to delete the selected blocks?'))) {\n                            this.matrix.deleteSelectedBlocks();\n                        }\n                    } else {\n                        this.selfDestruct();\n                    }\n\n                    break;\n                }\n            }\n        },\n\n        selfDestruct: function() {\n            // Pause the draft editor\n            if (this.matrix.$form.data('elementEditor')) {\n                this.matrix.$form.data('elementEditor').pause();\n            }\n\n            this.$container.velocity(this.matrix.getHiddenBlockCss(this.$container), 'fast', () => {\n                this.$container.remove();\n                this.matrix.updateAddBlockBtn();\n\n                // Resume the draft editor\n                if (this.matrix.$form.data('elementEditor')) {\n                    this.matrix.$form.data('elementEditor').resume();\n                }\n\n                this.matrix.trigger('blockDeleted', {\n                    $block: this.$container,\n                });\n            });\n        }\n    });\n})(jQuery);\n"],"names":["$","Craft","MatrixInput","Garnish","Base","extend","id","blockTypes","blockTypesByHandle","inputNamePrefix","inputIdPrefix","showingAddBlockMenu","addBlockBtnGroupWidth","addBlockBtnContainerWidth","$container","$form","$blockContainer","$addBlockBtnContainer","$addBlockBtnGroup","$addBlockBtnGroupBtns","blockSort","blockSelect","totalNewBlocks","init","settings","i","this","formatInputId","maxBlocks","setSettings","defaults","closest","children","$addBlockMenuBtn","data","setNewBlockBtn","length","blockType","handle","$blocks","collapsedBlocks","getCollapsedBlockIds","DragSort","axis","filter","$targetItem","hasClass","getSelectedItems","collapseDraggees","magnetStrength","helperLagBase","helperOpacity","onSortChange","resetItemOrder","Select","multi","vertical","checkboxMode","$block","blockId","newMatch","match","parseInt","block","MatrixBlock","inArray","collapse","addListener","ev","type","target","addBlock","MenuBtn","onOptionSelect","option","updateAddBlockBtn","$doc","ready","bind","trigger","width","addClass","removeClass","navigator","userAgent","indexOf","requestAnimationFrame","css","canAddMoreBlocks","$items","eq","$actionMenu","find","parent","$insertBefore","autofocus","html","getBlockTypeByHandle","name","t","staticBlocks","pause","insertBefore","appendTo","$fieldsContainer","bodyHtml","getParsedBlockHtml","js","getHiddenBlockCss","velocity","opacity","$bod","append","initUiElements","addItems","scrollContainerToElement","first","resume","collapseSelectedBlocks","callOnSelectedBlocks","expandSelectedBlocks","disableSelectedBlocks","enableSelectedBlocks","deleteSelectedBlocks","fn","$selectedItems","marginBottom","outerHeight","replace","RegExp","placeholderKey","collapsedBlockStorageKey","systemUid","localStorage","filterArray","split","setCollapsedBlockIds","ids","join","rememberCollapsedBlockId","Storage","push","forgetCollapsedBlockId","collapsedBlocksIndex","splice","matrix","$titlebar","$previewContainer","$collapsedInput","isNew","collapsed","substr","$menuBtn","menuBtn","menu","onMenuOptionSelect","on","prev","next","hasAttr","_handleTitleBarClick","preventDefault","toggle","expand","animate","previewHtml","$fields","$inputs","inputPreviewText","j","value","$input","$maybeLightswitchContainer","text","getText","getInputPostVal","Array","trim","escapeHtml","duration","height","show","hide","setTimeout","val","collapsedContainerHeight","expandedContainerHeight","displayValue","display","disable","enable","moveUp","$prev","moveDown","$next","insertAfter","batchAction","totalSelected","isSelected","$option","confirm","selfDestruct","remove","jQuery"],"sourceRoot":""}