{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","maxConcurrentConnections","this","_currentConnectionCount","_tasksWaiting","_priorityTasks","_prunedSessionIds","indexingSessions","_currentIndexingSession","createSessionFromModel","sessionModel","_maxConcurrentConnections","ACTIONREQUIRED","reviewSessionId","getSessionStatus","QUEUE","session","CLI","updateIndexingSessionData","currentIndexingSession","indexingSession","getSessionId","renderIndexingSessionRow","$row","includes","find","remove","length","addClass","$existing","undefined","append","discardIndexingSession","sessionId","getIndexingSessionRowHtml","runTasks","processResponse","response","textStatus","error","alert","skipDialog","reviewSession","stop","getReviewData","params","$confirmBody","missingEntries","getMissingEntries","missingFiles","files","Object","entries","missingFolders","folders","skippedFiles","getSkippedEntries","performIndexingStep","skippedFile","Craft","t","skippedFilesList","haveMissingItems","enqueueTask","items","itemText","id","uri","$","translationParams","$modal","appendTo","Garnish","$bod","$body","html","$footer","$buttons","modal","Modal","hideOnEsc","type","text","class","initUiElements","on","ev","preventDefault","onHide","postData","getPostData","postParams","expandPostArray","task","action","FINISH","startIndexing","cb","START","concurrentSlots","i","Math","min","getEntriesRemaining","PROCESS","settings","hide","pruneWaitingTasks","newTaskList","postActionRequest","push","modified","prioritize","shift","bind","_updateCurrentIndexingSession","values","stopIndexingSession","sessionData","AssetIndexingSession","model","indexer","indexingSessionData","totalEntries","processedEntries","isCli","queueId","actionRequired","ACTIVE","WAITING","$tr","indexedVolumes","join","dateCreated","dateUpdated","css","progressBar","updateProgressBar","showProgressBar","$progressCell","data","getSessionStatusMessage","$actions","getActionButtons","title","reviewMessage","aria-label","$container","target","parent","hasClass","discardMessage","setItemCount"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"QUEUE\"] = 2] = \"QUEUE\";\n    SessionStatus[SessionStatus[\"WAITING\"] = 3] = \"WAITING\";\n    SessionStatus[SessionStatus[\"CLI\"] = 4] = \"CLI\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"START\"] = \"asset-indexes/start-indexing\";\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n    IndexingActions[\"PROCESS\"] = \"asset-indexes/process-indexing-session\";\n    IndexingActions[\"OVERVIEW\"] = \"asset-indexes/indexing-session-overview\";\n    IndexingActions[\"FINISH\"] = \"asset-indexes/finish-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions, maxConcurrentConnections = 3) {\n        this._currentIndexingSession = null;\n        this._currentConnectionCount = 0;\n        this._tasksWaiting = [];\n        this._priorityTasks = [];\n        this._prunedSessionIds = [];\n        this.indexingSessions = {};\n        this._maxConcurrentConnections = maxConcurrentConnections;\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        let reviewSessionId = 0;\n        for (const sessionModel of sessions) {\n            let session = this.createSessionFromModel(sessionModel);\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !reviewSessionId) {\n                reviewSessionId = session.getSessionId();\n            }\n            if (!reviewSessionId\n                && this._currentIndexingSession == null\n                && session.getSessionStatus() !== SessionStatus.QUEUE\n                && session.getSessionStatus() !== SessionStatus.CLI\n                && session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            this.updateIndexingSessionData(session);\n        }\n        if (this._currentIndexingSession) {\n            this.performIndexingStep();\n        }\n    }\n    get currentIndexingSession() {\n        return this._currentIndexingSession;\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(indexingSession) {\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (session === undefined) {\n            return;\n        }\n        if (!this.indexingSessions[session.getSessionId()] || this._prunedSessionIds.includes(session.getSessionId())) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        if (this._currentIndexingSession === sessionId) {\n            this._currentIndexingSession = null;\n        }\n        this.renderIndexingSessionRow(session);\n        this.runTasks();\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        this._currentConnectionCount--;\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            // A mere error shall not stop the party.\n            this.runTasks();\n            return;\n        }\n        if (textStatus === 'success' && response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n            if (!this._currentIndexingSession) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !response.skipDialog) {\n                if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                    this.reviewSession(session);\n                }\n                else {\n                    this.runTasks();\n                }\n            }\n            else if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                this.performIndexingStep();\n            }\n            else {\n                this.runTasks();\n            }\n        }\n        if (textStatus === 'success' && response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    getReviewData(session) {\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.OVERVIEW,\n            params: { sessionId: session.getSessionId() }\n        };\n        this.enqueueTask(task);\n    }\n    reviewSession(session) {\n        this.pruneWaitingTasks(session.getSessionId());\n        let $confirmBody = $('<div></div>');\n        const missingEntries = session.getMissingEntries();\n        const missingFiles = missingEntries.files ? Object.entries(missingEntries.files) : [];\n        const missingFolders = missingEntries.folders ? Object.entries(missingEntries.folders) : [];\n        const skippedFiles = session.getSkippedEntries();\n        if (skippedFiles.length) {\n            let skippedFilesList = '';\n            for (const skippedFile of skippedFiles) {\n                skippedFilesList += `<li>${skippedFile}</li>`;\n            }\n            $confirmBody.append(`\n                <h2>${Craft.t('app', 'Skipped files')}</h2>\n                <p>${Craft.t('app', 'The following items were not indexed.')}</p>\n                <ul>\n                    ${skippedFilesList}\n                </ul>\n            `);\n        }\n        const haveMissingItems = missingFiles.length || missingFolders.length;\n        if (haveMissingItems) {\n            let itemText = '';\n            if (missingFiles.length) {\n                itemText += 'files';\n            }\n            if (missingFiles.length && missingFolders.length) {\n                itemText += ' and ';\n            }\n            if (missingFolders.length) {\n                itemText += 'folders';\n            }\n            const translationParams = { items: itemText };\n            let missingEntries = '';\n            for (const [id, uri] of missingFolders) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteFolder[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            for (const [id, uri] of missingFiles) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteAsset[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            $confirmBody.append($(`\n                <h2>${Craft.t('app', 'Missing {items}', translationParams)}</h2>\n                <p>${Craft.t('app', 'The following {items} could not be found. Should they be deleted from the index?', translationParams)}</p>\n                <ul>\n                    ${missingEntries}\n                </ul>\n            `));\n        }\n        const $modal = $('<form class=\"modal fitted confirmmodal\"/>').appendTo(Garnish.$bod);\n        const $body = $('<div class=\"body\"/>').appendTo($modal).html($confirmBody.html());\n        const $footer = $('<footer class=\"footer\"/>').appendTo($modal);\n        const $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        const modal = new Garnish.Modal($modal, {\n            hideOnEsc: false,\n            hideOnShadeClick: false,\n        });\n        if (haveMissingItems) {\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Keep them'),\n            })\n                .appendTo($buttons);\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Delete them'),\n            }).appendTo($buttons);\n        }\n        else {\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'OK'),\n            }).appendTo($buttons);\n        }\n        Craft.initUiElements($body);\n        modal.updateSizeAndPosition();\n        $modal.on('submit', (ev) => {\n            ev.preventDefault();\n            modal.settings.onHide = $.noop;\n            modal.hide();\n            const postData = Garnish.getPostData($body);\n            const postParams = Craft.expandPostArray(postData);\n            postParams.sessionId = session.getSessionId();\n            // Make this the next task for sure?\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.FINISH,\n                params: postParams\n            };\n            this.enqueueTask(task, true);\n        });\n    }\n    startIndexing(params, cb) {\n        Craft.postActionRequest(IndexingActions.START, params, (response, textStatus) => {\n            cb();\n            this.processResponse(response, textStatus);\n        });\n    }\n    performIndexingStep() {\n        if (!this._currentIndexingSession) {\n            this._updateCurrentIndexingSession();\n        }\n        if (!this._currentIndexingSession) {\n            return;\n        }\n        const session = this.indexingSessions[this._currentIndexingSession];\n        const concurrentSlots = this._maxConcurrentConnections - this._currentConnectionCount;\n        // Queue up at least enough tasks to use up all the free connections of finish the session.\n        for (let i = 0; i < Math.min(concurrentSlots, session.getEntriesRemaining()); i++) {\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.PROCESS,\n                params: { sessionId: this._currentIndexingSession }\n            };\n            this.enqueueTask(task);\n        }\n    }\n    /**\n     * Stop and discard an indexing session.\n     *\n     * @param session\n     */\n    stopIndexingSession(session) {\n        this.pruneWaitingTasks(session.getSessionId());\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.STOP,\n            params: { sessionId: session.getSessionId() }\n        };\n        this.enqueueTask(task, true);\n    }\n    /**\n     * Pune the waiting task list by removing all tasks for a session id.\n     *\n     * @param sessionId\n     */\n    pruneWaitingTasks(sessionId) {\n        const newTaskList = [];\n        let modified = false;\n        this._prunedSessionIds.push(sessionId);\n        for (const task of this._tasksWaiting) {\n            if (task.sessionId !== sessionId) {\n                newTaskList.push(task);\n            }\n            else {\n                modified = true;\n            }\n        }\n        if (modified) {\n            this._tasksWaiting = newTaskList;\n        }\n    }\n    enqueueTask(task, prioritize = false) {\n        if (prioritize) {\n            this._priorityTasks.push(task);\n        }\n        else {\n            this._tasksWaiting.push(task);\n        }\n        this.runTasks();\n    }\n    runTasks() {\n        if (this._tasksWaiting.length + this._priorityTasks.length === 0 || this._currentConnectionCount >= this._maxConcurrentConnections) {\n            return;\n        }\n        while (this._tasksWaiting.length + this._priorityTasks.length !== 0 && this._currentConnectionCount < this._maxConcurrentConnections) {\n            this._currentConnectionCount++;\n            const task = this._priorityTasks.length > 0 ? this._priorityTasks.shift() : this._tasksWaiting.shift();\n            Craft.postActionRequest(task.action, task.params, this.processResponse.bind(this));\n        }\n    }\n    _updateCurrentIndexingSession() {\n        for (const session of Object.values(this.indexingSessions)) {\n            if (session.getSessionStatus() !== SessionStatus.QUEUE && session.getSessionStatus() !== SessionStatus.CLI) {\n                this._currentIndexingSession = session.getSessionId();\n                return;\n            }\n        }\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    /**\n     * Get the remaining entry count for this sessions.\n     */\n    getEntriesRemaining() {\n        return this.indexingSessionData.totalEntries - this.indexingSessionData.processedEntries;\n    }\n    /**\n     * Get the session status.\n     */\n    getSessionStatus() {\n        if (this.indexingSessionData.isCli) {\n            return SessionStatus.CLI;\n        }\n        if (this.indexingSessionData.queueId) {\n            return SessionStatus.QUEUE;\n        }\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        if (this.indexer.currentIndexingSession === this.indexingSessionData.id) {\n            return SessionStatus.ACTIVE;\n        }\n        return SessionStatus.WAITING;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.append('<td>' + Object.values(this.indexingSessionData.indexedVolumes).join(', ') + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateUpdated + '</td>');\n        const $progressCell = $('<td class=\"progress\"></td>').css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell, false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $tr.append($progressCell.data('progressBar', progressBar));\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        if (this.getSessionStatus() === SessionStatus.QUEUE || this.getSessionStatus() === SessionStatus.CLI) {\n            return $();\n        }\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                this.indexer.getReviewData(this);\n            }));\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this);\n        }));\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.WAITING:\n                return Craft.t('app', 'Waiting');\n                break;\n            case SessionStatus.QUEUE:\n                return Craft.t('app', 'Running in background');\n                break;\n            case SessionStatus.CLI:\n                return Craft.t('app', 'Running via CLI');\n                break;\n        }\n    }\n    /**\n     * Return a list of missing entries for this session\n     */\n    getMissingEntries() {\n        return this.indexingSessionData.missingEntries;\n    }\n    /**\n     * Return a list of skipped entries for this session\n     */\n    getSkippedEntries() {\n        return this.indexingSessionData.skippedEntries;\n    }\n}\n"]}