{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","maxConcurrentConnections","this","_currentConnectionCount","_tasksWaiting","_priorityTasks","_prunedSessionIds","indexingSessions","_currentIndexingSession","createSessionFromModel","sessionModel","_maxConcurrentConnections","ACTIONREQUIRED","reviewSessionId","getSessionStatus","session","updateIndexingSessionData","performIndexingStep","currentIndexingSession","indexingSession","getSessionId","renderIndexingSessionRow","$row","undefined","includes","remove","find","length","addClass","getIndexingSessionRowHtml","$existing","replaceWith","append","removeClass","discardIndexingSession","sessionId","processResponse","response","textStatus","error","alert","runTasks","skipDialog","_updateCurrentIndexingSession","stop","getReviewData","task","enqueueTask","reviewSession","pruneWaitingTasks","$confirmBody","$","missingEntries","getMissingEntries","missingFiles","files","Object","entries","missingFolders","folders","getSkippedEntries","skippedFiles","skippedFile","skippedFilesList","Craft","t","haveMissingItems","translationParams","items","itemText","id","uri","appendTo","Garnish","$bod","$body","$modal","html","$footer","$buttons","modal","hideOnEsc","hideOnShadeClick","type","on","ev","stopIndexingSession","settings","onHide","noop","hide","class","updateSizeAndPosition","preventDefault","postData","getPostData","postParams","expandPostArray","action","FINISH","params","startIndexing","cb","START","Modal","$cancelBtn","i","Math","min","concurrentSlots","getEntriesRemaining","PROCESS","initUiElements","STOP","newTaskList","push","modified","prioritize","shift","postActionRequest","callback","values","sessionData","AssetIndexingSession","model","indexer","indexingSessionData","totalEntries","processedEntries","actionRequired","ACTIVE","WAITING","$tr","indexedVolumes","join","dateUpdated","progressBar","setProcessedItemCount","$progressCell","data","getSessionStatusMessage","$actions","getActionButtons","reviewMessage","title","aria-label","text","target","parent","$container","discardMessage","hasClass","skippedEntries"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"WAITING\"] = 2] = \"WAITING\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"START\"] = \"asset-indexes/start-indexing\";\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n    IndexingActions[\"PROCESS\"] = \"asset-indexes/process-indexing-session\";\n    IndexingActions[\"OVERVIEW\"] = \"asset-indexes/indexing-session-overview\";\n    IndexingActions[\"FINISH\"] = \"asset-indexes/finish-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions, maxConcurrentConnections = 3) {\n        this._currentIndexingSession = null;\n        this._currentConnectionCount = 0;\n        this._tasksWaiting = [];\n        this._priorityTasks = [];\n        this._prunedSessionIds = [];\n        this.indexingSessions = {};\n        this._maxConcurrentConnections = maxConcurrentConnections;\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        let reviewSessionId = 0;\n        for (const sessionModel of sessions) {\n            let session = this.createSessionFromModel(sessionModel);\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !reviewSessionId) {\n                reviewSessionId = session.getSessionId();\n            }\n            if (!reviewSessionId\n                && this._currentIndexingSession == null\n                && session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            this.updateIndexingSessionData(session);\n        }\n        if (this._currentIndexingSession) {\n            this.performIndexingStep();\n        }\n    }\n    get currentIndexingSession() {\n        return this._currentIndexingSession;\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(indexingSession) {\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (session === undefined) {\n            return;\n        }\n        if (!this.indexingSessions[session.getSessionId()] || this._prunedSessionIds.includes(session.getSessionId())) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        if (this._currentIndexingSession === sessionId) {\n            this._currentIndexingSession = null;\n        }\n        this.renderIndexingSessionRow(session);\n        this.runTasks();\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        this._currentConnectionCount--;\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            // A mere error shall not stop the party.\n            this.runTasks();\n            return;\n        }\n        if (textStatus === 'success' && response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n            this._updateCurrentIndexingSession();\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !response.skipDialog) {\n                if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                    this.reviewSession(session);\n                }\n                else {\n                    this.runTasks();\n                }\n            }\n            else if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                this.performIndexingStep();\n            }\n            else {\n                this.runTasks();\n            }\n        }\n        this._updateCurrentIndexingSession();\n        if (textStatus === 'success' && response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    getReviewData(session) {\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.OVERVIEW,\n            params: { sessionId: session.getSessionId() },\n            callback: () => {\n                this.renderIndexingSessionRow(session);\n            }\n        };\n        this.enqueueTask(task);\n    }\n    reviewSession(session) {\n        this.pruneWaitingTasks(session.getSessionId());\n        let $confirmBody = $('<div></div>');\n        const missingEntries = session.getMissingEntries();\n        const missingFiles = missingEntries.files ? Object.entries(missingEntries.files) : [];\n        const missingFolders = missingEntries.folders ? Object.entries(missingEntries.folders) : [];\n        const skippedFiles = session.getSkippedEntries();\n        if (skippedFiles.length) {\n            let skippedFilesList = '';\n            for (const skippedFile of skippedFiles) {\n                skippedFilesList += `<li>${skippedFile}</li>`;\n            }\n            $confirmBody.append(`\n                <h2>${Craft.t('app', 'Skipped files')}</h2>\n                <p>${Craft.t('app', 'The following items were not indexed.')}</p>\n                <ul>\n                    ${skippedFilesList}\n                </ul>\n            `);\n        }\n        const haveMissingItems = missingFiles.length || missingFolders.length;\n        if (haveMissingItems) {\n            let itemText = '';\n            if (missingFiles.length) {\n                itemText += 'files';\n            }\n            if (missingFiles.length && missingFolders.length) {\n                itemText += ' and ';\n            }\n            if (missingFolders.length) {\n                itemText += 'folders';\n            }\n            const translationParams = { items: itemText };\n            let missingEntries = '';\n            for (const [id, uri] of missingFolders) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteFolder[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            for (const [id, uri] of missingFiles) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteAsset[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            $confirmBody.append($(`\n                <h2>${Craft.t('app', 'Missing {items}', translationParams)}</h2>\n                <p>${Craft.t('app', 'The following {items} could not be found. Should they be deleted from the index?', translationParams)}</p>\n                <ul>\n                    ${missingEntries}\n                </ul>\n            `));\n        }\n        const $modal = $('<form class=\"modal fitted confirmmodal\"/>').appendTo(Garnish.$bod);\n        const $body = $('<div class=\"body\"/>').appendTo($modal).html($confirmBody.html());\n        const $footer = $('<footer class=\"footer\"/>').appendTo($modal);\n        const $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        const modal = new Garnish.Modal($modal, {\n            hideOnEsc: false,\n            hideOnShadeClick: false,\n        });\n        if (haveMissingItems) {\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Keep them'),\n            }).on('click', ev => {\n                ev.preventDefault();\n                this.stopIndexingSession(session);\n                modal.settings.onHide = $.noop;\n                modal.hide();\n            }).appendTo($buttons);\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Delete them'),\n            }).appendTo($buttons);\n        }\n        else {\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'OK'),\n            }).appendTo($buttons);\n        }\n        Craft.initUiElements($body);\n        modal.updateSizeAndPosition();\n        $modal.on('submit', (ev) => {\n            ev.preventDefault();\n            modal.settings.onHide = $.noop;\n            modal.hide();\n            const postData = Garnish.getPostData($body);\n            const postParams = Craft.expandPostArray(postData);\n            postParams.sessionId = session.getSessionId();\n            // Make this the next task for sure?\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.FINISH,\n                params: postParams\n            };\n            this.enqueueTask(task, true);\n        });\n    }\n    startIndexing(params, cb) {\n        Craft.postActionRequest(IndexingActions.START, params, (response, textStatus) => {\n            this.processResponse(response, textStatus);\n            cb();\n        });\n    }\n    performIndexingStep() {\n        if (!this._currentIndexingSession) {\n            this._updateCurrentIndexingSession();\n        }\n        if (!this._currentIndexingSession) {\n            return;\n        }\n        const session = this.indexingSessions[this._currentIndexingSession];\n        const concurrentSlots = this._maxConcurrentConnections - this._currentConnectionCount;\n        // Queue up at least enough tasks to use up all the free connections of finish the session.\n        for (let i = 0; i < Math.min(concurrentSlots, session.getEntriesRemaining()); i++) {\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.PROCESS,\n                params: { sessionId: this._currentIndexingSession }\n            };\n            this.enqueueTask(task);\n        }\n    }\n    /**\n     * Stop and discard an indexing session.\n     *\n     * @param session\n     */\n    stopIndexingSession(session) {\n        this.pruneWaitingTasks(session.getSessionId());\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.STOP,\n            params: { sessionId: session.getSessionId() }\n        };\n        this.enqueueTask(task, true);\n    }\n    /**\n     * Pune the waiting task list by removing all tasks for a session id.\n     *\n     * @param sessionId\n     */\n    pruneWaitingTasks(sessionId) {\n        const newTaskList = [];\n        let modified = false;\n        this._prunedSessionIds.push(sessionId);\n        for (const task of this._tasksWaiting) {\n            if (task.sessionId !== sessionId) {\n                newTaskList.push(task);\n            }\n            else {\n                modified = true;\n            }\n        }\n        if (modified) {\n            this._tasksWaiting = newTaskList;\n        }\n    }\n    enqueueTask(task, prioritize = false) {\n        if (prioritize) {\n            this._priorityTasks.push(task);\n        }\n        else {\n            this._tasksWaiting.push(task);\n        }\n        this.runTasks();\n    }\n    runTasks() {\n        if (this._tasksWaiting.length + this._priorityTasks.length === 0 || this._currentConnectionCount >= this._maxConcurrentConnections) {\n            return;\n        }\n        while (this._tasksWaiting.length + this._priorityTasks.length !== 0 && this._currentConnectionCount < this._maxConcurrentConnections) {\n            this._currentConnectionCount++;\n            const task = this._priorityTasks.length > 0 ? this._priorityTasks.shift() : this._tasksWaiting.shift();\n            Craft.postActionRequest(task.action, task.params, (response, textStatus) => {\n                this.processResponse(response, textStatus);\n                if (task.callback) {\n                    task.callback();\n                }\n            });\n        }\n    }\n    _updateCurrentIndexingSession() {\n        for (const session of Object.values(this.indexingSessions)) {\n            if (session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n                return;\n            }\n        }\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    /**\n     * Get the remaining entry count for this sessions.\n     */\n    getEntriesRemaining() {\n        return this.indexingSessionData.totalEntries - this.indexingSessionData.processedEntries;\n    }\n    /**\n     * Get the session status.\n     */\n    getSessionStatus() {\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        if (this.indexer.currentIndexingSession === this.indexingSessionData.id) {\n            return SessionStatus.ACTIVE;\n        }\n        return SessionStatus.WAITING;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.append('<td>' + Object.values(this.indexingSessionData.indexedVolumes).join(', ') + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateUpdated + '</td>');\n        const $progressCell = $('<td class=\"progress\"></td>').css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell, false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $tr.append($progressCell.data('progressBar', progressBar));\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                this.indexer.getReviewData(this);\n            }));\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this);\n        }));\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.WAITING:\n                return Craft.t('app', 'Waiting');\n                break;\n        }\n    }\n    /**\n     * Return a list of missing entries for this session\n     */\n    getMissingEntries() {\n        return this.indexingSessionData.missingEntries;\n    }\n    /**\n     * Return a list of skipped entries for this session\n     */\n    getSkippedEntries() {\n        return this.indexingSessionData.skippedEntries;\n    }\n}\n"]}