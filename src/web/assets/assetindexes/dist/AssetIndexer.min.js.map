{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","maxConcurrentConnections","this","_currentConnectionCount","_tasksWaiting","indexingSessions","_maxConcurrentConnections","_currentIndexingSession","createSessionFromModel","sessionModel","ACTIONREQUIRED","reviewSessionId","getSessionStatus","QUEUE","session","CLI","updateIndexingSessionData","currentIndexingSession","indexingSession","getSessionId","renderIndexingSessionRow","$row","remove","length","addClass","getIndexingSessionRowHtml","$existing","find","append","removeClass","discardIndexingSession","sessionId","processResponse","response","textStatus","error","alert","runTasks","skipDialog","reviewSession","performIndexingStep","stop","getReviewData","OVERVIEW","params","enqueueTask","task","$","Object","missingEntries","files","folders","entries","skippedFiles","getSkippedEntries","skippedFile","skippedFilesList","$confirmBody","Craft","t","missingFiles","missingFolders","haveMissingItems","itemText","translationParams","items","id","uri","appendTo","Garnish","$bod","$body","$modal","html","$footer","$buttons","modal","hideOnEsc","hideOnShadeClick","type","class","text","initUiElements","on","ev","preventDefault","onHide","noop","hide","postData","getPostData","FINISH","_updateCurrentIndexingSession","i","Math","min","concurrentSlots","getEntriesRemaining","PROCESS","$cancelBtn","STOP","prioritize","unshift","push","updateSizeAndPosition","settings","expandPostArray","postParams","shift","action","bind","values","sessionData","AssetIndexingSession","model","indexer","stopIndexingSession","indexingSessionData","totalEntries","processedEntries","isCli","queueId","actionRequired","ACTIVE","WAITING","$tr","indexedVolumes","join","dateCreated","dateUpdated","$progressCell","css","ProgressBar","progressBar","setProcessedItemCount","updateProgressBar","showProgressBar","data","getSessionStatusMessage","$actions","getActionButtons","title","reviewMessage","aria-label","$container","target","parent","hasClass","discardMessage"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"QUEUE\"] = 2] = \"QUEUE\";\n    SessionStatus[SessionStatus[\"WAITING\"] = 3] = \"WAITING\";\n    SessionStatus[SessionStatus[\"CLI\"] = 4] = \"CLI\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n    IndexingActions[\"PROCESS\"] = \"asset-indexes/process-indexing-session\";\n    IndexingActions[\"OVERVIEW\"] = \"asset-indexes/indexing-session-overview\";\n    IndexingActions[\"FINISH\"] = \"asset-indexes/finish-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions, maxConcurrentConnections = 3) {\n        this._currentIndexingSession = null;\n        this._currentConnectionCount = 0;\n        this._tasksWaiting = [];\n        this.indexingSessions = {};\n        this._maxConcurrentConnections = maxConcurrentConnections;\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        let reviewSessionId = 0;\n        for (const sessionModel of sessions) {\n            let session = this.createSessionFromModel(sessionModel);\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !reviewSessionId) {\n                reviewSessionId = session.getSessionId();\n            }\n            if (!reviewSessionId\n                && this._currentIndexingSession == null\n                && session.getSessionStatus() !== SessionStatus.QUEUE\n                && session.getSessionStatus() !== SessionStatus.CLI\n                && session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            this.updateIndexingSessionData(session);\n        }\n        if (this._currentIndexingSession) {\n            this.performIndexingStep();\n        }\n    }\n    get currentIndexingSession() {\n        return this._currentIndexingSession;\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(indexingSession) {\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (!this.indexingSessions[session.getSessionId()]) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        if (this._currentIndexingSession === sessionId) {\n            this._currentIndexingSession = null;\n        }\n        this.renderIndexingSessionRow(session);\n        this.runTasks();\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        this._currentConnectionCount--;\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            // A mere error shall not stop the party.\n            this.runTasks();\n            return;\n        }\n        if (textStatus === 'success' && response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n            if (!this._currentIndexingSession) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !response.skipDialog) {\n                this.reviewSession(session);\n                return;\n            }\n            this.performIndexingStep();\n        }\n        if (textStatus === 'success' && response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    getReviewData(session) {\n        const task = {\n            action: IndexingActions.OVERVIEW,\n            params: { sessionId: session.getSessionId() }\n        };\n        this.enqueueTask(task);\n    }\n    reviewSession(session) {\n        let $confirmBody = $('<div></div>');\n        const missingEntries = session.getMissingEntries();\n        const missingFiles = missingEntries.files ? Object.entries(missingEntries.files) : [];\n        const missingFolders = missingEntries.folders ? Object.entries(missingEntries.folders) : [];\n        const skippedFiles = session.getSkippedEntries();\n        if (skippedFiles.length) {\n            let skippedFilesList = '';\n            for (const skippedFile of skippedFiles) {\n                skippedFilesList += `<li>${skippedFile}</li>`;\n            }\n            $confirmBody.append(`\n                <h2>${Craft.t('app', 'Skipped files')}</h2>\n                <p>${Craft.t('app', 'The following items were not indexed.')}</p>\n                <ul>\n                    ${skippedFilesList}\n                </ul>\n            `);\n        }\n        const haveMissingItems = missingFiles.length || missingFolders.length;\n        if (haveMissingItems) {\n            let itemText = '';\n            if (missingFiles.length) {\n                itemText += 'files';\n            }\n            if (missingFiles.length && missingFolders.length) {\n                itemText += ' and ';\n            }\n            if (missingFolders.length) {\n                itemText += 'folders';\n            }\n            const translationParams = { items: itemText };\n            let missingEntries = '';\n            for (const [id, uri] of missingFolders) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteFolder[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            for (const [id, uri] of missingFiles) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteAsset[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            $confirmBody.append($(`\n                <h2>${Craft.t('app', 'Missing {items}', translationParams)}</h2>\n                <p>${Craft.t('app', 'The following {items} could not be found. Should they be deleted from the index?', translationParams)}</p>\n                <ul>\n                    ${missingEntries}\n                </ul>\n            `));\n        }\n        const $modal = $('<form class=\"modal fitted confirmmodal\"/>').appendTo(Garnish.$bod);\n        const $body = $('<div class=\"body\"/>').appendTo($modal).html($confirmBody.html());\n        const $footer = $('<footer class=\"footer\"/>').appendTo($modal);\n        const $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        const modal = new Garnish.Modal($modal, {\n            hideOnEsc: false,\n            hideOnShadeClick: false,\n        });\n        if (haveMissingItems) {\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Keep them'),\n            })\n                .appendTo($buttons);\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Delete them'),\n            }).appendTo($buttons);\n        }\n        else {\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'OK'),\n            }).appendTo($buttons);\n        }\n        Craft.initUiElements($body);\n        modal.updateSizeAndPosition();\n        $modal.on('submit', (ev) => {\n            ev.preventDefault();\n            modal.settings.onHide = $.noop;\n            modal.hide();\n            const postData = Garnish.getPostData($body);\n            const postParams = Craft.expandPostArray(postData);\n            postParams.sessionId = session.getSessionId();\n            // Make this the next task for sure?\n            const task = {\n                action: IndexingActions.FINISH,\n                params: postParams\n            };\n            this.enqueueTask(task, true);\n        });\n    }\n    performIndexingStep() {\n        if (!this._currentIndexingSession) {\n            this._updateCurrentIndexingSession();\n        }\n        if (!this._currentIndexingSession) {\n            return;\n        }\n        const session = this.indexingSessions[this._currentIndexingSession];\n        const concurrentSlots = this._maxConcurrentConnections - this._currentConnectionCount;\n        // Queue up at least enough tasks to use up all the free connections of finish the session.\n        for (let i = 0; i < Math.min(concurrentSlots, session.getEntriesRemaining()); i++) {\n            const task = {\n                action: IndexingActions.PROCESS,\n                params: { sessionId: this._currentIndexingSession }\n            };\n            this.enqueueTask(task);\n        }\n    }\n    stopIndexingSession(session) {\n        const task = {\n            action: IndexingActions.STOP,\n            params: { sessionId: session.getSessionId() }\n        };\n        this.enqueueTask(task);\n    }\n    enqueueTask(task, prioritize = false) {\n        if (prioritize) {\n            this._tasksWaiting.unshift(task);\n        }\n        else {\n            this._tasksWaiting.push(task);\n        }\n        this.runTasks();\n    }\n    runTasks() {\n        if (this._tasksWaiting.length === 0 || this._currentConnectionCount >= this._maxConcurrentConnections) {\n            return;\n        }\n        while (this._tasksWaiting.length !== 0 && this._currentConnectionCount < this._maxConcurrentConnections) {\n            console.log('cue the queue');\n            this._currentConnectionCount++;\n            const task = this._tasksWaiting.shift();\n            Craft.postActionRequest(task.action, task.params, this.processResponse.bind(this));\n        }\n    }\n    _updateCurrentIndexingSession() {\n        for (const session of Object.values(this.indexingSessions)) {\n            if (session.getSessionStatus() !== SessionStatus.QUEUE && session.getSessionStatus() !== SessionStatus.CLI) {\n                this._currentIndexingSession = session.getSessionId();\n                return;\n            }\n        }\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    /**\n     * Get the remaining entry count for this sessions.\n     */\n    getEntriesRemaining() {\n        return this.indexingSessionData.totalEntries - this.indexingSessionData.processedEntries;\n    }\n    /**\n     * Get the session status.\n     */\n    getSessionStatus() {\n        if (this.indexingSessionData.isCli) {\n            return SessionStatus.CLI;\n        }\n        if (this.indexingSessionData.queueId) {\n            return SessionStatus.QUEUE;\n        }\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        if (this.indexer.currentIndexingSession === this.indexingSessionData.id) {\n            return SessionStatus.ACTIVE;\n        }\n        return SessionStatus.WAITING;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.append('<td>' + Object.values(this.indexingSessionData.indexedVolumes).join(', ') + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateUpdated + '</td>');\n        const $progressCell = $('<td class=\"progress\"></td>').css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell, false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $tr.append($progressCell.data('progressBar', progressBar));\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        if (this.getSessionStatus() === SessionStatus.QUEUE || this.getSessionStatus() === SessionStatus.CLI) {\n            return $();\n        }\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                this.indexer.getReviewData(this);\n            }));\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this);\n        }));\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.WAITING:\n                return Craft.t('app', 'Waiting');\n                break;\n            case SessionStatus.QUEUE:\n                return Craft.t('app', 'Running in background');\n                break;\n            case SessionStatus.CLI:\n                return Craft.t('app', 'Running via CLI');\n                break;\n        }\n    }\n    /**\n     * Return a list of missing entries for this session\n     */\n    getMissingEntries() {\n        return this.indexingSessionData.missingEntries;\n    }\n    /**\n     * Return a list of skipped entries for this session\n     */\n    getSkippedEntries() {\n        return this.indexingSessionData.skippedEntries;\n    }\n}\n"]}