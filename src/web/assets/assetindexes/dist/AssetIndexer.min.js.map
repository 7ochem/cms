{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","IndexerStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","this","indexingSessions","status","STOPPED","session","updateIndexingSessionData","sessionData","indexingSession","createSessionFromModel","getSessionId","renderIndexingSessionRow","$row","remove","getIndexingSessionRowHtml","$existing","find","length","replaceWith","append","discardIndexingSession","sessionId","processResponse","textStatus","response","error","alert","stop","stopIndexingSession","Craft","postActionRequest","STOP","bind","AssetIndexingSession","model","indexingSessionData","id","getSessionStatus","queueId","actionRequired","ACTIONREQUIRED","ACTIVE","console","$tr","$","data","dateCreated","dateUpdated","totalEntries","processedEntries","css","ProgressBar","$progressCell","progressBar","indexer","updateProgressBar","showProgressBar","getSessionStatusMessage","$actions","getActionButtons","appendTo","QUEUE","$buttons","t","type","class","title","reviewMessage","aria-label","text","on","ev","$container","target","parent","hasClass","addClass","setItemCount","setProcessedItemCount"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"QUEUE\"] = 2] = \"QUEUE\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\nvar IndexerStatus;\n(function (IndexerStatus) {\n    IndexerStatus[IndexerStatus[\"STOPPED\"] = 0] = \"STOPPED\";\n    IndexerStatus[IndexerStatus[\"RUNNING\"] = 1] = \"RUNNING\";\n})(IndexerStatus || (IndexerStatus = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions) {\n        this.indexingSessions = {};\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        this.status = IndexerStatus.STOPPED;\n        for (const session of sessions) {\n            this.updateIndexingSessionData(session);\n        }\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(sessionData) {\n        const indexingSession = this.createSessionFromModel(sessionData);\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (!this.indexingSessions[session.getSessionId()]) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        this.renderIndexingSessionRow(session);\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            return;\n        }\n        if (response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n        }\n        if (response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    stopIndexingSession(sessionId) {\n        Craft.postActionRequest(IndexingActions.STOP, { sessionId: sessionId }, this.processResponse.bind(this));\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    getSessionStatus() {\n        if (this.indexingSessionData.queueId) {\n            return SessionStatus.QUEUE;\n        }\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        return SessionStatus.ACTIVE;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        console.log(this.indexingSessionData);\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.data('session-id', this.indexingSessionData.id).data('as-queue', this.indexingSessionData.queueId ? this.indexingSessionData.queueId : null);\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateUpdated + '</td>');\n        const $progressCell = $('<td class=\"progress\"></td>').data('total', this.indexingSessionData.totalEntries).data('processed', this.indexingSessionData.processedEntries).css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell, false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $tr.append($progressCell.data('progressBar', progressBar));\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        if (this.getSessionStatus() === SessionStatus.QUEUE) {\n            return $();\n        }\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage)).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                // review indexing session.\n            });\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage)).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this.getSessionId());\n        });\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.QUEUE:\n                return Craft.t('app', 'Running in background');\n                break;\n        }\n    }\n}\n"]}