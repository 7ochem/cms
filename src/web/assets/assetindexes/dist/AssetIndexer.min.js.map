{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","this","indexingSessions","currentIndexingSession","session","updateIndexingSessionData","indexingSession","createSessionFromModel","sessionData","getSessionId","renderIndexingSessionRow","remove","find","length","addClass","$row","getIndexingSessionRowHtml","$existing","replaceWith","append","sessionId","processResponse","response","textStatus","error","alert","stop","discardIndexingSession","performIndexingStep","stopIndexingSession","Craft","postActionRequest","STOP","bind","AssetIndexingSession","indexingSessionData","model","indexer","id","getSessionStatus","queueId","QUEUE","ACTIVE","$tr","$","data","indexedVolumes","dateCreated","dateUpdated","$progressCell","totalEntries","processedEntries","css","progressBar","ProgressBar","setProcessedItemCount","getSessionStatusMessage","$actions","getActionButtons","appendTo","ACTIONREQUIRED","reviewMessage","t","$buttons","class","title","aria-label","text","on","ev","$container","target","parent","hasClass","discardMessage","setItemCount","updateProgressBar","showProgressBar"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"QUEUE\"] = 2] = \"QUEUE\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions) {\n        this.indexingSessions = {};\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        this.currentIndexingSession = null;\n        for (const session of sessions) {\n            this.updateIndexingSessionData(session);\n        }\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(sessionData) {\n        const indexingSession = this.createSessionFromModel(sessionData);\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (!this.indexingSessions[session.getSessionId()]) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        if (this.currentIndexingSession === sessionId) {\n            this.currentIndexingSession = null;\n        }\n        this.renderIndexingSessionRow(session);\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            return;\n        }\n        if (response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n            if (!this.currentIndexingSession) {\n                this.currentIndexingSession = session.getSessionId();\n            }\n            this.performIndexingStep();\n        }\n        if (response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    performIndexingStep() {\n    }\n    stopIndexingSession(sessionId) {\n        Craft.postActionRequest(IndexingActions.STOP, { sessionId: sessionId }, this.processResponse.bind(this));\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    getSessionStatus() {\n        if (this.indexingSessionData.queueId) {\n            return SessionStatus.QUEUE;\n        }\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        return SessionStatus.ACTIVE;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.data('session-id', this.indexingSessionData.id).data('as-queue', this.indexingSessionData.queueId ? this.indexingSessionData.queueId : null);\n        $tr.append('<td>' + this.indexingSessionData.indexedVolumes + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateUpdated + '</td>');\n        const $progressCell = $('<td class=\"progress\"></td>').data('total', this.indexingSessionData.totalEntries).data('processed', this.indexingSessionData.processedEntries).css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell, false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $tr.append($progressCell.data('progressBar', progressBar));\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        if (this.getSessionStatus() === SessionStatus.QUEUE) {\n            return $();\n        }\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage)).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                // review indexing session.\n            });\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage)).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this.getSessionId());\n        });\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.QUEUE:\n                return Craft.t('app', 'Running in background');\n                break;\n        }\n    }\n}\n"]}