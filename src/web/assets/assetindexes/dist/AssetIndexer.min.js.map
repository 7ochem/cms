{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","maxConcurrentConnections","this","_currentConnectionCount","_tasksWaiting","_priorityTasks","_prunedSessionIds","_currentlyReviewing","_currentIndexingSession","indexingSessions","createSessionFromModel","sessionModel","_maxConcurrentConnections","ACTIONREQUIRED","reviewSessionId","getSessionStatus","session","updateIndexingSessionData","performIndexingStep","currentIndexingSession","indexingSession","getSessionId","renderIndexingSessionRow","$row","undefined","includes","remove","find","length","addClass","getIndexingSessionRowHtml","$existing","replaceWith","append","removeClass","discardIndexingSession","sessionId","processResponse","response","textStatus","error","alert","runTasks","skipDialog","_updateCurrentIndexingSession","stop","getReviewData","task","enqueueTask","reviewSession","pruneWaitingTasks","$confirmBody","missingEntries","getMissingEntries","files","Object","entries","missingFolders","folders","skippedFiles","getSkippedEntries","skippedFile","Craft","t","skippedFilesList","haveMissingItems","callback","itemText","translationParams","items","uri","id","missingFiles","$","$modal","appendTo","Garnish","$bod","html","$footer","$buttons","modal","Modal","hideOnEsc","hideOnShadeClick","onHide","class","ev","preventDefault","stopIndexingSession","hide","type","text","initUiElements","$body","updateSizeAndPosition","on","postData","getPostData","postParams","expandPostArray","action","FINISH","params","startIndexing","cb","START","$cancelBtn","Math","min","concurrentSlots","getEntriesRemaining","i","PROCESS","STOP","newTaskList","modified","push","prioritize","postActionRequest","values","sessionData","AssetIndexingSession","model","indexer","indexingSessionData","totalEntries","processedEntries","actionRequired","WAITING","$tr","indexedVolumes","join","dateCreated","$progressCell","ProgressBar","progressBar","setItemCount","showProgressBar","getSessionStatusMessage","$actions","getActionButtons","reviewMessage","title","aria-label","target","parent","$container","discardMessage","hasClass","skippedEntries"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"WAITING\"] = 2] = \"WAITING\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"START\"] = \"asset-indexes/start-indexing\";\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n    IndexingActions[\"PROCESS\"] = \"asset-indexes/process-indexing-session\";\n    IndexingActions[\"OVERVIEW\"] = \"asset-indexes/indexing-session-overview\";\n    IndexingActions[\"FINISH\"] = \"asset-indexes/finish-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions, maxConcurrentConnections = 3) {\n        this._currentIndexingSession = null;\n        this._currentConnectionCount = 0;\n        this._tasksWaiting = [];\n        this._priorityTasks = [];\n        this._prunedSessionIds = [];\n        this._currentlyReviewing = false;\n        this.indexingSessions = {};\n        this._maxConcurrentConnections = maxConcurrentConnections;\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        let reviewSessionId = 0;\n        for (const sessionModel of sessions) {\n            let session = this.createSessionFromModel(sessionModel);\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !reviewSessionId) {\n                reviewSessionId = session.getSessionId();\n            }\n            if (!reviewSessionId\n                && this._currentIndexingSession == null\n                && session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            this.updateIndexingSessionData(session);\n        }\n        if (this._currentIndexingSession) {\n            this.performIndexingStep();\n        }\n    }\n    get currentIndexingSession() {\n        return this._currentIndexingSession;\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(indexingSession) {\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (session === undefined) {\n            return;\n        }\n        if (!this.indexingSessions[session.getSessionId()] || this._prunedSessionIds.includes(session.getSessionId())) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        if (this._currentIndexingSession === sessionId) {\n            this._currentIndexingSession = null;\n        }\n        this.renderIndexingSessionRow(session);\n        this.runTasks();\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        this._currentConnectionCount--;\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            // A mere error shall not stop the party.\n            this.runTasks();\n            return;\n        }\n        if (textStatus === 'success' && response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n            this._updateCurrentIndexingSession();\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !response.skipDialog) {\n                if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                    this.reviewSession(session);\n                }\n                else {\n                    this.runTasks();\n                }\n            }\n            else if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                this.performIndexingStep();\n            }\n            else {\n                this.runTasks();\n            }\n        }\n        this._updateCurrentIndexingSession();\n        if (textStatus === 'success' && response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    getReviewData(session) {\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.OVERVIEW,\n            params: { sessionId: session.getSessionId() },\n            callback: () => {\n                this.renderIndexingSessionRow(session);\n            }\n        };\n        this.enqueueTask(task);\n    }\n    reviewSession(session) {\n        if (this._currentlyReviewing) {\n            return;\n        }\n        this._currentlyReviewing = true;\n        this.pruneWaitingTasks(session.getSessionId());\n        let $confirmBody = $('<div></div>');\n        const missingEntries = session.getMissingEntries();\n        const missingFiles = missingEntries.files ? Object.entries(missingEntries.files) : [];\n        const missingFolders = missingEntries.folders ? Object.entries(missingEntries.folders) : [];\n        const skippedFiles = session.getSkippedEntries();\n        if (skippedFiles.length) {\n            let skippedFilesList = '';\n            for (const skippedFile of skippedFiles) {\n                skippedFilesList += `<li>${skippedFile}</li>`;\n            }\n            $confirmBody.append(`\n                <h2>${Craft.t('app', 'Skipped files')}</h2>\n                <p>${Craft.t('app', 'The following items were not indexed.')}</p>\n                <ul>\n                    ${skippedFilesList}\n                </ul>\n            `);\n        }\n        const haveMissingItems = missingFiles.length || missingFolders.length;\n        if (haveMissingItems) {\n            let itemText = '';\n            if (missingFiles.length) {\n                itemText += 'files';\n            }\n            if (missingFiles.length && missingFolders.length) {\n                itemText += ' and ';\n            }\n            if (missingFolders.length) {\n                itemText += 'folders';\n            }\n            const translationParams = { items: itemText };\n            let missingEntries = '';\n            for (const [id, uri] of missingFolders) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteFolder[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            for (const [id, uri] of missingFiles) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteAsset[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            $confirmBody.append($(`\n                <h2>${Craft.t('app', 'Missing {items}', translationParams)}</h2>\n                <p>${Craft.t('app', 'The following {items} could not be found. Should they be deleted from the index?', translationParams)}</p>\n                <ul>\n                    ${missingEntries}\n                </ul>\n            `));\n        }\n        const $modal = $('<form class=\"modal fitted confirmmodal\"/>').appendTo(Garnish.$bod);\n        const $body = $('<div class=\"body\"/>').appendTo($modal).html($confirmBody.html());\n        const $footer = $('<footer class=\"footer\"/>').appendTo($modal);\n        const $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        const modal = new Garnish.Modal($modal, {\n            hideOnEsc: false,\n            hideOnShadeClick: false,\n            onHide: () => {\n                this._currentlyReviewing = false;\n            }\n        });\n        if (haveMissingItems) {\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Keep them'),\n            }).on('click', ev => {\n                ev.preventDefault();\n                this.stopIndexingSession(session);\n                modal.hide();\n            }).appendTo($buttons);\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Delete them'),\n            }).appendTo($buttons);\n        }\n        else {\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'OK'),\n            }).appendTo($buttons);\n        }\n        Craft.initUiElements($body);\n        modal.updateSizeAndPosition();\n        $modal.on('submit', (ev) => {\n            ev.preventDefault();\n            modal.hide();\n            const postData = Garnish.getPostData($body);\n            const postParams = Craft.expandPostArray(postData);\n            postParams.sessionId = session.getSessionId();\n            // Make this the next task for sure?\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.FINISH,\n                params: postParams\n            };\n            this.enqueueTask(task, true);\n        });\n    }\n    startIndexing(params, cb) {\n        Craft.postActionRequest(IndexingActions.START, params, (response, textStatus) => {\n            this.processResponse(response, textStatus);\n            cb();\n        });\n    }\n    performIndexingStep() {\n        if (!this._currentIndexingSession) {\n            this._updateCurrentIndexingSession();\n        }\n        if (!this._currentIndexingSession) {\n            return;\n        }\n        const session = this.indexingSessions[this._currentIndexingSession];\n        const concurrentSlots = this._maxConcurrentConnections - this._currentConnectionCount;\n        // Queue up at least enough tasks to use up all the free connections of finish the session.\n        for (let i = 0; i < Math.min(concurrentSlots, session.getEntriesRemaining()); i++) {\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.PROCESS,\n                params: { sessionId: this._currentIndexingSession }\n            };\n            this.enqueueTask(task);\n        }\n    }\n    /**\n     * Stop and discard an indexing session.\n     *\n     * @param session\n     */\n    stopIndexingSession(session) {\n        this.pruneWaitingTasks(session.getSessionId());\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.STOP,\n            params: { sessionId: session.getSessionId() }\n        };\n        this.enqueueTask(task, true);\n    }\n    /**\n     * Pune the waiting task list by removing all tasks for a session id.\n     *\n     * @param sessionId\n     */\n    pruneWaitingTasks(sessionId) {\n        const newTaskList = [];\n        let modified = false;\n        this._prunedSessionIds.push(sessionId);\n        for (const task of this._tasksWaiting) {\n            if (task.sessionId !== sessionId) {\n                newTaskList.push(task);\n            }\n            else {\n                modified = true;\n            }\n        }\n        if (modified) {\n            this._tasksWaiting = newTaskList;\n        }\n    }\n    enqueueTask(task, prioritize = false) {\n        if (prioritize) {\n            this._priorityTasks.push(task);\n        }\n        else {\n            this._tasksWaiting.push(task);\n        }\n        this.runTasks();\n    }\n    runTasks() {\n        if (this._tasksWaiting.length + this._priorityTasks.length === 0 || this._currentConnectionCount >= this._maxConcurrentConnections) {\n            return;\n        }\n        while (this._tasksWaiting.length + this._priorityTasks.length !== 0 && this._currentConnectionCount < this._maxConcurrentConnections) {\n            this._currentConnectionCount++;\n            const task = this._priorityTasks.length > 0 ? this._priorityTasks.shift() : this._tasksWaiting.shift();\n            Craft.postActionRequest(task.action, task.params, (response, textStatus) => {\n                this.processResponse(response, textStatus);\n                if (task.callback) {\n                    task.callback();\n                }\n            });\n        }\n    }\n    _updateCurrentIndexingSession() {\n        for (const session of Object.values(this.indexingSessions)) {\n            if (session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n                return;\n            }\n        }\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    /**\n     * Get the remaining entry count for this sessions.\n     */\n    getEntriesRemaining() {\n        return this.indexingSessionData.totalEntries - this.indexingSessionData.processedEntries;\n    }\n    /**\n     * Get the session status.\n     */\n    getSessionStatus() {\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        if (this.indexer.currentIndexingSession === this.indexingSessionData.id) {\n            return SessionStatus.ACTIVE;\n        }\n        return SessionStatus.WAITING;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.append('<td><ul><li>' + Object.values(this.indexingSessionData.indexedVolumes).join('</li><li>') + '</li></ul></td>');\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        const $progressCell = $('<td class=\"progress\"><div class=\"progressContainer\"></div></td>').css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell.find('.progressContainer'), false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $progressCell.data('progressBar', progressBar);\n        $progressCell.find('.progressContainer').append(`<div class=\"progressInfo\">${this.indexingSessionData.processedEntries} / ${this.indexingSessionData.totalEntries}</div>`);\n        $tr.append($progressCell);\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                this.indexer.getReviewData(this);\n            }));\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this);\n        }));\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.WAITING:\n                return Craft.t('app', 'Waiting');\n                break;\n        }\n    }\n    /**\n     * Return a list of missing entries for this session\n     */\n    getMissingEntries() {\n        return this.indexingSessionData.missingEntries;\n    }\n    /**\n     * Return a list of skipped entries for this session\n     */\n    getSkippedEntries() {\n        return this.indexingSessionData.skippedEntries;\n    }\n}\n"]}