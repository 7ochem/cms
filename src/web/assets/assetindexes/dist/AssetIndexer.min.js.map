{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","this","indexingSessions","reviewSessionId","_currentIndexingSession","sessionModel","ACTIONREQUIRED","getSessionStatus","QUEUE","session","createSessionFromModel","CLI","updateIndexingSessionData","currentIndexingSession","indexingSession","getSessionId","renderIndexingSessionRow","$row","remove","length","addClass","getIndexingSessionRowHtml","$existing","find","append","removeClass","discardIndexingSession","sessionId","processResponse","response","textStatus","error","alert","performIndexingStep","stop","getReviewData","OVERVIEW","bind","$confirmBody","$","missingEntries","getMissingEntries","missingFiles","Object","entries","files","folders","skippedFile","skippedFiles","Craft","t","skippedFilesList","haveMissingItems","missingFolders","itemText","translationParams","items","reviewSession","id","uri","getSkippedEntries","$modal","appendTo","Garnish","$bod","$body","html","$footer","$buttons","modal","Modal","hideOnEsc","hideOnShadeClick","text","type","class","updateSizeAndPosition","on","ev","settings","onHide","noop","hide","expandPostArray","postData","postParams","postActionRequest","FINISH","PROCESS","values","stopIndexingSession","STOP","sessionData","AssetIndexingSession","indexer","model","indexingSessionData","queueId","actionRequired","WAITING","$tr","indexedVolumes","join","dateCreated","dateUpdated","$progressCell","css","progressBar","ProgressBar","totalEntries","processedEntries","data","getSessionStatusMessage","$actions","getActionButtons","title","reviewMessage","aria-label","$container","target","parent","hasClass","discardMessage","setProcessedItemCount","updateProgressBar","skippedEntries"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"QUEUE\"] = 2] = \"QUEUE\";\n    SessionStatus[SessionStatus[\"WAITING\"] = 3] = \"WAITING\";\n    SessionStatus[SessionStatus[\"CLI\"] = 4] = \"CLI\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n    IndexingActions[\"PROCESS\"] = \"asset-indexes/process-indexing-session\";\n    IndexingActions[\"OVERVIEW\"] = \"asset-indexes/indexing-session-overview\";\n    IndexingActions[\"FINISH\"] = \"asset-indexes/finish-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions) {\n        this._currentIndexingSession = null;\n        this.indexingSessions = {};\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        let reviewSessionId = 0;\n        for (const sessionModel of sessions) {\n            let session = this.createSessionFromModel(sessionModel);\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !reviewSessionId) {\n                reviewSessionId = session.getSessionId();\n            }\n            if (!reviewSessionId\n                && this._currentIndexingSession == null\n                && session.getSessionStatus() !== SessionStatus.QUEUE\n                && session.getSessionStatus() !== SessionStatus.CLI\n                && session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            this.updateIndexingSessionData(session);\n        }\n        if (this._currentIndexingSession) {\n            this.performIndexingStep();\n        }\n    }\n    get currentIndexingSession() {\n        return this._currentIndexingSession;\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(indexingSession) {\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (!this.indexingSessions[session.getSessionId()]) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        if (this._currentIndexingSession === sessionId) {\n            this._currentIndexingSession = null;\n        }\n        this.renderIndexingSessionRow(session);\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            return;\n        }\n        if (textStatus === 'success' && response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n            if (!this._currentIndexingSession) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED) {\n                this.reviewSession(session);\n                return;\n            }\n            this.performIndexingStep();\n        }\n        if (textStatus === 'success' && response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    getReviewData(session) {\n        Craft.postActionRequest(IndexingActions.OVERVIEW, { sessionId: session.getSessionId() }, this.processResponse.bind(this));\n    }\n    reviewSession(session) {\n        let $confirmBody = $('<div></div>');\n        const missingEntries = session.getMissingEntries();\n        const missingFiles = Object.entries(missingEntries.files);\n        const missingFolders = Object.entries(missingEntries.folders);\n        const skippedFiles = session.getSkippedEntries();\n        if (skippedFiles.length) {\n            let skippedFilesList = '';\n            for (const skippedFile of skippedFiles) {\n                skippedFilesList += `<li>${skippedFile}</li>`;\n            }\n            $confirmBody.append(`\n                <h2>${Craft.t('app', 'Skipped files')}</h2>\n                <p>${Craft.t('app', 'The following items were not indexed.')}</p>\n                <ul>\n                    ${skippedFilesList}\n                </ul>\n            `);\n        }\n        const haveMissingItems = missingFiles.length || missingFolders.length;\n        if (haveMissingItems) {\n            let itemText = '';\n            if (missingFiles.length) {\n                itemText += 'files';\n            }\n            if (missingFiles.length && missingFolders.length) {\n                itemText += ' and ';\n            }\n            if (missingFolders.length) {\n                itemText += 'folders';\n            }\n            const translationParams = { items: itemText };\n            let missingEntries = '';\n            for (const [id, uri] of missingFolders) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteFolder[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            for (const [id, uri] of missingFiles) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteAsset[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            $confirmBody.append($(`\n                <h2>${Craft.t('app', 'Missing {items}', translationParams)}</h2>\n                <p>${Craft.t('app', 'The following {items} could not be found. Should they be deleted from the index?', translationParams)}</p>\n                <ul>\n                    ${missingEntries}\n                </ul>\n            `));\n        }\n        const $modal = $('<form class=\"modal fitted confirmmodal\"/>').appendTo(Garnish.$bod);\n        const $body = $('<div class=\"body\"/>').appendTo($modal).html($confirmBody.html());\n        const $footer = $('<footer class=\"footer\"/>').appendTo($modal);\n        const $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        const modal = new Garnish.Modal($modal, {\n            hideOnEsc: false,\n            hideOnShadeClick: false,\n        });\n        if (haveMissingItems) {\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Keep them'),\n            })\n                .appendTo($buttons);\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Delete them'),\n            }).appendTo($buttons);\n        }\n        else {\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'OK'),\n            }).appendTo($buttons);\n        }\n        Craft.initUiElements($body);\n        modal.updateSizeAndPosition();\n        $modal.on('submit', (ev) => {\n            ev.preventDefault();\n            modal.settings.onHide = $.noop;\n            modal.hide();\n            const postData = Garnish.getPostData($body);\n            const postParams = Craft.expandPostArray(postData);\n            postParams.sessionId = session.getSessionId();\n            Craft.postActionRequest(IndexingActions.FINISH, postParams, this.processResponse.bind(this));\n        });\n    }\n    performIndexingStep() {\n        if (this._currentIndexingSession) {\n            Craft.postActionRequest(IndexingActions.PROCESS, { sessionId: this._currentIndexingSession }, this.processResponse.bind(this));\n            return;\n        }\n        else {\n            for (const session of Object.values(this.indexingSessions)) {\n                if (session.getSessionStatus() !== SessionStatus.QUEUE && session.getSessionStatus() !== SessionStatus.CLI) {\n                    this._currentIndexingSession = session.getSessionId();\n                    break;\n                }\n            }\n        }\n        if (this._currentIndexingSession) {\n            this.performIndexingStep();\n        }\n    }\n    stopIndexingSession(session) {\n        Craft.postActionRequest(IndexingActions.STOP, { sessionId: session.getSessionId() }, this.processResponse.bind(this));\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    getSessionStatus() {\n        if (this.indexingSessionData.isCli) {\n            return SessionStatus.CLI;\n        }\n        if (this.indexingSessionData.queueId) {\n            return SessionStatus.QUEUE;\n        }\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        if (this.indexer.currentIndexingSession === this.indexingSessionData.id) {\n            return SessionStatus.ACTIVE;\n        }\n        return SessionStatus.WAITING;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.append('<td>' + Object.values(this.indexingSessionData.indexedVolumes).join(', ') + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateUpdated + '</td>');\n        const $progressCell = $('<td class=\"progress\"></td>').css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell, false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $tr.append($progressCell.data('progressBar', progressBar));\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        if (this.getSessionStatus() === SessionStatus.QUEUE || this.getSessionStatus() === SessionStatus.CLI) {\n            return $();\n        }\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage)).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                this.indexer.getReviewData(this);\n            });\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage)).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this);\n        });\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.WAITING:\n                return Craft.t('app', 'Waiting');\n                break;\n            case SessionStatus.QUEUE:\n                return Craft.t('app', 'Running in background');\n                break;\n            case SessionStatus.CLI:\n                return Craft.t('app', 'Running via CLI');\n                break;\n        }\n    }\n    /**\n     * Return a list of missing entries for this session\n     */\n    getMissingEntries() {\n        return this.indexingSessionData.missingEntries;\n    }\n    /**\n     * Return a list of skipped entries for this session\n     */\n    getSkippedEntries() {\n        return this.indexingSessionData.skippedEntries;\n    }\n}\n"]}