{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","AssetIndexer","constructor","$indexingSessionTable","sessions","this","indexingSessions","runningSessions","session","removeClass","updateIndexingSessionData","sessionData","indexingSession","AssetIndexingSession","getSessionStatus","getSessionId","renderIndexingSessionRow","getIndexingSessionData","id","$row","getIndexingSessionRowHtml","$existing","find","length","replaceWith","append","response","console","log","queueId","includes","RUNNING","STOPPED","model","status","indexingSessionData","$tr","$","data","started","updated","totalEntries","processedEntries","css","Craft","ProgressBar","$progressCell","progressBar","setItemCount","setProcessedItemCount","updateProgressBar","showProgressBar","getSessionStatusMessage","$actions","getActionButtons","appendTo","QUEUE","$buttons","t","type","title","endMessage","aria-label","text","prepend","class","startStopMessage"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"STOPPED\"] = 0] = \"STOPPED\";\n    SessionStatus[SessionStatus[\"RUNNING\"] = 1] = \"RUNNING\";\n    SessionStatus[SessionStatus[\"QUEUE\"] = 2] = \"QUEUE\";\n})(SessionStatus || (SessionStatus = {}));\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions) {\n        this.indexingSessions = {};\n        this.runningSessions = [];\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        for (const session of sessions) {\n            this.updateIndexingSessionData(session);\n        }\n        if (sessions.length > 0) {\n            this.$indexingSessionTable.removeClass('hidden');\n        }\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(sessionData) {\n        const indexingSession = new AssetIndexingSession(sessionData, this.getSessionStatus(sessionData));\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Get indexing session data by its id\n     * @param id\n     */\n    getIndexingSessionData(id) {\n        return this.indexingSessions[id] ? this.indexingSessions[id] : null;\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (session) {\n            $row = session.getIndexingSessionRowHtml();\n        }\n        else {\n            return;\n        }\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n    }\n    processResponse(response) {\n        console.log(response);\n    }\n    /**\n     * Get session stat\n     * @param session\n     * @private\n     */\n    getSessionStatus(sessionData) {\n        if (sessionData.queueId) {\n            return SessionStatus.QUEUE;\n        }\n        return this.runningSessions.includes(sessionData.id) ? SessionStatus.RUNNING : SessionStatus.STOPPED;\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, status) {\n        this.indexingSessionData = model;\n        this.status = status;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\">');\n        $tr.data('session-id', this.indexingSessionData.id).data('as-queue', this.indexingSessionData.queueId ? this.indexingSessionData.queueId : null);\n        $tr.append('<td>' + this.indexingSessionData.started + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.updated + '</td>');\n        const $progressCell = $('<td class=\"progress\"></td>').data('total', this.indexingSessionData.totalEntries).data('processed', this.indexingSessionData.processedEntries).css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell, false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $tr.append($progressCell.data('progressBar', progressBar));\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        if (this.status === SessionStatus.QUEUE) {\n            return $();\n        }\n        const $buttons = $('<div class=\"buttons\"></div>');\n        let startStopMessage;\n        switch (this.status) {\n            case SessionStatus.RUNNING:\n                startStopMessage = Craft.t('app', 'Stop');\n                break;\n            case SessionStatus.STOPPED:\n                startStopMessage = Craft.t('app', 'Start');\n                const endMessage = Craft.t('app', 'Cancel');\n                $buttons.append($('<button />', {\n                    type: 'button',\n                    'class': 'btn submit',\n                    title: endMessage,\n                    \"aria-label\": endMessage,\n                }).text(endMessage));\n                break;\n        }\n        $buttons.prepend($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: startStopMessage,\n            \"aria-label\": startStopMessage,\n        }).text(startStopMessage));\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.status) {\n            case SessionStatus.STOPPED:\n                return Craft.t('app', 'Waiting');\n                break;\n            case SessionStatus.RUNNING:\n                return Craft.t('app', 'Running');\n                break;\n            case SessionStatus.QUEUE:\n                return Craft.t('app', 'Running in background');\n                break;\n        }\n    }\n}\n"]}