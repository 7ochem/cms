{"version":3,"sources":["assetindexes/src/AssetIndexer.js"],"names":["SessionStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","this","runningSessions","indexingSessions","session","removeClass","updateIndexingSessionData","sessionData","indexingSession","getSessionId","renderIndexingSessionRow","createSessionFromModel","remove","$row","getIndexingSessionRowHtml","$existing","find","length","replaceWith","append","sessionId","processResponse","response","textStatus","error","alert","stop","discardIndexingSession","stopIndexingSession","Craft","postActionRequest","STOP","bind","AssetIndexingSession","getSessionStatus","queueId","QUEUE","id","RUNNING","STOPPED","model","status","indexer","indexingSessionData","console","log","$tr","$","data","dateCreated","dateUpdated","$progressCell","totalEntries","processedEntries","css","progressBar","ProgressBar","setProcessedItemCount","updateProgressBar","showProgressBar","getSessionStatusMessage","$actions","appendTo","getActionButtons","$buttons","startStopMessage","t","type","class","title","endMessage","setItemCount","prepend","aria-label","text"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":["\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"STOPPED\"] = 0] = \"STOPPED\";\n    SessionStatus[SessionStatus[\"RUNNING\"] = 1] = \"RUNNING\";\n    SessionStatus[SessionStatus[\"QUEUE\"] = 2] = \"QUEUE\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions) {\n        this.indexingSessions = {};\n        this.runningSessions = {};\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        this.runningSessions = {};\n        for (const session of sessions) {\n            this.updateIndexingSessionData(session);\n        }\n        if (sessions.length > 0) {\n            this.$indexingSessionTable.removeClass('hidden');\n        }\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(sessionData) {\n        const indexingSession = this.createSessionFromModel(sessionData);\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (!this.indexingSessions[session.getSessionId()]) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        delete this.runningSessions[sessionId];\n        this.renderIndexingSessionRow(session);\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            return;\n        }\n        if (response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.runningSessions[session.getSessionId()] = true;\n            this.renderIndexingSessionRow(session);\n        }\n        if (response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    stopIndexingSession(sessionId) {\n        Craft.postActionRequest(IndexingActions.STOP, { sessionId: sessionId }, this.processResponse.bind(this));\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this.getSessionStatus(sessionData), this);\n    }\n    /**\n     * Get session stat\n     * @param session\n     * @private\n     */\n    getSessionStatus(sessionData) {\n        if (sessionData.queueId) {\n            return SessionStatus.QUEUE;\n        }\n        return this.runningSessions[sessionData.id] ? SessionStatus.RUNNING : SessionStatus.STOPPED;\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, status, indexer) {\n        this.indexingSessionData = model;\n        this.status = status;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        console.log(this.indexingSessionData);\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.data('session-id', this.indexingSessionData.id).data('as-queue', this.indexingSessionData.queueId ? this.indexingSessionData.queueId : null);\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        $tr.append('<td>' + this.indexingSessionData.dateUpdated + '</td>');\n        const $progressCell = $('<td class=\"progress\"></td>').data('total', this.indexingSessionData.totalEntries).data('processed', this.indexingSessionData.processedEntries).css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell, false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $tr.append($progressCell.data('progressBar', progressBar));\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        if (this.status === SessionStatus.QUEUE) {\n            return $();\n        }\n        const $buttons = $('<div class=\"buttons\"></div>');\n        let startStopMessage;\n        switch (this.status) {\n            case SessionStatus.RUNNING:\n                startStopMessage = Craft.t('app', 'Stop');\n                break;\n            case SessionStatus.STOPPED:\n                startStopMessage = Craft.t('app', 'Start');\n                const endMessage = Craft.t('app', 'Cancel');\n                $buttons.append($('<button />', {\n                    type: 'button',\n                    'class': 'btn submit',\n                    title: endMessage,\n                    \"aria-label\": endMessage,\n                }).text(endMessage)).on('click', ev => {\n                    const $container = $(ev.target).parent();\n                    if ($container.hasClass('disabled')) {\n                        return;\n                    }\n                    $container.addClass('disabled');\n                    this.indexer.stopIndexingSession(this.getSessionId());\n                });\n                break;\n        }\n        $buttons.prepend($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: startStopMessage,\n            \"aria-label\": startStopMessage,\n        }).text(startStopMessage));\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.status) {\n            case SessionStatus.STOPPED:\n                return Craft.t('app', 'Waiting');\n                break;\n            case SessionStatus.RUNNING:\n                return Craft.t('app', 'Running');\n                break;\n            case SessionStatus.QUEUE:\n                return Craft.t('app', 'Running in background');\n                break;\n        }\n    }\n}\n"]}