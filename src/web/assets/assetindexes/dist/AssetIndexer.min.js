"use strict";var SessionStatus,IndexingActions;!function(s){s[s.ACTIONREQUIRED=0]="ACTIONREQUIRED",s[s.ACTIVE=1]="ACTIVE",s[s.QUEUE=2]="QUEUE",s[s.WAITING=3]="WAITING",s[s.CLI=4]="CLI"}(SessionStatus||(SessionStatus={})),function(s){s.STOP="asset-indexes/stop-indexing-session",s.PROCESS="asset-indexes/process-indexing-session",s.OVERVIEW="asset-indexes/indexing-session-overview",s.FINISH="asset-indexes/finish-indexing-session"}(IndexingActions||(IndexingActions={}));class AssetIndexer{constructor(s,e,n=3){this._currentIndexingSession=null,this._currentConnectionCount=0,this._tasksWaiting=[],this.indexingSessions={},this._maxConcurrentConnections=n,this.$indexingSessionTable=s,this.indexingSessions={};let t=0;for(const s of e){let e=this.createSessionFromModel(s);e.getSessionStatus()!==SessionStatus.ACTIONREQUIRED||t||(t=e.getSessionId()),t||null!=this._currentIndexingSession||e.getSessionStatus()===SessionStatus.QUEUE||e.getSessionStatus()===SessionStatus.CLI||e.getSessionStatus()===SessionStatus.ACTIONREQUIRED||(this._currentIndexingSession=e.getSessionId()),this.updateIndexingSessionData(e)}this._currentIndexingSession&&this.performIndexingStep()}get currentIndexingSession(){return this._currentIndexingSession}updateIndexingSessionData(s){this.indexingSessions[s.getSessionId()]=s,this.renderIndexingSessionRow(s)}renderIndexingSessionRow(s){let e;if(!this.indexingSessions[s.getSessionId()])return this.$indexingSessionTable.find('tr[data-session-id="'+s.getSessionId()+'"]').remove(),void(0==this.$indexingSessionTable.find("tbody tr").length&&this.$indexingSessionTable.addClass("hidden"));e=s.getIndexingSessionRowHtml();const n=this.$indexingSessionTable.find('tr[data-session-id="'+s.getSessionId()+'"]');n.length>0?n.replaceWith(e):this.$indexingSessionTable.find("tbody").append(e),this.$indexingSessionTable.removeClass("hidden")}discardIndexingSession(s){const e=this.indexingSessions[s];delete this.indexingSessions[s],this._currentIndexingSession===s&&(this._currentIndexingSession=null),this.renderIndexingSessionRow(e),this.runTasks()}processResponse(s,e){if(this._currentConnectionCount--,"success"===e&&s.error)return alert(s.error),void this.runTasks();if("success"===e&&s.session){const e=this.createSessionFromModel(s.session);if(this.indexingSessions[e.getSessionId()]=e,this.renderIndexingSessionRow(e),this._currentIndexingSession||(this._currentIndexingSession=e.getSessionId()),e.getSessionStatus()===SessionStatus.ACTIONREQUIRED&&!s.skipDialog)return void this.reviewSession(e);this.performIndexingStep()}"success"===e&&s.stop&&this.discardIndexingSession(s.stop)}getReviewData(s){const e={action:IndexingActions.OVERVIEW,params:{sessionId:s.getSessionId()}};this.enqueueTask(e)}reviewSession(s){let e=$("<div></div>");const n=s.getMissingEntries(),t=n.files?Object.entries(n.files):[],i=n.folders?Object.entries(n.folders):[],o=s.getSkippedEntries();if(o.length){let s="";for(const e of o)s+=`<li>${e}</li>`;e.append(`\n                <h2>${Craft.t("app","Skipped files")}</h2>\n                <p>${Craft.t("app","The following items were not indexed.")}</p>\n                <ul>\n                    ${s}\n                </ul>\n            `)}const a=t.length||i.length;if(a){let s="";t.length&&(s+="files"),t.length&&i.length&&(s+=" and "),i.length&&(s+="folders");const n={items:s};let o="";for(const[s,e]of i)o+=`<li><label><input type="checkbox" checked="checked" name="deleteFolder[]" value="${s}"> ${e}</label></li>`;for(const[s,e]of t)o+=`<li><label><input type="checkbox" checked="checked" name="deleteAsset[]" value="${s}"> ${e}</label></li>`;e.append($(`\n                <h2>${Craft.t("app","Missing {items}",n)}</h2>\n                <p>${Craft.t("app","The following {items} could not be found. Should they be deleted from the index?",n)}</p>\n                <ul>\n                    ${o}\n                </ul>\n            `))}const d=$('<form class="modal fitted confirmmodal"/>').appendTo(Garnish.$bod),r=$('<div class="body"/>').appendTo(d).html(e.html()),S=$('<footer class="footer"/>').appendTo(d),u=$('<div class="buttons right"/>').appendTo(S),g=new Garnish.Modal(d,{hideOnEsc:!1,hideOnShadeClick:!1});if(a){$("<button/>",{type:"button",class:"btn",text:Craft.t("app","Keep them")}).appendTo(u);$("<button/>",{type:"submit",class:"btn submit",text:Craft.t("app","Delete them")}).appendTo(u)}else $("<button/>",{type:"submit",class:"btn submit",text:Craft.t("app","OK")}).appendTo(u);Craft.initUiElements(r),g.updateSizeAndPosition(),d.on("submit",e=>{e.preventDefault(),g.settings.onHide=$.noop,g.hide();const n=Garnish.getPostData(r),t=Craft.expandPostArray(n);t.sessionId=s.getSessionId();const i={action:IndexingActions.FINISH,params:t};this.enqueueTask(i,!0)})}performIndexingStep(){if(this._currentIndexingSession||this._updateCurrentIndexingSession(),!this._currentIndexingSession)return;const s=this.indexingSessions[this._currentIndexingSession],e=this._maxConcurrentConnections-this._currentConnectionCount;for(let n=0;n<Math.min(e,s.getEntriesRemaining());n++){const s={action:IndexingActions.PROCESS,params:{sessionId:this._currentIndexingSession}};this.enqueueTask(s)}}stopIndexingSession(s){const e={action:IndexingActions.STOP,params:{sessionId:s.getSessionId()}};this.enqueueTask(e)}enqueueTask(s,e=!1){e?this._tasksWaiting.unshift(s):this._tasksWaiting.push(s),this.runTasks()}runTasks(){if(!(0===this._tasksWaiting.length||this._currentConnectionCount>=this._maxConcurrentConnections))for(;0!==this._tasksWaiting.length&&this._currentConnectionCount<this._maxConcurrentConnections;){console.log("cue the queue"),this._currentConnectionCount++;const s=this._tasksWaiting.shift();Craft.postActionRequest(s.action,s.params,this.processResponse.bind(this))}}_updateCurrentIndexingSession(){for(const s of Object.values(this.indexingSessions))if(s.getSessionStatus()!==SessionStatus.QUEUE&&s.getSessionStatus()!==SessionStatus.CLI)return void(this._currentIndexingSession=s.getSessionId())}createSessionFromModel(s){return new AssetIndexingSession(s,this)}}class AssetIndexingSession{constructor(s,e){this.indexingSessionData=s,this.indexer=e}getSessionId(){return this.indexingSessionData.id}getEntriesRemaining(){return this.indexingSessionData.totalEntries-this.indexingSessionData.processedEntries}getSessionStatus(){return this.indexingSessionData.isCli?SessionStatus.CLI:this.indexingSessionData.queueId?SessionStatus.QUEUE:this.indexingSessionData.actionRequired?SessionStatus.ACTIONREQUIRED:this.indexer.currentIndexingSession===this.indexingSessionData.id?SessionStatus.ACTIVE:SessionStatus.WAITING}getIndexingSessionRowHtml(){const s=$('<tr class="indexingSession" data-session-id="'+this.getSessionId()+'">');s.append("<td>"+Object.values(this.indexingSessionData.indexedVolumes).join(", ")+"</td>"),s.append("<td>"+this.indexingSessionData.dateCreated+"</td>"),s.append("<td>"+this.indexingSessionData.dateUpdated+"</td>");const e=$('<td class="progress"></td>').css("position","relative"),n=new Craft.ProgressBar(e,!1);n.setItemCount(this.indexingSessionData.totalEntries),n.setProcessedItemCount(this.indexingSessionData.processedEntries),n.updateProgressBar(),n.showProgressBar(),s.append(e.data("progressBar",n)),s.append("<td>"+this.getSessionStatusMessage()+"</td>");const t=this.getActionButtons();return $("<td></td>").append(t).appendTo(s),s}getActionButtons(){if(this.getSessionStatus()===SessionStatus.QUEUE||this.getSessionStatus()===SessionStatus.CLI)return $();const s=$('<div class="buttons"></div>');if(this.getSessionStatus()==SessionStatus.ACTIONREQUIRED){const e=Craft.t("app","Review");s.append($("<button />",{type:"button",class:"btn submit",title:e,"aria-label":e}).text(e).on("click",s=>{const e=$(s.target).parent();e.hasClass("disabled")||(e.addClass("disabled"),this.indexer.getReviewData(this))}))}const e=Craft.t("app","Discard");return s.append($("<button />",{type:"button",class:"btn submit",title:e,"aria-label":e}).text(e).on("click",e=>{s.hasClass("disabled")||(s.addClass("disabled"),this.indexer.stopIndexingSession(this))})),s}getSessionStatusMessage(){switch(this.getSessionStatus()){case SessionStatus.ACTIONREQUIRED:return Craft.t("app","Waiting for review");case SessionStatus.ACTIVE:return Craft.t("app","Active");case SessionStatus.WAITING:return Craft.t("app","Waiting");case SessionStatus.QUEUE:return Craft.t("app","Running in background");case SessionStatus.CLI:return Craft.t("app","Running via CLI")}}getMissingEntries(){return this.indexingSessionData.missingEntries}getSkippedEntries(){return this.indexingSessionData.skippedEntries}}
//# sourceMappingURL=AssetIndexer.min.js.map
