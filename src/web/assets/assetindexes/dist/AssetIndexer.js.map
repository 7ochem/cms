{"version":3,"file":"AssetIndexer.js","mappings":"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","sources":["webpack://Craft/webpack/bootstrap","webpack://Craft/webpack/runtime/define property getters","webpack://Craft/webpack/runtime/hasOwnProperty shorthand","webpack://Craft/webpack/runtime/make namespace object","webpack://Craft/./AssetIndexer.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"WAITING\"] = 2] = \"WAITING\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"START\"] = \"asset-indexes/start-indexing\";\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n    IndexingActions[\"PROCESS\"] = \"asset-indexes/process-indexing-session\";\n    IndexingActions[\"OVERVIEW\"] = \"asset-indexes/indexing-session-overview\";\n    IndexingActions[\"FINISH\"] = \"asset-indexes/finish-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nexport class AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions, maxConcurrentConnections = 3) {\n        this._currentIndexingSession = null;\n        this._currentConnectionCount = 0;\n        this._tasksWaiting = [];\n        this._priorityTasks = [];\n        this._prunedSessionIds = [];\n        this._currentlyReviewing = false;\n        this.indexingSessions = {};\n        this._maxConcurrentConnections = maxConcurrentConnections;\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        let reviewSessionId = 0;\n        for (const sessionModel of sessions) {\n            let session = this.createSessionFromModel(sessionModel);\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !reviewSessionId) {\n                reviewSessionId = session.getSessionId();\n            }\n            if (!reviewSessionId\n                && this._currentIndexingSession == null\n                && session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            this.updateIndexingSessionData(session);\n        }\n        if (this._currentIndexingSession) {\n            this.performIndexingStep();\n        }\n    }\n    get currentIndexingSession() {\n        return this._currentIndexingSession;\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(indexingSession) {\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (session === undefined) {\n            return;\n        }\n        if (!this.indexingSessions[session.getSessionId()] || this._prunedSessionIds.includes(session.getSessionId())) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        if (this._currentIndexingSession === sessionId) {\n            this._currentIndexingSession = null;\n        }\n        this.renderIndexingSessionRow(session);\n        this.runTasks();\n    }\n    /**\n     * Process a failed indexing response.\n     *\n     * @param response\n     */\n    processFailureResponse(response) {\n        this._currentConnectionCount--;\n        this._updateCurrentIndexingSession();\n    }\n    /**\n     * Process a successful indexing response.\n     *\n     * @param response\n     */\n    processSuccessResponse(response) {\n        const responseData = response.data;\n        this._currentConnectionCount--;\n        if (responseData.error) {\n            alert(responseData.error);\n            if (responseData.stop) {\n                this.discardIndexingSession(responseData.stop);\n            }\n            // A mere error shall not stop the party.\n            this.runTasks();\n            return;\n        }\n        if (responseData.session) {\n            const session = this.createSessionFromModel(responseData.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n            this._updateCurrentIndexingSession();\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !response.skipDialog) {\n                if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                    this.reviewSession(session);\n                }\n                else {\n                    this.runTasks();\n                }\n            }\n            else if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                this.performIndexingStep();\n            }\n            else {\n                this.runTasks();\n            }\n        }\n        this._updateCurrentIndexingSession();\n        if (responseData.stop) {\n            this.discardIndexingSession(responseData.stop);\n        }\n    }\n    getReviewData(session) {\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.OVERVIEW,\n            params: { sessionId: session.getSessionId() },\n            callback: () => {\n                this.renderIndexingSessionRow(session);\n            }\n        };\n        this.enqueueTask(task);\n    }\n    reviewSession(session) {\n        if (this._currentlyReviewing) {\n            return;\n        }\n        this._currentlyReviewing = true;\n        this.pruneWaitingTasks(session.getSessionId());\n        let $confirmBody = $('<div></div>');\n        const missingEntries = session.getMissingEntries();\n        const missingFiles = missingEntries.files ? Object.entries(missingEntries.files) : [];\n        const missingFolders = missingEntries.folders ? Object.entries(missingEntries.folders) : [];\n        const skippedFiles = session.getSkippedEntries();\n        if (skippedFiles.length) {\n            let skippedFilesList = '';\n            for (const skippedFile of skippedFiles) {\n                skippedFilesList += `<li>${skippedFile}</li>`;\n            }\n            $confirmBody.append(`\n                <h2>${Craft.t('app', 'Skipped files')}</h2>\n                <p>${Craft.t('app', 'The following items were not indexed.')}</p>\n                <ul>\n                    ${skippedFilesList}\n                </ul>\n            `);\n        }\n        const haveMissingItems = missingFiles.length || missingFolders.length;\n        if (haveMissingItems) {\n            let itemText = '';\n            if (missingFiles.length) {\n                itemText += 'files';\n            }\n            if (missingFiles.length && missingFolders.length) {\n                itemText += ' and ';\n            }\n            if (missingFolders.length) {\n                itemText += 'folders';\n            }\n            const translationParams = { items: itemText };\n            let missingEntries = '';\n            for (const [id, uri] of missingFolders) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteFolder[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            for (const [id, uri] of missingFiles) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteAsset[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            $confirmBody.append($(`\n                <h2>${Craft.t('app', 'Missing {items}', translationParams)}</h2>\n                <p>${Craft.t('app', 'The following {items} could not be found. Should they be deleted from the index?', translationParams)}</p>\n                <ul>\n                    ${missingEntries}\n                </ul>\n            `));\n        }\n        const $modal = $('<form class=\"modal fitted confirmmodal\"/>').appendTo(Garnish.$bod);\n        const $body = $('<div class=\"body\"/>').appendTo($modal).html($confirmBody.html());\n        const $footer = $('<footer class=\"footer\"/>').appendTo($modal);\n        const $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        const modal = new Garnish.Modal($modal, {\n            hideOnEsc: false,\n            hideOnShadeClick: false,\n            onHide: () => {\n                this._currentlyReviewing = false;\n            }\n        });\n        if (haveMissingItems) {\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Keep them'),\n            }).on('click', ev => {\n                ev.preventDefault();\n                this.stopIndexingSession(session);\n                modal.hide();\n            }).appendTo($buttons);\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Delete them'),\n            }).appendTo($buttons);\n        }\n        else {\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'OK'),\n            }).appendTo($buttons);\n        }\n        Craft.initUiElements($body);\n        modal.updateSizeAndPosition();\n        $modal.on('submit', (ev) => {\n            ev.preventDefault();\n            modal.hide();\n            const postData = Garnish.getPostData($body);\n            const postParams = Craft.expandPostArray(postData);\n            postParams.sessionId = session.getSessionId();\n            // Make this the next task for sure?\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.FINISH,\n                params: postParams\n            };\n            this.enqueueTask(task, true);\n        });\n    }\n    startIndexing(params, cb) {\n        Craft.sendActionRequest('POST', IndexingActions.START)\n            .then((response) => this.processSuccessResponse(response))\n            .then(({ response }) => this.processFailureResponse(response))\n            .finally(() => cb());\n    }\n    performIndexingStep() {\n        if (!this._currentIndexingSession) {\n            this._updateCurrentIndexingSession();\n        }\n        if (!this._currentIndexingSession) {\n            return;\n        }\n        const session = this.indexingSessions[this._currentIndexingSession];\n        const concurrentSlots = this._maxConcurrentConnections - this._currentConnectionCount;\n        // Queue up at least enough tasks to use up all the free connections of finish the session.\n        for (let i = 0; i < Math.min(concurrentSlots, session.getEntriesRemaining()); i++) {\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.PROCESS,\n                params: { sessionId: this._currentIndexingSession }\n            };\n            this.enqueueTask(task);\n        }\n    }\n    /**\n     * Stop and discard an indexing session.\n     *\n     * @param session\n     */\n    stopIndexingSession(session) {\n        this.pruneWaitingTasks(session.getSessionId());\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.STOP,\n            params: { sessionId: session.getSessionId() }\n        };\n        this.enqueueTask(task, true);\n    }\n    /**\n     * Pune the waiting task list by removing all tasks for a session id.\n     *\n     * @param sessionId\n     */\n    pruneWaitingTasks(sessionId) {\n        const newTaskList = [];\n        let modified = false;\n        this._prunedSessionIds.push(sessionId);\n        for (const task of this._tasksWaiting) {\n            if (task.sessionId !== sessionId) {\n                newTaskList.push(task);\n            }\n            else {\n                modified = true;\n            }\n        }\n        if (modified) {\n            this._tasksWaiting = newTaskList;\n        }\n    }\n    enqueueTask(task, prioritize = false) {\n        if (prioritize) {\n            this._priorityTasks.push(task);\n        }\n        else {\n            this._tasksWaiting.push(task);\n        }\n        this.runTasks();\n    }\n    runTasks() {\n        if (this._tasksWaiting.length + this._priorityTasks.length === 0 || this._currentConnectionCount >= this._maxConcurrentConnections) {\n            return;\n        }\n        while (this._tasksWaiting.length + this._priorityTasks.length !== 0 && this._currentConnectionCount < this._maxConcurrentConnections) {\n            this._currentConnectionCount++;\n            const task = this._priorityTasks.length > 0 ? this._priorityTasks.shift() : this._tasksWaiting.shift();\n            Craft.sendActionRequest('POST', task.action, { data: task.params })\n                .then((response) => this.processSuccessResponse(response))\n                .then(({ response }) => this.processFailureResponse(response))\n                .finally(() => {\n                if (task.callback) {\n                    task.callback();\n                }\n            });\n        }\n    }\n    _updateCurrentIndexingSession() {\n        for (const session of Object.values(this.indexingSessions)) {\n            if (session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n                return;\n            }\n        }\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    /**\n     * Get the remaining entry count for this sessions.\n     */\n    getEntriesRemaining() {\n        return this.indexingSessionData.totalEntries - this.indexingSessionData.processedEntries;\n    }\n    /**\n     * Get the session status.\n     */\n    getSessionStatus() {\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        if (this.indexer.currentIndexingSession === this.indexingSessionData.id) {\n            return SessionStatus.ACTIVE;\n        }\n        return SessionStatus.WAITING;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.append('<td><ul><li>' + Object.values(this.indexingSessionData.indexedVolumes).join('</li><li>') + '</li></ul></td>');\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        const $progressCell = $('<td class=\"progress\"><div class=\"progressContainer\"></div></td>').css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell.find('.progressContainer'), false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $progressCell.data('progressBar', progressBar);\n        $progressCell.find('.progressContainer').append(`<div class=\"progressInfo\">${this.indexingSessionData.processedEntries} / ${this.indexingSessionData.totalEntries}</div>`);\n        $tr.append($progressCell);\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                this.indexer.getReviewData(this);\n            }));\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this);\n        }));\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.WAITING:\n                return Craft.t('app', 'Waiting');\n                break;\n        }\n    }\n    /**\n     * Return a list of missing entries for this session\n     */\n    getMissingEntries() {\n        return this.indexingSessionData.missingEntries;\n    }\n    /**\n     * Return a list of skipped entries for this session\n     */\n    getSkippedEntries() {\n        return this.indexingSessionData.skippedEntries;\n    }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","SessionStatus","IndexingActions","AssetIndexer","constructor","$indexingSessionTable","sessions","maxConcurrentConnections","this","_currentIndexingSession","_currentConnectionCount","_tasksWaiting","_priorityTasks","_prunedSessionIds","_currentlyReviewing","indexingSessions","_maxConcurrentConnections","reviewSessionId","sessionModel","session","createSessionFromModel","getSessionStatus","ACTIONREQUIRED","getSessionId","updateIndexingSessionData","performIndexingStep","currentIndexingSession","indexingSession","renderIndexingSessionRow","$row","undefined","includes","find","remove","length","addClass","getIndexingSessionRowHtml","$existing","replaceWith","append","removeClass","discardIndexingSession","sessionId","runTasks","processFailureResponse","response","_updateCurrentIndexingSession","processSuccessResponse","responseData","data","error","alert","stop","skipDialog","reviewSession","getReviewData","task","action","OVERVIEW","params","callback","enqueueTask","pruneWaitingTasks","$confirmBody","$","missingEntries","getMissingEntries","missingFiles","files","entries","missingFolders","folders","skippedFiles","getSkippedEntries","skippedFilesList","skippedFile","Craft","t","haveMissingItems","itemText","translationParams","items","id","uri","$modal","appendTo","Garnish","$bod","$body","html","$footer","$buttons","modal","Modal","hideOnEsc","hideOnShadeClick","onHide","type","class","text","on","ev","preventDefault","stopIndexingSession","hide","initUiElements","updateSizeAndPosition","postData","getPostData","postParams","expandPostArray","FINISH","startIndexing","cb","sendActionRequest","START","then","finally","concurrentSlots","i","Math","min","getEntriesRemaining","PROCESS","STOP","newTaskList","modified","push","prioritize","shift","values","sessionData","AssetIndexingSession","model","indexer","indexingSessionData","totalEntries","processedEntries","actionRequired","ACTIVE","WAITING","$tr","indexedVolumes","join","dateCreated","$progressCell","css","progressBar","ProgressBar","setItemCount","setProcessedItemCount","updateProgressBar","showProgressBar","getSessionStatusMessage","$actions","getActionButtons","reviewMessage","title","$container","target","parent","hasClass","discardMessage","skippedEntries"],"sourceRoot":""}