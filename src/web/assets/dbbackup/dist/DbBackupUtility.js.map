{"version":3,"file":"DbBackupUtility.js","mappings":"YAAA,IAAUA,EAAAA,EAsFPC,OArFCC,MAAMC,gBAAkBC,QAAQC,KAAKC,OAAO,CACxCC,SAAU,KACVC,MAAO,KAEPC,KAAM,SAASC,GACXC,KAAKH,MAAQR,EAAE,IAAMU,GACrBC,KAAKJ,SAAWP,EAAE,eAAgBW,KAAKH,OACvCG,KAAKC,QAAUZ,EAAE,kBAAmBW,KAAKH,OAEzCG,KAAKE,YAAYF,KAAKH,MAAO,SAAU,aAG3CM,SAAU,SAASC,GAAI,WACnBA,EAAGC,iBAEEL,KAAKJ,SAASU,SAAS,cACnBN,KAAKO,YAGNP,KAAKO,YAAYC,mBAFjBR,KAAKO,YAAc,IAAIhB,MAAMkB,YAAYT,KAAKC,SAKlDD,KAAKO,YAAYG,aAAaC,YAAY,UAE1CX,KAAKO,YAAYG,aAAaE,SAAS,QAAQA,SAAS,CACpDC,QAAS,GACV,CACCC,SAAU,WACDzB,EAAE,oBAAoB0B,KAAK,WAC5BxB,MAAMyB,gBAAgB,OAAQzB,MAAM0B,aAAa,sCAAuC,EAAKpB,MAAMqB,aAC9FC,MAAK,WACF,EAAKC,oBACLC,WAAW,EAAKC,WAAWC,KAAK,GAAO,QAH/C,OAKW,WACHhC,MAAMiC,GAAGC,aAAalC,MAAMmC,EAAE,MAAO,+EACrC,EAAKJ,YAAW,MAGxB/B,MAAMoC,kBAAkB,OAAQ,sCAC3BR,MAAK,SAACS,GACH,EAAKR,oBACLC,WAAW,EAAKC,WAAWC,KAAK,GAAO,QAH/C,OAKW,YAAgB,EAAdK,SACL,EAAKR,oBACL7B,MAAMiC,GAAGC,aAAalC,MAAMmC,EAAE,MAAO,+EACrC,EAAKJ,YAAW,SAMhCtB,KAAK6B,UACL7B,KAAK6B,SAASC,IAAI,UAAW,GAGjC9B,KAAKJ,SAASmC,SAAS,YACvB/B,KAAKJ,SAASoC,QAAQ,UAI9BZ,kBAAmB,WAEfpB,KAAKO,YAAY0B,sBADL,MAIhBX,WAAY,SAASY,GAAa,WACzBlC,KAAK6B,WACN7B,KAAK6B,SAAWxC,EAAE,4CAA4C8C,SAASnC,KAAKC,SAC5ED,KAAK6B,SAASC,IAAI,UAAW,IAGjC9B,KAAKO,YAAYG,aAAaE,SAAS,CAACC,QAAS,GAAI,CACjDuB,SAAU,OAAQtB,SAAU,gBACG,IAAhBoB,IAA+C,IAAhBA,GACtC,EAAKL,SAASjB,SAAS,CAACC,QAAS,GAAI,CAACuB,SAAU,SAGpD,EAAKxC,SAASe,YAAY,YAC1B,EAAKf,SAASoC,QAAQ,e","sources":["webpack:///./DbBackupUtility.js"],"sourcesContent":["(function($) {\n    Craft.DbBackupUtility = Garnish.Base.extend({\n        $trigger: null,\n        $form: null,\n\n        init: function(formId) {\n            this.$form = $('#' + formId);\n            this.$trigger = $('input.submit', this.$form);\n            this.$status = $('.utility-status', this.$form);\n\n            this.addListener(this.$form, 'submit', 'onSubmit');\n        },\n\n        onSubmit: function(ev) {\n            ev.preventDefault();\n\n            if (!this.$trigger.hasClass('disabled')) {\n                if (!this.progressBar) {\n                    this.progressBar = new Craft.ProgressBar(this.$status);\n                } else {\n                    this.progressBar.resetProgressBar();\n                }\n\n                this.progressBar.$progressBar.removeClass('hidden');\n\n                this.progressBar.$progressBar.velocity('stop').velocity({\n                    opacity: 1\n                }, {\n                    complete: () => {\n                        if (($('#download-backup').prop('checked'))) {\n                            Craft.downloadFromUrl('POST', Craft.getActionUrl('utilities/db-backup-perform-action'), this.$form.serialize())\n                                .then(() => {\n                                    this.updateProgressBar();\n                                    setTimeout(this.onComplete.bind(this), 300);\n                                })\n                                .catch(() => {\n                                    Craft.cp.displayError(Craft.t('app', 'There was a problem backing up your database. Please check the Craft logs.'));\n                                    this.onComplete(false);\n                                });\n                        } else {\n                            Craft.sendActionRequest('POST', 'utilities/db-backup-perform-action')\n                                .then((response) => {\n                                    this.updateProgressBar();\n                                    setTimeout(this.onComplete.bind(this), 300);\n                                })\n                                .catch(({response}) => {\n                                    this.updateProgressBar();\n                                    Craft.cp.displayError(Craft.t('app', 'There was a problem backing up your database. Please check the Craft logs.'));\n                                    this.onComplete(false);\n                                });\n                        }\n                    },\n                });\n\n                if (this.$allDone) {\n                    this.$allDone.css('opacity', 0);\n                }\n\n                this.$trigger.addClass('disabled');\n                this.$trigger.trigger('blur');\n            }\n        },\n\n        updateProgressBar: function() {\n            var width = 100;\n            this.progressBar.setProgressPercentage(width);\n        },\n\n        onComplete: function(showAllDone) {\n            if (!this.$allDone) {\n                this.$allDone = $('<div class=\"alldone\" data-icon=\"done\" />').appendTo(this.$status);\n                this.$allDone.css('opacity', 0);\n            }\n\n            this.progressBar.$progressBar.velocity({opacity: 0}, {\n                duration: 'fast', complete: () => {\n                    if (typeof showAllDone === 'undefined' || showAllDone === true) {\n                        this.$allDone.velocity({opacity: 1}, {duration: 'fast'});\n                    }\n\n                    this.$trigger.removeClass('disabled');\n                    this.$trigger.trigger('focus');\n                },\n            });\n        }\n    });\n})(jQuery);\n"],"names":["$","jQuery","Craft","DbBackupUtility","Garnish","Base","extend","$trigger","$form","init","formId","this","$status","addListener","onSubmit","ev","preventDefault","hasClass","progressBar","resetProgressBar","ProgressBar","$progressBar","removeClass","velocity","opacity","complete","prop","downloadFromUrl","getActionUrl","serialize","then","updateProgressBar","setTimeout","onComplete","bind","cp","displayError","t","sendActionRequest","response","$allDone","css","addClass","trigger","setProgressPercentage","showAllDone","appendTo","duration"],"sourceRoot":""}