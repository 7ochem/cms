{"version":3,"file":"fields.js","mappings":"YAAA,IAAUA,EAGFC,EAHED,EAyHPE,OAtHKD,EAAcE,QAAQC,KAAKC,OAAO,CAClCC,QAAS,KACTC,eAAgB,KAEhBC,KAAM,WAAW,WACbC,KAAKH,QAAUN,EAAE,WACjBS,KAAKF,eAAiBE,KAAKH,QAAQI,KAAK,eACxCD,KAAKE,YAAYX,EAAE,gBAAiB,WAAY,eAEhD,IAAIY,EAAoBZ,EAAE,qBAEtBY,EAAkBC,SACJD,EAAkBE,KAAK,WAE7BC,SAASC,eAAiB,SAAAC,GAG9B,OAFajB,EAAEiB,GAAMH,KAAK,WAGtB,IAAK,SACD,EAAKI,sBACL,MAEJ,IAAK,SACD,EAAKC,0BAQzBC,YAAa,WAAW,WAChBC,EAAOZ,KAAKa,mBAAmB,IAEnC,GAAID,EAAM,CACN,IAAIP,EAAO,CACPO,KAAMA,GAGVE,MAAMC,kBAAkB,OAAQ,oBAAqB,CAACV,KAAAA,IACjDW,MAAK,SAACC,GACHC,SAASC,KAAOL,MAAMM,OAAO,mBAAqBH,EAASZ,KAAKgB,MAAMC,OAF9E,OAIW,YAAgB,IAAdL,EAAc,EAAdA,SACL,GAAIA,EAASZ,KAAKkB,OAAQ,CACtB,IAAIA,EAAS,EAAKC,cAAcP,EAASZ,KAAKkB,QAC9CE,MAAMX,MAAMY,EAAE,MAAO,+BAAiC,OAASH,EAAOI,KAAK,YAE3Eb,MAAMc,GAAGC,oBAM7BpB,oBAAqB,WAAW,WACxBqB,EAAU9B,KAAKF,eAAeiC,OAC9BC,EAAUhC,KAAKa,mBAAmBiB,GAEtC,GAAIE,GAAWA,IAAYF,EAAS,CAChC,IAAIzB,EAAO,CACPiB,GAAItB,KAAKF,eAAeO,KAAK,MAC7BO,KAAMoB,GAGVlB,MAAMC,kBAAkB,OAAQ,oBAAqB,CAACV,KAAAA,IACjDW,MAAK,SAACC,GACH,EAAKnB,eAAeiC,KAAKd,EAASZ,KAAKgB,MAAMT,MAC7CE,MAAMc,GAAGK,cAAcnB,MAAMY,EAAE,MAAO,sBAH9C,OAKW,YAAgB,IAAdT,EAAc,EAAdA,SACL,GAAIA,EAASZ,KAAKkB,OAAQ,CACtB,IAAIA,EAAS,EAAKC,cAAcP,EAASZ,KAAKkB,QAC9CE,MAAMX,MAAMY,EAAE,MAAO,+BAAiC,OAASH,EAAOI,KAAK,YAE3Eb,MAAMc,GAAGC,oBAM7BhB,mBAAoB,SAASiB,GACzB,OAAOI,OAAOpB,MAAMY,EAAE,MAAO,uCAAwCI,IAGzEpB,oBAAqB,WACjB,GAAIyB,QAAQrB,MAAMY,EAAE,MAAO,mEAAoE,CAC3F,IAAIrB,EAAO,CACPiB,GAAItB,KAAKF,eAAeO,KAAK,OAGjCS,MAAMC,kBAAkB,OAAQ,sBAAuB,CAACV,KAAAA,IACnDW,MAAK,SAACC,GACHC,SAASC,KAAOL,MAAMM,OAAO,sBAFrC,OAIW,YAAgB,EAAdH,SACLH,MAAMc,GAAGC,oBAKzBL,cAAe,SAASY,GACpB,IAAIb,EAAS,GAEb,IAAK,IAAIc,KAAaD,EACbA,EAAeE,eAAeD,KAInCd,EAASA,EAAOgB,OAAOH,EAAeC,KAG1C,OAAOd,KAIf7B,QAAQ8C,KAAKC,OAAM,WACf3B,MAAMtB,YAAc,IAAIA,K","sources":["webpack:///./fields.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    var FieldsAdmin = Garnish.Base.extend({\n        $groups: null,\n        $selectedGroup: null,\n\n        init: function() {\n            this.$groups = $('#groups');\n            this.$selectedGroup = this.$groups.find('a.sel:first');\n            this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n            var $groupSettingsBtn = $('#groupsettingsbtn');\n\n            if ($groupSettingsBtn.length) {\n                var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                menuBtn.settings.onOptionSelect = elem => {\n                    var action = $(elem).data('action');\n\n                    switch (action) {\n                        case 'rename': {\n                            this.renameSelectedGroup();\n                            break;\n                        }\n                        case 'delete': {\n                            this.deleteSelectedGroup();\n                            break;\n                        }\n                    }\n                };\n            }\n        },\n\n        addNewGroup: function() {\n            var name = this.promptForGroupName('');\n\n            if (name) {\n                var data = {\n                    name: name\n                };\n\n                Craft.sendActionRequest('POST', 'fields/save-group', {data})\n                    .then((response) => {\n                        location.href = Craft.getUrl('settings/fields/' + response.data.group.id);\n                    })\n                    .catch(({response}) => {\n                        if (response.data.errors) {\n                            var errors = this.flattenErrors(response.data.errors);\n                            alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    });\n            }\n        },\n\n        renameSelectedGroup: function() {\n            var oldName = this.$selectedGroup.text(),\n                newName = this.promptForGroupName(oldName);\n\n            if (newName && newName !== oldName) {\n                var data = {\n                    id: this.$selectedGroup.data('id'),\n                    name: newName\n                };\n\n                Craft.sendActionRequest('POST', 'fields/save-group', {data})\n                    .then((response) => {\n                        this.$selectedGroup.text(response.data.group.name);\n                        Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                    })\n                    .catch(({response}) => {\n                        if (response.data.errors) {\n                            var errors = this.flattenErrors(response.data.errors);\n                            alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    });\n            }\n        },\n\n        promptForGroupName: function(oldName) {\n            return prompt(Craft.t('app', 'What do you want to name the group?'), oldName);\n        },\n\n        deleteSelectedGroup: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this group and all its fields?'))) {\n                var data = {\n                    id: this.$selectedGroup.data('id')\n                };\n\n                Craft.sendActionRequest('POST', 'fields/delete-group', {data})\n                    .then((response) => {\n                        location.href = Craft.getUrl('settings/fields');\n                    })\n                    .catch(({response}) => {\n                        Craft.cp.displayError();\n                    });\n            }\n        },\n\n        flattenErrors: function(responseErrors) {\n            var errors = [];\n\n            for (var attribute in responseErrors) {\n                if (!responseErrors.hasOwnProperty(attribute)) {\n                    continue;\n                }\n\n                errors = errors.concat(responseErrors[attribute]);\n            }\n\n            return errors;\n        }\n    });\n\n    Garnish.$doc.ready(function() {\n        Craft.FieldsAdmin = new FieldsAdmin();\n    });\n})(jQuery);\n"],"names":["$","FieldsAdmin","jQuery","Garnish","Base","extend","$groups","$selectedGroup","init","this","find","addListener","$groupSettingsBtn","length","data","settings","onOptionSelect","elem","renameSelectedGroup","deleteSelectedGroup","addNewGroup","name","promptForGroupName","Craft","sendActionRequest","then","response","location","href","getUrl","group","id","errors","flattenErrors","alert","t","join","cp","displayError","oldName","text","newName","displayNotice","prompt","confirm","responseErrors","attribute","hasOwnProperty","concat","$doc","ready"],"sourceRoot":""}