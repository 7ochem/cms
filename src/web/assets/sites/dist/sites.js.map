{"version":3,"file":"sites.js","mappings":"YAAA,IAAUA,EAAAA,EA6RPC,OA1RCC,MAAMC,WAAaC,QAAQC,KAAKC,OAAO,CACnCC,QAAS,KACTC,eAAgB,KAEhBC,KAAM,WAAW,WACbC,KAAKH,QAAUP,EAAE,WACjBU,KAAKF,eAAiBE,KAAKH,QAAQI,KAAK,eACxCD,KAAKE,YAAYZ,EAAE,gBAAiB,WAAY,eAEhD,IAAIa,EAAoBb,EAAE,qBAEtBa,EAAkBC,SACJD,EAAkBE,KAAK,WAE7BC,SAASC,eAAiB,SAAAC,GAC9B,IAAIC,EAAQnB,EAAEkB,GAEd,IAAIC,EAAMC,SAAS,YAInB,OAAQD,EAAMJ,KAAK,WACf,IAAK,SACD,EAAKM,sBACL,MAEJ,IAAK,SACD,EAAKC,0BAQzBC,YAAa,WACTb,KAAKc,mBAAmB,IAAIC,MAAK,SAAAC,GAC7B,GAAKA,EAAL,CAIA,IAAIX,EAAO,CACPW,KAAMA,GAGVxB,MAAMyB,kBAAkB,OAAQ,mBAAoB,CAACZ,KAAAA,IAChDU,MAAK,SAACG,GACHC,SAASC,KAAO5B,MAAM6B,OAAO,iBAAkB,CAACC,QAASJ,EAASb,KAAKkB,MAAMC,QAFrF,OAIW,YAAgB,IAAdN,EAAc,EAAdA,SACDA,EAASb,MAAQa,EAASb,KAAKoB,OAC/BC,MAAMlC,MAAMmC,EAAE,MAAO,+BAAiC,OAAST,EAASb,KAAKoB,OAAOG,KAAK,OAEzFpC,MAAMqC,GAAGC,sBAjBzB,OAoBS,gBAGbnB,oBAAqB,WAAW,WAC5BX,KAAKc,mBAAmBd,KAAKF,eAAeO,KAAK,aAAaU,MAAK,SAAAgB,GAC/D,IAAI1B,EAAO,CACPmB,GAAI,EAAK1B,eAAeO,KAAK,MAC7BW,KAAMe,GAGVvC,MAAMyB,kBAAkB,OAAQ,mBAAoB,CAACZ,KAAAA,IAChDU,MAAK,SAACG,GACH,EAAKpB,eAAekC,KAAKd,EAASb,KAAKkB,MAAMP,MAC7C,EAAKlB,eAAeO,KAAK,WAAY0B,GACrCvC,MAAMqC,GAAGI,cAAczC,MAAMmC,EAAE,MAAO,sBAJ9C,OAMW,YAAgB,IAAdT,EAAc,EAAdA,SACDA,EAASb,MAAQa,EAASb,KAAKoB,OAC/BC,MAAMlC,MAAMmC,EAAE,MAAO,+BAAiC,OAAST,EAASb,KAAKoB,OAAOG,KAAK,OAEzFpC,MAAMqC,GAAGC,qBAhBzB,OAmBS,gBAGbhB,mBAAoB,SAASoB,GACzB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB7C,MAAMyB,kBAAkB,OAAQ,2BAA4B,CACxDZ,KAAM,CAACW,KAAMkB,KACdnB,MAAK,SAAAG,GACJ,IAAIoB,EAAQhD,EAAE,UAAW,CAACiD,MAAO,iBAAiBC,SAAS9C,QAAQ+C,MAC/DC,EAAQpD,EAAE,SAAU,CAACiD,MAAO,SAASI,OAAOzB,EAASb,KAAKuC,MAAMJ,SAASF,GACzEO,EAAWvD,EAAE,SAAU,CAACiD,MAAO,kBAAkBC,SAASE,GAC1DI,EAAaxD,EAAE,YAAa,CAACyD,KAAM,SAAUR,MAAO,MAAOP,KAAMxC,MAAMmC,EAAE,MAAO,YAAYa,SAASK,GAC1FvD,EAAE,YAAa,CAACyD,KAAM,SAAUR,MAAO,aAAcP,KAAMxC,MAAMmC,EAAE,MAAO,UAAUa,SAASK,GAE5GrD,MAAMwD,eAAe9B,EAASb,KAAK4C,IAEnC,IAAIC,GAAU,EACVC,EAAQ,IAAIzD,QAAQ0D,MAAMd,EAAO,CACjCe,OAAQ,WACJC,YAAW,WACP9D,MAAM+D,eAAeb,KACtB,MAEPc,OAAQ,WACCN,GACDb,OAKZC,EAAMmB,GAAG,UAAU,SAAAC,GACfA,EAAGC,iBACH,IAAI5B,EAAUzC,EAAE,QAASoD,GAAOkB,MAC5B7B,GAAWA,IAAYG,IACvBE,EAAQL,GACRmB,GAAU,GAEdC,EAAMU,UAGVf,EAAWW,GAAG,SAAS,WACnBN,EAAMU,iBAMtBjD,oBAAqB,WACjB,GAAIkD,QAAQtE,MAAMmC,EAAE,MAAO,gDAAiD,CACxE,IAAItB,EAAO,CACPmB,GAAIxB,KAAKF,eAAeO,KAAK,OAGjCb,MAAMyB,kBAAkB,OAAQ,qBAAsB,CAACZ,KAAAA,IAClDU,MAAK,WACFI,SAASC,KAAO5B,MAAM6B,OAAO,qBAFrC,OAIW,WACH7B,MAAMqC,GAAGC,oBAKzBiC,cAAe,SAASC,GACpB,IAAIvC,EAAS,GAEb,IAAK,IAAIwC,KAAaD,EACbA,EAAeE,eAAeD,KAInCxC,EAASA,EAAO0C,OAAOH,EAAeC,KAG1C,OAAOxC,KAIfjC,MAAM4E,eAAiB5E,MAAM6E,WAAWzE,OAAO,CAC3C0E,mBAAoB,KAEpBC,aAAc,KACdC,oBAAqB,KACrBC,iBAAkB,KAElBC,WAAW,EAEXC,kBAAmB,SAASC,GAAM,WAe9B,OAdI5E,KAAKsE,qBACLtE,KAAKsE,mBAAmBO,iBACjB7E,KAAKsE,oBAGhBtE,KAAK8E,0BAA0BF,GAG1BlF,QAAQqF,iBAAgB,IACzBzB,YAAW,WACP,EAAKkB,oBAAoBQ,QAAQC,QAAQ,WAC1C,MAGA,GAGXC,qBAAsB,WAClB,IAAIC,EACAnF,KAAKwE,oBAAoBY,GAAG,GAAGC,KAAK,YACpCrF,KAAKwE,oBAAoBY,GAAG,GAAGC,KAAK,WASxC,OANIF,EACAnF,KAAKyE,iBAAiBa,YAAY,YAElCtF,KAAKyE,iBAAiBc,SAAS,YAG5BJ,GAGXK,iBAAkB,SAAS9B,GAAI,WAG3B,GAFAA,EAAGC,kBAEC3D,KAAK0E,WAAc1E,KAAKkF,uBAA5B,CAIAlF,KAAKyE,iBAAiBc,SAAS,WAC/BvF,KAAKyF,UACLzF,KAAK0E,WAAY,EAEjB,IAAIrE,EAAO,CACPmB,GAAIxB,KAAK0F,UAAU1F,KAAKuE,eAIxBvE,KAAKwE,oBAAoBY,GAAG,GAAGC,KAAK,aACpChF,EAAKsF,kBAAoB3F,KAAK4F,gBAAgBhC,OAGlD5D,KAAKyE,iBAAiBa,YAAY,WAElC9F,MAAMyB,kBAAkB,OAAQjB,KAAKM,SAASuF,aAAc,CAACxF,KAAAA,IACxDU,MAAK,SAACG,GACH,EAAKwD,WAAY,EACjB,EAAKoB,SACL,EAAKxB,mBAAmBT,OACxB,EAAKkC,wBAAwB7E,EAASb,KAAM,EAAKkE,mBAI7DO,0BAA2B,SAASF,GAChC5E,KAAKuE,aAAeK,EAEpB,IAAIpD,EAAKxB,KAAK0F,UAAUd,GACpB5D,EAAOhB,KAAKgG,YAAYpB,GAExBtC,EAAQhD,EAAE,6FAA6FkD,SAAS9C,QAAQ+C,MACxHC,EAAQpD,EACR,wBACQE,MAAMmC,EAAE,MAAO,gFAAiF,CAACsE,SAAUjF,IADnH,+FAGwExB,MAAMmC,EAAE,MAAO,mBAHvF,+IASsEnC,MAAMmC,EAAE,MAAO,aATrF,wBAYFa,SAASF,GACPO,EAAWvD,EAAE,gCAAgCkD,SAASE,GACtDI,EAAaxD,EAAE,YAAa,CAC5ByD,KAAM,SACNR,MAAO,MACPP,KAAMxC,MAAMmC,EAAE,MAAO,YACtBa,SAASK,GAEZ7C,KAAKwE,oBAAsB9B,EAAMzC,KAAK,qBACtCD,KAAK4F,gBAAkBtG,EAAE,mBAAmBW,KAAK,YACjDD,KAAKyE,iBAAmBjF,MAAM0G,GAAGC,mBAAmB,CAChD5D,MAAO,WACP6D,MAAO5G,MAAMmC,EAAE,MAAO,gBAAiB,CAAC0E,KAAMrF,IAC9CsF,SAAS,IACV9D,SAASK,GAEZ,IAAK,IAAI0D,EAAI,EAAGA,EAAI/G,MAAMgH,MAAMpG,OAAQmG,IAChC/G,MAAMgH,MAAMD,GAAG/E,IAAMA,GACrBxB,KAAK4F,gBAAgBjD,OAAO,kBAAoBnD,MAAMgH,MAAMD,GAAG/E,GAAK,KAAOhC,MAAMiH,WAAWjH,MAAMgH,MAAMD,GAAGvF,MAAQ,aAI3HhB,KAAKsE,mBAAqB,IAAI5E,QAAQ0D,MAAMd,GAE5CtC,KAAKE,YAAY4C,EAAY,SAAS,WAClC9C,KAAKsE,mBAAmBT,UAG5B7D,KAAKE,YAAYF,KAAKwE,oBAAqB,SAAU,wBACrDxE,KAAKE,YAAYoC,EAAO,SAAU,uB","sources":["webpack:///./sites.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.SitesAdmin = Garnish.Base.extend({\n        $groups: null,\n        $selectedGroup: null,\n\n        init: function() {\n            this.$groups = $('#groups');\n            this.$selectedGroup = this.$groups.find('a.sel:first');\n            this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n            var $groupSettingsBtn = $('#groupsettingsbtn');\n\n            if ($groupSettingsBtn.length) {\n                var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                menuBtn.settings.onOptionSelect = elem => {\n                    var $elem = $(elem);\n\n                    if ($elem.hasClass('disabled')) {\n                        return;\n                    }\n\n                    switch ($elem.data('action')) {\n                        case 'rename': {\n                            this.renameSelectedGroup();\n                            break;\n                        }\n                        case 'delete': {\n                            this.deleteSelectedGroup();\n                            break;\n                        }\n                    }\n                };\n            }\n        },\n\n        addNewGroup: function() {\n            this.promptForGroupName('').then(name => {\n                if (!name) {\n                    return;\n                }\n\n                let data = {\n                    name: name\n                };\n\n                Craft.sendActionRequest('POST', 'sites/save-group', {data})\n                    .then((response) => {\n                        location.href = Craft.getUrl('settings/sites', {groupId: response.data.group.id});\n                    })\n                    .catch(({response}) => {\n                        if (response.data && response.data.errors) {\n                            alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + response.data.errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    });\n            }).catch(() => {});\n        },\n\n        renameSelectedGroup: function() {\n            this.promptForGroupName(this.$selectedGroup.data('raw-name')).then(newName => {\n                var data = {\n                    id: this.$selectedGroup.data('id'),\n                    name: newName\n                };\n\n                Craft.sendActionRequest('POST', 'sites/save-group', {data})\n                    .then((response) => {\n                        this.$selectedGroup.text(response.data.group.name);\n                        this.$selectedGroup.data('raw-name', newName);\n                        Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                    })\n                    .catch(({response}) => {\n                        if (response.data && response.data.errors) {\n                            alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + response.data.errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    });\n            }).catch(() => {});\n        },\n\n        promptForGroupName: function(oldName) {\n            return new Promise((resolve, reject) => {\n                Craft.sendActionRequest('POST', 'sites/rename-group-field', {\n                    data: {name: oldName},\n                }).then(response => {\n                    let $form = $('<form/>', {class: 'modal prompt'}).appendTo(Garnish.$bod);\n                    let $body = $('<div/>', {class: 'body'}).append(response.data.html).appendTo($form);\n                    let $buttons = $('<div/>', {class: 'buttons right'}).appendTo($body);\n                    let $cancelBtn = $('<button/>', {type: 'button', class: 'btn', text: Craft.t('app', 'Cancel')}).appendTo($buttons);\n                    let $saveBtn = $('<button/>', {type: 'submit', class: 'btn submit', text: Craft.t('app', 'Save')}).appendTo($buttons);\n\n                    Craft.appendBodyHtml(response.data.js);\n\n                    let success = false;\n                    let modal = new Garnish.Modal($form, {\n                        onShow: () => {\n                            setTimeout(() => {\n                                Craft.setFocusWithin($body);\n                            }, 100);\n                        },\n                        onHide: () => {\n                            if (!success) {\n                                reject();\n                            }\n                        },\n                    });\n\n                    $form.on('submit', ev => {\n                        ev.preventDefault();\n                        let newName = $('.text', $body).val();\n                        if (newName && newName !== oldName) {\n                            resolve(newName);\n                            success = true;\n                        }\n                        modal.hide();\n                    });\n\n                    $cancelBtn.on('click', () => {\n                        modal.hide();\n                    });\n                });\n            });\n        },\n\n        deleteSelectedGroup: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this group?'))) {\n                var data = {\n                    id: this.$selectedGroup.data('id')\n                };\n\n                Craft.sendActionRequest('POST', 'sites/delete-group', {data})\n                    .then(() => {\n                        location.href = Craft.getUrl('settings/sites');\n                    })\n                    .catch(() => {\n                        Craft.cp.displayError();\n                    });\n            }\n        },\n\n        flattenErrors: function(responseErrors) {\n            var errors = [];\n\n            for (var attribute in responseErrors) {\n                if (!responseErrors.hasOwnProperty(attribute)) {\n                    continue;\n                }\n\n                errors = errors.concat(responseErrors[attribute]);\n            }\n\n            return errors;\n        }\n    });\n\n    Craft.SiteAdminTable = Craft.AdminTable.extend({\n        confirmDeleteModal: null,\n\n        $rowToDelete: null,\n        $deleteActionRadios: null,\n        $deleteSubmitBtn: null,\n\n        _deleting: false,\n\n        confirmDeleteItem: function($row) {\n            if (this.confirmDeleteModal) {\n                this.confirmDeleteModal.destroy();\n                delete this.confirmDeleteModal;\n            }\n\n            this._createConfirmDeleteModal($row);\n\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                setTimeout(() => {\n                    this.$deleteActionRadios.first().trigger('focus');\n                }, 100);\n            }\n\n            return false;\n        },\n\n        validateDeleteInputs: function() {\n            var validates = (\n                this.$deleteActionRadios.eq(0).prop('checked') ||\n                this.$deleteActionRadios.eq(1).prop('checked')\n            );\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            } else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        submitDeleteSite: function(ev) {\n            ev.preventDefault();\n\n            if (this._deleting || !this.validateDeleteInputs()) {\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('loading');\n            this.disable();\n            this._deleting = true;\n\n            var data = {\n                id: this.getItemId(this.$rowToDelete)\n            };\n\n            // Are we transferring content?\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                data.transferContentTo = this.$transferSelect.val();\n            }\n\n            this.$deleteSubmitBtn.removeClass('loading');\n\n            Craft.sendActionRequest('POST', this.settings.deleteAction, {data})\n                .then((response) => {\n                    this._deleting = false;\n                    this.enable();\n                    this.confirmDeleteModal.hide();\n                    this.handleDeleteItemSuccess(response.data, this.$rowToDelete);\n                });\n        },\n\n        _createConfirmDeleteModal: function($row) {\n            this.$rowToDelete = $row;\n\n            let id = this.getItemId($row);\n            let name = this.getItemName($row);\n\n            let $form = $('<form id=\"confirmdeletemodal\" class=\"modal fitted\" method=\"post\" accept-charset=\"UTF-8\"/>').appendTo(Garnish.$bod);\n            let $body = $(\n                '<div class=\"body\">' +\n                '<p>' + Craft.t('app', 'What do you want to do with any content that is only available in {language}?', {language: name}) + '</p>' +\n                '<div class=\"options\">' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label> ' +\n                '<div id=\"transferselect\" class=\"select\">' +\n                '<select/>' +\n                '</div>' +\n                '</div>' +\n                '<div>' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                '</div>' +\n                '</div>'\n            ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$transferSelect = $('#transferselect').find('> select');\n            this.$deleteSubmitBtn = Craft.ui.createSubmitButton({\n                class: 'disabled',\n                label: Craft.t('app', 'Delete {site}', {site: name}),\n                spinner: true,\n            }).appendTo($buttons);\n\n            for (var i = 0; i < Craft.sites.length; i++) {\n                if (Craft.sites[i].id != id) {\n                    this.$transferSelect.append('<option value=\"' + Craft.sites[i].id + '\">' + Craft.escapeHtml(Craft.sites[i].name) + '</option>');\n                }\n            }\n\n            this.confirmDeleteModal = new Garnish.Modal($form);\n\n            this.addListener($cancelBtn, 'click', function() {\n                this.confirmDeleteModal.hide();\n            });\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'submitDeleteSite');\n        }\n    });\n})(jQuery);\n"],"names":["$","jQuery","Craft","SitesAdmin","Garnish","Base","extend","$groups","$selectedGroup","init","this","find","addListener","$groupSettingsBtn","length","data","settings","onOptionSelect","elem","$elem","hasClass","renameSelectedGroup","deleteSelectedGroup","addNewGroup","promptForGroupName","then","name","sendActionRequest","response","location","href","getUrl","groupId","group","id","errors","alert","t","join","cp","displayError","newName","text","displayNotice","oldName","Promise","resolve","reject","$form","class","appendTo","$bod","$body","append","html","$buttons","$cancelBtn","type","appendBodyHtml","js","success","modal","Modal","onShow","setTimeout","setFocusWithin","onHide","on","ev","preventDefault","val","hide","confirm","flattenErrors","responseErrors","attribute","hasOwnProperty","concat","SiteAdminTable","AdminTable","confirmDeleteModal","$rowToDelete","$deleteActionRadios","$deleteSubmitBtn","_deleting","confirmDeleteItem","$row","destroy","_createConfirmDeleteModal","isMobileBrowser","first","trigger","validateDeleteInputs","validates","eq","prop","removeClass","addClass","submitDeleteSite","disable","getItemId","transferContentTo","$transferSelect","deleteAction","enable","handleDeleteItemSuccess","getItemName","language","ui","createSubmitButton","label","site","spinner","i","sites","escapeHtml"],"sourceRoot":""}