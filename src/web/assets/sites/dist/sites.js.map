{"version":3,"file":"sites.js","mappings":"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","sources":["webpack:///./sites.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.SitesAdmin = Garnish.Base.extend({\n        $groups: null,\n        $selectedGroup: null,\n\n        init: function() {\n            this.$groups = $('#groups');\n            this.$selectedGroup = this.$groups.find('a.sel:first');\n            this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n            var $groupSettingsBtn = $('#groupsettingsbtn');\n\n            if ($groupSettingsBtn.length) {\n                var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                menuBtn.settings.onOptionSelect = elem => {\n                    var $elem = $(elem);\n\n                    if ($elem.hasClass('disabled')) {\n                        return;\n                    }\n\n                    switch ($elem.data('action')) {\n                        case 'rename': {\n                            this.renameSelectedGroup();\n                            break;\n                        }\n                        case 'delete': {\n                            this.deleteSelectedGroup();\n                            break;\n                        }\n                    }\n                };\n            }\n        },\n\n        addNewGroup: function() {\n            this.promptForGroupName('').then(name => {\n                if (!name) {\n                    return;\n                }\n\n                let data = {\n                    name: name\n                };\n\n                Craft.sendActionRequest('POST', 'sites/save-group', {data})\n                    .then((response) => {\n                        if (response.data.success) {\n                            location.href = Craft.getUrl('settings/sites', {groupId: response.data.group.id});\n                        } else if (response.data.errors) {\n                            var errors = this.flattenErrors(response.data.errors);\n                            alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            return Promise.reject();\n                        }\n                    })\n                    .catch(({response}) => {\n                        Craft.cp.displayError();\n                    });\n            }).catch(() => {});\n        },\n\n        renameSelectedGroup: function() {\n            this.promptForGroupName(this.$selectedGroup.data('raw-name')).then(newName => {\n                var data = {\n                    id: this.$selectedGroup.data('id'),\n                    name: newName\n                };\n\n                Craft.sendActionRequest('POST', 'sites/save-group', {data})\n                    .then((response) => {\n                        if (response.data.success) {\n                            this.$selectedGroup.text(response.data.group.name);\n                            this.$selectedGroup.data('raw-name', newName);\n                            Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                        } else if (response.data.errors) {\n                            var errors = this.flattenErrors(response.data.errors);\n                            alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            return Promise.reject();\n                        }\n                    })\n                    .catch(({response}) => {\n                        Craft.cp.displayError();\n                    });\n            }).catch(() => {});\n        },\n\n        promptForGroupName: function(oldName) {\n            return new Promise((resolve, reject) => {\n                Craft.sendActionRequest('POST', 'sites/rename-group-field', {\n                    data: {name: oldName},\n                }).then(response => {\n                    let $form = $('<form/>', {class: 'modal prompt'}).appendTo(Garnish.$bod);\n                    let $body = $('<div/>', {class: 'body'}).append(response.data.html).appendTo($form);\n                    let $buttons = $('<div/>', {class: 'buttons right'}).appendTo($body);\n                    let $cancelBtn = $('<button/>', {type: 'button', class: 'btn', text: Craft.t('app', 'Cancel')}).appendTo($buttons);\n                    let $saveBtn = $('<button/>', {type: 'submit', class: 'btn submit', text: Craft.t('app', 'Save')}).appendTo($buttons);\n\n                    Craft.appendBodyHtml(response.data.js);\n\n                    let success = false;\n                    let modal = new Garnish.Modal($form, {\n                        onShow: () => {\n                            setTimeout(() => {\n                                Craft.setFocusWithin($body);\n                            }, 100);\n                        },\n                        onHide: () => {\n                            if (!success) {\n                                reject();\n                            }\n                        },\n                    });\n\n                    $form.on('submit', ev => {\n                        ev.preventDefault();\n                        let newName = $('.text', $body).val();\n                        if (newName && newName !== oldName) {\n                            resolve(newName);\n                            success = true;\n                        }\n                        modal.hide();\n                    });\n\n                    $cancelBtn.on('click', () => {\n                        modal.hide();\n                    });\n                });\n            });\n        },\n\n        deleteSelectedGroup: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this group?'))) {\n                var data = {\n                    id: this.$selectedGroup.data('id')\n                };\n\n                Craft.sendActionRequest('POST', 'sites/delete-group', {data})\n                    .then((response) => {\n                        if (response.data.success) {\n                            location.href = Craft.getUrl('settings/sites');\n                        } else {\n                            Promise.reject();\n                        }\n                    })\n                    .catch(({response}) => {\n                        Craft.cp.displayError();\n                    });\n            }\n        },\n\n        flattenErrors: function(responseErrors) {\n            var errors = [];\n\n            for (var attribute in responseErrors) {\n                if (!responseErrors.hasOwnProperty(attribute)) {\n                    continue;\n                }\n\n                errors = errors.concat(responseErrors[attribute]);\n            }\n\n            return errors;\n        }\n    });\n\n    Craft.SiteAdminTable = Craft.AdminTable.extend({\n        confirmDeleteModal: null,\n\n        $rowToDelete: null,\n        $deleteActionRadios: null,\n        $deleteSubmitBtn: null,\n\n        _deleting: false,\n\n        confirmDeleteItem: function($row) {\n            if (this.confirmDeleteModal) {\n                this.confirmDeleteModal.destroy();\n                delete this.confirmDeleteModal;\n            }\n\n            this._createConfirmDeleteModal($row);\n\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                setTimeout(() => {\n                    this.$deleteActionRadios.first().trigger('focus');\n                }, 100);\n            }\n\n            return false;\n        },\n\n        validateDeleteInputs: function() {\n            var validates = (\n                this.$deleteActionRadios.eq(0).prop('checked') ||\n                this.$deleteActionRadios.eq(1).prop('checked')\n            );\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            } else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        submitDeleteSite: function(ev) {\n            ev.preventDefault();\n\n            if (this._deleting || !this.validateDeleteInputs()) {\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('loading');\n            this.disable();\n            this._deleting = true;\n\n            var data = {\n                id: this.getItemId(this.$rowToDelete)\n            };\n\n            // Are we transferring content?\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                data.transferContentTo = this.$transferSelect.val();\n            }\n\n            this.$deleteSubmitBtn.removeClass('loading');\n\n            Craft.sendActionRequest('POST', this.settings.deleteAction, {data})\n                .then((response) => {\n                    this._deleting = false;\n                    this.enable();\n                    this.confirmDeleteModal.hide();\n                    this.handleDeleteItemSuccess(response.data, this.$rowToDelete);\n                });\n        },\n\n        _createConfirmDeleteModal: function($row) {\n            this.$rowToDelete = $row;\n\n            let id = this.getItemId($row);\n            let name = this.getItemName($row);\n\n            let $form = $('<form id=\"confirmdeletemodal\" class=\"modal fitted\" method=\"post\" accept-charset=\"UTF-8\"/>').appendTo(Garnish.$bod);\n            let $body = $(\n                '<div class=\"body\">' +\n                '<p>' + Craft.t('app', 'What do you want to do with any content that is only available in {language}?', {language: name}) + '</p>' +\n                '<div class=\"options\">' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label> ' +\n                '<div id=\"transferselect\" class=\"select\">' +\n                '<select/>' +\n                '</div>' +\n                '</div>' +\n                '<div>' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                '</div>' +\n                '</div>'\n            ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$transferSelect = $('#transferselect').find('> select');\n            this.$deleteSubmitBtn = Craft.ui.createSubmitButton({\n                class: 'disabled',\n                label: Craft.t('app', 'Delete {site}', {site: name}),\n                spinner: true,\n            }).appendTo($buttons);\n\n            for (var i = 0; i < Craft.sites.length; i++) {\n                if (Craft.sites[i].id != id) {\n                    this.$transferSelect.append('<option value=\"' + Craft.sites[i].id + '\">' + Craft.escapeHtml(Craft.sites[i].name) + '</option>');\n                }\n            }\n\n            this.confirmDeleteModal = new Garnish.Modal($form);\n\n            this.addListener($cancelBtn, 'click', function() {\n                this.confirmDeleteModal.hide();\n            });\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'submitDeleteSite');\n        }\n    });\n})(jQuery);\n"],"names":["$","jQuery","Craft","SitesAdmin","Garnish","Base","extend","$groups","$selectedGroup","init","this","find","addListener","$groupSettingsBtn","length","data","settings","onOptionSelect","elem","$elem","hasClass","renameSelectedGroup","deleteSelectedGroup","addNewGroup","promptForGroupName","then","name","sendActionRequest","response","success","location","href","getUrl","groupId","group","id","errors","Promise","reject","flattenErrors","alert","t","join","cp","displayError","newName","text","displayNotice","oldName","resolve","$form","class","appendTo","$bod","$body","append","html","$buttons","$cancelBtn","type","appendBodyHtml","js","modal","Modal","onShow","setTimeout","setFocusWithin","onHide","on","ev","preventDefault","val","hide","confirm","responseErrors","attribute","hasOwnProperty","concat","SiteAdminTable","AdminTable","confirmDeleteModal","$rowToDelete","$deleteActionRadios","$deleteSubmitBtn","_deleting","confirmDeleteItem","$row","destroy","_createConfirmDeleteModal","isMobileBrowser","first","trigger","validateDeleteInputs","validates","eq","prop","removeClass","addClass","submitDeleteSite","disable","getItemId","transferContentTo","$transferSelect","deleteAction","enable","handleDeleteItemSuccess","getItemName","language","ui","createSubmitButton","label","site","spinner","i","sites","escapeHtml"],"sourceRoot":""}