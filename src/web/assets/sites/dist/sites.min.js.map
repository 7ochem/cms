{"version":3,"sources":["sites/src/sites.js"],"names":["$","Craft","SitesAdmin","Garnish","Base","extend","$groups","init","$selectedGroup","find","addListener","$groupSettingsBtn","menuBtn","data","elem","onOptionSelect","$elem","hasClass","renameSelectedGroup","this","deleteSelectedGroup","addNewGroup","name","promptForGroupName","postActionRequest","response","textStatus","success","location","getUrl","groupId","group","id","errors","flattenErrors","t","join","cp","displayError","text","oldName","newName","displayNotice","alert","prompt","confirm","href","responseErrors","hasOwnProperty","attribute","concat","confirmDeleteModal","$deleteSpinner","AdminTable","_deleting","$rowToDelete","$deleteActionRadios","$deleteSubmitBtn","_createConfirmDeleteModal","confirmDeleteItem","$row","isMobileBrowser","setTimeout","destroy","validateDeleteInputs","validates","first","trigger","submitDeleteLocale","eq","prop","preventDefault","removeClass","addClass","ev","transferContentTo","$transferSelect","enable","getItemId","val","language","hide","handleDeleteItemResponse","appendTo","$buttons","getCsrfInput","$bod","$body","$form","$cancelBtn","type","class","site","i","sites","length","append","escapeHtml","Modal","jQuery"],"mappings":"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","file":"sites.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.SitesAdmin = Garnish.Base.extend({\n        $groups: null,\n        $selectedGroup: null,\n\n        init: function() {\n            this.$groups = $('#groups');\n            this.$selectedGroup = this.$groups.find('a.sel:first');\n            this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n            var $groupSettingsBtn = $('#groupsettingsbtn');\n\n            if ($groupSettingsBtn.length) {\n                var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                menuBtn.settings.onOptionSelect = elem => {\n                    var $elem = $(elem);\n\n                    if ($elem.hasClass('disabled')) {\n                        return;\n                    }\n\n                    switch ($elem.data('action')) {\n                        case 'rename': {\n                            this.renameSelectedGroup();\n                            break;\n                        }\n                        case 'delete': {\n                            this.deleteSelectedGroup();\n                            break;\n                        }\n                    }\n                };\n            }\n        },\n\n        addNewGroup: function() {\n            var name = this.promptForGroupName('');\n\n            if (name) {\n                var data = {\n                    name: name\n                };\n\n                Craft.postActionRequest('sites/save-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/sites', {groupId: response.group.id});\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }\n        },\n\n        renameSelectedGroup: function() {\n            var oldName = this.$selectedGroup.text(),\n                newName = this.promptForGroupName(oldName);\n\n            if (newName && newName !== oldName) {\n                var data = {\n                    id: this.$selectedGroup.data('id'),\n                    name: newName\n                };\n\n                Craft.postActionRequest('sites/save-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            this.$selectedGroup.text(response.group.name);\n                            Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }\n        },\n\n        promptForGroupName: function(oldName) {\n            return prompt(Craft.t('app', 'What do you want to name the group?'), oldName);\n        },\n\n        deleteSelectedGroup: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this group?'))) {\n                var data = {\n                    id: this.$selectedGroup.data('id')\n                };\n\n                Craft.postActionRequest('sites/delete-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/sites');\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }\n        },\n\n        flattenErrors: function(responseErrors) {\n            var errors = [];\n\n            for (var attribute in responseErrors) {\n                if (!responseErrors.hasOwnProperty(attribute)) {\n                    continue;\n                }\n\n                errors = errors.concat(responseErrors[attribute]);\n            }\n\n            return errors;\n        }\n    });\n\n    Craft.SiteAdminTable = Craft.AdminTable.extend({\n        confirmDeleteModal: null,\n\n        $rowToDelete: null,\n        $deleteActionRadios: null,\n        $deleteSubmitBtn: null,\n        $deleteSpinner: null,\n\n        _deleting: false,\n\n        confirmDeleteItem: function($row) {\n            if (this.confirmDeleteModal) {\n                this.confirmDeleteModal.destroy();\n                delete this.confirmDeleteModal;\n            }\n\n            this._createConfirmDeleteModal($row);\n\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                setTimeout(() => {\n                    this.$deleteActionRadios.first().trigger('focus');\n                }, 100);\n            }\n\n            return false;\n        },\n\n        validateDeleteInputs: function() {\n            var validates = (\n                this.$deleteActionRadios.eq(0).prop('checked') ||\n                this.$deleteActionRadios.eq(1).prop('checked')\n            );\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            } else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        submitDeleteLocale: function(ev) {\n            ev.preventDefault();\n\n            if (this._deleting || !this.validateDeleteInputs()) {\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this._deleting = true;\n\n            var data = {\n                id: this.getItemId(this.$rowToDelete)\n            };\n\n            // Are we transferring content?\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                data.transferContentTo = this.$transferSelect.val();\n            }\n\n            Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._deleting = false;\n                    this.enable();\n                    this.confirmDeleteModal.hide();\n                    this.handleDeleteItemResponse(response, this.$rowToDelete);\n                }\n            });\n        },\n\n        _createConfirmDeleteModal: function($row) {\n            this.$rowToDelete = $row;\n\n            let id = this.getItemId($row);\n            let name = this.getItemName($row);\n\n            let $form = $(\n                '<form id=\"confirmdeletemodal\" class=\"modal fitted\" method=\"post\" accept-charset=\"UTF-8\">' +\n                Craft.getCsrfInput() +\n                '<input type=\"hidden\" name=\"action\" value=\"localization/deleteLocale\"/>' +\n                '<input type=\"hidden\" name=\"id\" value=\"' + id + '\"/>' +\n                '</form>'\n            ).appendTo(Garnish.$bod);\n            let $body = $(\n                '<div class=\"body\">' +\n                '<p>' + Craft.t('app', 'What do you want to do with any content that is only available in {language}?', {language: name}) + '</p>' +\n                '<div class=\"options\">' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label> ' +\n                '<div id=\"transferselect\" class=\"select\">' +\n                '<select/>' +\n                '</div>' +\n                '</div>' +\n                '<div>' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                '</div>' +\n                '</div>'\n            ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$transferSelect = $('#transferselect').find('> select');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Delete {site}', {site: name}),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            for (var i = 0; i < Craft.sites.length; i++) {\n                if (Craft.sites[i].id != id) {\n                    this.$transferSelect.append('<option value=\"' + Craft.sites[i].id + '\">' + Craft.escapeHtml(Craft.sites[i].name) + '</option>');\n                }\n            }\n\n            this.confirmDeleteModal = new Garnish.Modal($form);\n\n            this.addListener($cancelBtn, 'click', function() {\n                this.confirmDeleteModal.hide();\n            });\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'submitDeleteLocale');\n        }\n    });\n})(jQuery);\n"]}