{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","select","c","Garnish","selector","plural","offset","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","httpProxy","proxy","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","initialDeltaValues","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","initialValues","encodeURIComponentExceptEqualChar","o","decodeURIComponent","paramLoop","paramName","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","uuid","crypto","randomUUID","getRandomValues","Uint8Array","toString","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","disclosureMenu","datetime","datetimeinput","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$trigger","DisclosureMenu","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","filter","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","target","data-icon","ltr","addListener","hideSidebar","showSidebar","$siteSelectOuterContainer","$contents","add","Slideout","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","$target","event","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","isMobileBrowser","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_openedSidebarStyles","one","addLayer","removeLayer","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$searchContainer","$search","$filterBtn","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","filterHuds","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","getSite","s","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","initSource","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","serialized","condition","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","badgeCounts","_updateBadgeCounts","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","updateFilterBtn","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_collapseSource","aria-expanded","$childSources","not","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","$badge","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","showFilterHud","show","FilterHud","hasRules","loading","hudClass","$tip","baseInputName","$hud","hudHtml","bodyHtml","updateSizeAndPositionInternal","searchOffset","width","outerWidth","top","outerHeight","onShow","has","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","onAddElements","onRemoveElements","animateElementAway","animateCss","opacity","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","replaceAsset","replaceElement","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","showImagePreview","startingWidth","startingHeight","PreviewFileModal","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultSourceParts","volumeSource","toArray","subfolderSource","setParams","_updateUrl","nestedSources","$thisSource","forEach","$s","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","openInstance","selfDestruct","$focusedItem","_loadPreview","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","$label","oldName","newName","finally","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","openPreview","focusItem","minGutter","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","replaceWithId","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$navToggle","$globalSidebar","$globalContainer","$mainContainer","$alerts","$crumbs","$breadcrumbList","$breadcrumbItems","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","isMobile","fixedHeader","breadcrumbListWidth","breadcrumbDisclosureItem","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","resizeTimeout","$allInstructions","$instructions","updateFixedHeader","handleWindowResize","setSidebarNavAttributes","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","heading","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","isExpanded","navIsExpanded","disableGlobalSidebarLinks","enableGlobalSidebarLinks","focusableItems","isAlwaysVisible","getComputedStyle","getPropertyValue","toggleSidebar","toggleClass","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","handleBreadcrumbVisibility","breadcrumbItemsWrap","listWidth","totalItemWidth","finalIndex","newWidth","visibleItemWidth","shownItems","hiddenItems","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","site","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$newSourceBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","elementTypeName","availableTableAttributes","conditionBuilderHtml","conditionBuilderJs","userGroups","setContainer","buildModal","addSource","$menuBtnContainer","data-type","sourceData","tableAttributes","scrollContainerToElement","$itemLabel","$itemInput","Heading","updateItemLabel","Source","CustomSource","$pendingHeading","$lastSourceItem","$indexSourceItem","getIndexSourceItem","isHeading","appendIndexSourceItem","isNew","$extraSources","nextAll","$sourceItem","BaseSource","$settingsContainer","isSelected","deselect","createSettings","createTableAttributesField","$columnCheckboxes","selectedAttributes","createTableColumnOption","createField","instructions","createCheckbox","$labelInput","$labelField","defaultId","swapPlaceholders","createCheckboxSelectField","showAllOption","handleLabelInputChange","data-key","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","httpStatus","httpError","openingPreview","preview","previewToken","createdProvisionalDraft","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","BroadcastChannel","onmessage","canonicalId","sourceId","reload","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","_createSiteStatusField","$globalField","createLightswitchField","_showField","siteStatusValues","hasEnabled","hasDisabled","originalEnabledValue","originalSerializedStatus","enabledForSite","_updateGlobalStatus","serializedStatuses","addlSites","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","enabled","disabled","$lightswitch","$addlSiteSelectContainer","createSelect","$addlSiteSelect","addlSiteInfo","enabledByDefault","_saveSuccessMessage","_saveFailMessage","spinners","getPreviewToken","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","console","warn","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","timestamp","updatePreviewTargets","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","afterUpdate","postMessage","deltaCallback","swapDuplicatedElementIds","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","autocapitalize","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","destruct","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","allLabel","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        uuid: function() {\n            if (typeof crypto.randomUUID === 'function') {\n                return crypto.randomUUID();\n            }\n\n            // h/t https://stackoverflow.com/a/2117523/1688568\n            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n              (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n            );\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn:not([data-disclosure-trigger])', $container).menubtn();\n            $('[data-disclosure-trigger]', $container).disclosureMenu();\n            $('.datetimewrapper', $container).datetime();\n            $('.datewrapper > input[type=\"date\"], .timewrapper > input[type=\"time\"]', $container).datetimeinput();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        disclosureMenu: function() {\n            return this.each(function() {\n                var $trigger = $(this);\n                var $disclosureId = $trigger.attr('aria-controls');\n\n                // Only instantiate element if there is a reference to disclosure content\n                if ($disclosureId) {\n                    var settings = {};\n\n                    new Garnish.DisclosureMenu($trigger, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('').trigger('input').trigger('change');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().filter('[type=\"text\"]').focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n\n        datetimeinput: function() {\n            return this.each(function() {\n                const $input = $(this);\n                const checkValue = () => {\n                    if ($input.val() === '') {\n                        $input.addClass('empty-value');\n                    } else {\n                        $input.removeClass('empty-value');\n                    }\n                };\n                $input.on('input', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $searchContainer: null,\n    $search: null,\n    $filterBtn: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    filterHuds: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n\n        this.$searchContainer = this.$toolbar.find('.search:first')\n        this.$search = this.$searchContainer.children('input:first');\n        this.$filterBtn = this.$searchContainer.children('.filter-btn:first');\n        this.$clearSearchBtn = this.$searchContainer.children('.clear:first');\n\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Filter HUDs\n        this.filterHuds = {};\n        this.addListener(this.$filterBtn, 'click', 'showFilterHud');\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].serialized) {\n            params.condition = this.filterHuds[this.sourceKey].serialized;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        // Filter HUD\n        // ----------------------------------------------------------------------\n\n        this.updateFilterBtn();\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n            delete params.collapsedElementIds;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    },\n\n    showFilterHud: function() {\n        if (!this.filterHuds[this.sourceKey]) {\n            this.filterHuds[this.sourceKey] = new FilterHud(this, this.sourceKey);\n        } else {\n            this.filterHuds[this.sourceKey].show();\n        }\n    },\n\n    updateFilterBtn: function() {\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].hasRules()) {\n            this.$filterBtn.addClass('active');\n        } else {\n            this.$filterBtn.removeClass('active');\n        }\n    },\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\nconst FilterHud = Garnish.HUD.extend({\n    elementIndex: null,\n    sourceKey: null,\n    loading: true,\n    serialized: null,\n\n    init: function(elementIndex, sourceKey) {\n        this.elementIndex = elementIndex;\n        this.sourceKey = sourceKey;\n\n        const $spinner = $('<div/>', {\n            class: 'spinner',\n        });\n\n        this.base(this.elementIndex.$filterBtn, $spinner, {\n            hudClass: 'hud element-filter-hud loading',\n        });\n\n        this.$tip.remove();\n        this.$tip = null;\n\n        const id = `element-filter-${Math.floor(Math.random() * 1000000000)}`;\n\n        Craft.sendActionRequest('POST', 'element-indexes/filter-hud', {\n            data: {\n                elementType: this.elementIndex.elementType,\n                source: this.sourceKey,\n                baseInputName: id,\n                id: id,\n            },\n        }).then(response => {\n            this.loading = false;\n            this.$hud.removeClass('loading');\n            $spinner.remove();\n\n            this.$main.append(response.data.hudHtml);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.bodyHtml);\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        });\n    },\n\n    updateSizeAndPositionInternal: function() {\n        const searchOffset = this.elementIndex.$searchContainer.offset();\n\n        this.$hud.css({\n            width: this.elementIndex.$searchContainer.outerWidth() - 2,\n            top: searchOffset.top + this.elementIndex.$searchContainer.outerHeight(),\n            left: searchOffset.left + 1,\n        });\n    },\n\n    onShow: function() {\n        this.elementIndex.$filterBtn.addClass('active');\n        this.base();\n    },\n\n    onHide: function() {\n        this.base();\n\n        this.elementIndex.updateFilterBtn();\n\n        // If something changed, update the elements\n        if (this.serialized !== (this.serialized = this.serialize())) {\n            this.elementIndex.updateElements();\n        }\n    },\n\n    hasRules: function() {\n        return this.$main.has('.condition-rule').length !== 0;\n    },\n\n    serialize: function() {\n        return this.hasRules() ? this.$body.serialize() : null;\n    }\n})\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n\n        this.updateAddElementsBtn();\n\n        this.onAddElements();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onAddElements: function () {\n        this.trigger('addElements');\n        this.settings.onAddElements();\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onAddElements: $.noop,\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n    replaceAsset: null,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    if (this.replaceAsset) {\n                        this.settings.input.replaceElement(this.$element.data('id'), this.replaceAsset);\n                    } else {\n                        this.settings.input.refreshThumbnail(this.$element.data('id'));\n                    }\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n\n            onSave: (data) => {\n                if (data.elementId) {\n                    this.settings.elementId = this.replaceAsset = data.elementId;\n                }\n\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave(data);\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function(data) {\n        this.settings.onSave(data);\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            this.openPreview();\n            ev.stopPropagation();\n            return false;\n        }\n    },\n    \n    onAddElements: function () {\n        this.$elements.find('.elementthumb').addClass('open-preview').on('mousedown touchstart', (ev) => {\n            this.elementSelect.focusItem($(ev.target).parent());\n            this.openPreview();\n            ev.stopPropagation();\n        });\n        this.base();\n    },\n\n    openPreview: function() {\n        if (Craft.PreviewFileModal.openInstance) {\n            Craft.PreviewFileModal.openInstance.selfDestruct();\n        } else {\n            var $element = this.elementSelect.$focusedItem;\n\n            if ($element.length) {\n                this._loadPreview($element);\n            }\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {\n            minGutter: 50\n        };\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                'aria-label': this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    replaceElement: function(elementId, replaceWithId) {\n        var parameters = {\n            elementId: replaceWithId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                this.removeElement($existing);\n                let elementInfo = Craft.getElementInfo(data.html);\n                this.selectElements([elementInfo]);\n            }\n        });\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $navToggle: null,\n    $globalSidebar: null,\n    $globalContainer: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $breadcrumbList: null,\n    $breadcrumbItems: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    isMobile: null,\n    fixedHeader: false,\n\n    breadcrumbListWidth: 0,\n    breadcrumbDisclosureItem: `<li class=\"breadcrumb-toggle-wrapper\" data-disclosure-item data-wrapper><button data-disclosure-trigger aria-controls=\"breadcrumb-disclosure\" aria-haspopup=\"true\">${Craft.t('app', 'More')}…</button><div id=\"breadcrumb-disclosure\" class=\"menu menu--disclosure\" data-disclosure-menu><ul></ul></div></li>`,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    resizeTimeout: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$navToggle = $('#nav-toggle');\n        this.$globalSidebar = $('#global-sidebar');\n        this.$globalContainer = $('#global-container');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$breadcrumbList = $('.breadcrumb-list');\n        this.$breadcrumbItems = $('.breadcrumb-list li');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.isMobile = Garnish.isMobileBrowser();\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (!this.isMobile && this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n\n                    clearTimeout(this.resizeTimeout);\n                    var cp = this;\n                    this.resizeTimeout = setTimeout(function() {\n                        cp.setSidebarNavAttributes();\n                    }, 100);\n                }\n            });\n            this.handleWindowResize();\n            this.setSidebarNavAttributes();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener(this.$navToggle, 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        const isExpanded = this.navIsExpanded();\n\n        if (isExpanded === null) return;\n\n        if (isExpanded) {\n            this.disableGlobalSidebarLinks();\n            this.$navToggle.focus();\n            this.$navToggle.attr('aria-expanded', 'false');\n            Garnish.$bod.removeClass('showing-nav');\n        } else {\n            this.enableGlobalSidebarLinks();\n            this.$globalSidebar.find(':focusable')[0].focus();\n            this.$navToggle.attr('aria-expanded', 'true');\n            Garnish.$bod.addClass('showing-nav');\n        }\n    },\n\n    enableGlobalSidebarLinks: function() {\n        const focusableItems = this.$globalSidebar.find(':focusable');\n        \n        $(focusableItems).each(function() {\n            $(this).attr('tabindex', '0');\n        });\n    },\n\n    disableGlobalSidebarLinks: function() {\n        const focusableItems = this.$globalSidebar.find(':focusable');\n        \n        $(focusableItems).each(function() {\n            $(this).attr('tabindex', '-1');\n        });\n    },\n\n    setSidebarNavAttributes: function() {\n        const isExpanded = this.navIsExpanded();\n\n        if (isExpanded === null) return;\n\n        if (!isExpanded) {\n            this.disableGlobalSidebarLinks();\n        } else {\n            this.enableGlobalSidebarLinks();\n        }\n    },\n\n    navIsExpanded: function() {\n        if (!this.$globalSidebar[0]) return null;\n\n        const isAlwaysVisible = getComputedStyle(this.$globalSidebar[0]).getPropertyValue('--is-always-visible').trim();\n\n        return this.$navToggle.attr('aria-expanded') === 'true'\n            || isAlwaysVisible === 'true';\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n        this.handleBreadcrumbVisibility();\n    },\n\n    breadcrumbItemsWrap: function() {\n        if (!this.$breadcrumbItems[0]) return;\n\n        const listWidth = this.$breadcrumbList[0].offsetWidth;\n        let totalItemWidth = 0;\n        \n        // Iterate through all list items (inclusive of more button)\n        this.$breadcrumbList.find('li').each(function() {\n            totalItemWidth += $(this)[0].offsetWidth;\n        });\n\n        this.breadcrumbListWidth = listWidth;\n\n        return totalItemWidth > listWidth;\n    },\n\n    handleBreadcrumbVisibility: function() {\n        if (!this.breadcrumbItemsWrap()) return;\n\n        if (this.$breadcrumbList.find('[data-disclosure-item]').length === 0) {\n            this.$breadcrumbList.append(this.breadcrumbDisclosureItem);\n        }\n\n        const triggerWidth = this.$breadcrumbList.find('[data-disclosure-item]')[0].offsetWidth;\n        let visibleItemWidth = triggerWidth;\n        let finalIndex;\n        let newWidth;\n        const listWidth = this.breadcrumbListWidth;\n\n        // Find breadcrumbs that should remain visible without overflowing\n        this.$breadcrumbItems.each(function(index) {\n            newWidth = visibleItemWidth + this.offsetWidth;\n\n            if (newWidth < listWidth) {\n                finalIndex = index;\n                visibleItemWidth += this.offsetWidth;\n            } else {\n                return false;\n            }\n        });\n\n        // Separate breadcrums that should remain visible vs. hidden\n        const shownItems = this.$breadcrumbItems.slice(0, finalIndex + 1);\n        const hiddenItems = this.$breadcrumbItems.slice(finalIndex + 1);\n        \n        // Empty list DOM and add shown items and trigger item\n        this.$breadcrumbList.html('');\n        this.$breadcrumbList.append(shownItems);\n        this.$breadcrumbList.append(this.breadcrumbDisclosureItem);\n        \n        // Add hidden items to disclosure menu and initialize\n        this.$breadcrumbList.find('[data-disclosure-menu] ul').append(hiddenItems);\n        this.$breadcrumbList.find('[data-disclosure-trigger]').disclosureMenu();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        if (this.isMobile) {\n            return;\n        }\n\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $newSourceBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    elementTypeName: null,\n    availableTableAttributes: null,\n\n    conditionBuilderHtml: null,\n    conditionBuilderJs: null,\n    userGroups: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        const $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        Craft.sendActionRequest('POST', 'element-index-settings/get-customize-sources-modal-data', {\n            data: {\n                elementType: this.elementIndex.elementType,\n            },\n        }).then(response => {\n            this.$saveBtn.removeClass('disabled');\n            this.buildModal(response.data);\n        }).finally(() => {\n            this.$loadingSpinner.remove();\n        });\n\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        this.availableTableAttributes = response.availableTableAttributes;\n        this.elementTypeName = response.elementTypeName;\n        this.conditionBuilderHtml = response.conditionBuilderHtml;\n        this.conditionBuilderJs = response.conditionBuilderJs;\n        this.userGroups = response.userGroups;\n\n        if (response.headHtml) {\n            Craft.appendHeadHtml(response.headHtml);\n        }\n        if (response.bodyHtml) {\n            Craft.appendFootHtml(response.bodyHtml);\n        }\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (let i = 0; i < response.sources.length; i++) {\n            this.sources.push(this.addSource(response.sources[i]));\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n\n        const $menuBtnContainer = $('<div class=\"buttons left\"/>').appendTo(this.$footer);\n        const $menuBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn add icon',\n            'aria-label': Craft.t('app', 'Add…'),\n            title: Craft.t('app', 'Add…'),\n        }).appendTo($menuBtnContainer);\n\n        const $menu = $('<div/>', {\n            class: 'menu',\n        }).appendTo($menuBtnContainer);\n        const $ul  = $('<ul/>').append(\n          $('<li/>').append(\n            $('<a/>', {\n                text: Craft.t('app', 'New heading'),\n                'data-type': 'heading',\n            })\n          )\n        ).appendTo($menu);\n\n        if (response.conditionBuilderHtml) {\n            $('<li/>').append(\n              $('<a/>', {\n                  text: Craft.t('app', 'New custom source'),\n                  'data-type': 'custom',\n              })\n            ).appendTo($ul);\n        }\n\n        new Garnish.MenuBtn($menuBtn, {\n            onOptionSelect: option => {\n                const sourceData = {\n                    type: $(option).data('type'),\n                };\n                if (sourceData.type === 'custom') {\n                    sourceData.key = `custom:${Craft.uuid()}`;\n                    sourceData.tableAttributes = [];\n                    sourceData.availableTableAttributes = [];\n                }\n                const source = this.addSource(sourceData);\n                Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n                source.select();\n                this.updateSourcesOnSave = true;\n            }\n        });\n    },\n\n    addSource: function(sourceData) {\n        const $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        const $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        const $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        let source;\n\n        if (sourceData.type === 'heading') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            if (sourceData.type === 'native') {\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            } else {\n                source = new Craft.CustomizeSourcesModal.CustomSource(this, $item, $itemLabel, $itemInput, sourceData);\n            }\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n        return source;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'element-index-settings/save-customize-sources-modal-settings', {\n            data: this.$container.serialize() + '&elementType=' + this.elementIndex.elementType,\n        }).then(() => {\n            // Have any changes been made to the source list?\n            if (this.updateSourcesOnSave) {\n                if (this.$elementIndexSourcesContainer.length) {\n                    let $lastSourceItem = null,\n                      $pendingHeading;\n\n                    for (let i = 0; i < this.sourceSort.$items.length; i++) {\n                        const $item = this.sourceSort.$items.eq(i),\n                          source = $item.data('source'),\n                          $indexSourceItem = source.getIndexSourceItem();\n\n                        if (!$indexSourceItem) {\n                            continue;\n                        }\n\n                        if (source.isHeading()) {\n                            $pendingHeading = $indexSourceItem;\n                            continue;\n                        }\n\n                        if ($pendingHeading) {\n                            this.appendIndexSourceItem($pendingHeading, $lastSourceItem);\n                            $lastSourceItem = $pendingHeading;\n                            $pendingHeading = null;\n                        }\n\n                        const isNew = !$indexSourceItem.parent().length;\n                        this.appendIndexSourceItem($indexSourceItem, $lastSourceItem);\n                        if (isNew) {\n                            this.elementIndex.initSource($indexSourceItem.children('a'));\n                        }\n                        $lastSourceItem = $indexSourceItem;\n                    }\n\n                    // Remove any additional sources (most likely just old headings)\n                    if ($lastSourceItem) {\n                        const $extraSources = $lastSourceItem.nextAll();\n                        this.elementIndex.sourceSelect.removeItems($extraSources);\n                        $extraSources.remove();\n                    }\n                }\n            }\n\n            // If a source is selected, have the element index select that one by default on the next request\n            if (this.selectedSource && this.selectedSource.sourceData.key) {\n                this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                this.elementIndex.updateElements();\n            }\n\n            Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n            this.hide();\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        }).finally(() => {\n            this.$saveSpinner.addClass('hidden');\n        });\n    },\n\n    appendIndexSourceItem: function($sourceItem, $lastSourceItem) {\n        if (!$lastSourceItem) {\n            $sourceItem.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $sourceItem.insertAfter($lastSourceItem);\n        }\n    },\n\n    destroy: function() {\n        for (let i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = $('<div/>').appendTo(this.modal.$sourceSettingsContainer);\n            this.createSettings(this.$settingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n    },\n\n    getIndexSourceItem: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        if (val) {\n            this.$itemLabel.text(val);\n        } else {\n            this.$itemLabel.html('&nbsp;');\n        }\n    },\n\n    destroy: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.data('source', null);\n        this.$item.remove();\n\n        if (this.$settingsContainer) {\n            this.$settingsContainer.remove();\n        }\n\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function($container) {\n        this.createTableAttributesField($container);\n    },\n\n    createTableAttributesField: function($container) {\n        if (!this.sourceData.tableAttributes.length && !this.modal.availableTableAttributes.length) {\n            return;\n        }\n\n        const $columnCheckboxes = $('<div/>');\n        const selectedAttributes = [];\n\n        $(`<input type=\"hidden\" name=\"sources[${this.sourceData.key}][tableAttributes][]\" value=\"\"/>`).appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        const availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            const [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        }).appendTo($container);\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n          .append('<div class=\"icon move\"/>')\n          .append(\n            Craft.ui.createCheckbox({\n                label: Craft.escapeHtml(label),\n                name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                value: key,\n                checked: checked,\n            })\n          );\n    },\n\n    getIndexSourceItem: function() {\n        const $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.CustomSource = Craft.CustomizeSourcesModal.Source.extend({\n    $labelInput: null,\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Label'),\n            name: `sources[${this.sourceData.key}][label]`,\n            value: this.sourceData.label,\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n        const defaultId = `condition${Math.floor(Math.random() * 1000000)}`;\n\n        const swapPlaceholders = str => str\n          .replace(/__ID__/g, defaultId)\n          .replace(/__SOURCE_KEY__(?=-)/g, Craft.formatInputId(this.sourceData.key))\n          .replace(/__SOURCE_KEY__/g, this.sourceData.key);\n\n        const conditionBuilderHtml = this.sourceData.conditionBuilderHtml ||\n            swapPlaceholders(this.modal.conditionBuilderHtml);\n        const conditionBuilderJs = this.sourceData.conditionBuilderJs ||\n            swapPlaceholders(this.modal.conditionBuilderJs);\n\n        Craft.ui.createField($('<div/>').append(conditionBuilderHtml), {\n            id: 'criteria',\n            label: Craft.t('app', '{type} Criteria', {\n                type: this.modal.elementTypeName,\n            }),\n        }).appendTo($container);\n        Craft.appendFootHtml(conditionBuilderJs);\n\n        this.createTableAttributesField($container);\n\n        if (this.modal.userGroups.length) {\n            Craft.ui.createCheckboxSelectField({\n                label: Craft.t('app', 'User Groups'),\n                instructions: Craft.t('app', 'Choose which user groups should have access to this source.'),\n                name: `sources[${this.sourceData.key}][userGroups]`,\n                options: this.modal.userGroups,\n                values: this.sourceData.userGroups || '*',\n                showAllOption: true,\n            }).appendTo($container);\n        }\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete custom source'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    getIndexSourceItem: function() {\n        let $source = this.base();\n        if ($source || !this.$settingsContainer) {\n            if (this.$settingsContainer) {\n                $source.find('.label').text(this.$labelInput.val());\n            }\n            return $source;\n        }\n        return $('<li/>').append(\n          $('<a/>', {\n              'data-key': this.sourceData.key,\n          }).append(\n            $('<span/>', {\n                class: 'label',\n                text: this.$labelInput.val(),\n            })\n          )\n        );\n    },\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading || '',\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    getIndexSourceItem: function() {\n        const label = (this.$labelInput ? this.$labelInput.val() : null) || this.sourceData.heading || '';\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (typeof BroadcastChannel !== 'undefined' && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSites && this.settings.addlSites.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site, status) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: typeof status != 'undefined'\n                ? status\n                : (this.settings.siteStatuses.hasOwnProperty(site.id) ? this.settings.siteStatuses[site.id] : true),\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(site => {\n            return !this.siteIds.includes(site.id) && this.settings.addlSites.some(s => s.siteId == site.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            const addlSiteInfo = this.settings.addlSites.find(s => s.siteId == site.id);\n            this._createSiteStatusField(site, addlSiteInfo.enabledByDefault);\n            this._updateGlobalStatus();\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                        }),\n                        $('<span/>', {\n                            class: 'visually-hidden',\n                            html: Craft.t('app', 'This field has been modified.'),\n                        }),\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`&(fields${lb}[^=]+)=(${idsRE})\\\\b`, 'g'), (m, name, id) => {\n                        // Ignore param names that end in `[enabled]`, `[type]`, etc.\n                        // (`[sortOrder]` should pass here, which could be set to a specific order index, but *not* `[sortOrder][]`!)\n                        if (name.match(new RegExp(`${lb}(enabled|sordOrder|type|typeId)${rb}$`))) {\n                            return m;\n                        }\n                        return `&${name}=${this.duplicatedElements[id]}`;\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction)) &&\n            this.enableAutosave\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSites: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n\n        this.addListener(this.$passwordWrapper.closest('form'), 'submit', 'hidePassword');\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n        Craft.focalPoint.destruct();\n        Craft.focalPoint = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        uuid: function() {\n            if (typeof crypto.randomUUID === 'function') {\n                return crypto.randomUUID();\n            }\n\n            // h/t https://stackoverflow.com/a/2117523/1688568\n            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n              (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n            );\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn:not([data-disclosure-trigger])', $container).menubtn();\n            $('[data-disclosure-trigger]', $container).disclosureMenu();\n            $('.datetimewrapper', $container).datetime();\n            $('.datewrapper > input[type=\"date\"], .timewrapper > input[type=\"time\"]', $container).datetimeinput();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        disclosureMenu: function() {\n            return this.each(function() {\n                var $trigger = $(this);\n                var $disclosureId = $trigger.attr('aria-controls');\n\n                // Only instantiate element if there is a reference to disclosure content\n                if ($disclosureId) {\n                    var settings = {};\n\n                    new Garnish.DisclosureMenu($trigger, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('').trigger('input').trigger('change');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().filter('[type=\"text\"]').focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n\n        datetimeinput: function() {\n            return this.each(function() {\n                const $input = $(this);\n                const checkValue = () => {\n                    if ($input.val() === '') {\n                        $input.addClass('empty-value');\n                    } else {\n                        $input.removeClass('empty-value');\n                    }\n                };\n                $input.on('input', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $searchContainer: null,\n    $search: null,\n    $filterBtn: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    filterHuds: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n\n        this.$searchContainer = this.$toolbar.find('.search:first')\n        this.$search = this.$searchContainer.children('input:first');\n        this.$filterBtn = this.$searchContainer.children('.filter-btn:first');\n        this.$clearSearchBtn = this.$searchContainer.children('.clear:first');\n\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Filter HUDs\n        this.filterHuds = {};\n        this.addListener(this.$filterBtn, 'click', 'showFilterHud');\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].serialized) {\n            params.condition = this.filterHuds[this.sourceKey].serialized;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        // Filter HUD\n        // ----------------------------------------------------------------------\n\n        this.updateFilterBtn();\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n            delete params.collapsedElementIds;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    },\n\n    showFilterHud: function() {\n        if (!this.filterHuds[this.sourceKey]) {\n            this.filterHuds[this.sourceKey] = new FilterHud(this, this.sourceKey);\n        } else {\n            this.filterHuds[this.sourceKey].show();\n        }\n    },\n\n    updateFilterBtn: function() {\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].hasRules()) {\n            this.$filterBtn.addClass('active');\n        } else {\n            this.$filterBtn.removeClass('active');\n        }\n    },\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\nconst FilterHud = Garnish.HUD.extend({\n    elementIndex: null,\n    sourceKey: null,\n    loading: true,\n    serialized: null,\n\n    init: function(elementIndex, sourceKey) {\n        this.elementIndex = elementIndex;\n        this.sourceKey = sourceKey;\n\n        const $spinner = $('<div/>', {\n            class: 'spinner',\n        });\n\n        this.base(this.elementIndex.$filterBtn, $spinner, {\n            hudClass: 'hud element-filter-hud loading',\n        });\n\n        this.$tip.remove();\n        this.$tip = null;\n\n        const id = `element-filter-${Math.floor(Math.random() * 1000000000)}`;\n\n        Craft.sendActionRequest('POST', 'element-indexes/filter-hud', {\n            data: {\n                elementType: this.elementIndex.elementType,\n                source: this.sourceKey,\n                baseInputName: id,\n                id: id,\n            },\n        }).then(response => {\n            this.loading = false;\n            this.$hud.removeClass('loading');\n            $spinner.remove();\n\n            this.$main.append(response.data.hudHtml);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.bodyHtml);\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        });\n    },\n\n    updateSizeAndPositionInternal: function() {\n        const searchOffset = this.elementIndex.$searchContainer.offset();\n\n        this.$hud.css({\n            width: this.elementIndex.$searchContainer.outerWidth() - 2,\n            top: searchOffset.top + this.elementIndex.$searchContainer.outerHeight(),\n            left: searchOffset.left + 1,\n        });\n    },\n\n    onShow: function() {\n        this.elementIndex.$filterBtn.addClass('active');\n        this.base();\n    },\n\n    onHide: function() {\n        this.base();\n\n        this.elementIndex.updateFilterBtn();\n\n        // If something changed, update the elements\n        if (this.serialized !== (this.serialized = this.serialize())) {\n            this.elementIndex.updateElements();\n        }\n    },\n\n    hasRules: function() {\n        return this.$main.has('.condition-rule').length !== 0;\n    },\n\n    serialize: function() {\n        return this.hasRules() ? this.$body.serialize() : null;\n    }\n})\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n\n        this.updateAddElementsBtn();\n\n        this.onAddElements();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onAddElements: function () {\n        this.trigger('addElements');\n        this.settings.onAddElements();\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onAddElements: $.noop,\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n    replaceAsset: null,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    if (this.replaceAsset) {\n                        this.settings.input.replaceElement(this.$element.data('id'), this.replaceAsset);\n                    } else {\n                        this.settings.input.refreshThumbnail(this.$element.data('id'));\n                    }\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n\n            onSave: (data) => {\n                if (data.elementId) {\n                    this.settings.elementId = this.replaceAsset = data.elementId;\n                }\n\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave(data);\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function(data) {\n        this.settings.onSave(data);\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            this.openPreview();\n            ev.stopPropagation();\n            return false;\n        }\n    },\n    \n    onAddElements: function () {\n        this.$elements.find('.elementthumb').addClass('open-preview').on('mousedown touchstart', (ev) => {\n            this.elementSelect.focusItem($(ev.target).parent());\n            this.openPreview();\n            ev.stopPropagation();\n        });\n        this.base();\n    },\n\n    openPreview: function() {\n        if (Craft.PreviewFileModal.openInstance) {\n            Craft.PreviewFileModal.openInstance.selfDestruct();\n        } else {\n            var $element = this.elementSelect.$focusedItem;\n\n            if ($element.length) {\n                this._loadPreview($element);\n            }\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {\n            minGutter: 50\n        };\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                'aria-label': this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    replaceElement: function(elementId, replaceWithId) {\n        var parameters = {\n            elementId: replaceWithId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                this.removeElement($existing);\n                let elementInfo = Craft.getElementInfo(data.html);\n                this.selectElements([elementInfo]);\n            }\n        });\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $navToggle: null,\n    $globalSidebar: null,\n    $globalContainer: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $breadcrumbList: null,\n    $breadcrumbItems: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    isMobile: null,\n    fixedHeader: false,\n\n    breadcrumbListWidth: 0,\n    breadcrumbDisclosureItem: `<li class=\"breadcrumb-toggle-wrapper\" data-disclosure-item data-wrapper><button data-disclosure-trigger aria-controls=\"breadcrumb-disclosure\" aria-haspopup=\"true\">${Craft.t('app', 'More')}…</button><div id=\"breadcrumb-disclosure\" class=\"menu menu--disclosure\" data-disclosure-menu><ul></ul></div></li>`,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    resizeTimeout: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$navToggle = $('#nav-toggle');\n        this.$globalSidebar = $('#global-sidebar');\n        this.$globalContainer = $('#global-container');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$breadcrumbList = $('.breadcrumb-list');\n        this.$breadcrumbItems = $('.breadcrumb-list li');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.isMobile = Garnish.isMobileBrowser();\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (!this.isMobile && this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n\n                    clearTimeout(this.resizeTimeout);\n                    var cp = this;\n                    this.resizeTimeout = setTimeout(function() {\n                        cp.setSidebarNavAttributes();\n                    }, 100);\n                }\n            });\n            this.handleWindowResize();\n            this.setSidebarNavAttributes();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener(this.$navToggle, 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        const isExpanded = this.navIsExpanded();\n\n        if (isExpanded === null) return;\n\n        if (isExpanded) {\n            this.disableGlobalSidebarLinks();\n            this.$navToggle.focus();\n            this.$navToggle.attr('aria-expanded', 'false');\n            Garnish.$bod.removeClass('showing-nav');\n        } else {\n            this.enableGlobalSidebarLinks();\n            this.$globalSidebar.find(':focusable')[0].focus();\n            this.$navToggle.attr('aria-expanded', 'true');\n            Garnish.$bod.addClass('showing-nav');\n        }\n    },\n\n    enableGlobalSidebarLinks: function() {\n        const focusableItems = this.$globalSidebar.find(':focusable');\n        \n        $(focusableItems).each(function() {\n            $(this).attr('tabindex', '0');\n        });\n    },\n\n    disableGlobalSidebarLinks: function() {\n        const focusableItems = this.$globalSidebar.find(':focusable');\n        \n        $(focusableItems).each(function() {\n            $(this).attr('tabindex', '-1');\n        });\n    },\n\n    setSidebarNavAttributes: function() {\n        const isExpanded = this.navIsExpanded();\n\n        if (isExpanded === null) return;\n\n        if (!isExpanded) {\n            this.disableGlobalSidebarLinks();\n        } else {\n            this.enableGlobalSidebarLinks();\n        }\n    },\n\n    navIsExpanded: function() {\n        if (!this.$globalSidebar[0]) return null;\n\n        const isAlwaysVisible = getComputedStyle(this.$globalSidebar[0]).getPropertyValue('--is-always-visible').trim();\n\n        return this.$navToggle.attr('aria-expanded') === 'true'\n            || isAlwaysVisible === 'true';\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n        this.handleBreadcrumbVisibility();\n    },\n\n    breadcrumbItemsWrap: function() {\n        if (!this.$breadcrumbItems[0]) return;\n\n        const listWidth = this.$breadcrumbList[0].offsetWidth;\n        let totalItemWidth = 0;\n        \n        // Iterate through all list items (inclusive of more button)\n        this.$breadcrumbList.find('li').each(function() {\n            totalItemWidth += $(this)[0].offsetWidth;\n        });\n\n        this.breadcrumbListWidth = listWidth;\n\n        return totalItemWidth > listWidth;\n    },\n\n    handleBreadcrumbVisibility: function() {\n        if (!this.breadcrumbItemsWrap()) return;\n\n        if (this.$breadcrumbList.find('[data-disclosure-item]').length === 0) {\n            this.$breadcrumbList.append(this.breadcrumbDisclosureItem);\n        }\n\n        const triggerWidth = this.$breadcrumbList.find('[data-disclosure-item]')[0].offsetWidth;\n        let visibleItemWidth = triggerWidth;\n        let finalIndex;\n        let newWidth;\n        const listWidth = this.breadcrumbListWidth;\n\n        // Find breadcrumbs that should remain visible without overflowing\n        this.$breadcrumbItems.each(function(index) {\n            newWidth = visibleItemWidth + this.offsetWidth;\n\n            if (newWidth < listWidth) {\n                finalIndex = index;\n                visibleItemWidth += this.offsetWidth;\n            } else {\n                return false;\n            }\n        });\n\n        // Separate breadcrums that should remain visible vs. hidden\n        const shownItems = this.$breadcrumbItems.slice(0, finalIndex + 1);\n        const hiddenItems = this.$breadcrumbItems.slice(finalIndex + 1);\n        \n        // Empty list DOM and add shown items and trigger item\n        this.$breadcrumbList.html('');\n        this.$breadcrumbList.append(shownItems);\n        this.$breadcrumbList.append(this.breadcrumbDisclosureItem);\n        \n        // Add hidden items to disclosure menu and initialize\n        this.$breadcrumbList.find('[data-disclosure-menu] ul').append(hiddenItems);\n        this.$breadcrumbList.find('[data-disclosure-trigger]').disclosureMenu();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        if (this.isMobile) {\n            return;\n        }\n\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $newSourceBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    elementTypeName: null,\n    availableTableAttributes: null,\n\n    conditionBuilderHtml: null,\n    conditionBuilderJs: null,\n    userGroups: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        const $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        Craft.sendActionRequest('POST', 'element-index-settings/get-customize-sources-modal-data', {\n            data: {\n                elementType: this.elementIndex.elementType,\n            },\n        }).then(response => {\n            this.$saveBtn.removeClass('disabled');\n            this.buildModal(response.data);\n        }).finally(() => {\n            this.$loadingSpinner.remove();\n        });\n\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        this.availableTableAttributes = response.availableTableAttributes;\n        this.elementTypeName = response.elementTypeName;\n        this.conditionBuilderHtml = response.conditionBuilderHtml;\n        this.conditionBuilderJs = response.conditionBuilderJs;\n        this.userGroups = response.userGroups;\n\n        if (response.headHtml) {\n            Craft.appendHeadHtml(response.headHtml);\n        }\n        if (response.bodyHtml) {\n            Craft.appendFootHtml(response.bodyHtml);\n        }\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (let i = 0; i < response.sources.length; i++) {\n            this.sources.push(this.addSource(response.sources[i]));\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n\n        const $menuBtnContainer = $('<div class=\"buttons left\"/>').appendTo(this.$footer);\n        const $menuBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn add icon',\n            'aria-label': Craft.t('app', 'Add…'),\n            title: Craft.t('app', 'Add…'),\n        }).appendTo($menuBtnContainer);\n\n        const $menu = $('<div/>', {\n            class: 'menu',\n        }).appendTo($menuBtnContainer);\n        const $ul  = $('<ul/>').append(\n          $('<li/>').append(\n            $('<a/>', {\n                text: Craft.t('app', 'New heading'),\n                'data-type': 'heading',\n            })\n          )\n        ).appendTo($menu);\n\n        if (response.conditionBuilderHtml) {\n            $('<li/>').append(\n              $('<a/>', {\n                  text: Craft.t('app', 'New custom source'),\n                  'data-type': 'custom',\n              })\n            ).appendTo($ul);\n        }\n\n        new Garnish.MenuBtn($menuBtn, {\n            onOptionSelect: option => {\n                const sourceData = {\n                    type: $(option).data('type'),\n                };\n                if (sourceData.type === 'custom') {\n                    sourceData.key = `custom:${Craft.uuid()}`;\n                    sourceData.tableAttributes = [];\n                    sourceData.availableTableAttributes = [];\n                }\n                const source = this.addSource(sourceData);\n                Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n                source.select();\n                this.updateSourcesOnSave = true;\n            }\n        });\n    },\n\n    addSource: function(sourceData) {\n        const $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        const $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        const $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        let source;\n\n        if (sourceData.type === 'heading') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            if (sourceData.type === 'native') {\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            } else {\n                source = new Craft.CustomizeSourcesModal.CustomSource(this, $item, $itemLabel, $itemInput, sourceData);\n            }\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n        return source;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'element-index-settings/save-customize-sources-modal-settings', {\n            data: this.$container.serialize() + '&elementType=' + this.elementIndex.elementType,\n        }).then(() => {\n            // Have any changes been made to the source list?\n            if (this.updateSourcesOnSave) {\n                if (this.$elementIndexSourcesContainer.length) {\n                    let $lastSourceItem = null,\n                      $pendingHeading;\n\n                    for (let i = 0; i < this.sourceSort.$items.length; i++) {\n                        const $item = this.sourceSort.$items.eq(i),\n                          source = $item.data('source'),\n                          $indexSourceItem = source.getIndexSourceItem();\n\n                        if (!$indexSourceItem) {\n                            continue;\n                        }\n\n                        if (source.isHeading()) {\n                            $pendingHeading = $indexSourceItem;\n                            continue;\n                        }\n\n                        if ($pendingHeading) {\n                            this.appendIndexSourceItem($pendingHeading, $lastSourceItem);\n                            $lastSourceItem = $pendingHeading;\n                            $pendingHeading = null;\n                        }\n\n                        const isNew = !$indexSourceItem.parent().length;\n                        this.appendIndexSourceItem($indexSourceItem, $lastSourceItem);\n                        if (isNew) {\n                            this.elementIndex.initSource($indexSourceItem.children('a'));\n                        }\n                        $lastSourceItem = $indexSourceItem;\n                    }\n\n                    // Remove any additional sources (most likely just old headings)\n                    if ($lastSourceItem) {\n                        const $extraSources = $lastSourceItem.nextAll();\n                        this.elementIndex.sourceSelect.removeItems($extraSources);\n                        $extraSources.remove();\n                    }\n                }\n            }\n\n            // If a source is selected, have the element index select that one by default on the next request\n            if (this.selectedSource && this.selectedSource.sourceData.key) {\n                this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                this.elementIndex.updateElements();\n            }\n\n            Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n            this.hide();\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        }).finally(() => {\n            this.$saveSpinner.addClass('hidden');\n        });\n    },\n\n    appendIndexSourceItem: function($sourceItem, $lastSourceItem) {\n        if (!$lastSourceItem) {\n            $sourceItem.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $sourceItem.insertAfter($lastSourceItem);\n        }\n    },\n\n    destroy: function() {\n        for (let i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = $('<div/>').appendTo(this.modal.$sourceSettingsContainer);\n            this.createSettings(this.$settingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n    },\n\n    getIndexSourceItem: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        if (val) {\n            this.$itemLabel.text(val);\n        } else {\n            this.$itemLabel.html('&nbsp;');\n        }\n    },\n\n    destroy: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.data('source', null);\n        this.$item.remove();\n\n        if (this.$settingsContainer) {\n            this.$settingsContainer.remove();\n        }\n\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function($container) {\n        this.createTableAttributesField($container);\n    },\n\n    createTableAttributesField: function($container) {\n        if (!this.sourceData.tableAttributes.length && !this.modal.availableTableAttributes.length) {\n            return;\n        }\n\n        const $columnCheckboxes = $('<div/>');\n        const selectedAttributes = [];\n\n        $(`<input type=\"hidden\" name=\"sources[${this.sourceData.key}][tableAttributes][]\" value=\"\"/>`).appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        const availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            const [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        }).appendTo($container);\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n          .append('<div class=\"icon move\"/>')\n          .append(\n            Craft.ui.createCheckbox({\n                label: Craft.escapeHtml(label),\n                name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                value: key,\n                checked: checked,\n            })\n          );\n    },\n\n    getIndexSourceItem: function() {\n        const $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.CustomSource = Craft.CustomizeSourcesModal.Source.extend({\n    $labelInput: null,\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Label'),\n            name: `sources[${this.sourceData.key}][label]`,\n            value: this.sourceData.label,\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n        const defaultId = `condition${Math.floor(Math.random() * 1000000)}`;\n\n        const swapPlaceholders = str => str\n          .replace(/__ID__/g, defaultId)\n          .replace(/__SOURCE_KEY__(?=-)/g, Craft.formatInputId(this.sourceData.key))\n          .replace(/__SOURCE_KEY__/g, this.sourceData.key);\n\n        const conditionBuilderHtml = this.sourceData.conditionBuilderHtml ||\n            swapPlaceholders(this.modal.conditionBuilderHtml);\n        const conditionBuilderJs = this.sourceData.conditionBuilderJs ||\n            swapPlaceholders(this.modal.conditionBuilderJs);\n\n        Craft.ui.createField($('<div/>').append(conditionBuilderHtml), {\n            id: 'criteria',\n            label: Craft.t('app', '{type} Criteria', {\n                type: this.modal.elementTypeName,\n            }),\n        }).appendTo($container);\n        Craft.appendFootHtml(conditionBuilderJs);\n\n        this.createTableAttributesField($container);\n\n        if (this.modal.userGroups.length) {\n            Craft.ui.createCheckboxSelectField({\n                label: Craft.t('app', 'User Groups'),\n                instructions: Craft.t('app', 'Choose which user groups should have access to this source.'),\n                name: `sources[${this.sourceData.key}][userGroups]`,\n                options: this.modal.userGroups,\n                values: this.sourceData.userGroups || '*',\n                showAllOption: true,\n            }).appendTo($container);\n        }\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete custom source'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    getIndexSourceItem: function() {\n        let $source = this.base();\n        if ($source || !this.$settingsContainer) {\n            if (this.$settingsContainer) {\n                $source.find('.label').text(this.$labelInput.val());\n            }\n            return $source;\n        }\n        return $('<li/>').append(\n          $('<a/>', {\n              'data-key': this.sourceData.key,\n          }).append(\n            $('<span/>', {\n                class: 'label',\n                text: this.$labelInput.val(),\n            })\n          )\n        );\n    },\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading || '',\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    getIndexSourceItem: function() {\n        const label = (this.$labelInput ? this.$labelInput.val() : null) || this.sourceData.heading || '';\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (typeof BroadcastChannel !== 'undefined' && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSites && this.settings.addlSites.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site, status) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: typeof status != 'undefined'\n                ? status\n                : (this.settings.siteStatuses.hasOwnProperty(site.id) ? this.settings.siteStatuses[site.id] : true),\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(site => {\n            return !this.siteIds.includes(site.id) && this.settings.addlSites.some(s => s.siteId == site.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            const addlSiteInfo = this.settings.addlSites.find(s => s.siteId == site.id);\n            this._createSiteStatusField(site, addlSiteInfo.enabledByDefault);\n            this._updateGlobalStatus();\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                        }),\n                        $('<span/>', {\n                            class: 'visually-hidden',\n                            html: Craft.t('app', 'This field has been modified.'),\n                        }),\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`&(fields${lb}[^=]+)=(${idsRE})\\\\b`, 'g'), (m, name, id) => {\n                        // Ignore param names that end in `[enabled]`, `[type]`, etc.\n                        // (`[sortOrder]` should pass here, which could be set to a specific order index, but *not* `[sortOrder][]`!)\n                        if (name.match(new RegExp(`${lb}(enabled|sordOrder|type|typeId)${rb}$`))) {\n                            return m;\n                        }\n                        return `&${name}=${this.duplicatedElements[id]}`;\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction)) &&\n            this.enableAutosave\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSites: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n\n        this.addListener(this.$passwordWrapper.closest('form'), 'submit', 'hidePassword');\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n        Craft.focalPoint.destruct();\n        Craft.focalPoint = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}