{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","select","c","Garnish","selector","plural","offset","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","httpProxy","proxy","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","initialDeltaValues","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","initialValues","encodeURIComponentExceptEqualChar","o","decodeURIComponent","paramLoop","paramName","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","uuid","crypto","randomUUID","getRandomValues","Uint8Array","toString","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","datetimeinput","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","filter","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","target","data-icon","ltr","addListener","hideSidebar","showSidebar","$siteSelectOuterContainer","$contents","add","Slideout","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","$target","event","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","isMobileBrowser","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_openedSidebarStyles","one","addLayer","removeLayer","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$searchContainer","$search","$filterBtn","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","filterHuds","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","getSite","s","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","initSource","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","serialized","condition","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","badgeCounts","_updateBadgeCounts","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","updateFilterBtn","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_collapseSource","aria-expanded","$childSources","not","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","$badge","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","showFilterHud","show","FilterHud","hasRules","loading","hudClass","$tip","baseInputName","$hud","hudHtml","bodyHtml","updateSizeAndPositionInternal","searchOffset","width","outerWidth","top","outerHeight","onShow","has","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","onRemoveElements","animateElementAway","animateCss","opacity","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","replaceAsset","replaceElement","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","showImagePreview","startingWidth","startingHeight","PreviewFileModal","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultSourceParts","volumeSource","toArray","subfolderSource","setParams","_updateUrl","nestedSources","$thisSource","forEach","$s","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","openInstance","selfDestruct","$focusedItem","_loadPreview","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","$label","oldName","newName","finally","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","replaceWithId","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","isMobile","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","$allInstructions","$instructions","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","heading","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","site","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$newSourceBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","elementTypeName","availableTableAttributes","conditionBuilderHtml","conditionBuilderJs","setContainer","buildModal","addSource","$menuBtnContainer","data-type","sourceData","tableAttributes","scrollContainerToElement","$itemLabel","$itemInput","Heading","updateItemLabel","Source","CustomSource","$pendingHeading","$lastSourceItem","$indexSourceItem","getIndexSourceItem","isHeading","appendIndexSourceItem","isNew","$extraSources","nextAll","$sourceItem","BaseSource","$settingsContainer","isSelected","deselect","createSettings","createTableAttributesField","$columnCheckboxes","selectedAttributes","createTableColumnOption","createField","instructions","createCheckbox","$labelInput","$labelField","defaultId","swapPlaceholders","handleLabelInputChange","data-key","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","httpStatus","httpError","openingPreview","preview","previewToken","createdProvisionalDraft","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","BroadcastChannel","onmessage","canonicalId","sourceId","reload","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","_createSiteStatusField","$globalField","createLightswitchField","_showField","siteStatusValues","hasEnabled","hasDisabled","originalEnabledValue","originalSerializedStatus","enabledForSite","_updateGlobalStatus","serializedStatuses","addlSites","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","enabled","disabled","$lightswitch","$addlSiteSelectContainer","createSelect","$addlSiteSelect","addlSiteInfo","enabledByDefault","_saveSuccessMessage","_saveFailMessage","spinners","getPreviewToken","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","console","warn","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","timestamp","updatePreviewTargets","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","afterUpdate","postMessage","deltaCallback","swapDuplicatedElementIds","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","autocapitalize","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"CAAA,SAAUA,GCKV,IAAAC,EAAA,8FACAC,OAAAC,cAAA,SAAAC,GACA,OAAAA,EAAAC,QAAAJ,EAAA,cAIAD,EAAAM,OAAAC,MACA,CACAC,UAAA,GAcAC,MAAA,SAAAC,EAAAC,GACA,IAAAX,EAAAY,QAAAF,GACA,KAAA,+DAGA,OAAAA,EAAAG,OAAA,CAAAJ,EAAAK,EAAAC,KACAN,EAAA,iBAAAE,EAAAG,EAAAH,GAAAA,EAAAG,EAAAC,IAAAD,EACAL,GACA,KAeAO,MAAA,SAAAN,EAAAC,GACA,IAAAX,EAAAY,QAAAF,GACA,KAAA,+DAGA,IAAAD,EAAA,GAEA,OAAAC,EAAAG,OAAA,CAAAI,EAAAH,EAAAC,KACA,MAAAG,EAAA,iBAAAP,EAAAG,EAAAH,GAAAA,EAAAG,EAAAC,GAMA,OALAN,EAAAU,eAAAD,KACAT,EAAAS,GAAA,CAAA,GAAAA,GACAD,EAAAG,KAAAX,EAAAS,KAEAT,EAAAS,GAAA,GAAAE,KAAAN,GACAG,GACA,KAWAI,EAAA,SAAAC,EAAAC,EAAAC,GAQA,YANA,IAAAjB,MAAAkB,aAAAH,SACA,IAAAf,MAAAkB,aAAAH,GAAAC,KAEAA,EAAAhB,MAAAkB,aAAAH,GAAAC,IAGAC,EACAE,KAAAC,cAAAJ,EAAAC,GAGAD,GAGAI,cAAA,SAAAC,EAAAC,GACA,IAAAC,EACA,IAAA,KAAAA,EAAAJ,KAAAK,iBAAAH,IACA,KAAA,8BAEA,IAAA,IAAAb,EAAA,EAAAA,EAAAe,EAAAE,OAAAjB,IAAA,CACA,IAAAkB,EAAAH,EAAAf,GACA,GAAA,iBAAAkB,IACA,KAAAH,EAAAf,GAAAW,KAAAQ,YAAAD,EAAAJ,IACA,KAAA,8BAIA,OAAAC,EAAAK,KAAA,KAGAJ,iBAAA,SAAAH,GACA,IAAAQ,EAAAC,EAAAC,EAAA,EAEA,MAAAC,EAAA,IAAAX,GACA,IAAA,KAAAQ,EAAAC,EAAAE,EAAAC,QAAA,MACA,MAAA,CAAAZ,GAEA,IAAAE,EAAA,CAAAS,EAAAE,MAAA,EAAAJ,GAAAF,KAAA,KACA,OAAA,CACA,IAAAO,EAAAH,EAAAC,QAAA,IAAAH,EAAA,GACAM,EAAAJ,EAAAC,QAAA,IAAAH,EAAA,GAOA,IANA,IAAAK,IACAA,GAAA,IAEA,IAAAC,IACAA,GAAA,IAEA,IAAAD,IAAA,IAAAC,EACA,MAmBA,IAjBA,IAAAD,IACAA,EAAAH,EAAAP,QAEAW,EAAAD,GACAJ,IACAD,EAAAK,IAEAJ,IACAD,EAAAM,GAEA,IAAAL,IACAR,EAAAV,KAAAmB,EAAAE,MAAAL,EAAA,EAAAC,GAAAF,KAAA,IAAAS,MAAA,IAAA,IACAR,EAAAC,EAAA,EACAP,EAAAV,KAAAmB,EAAAE,MAAAL,EAAAM,GAAAP,KAAA,KACAC,EAAAM,GAGA,IAAAJ,KAAA,IAAAI,IAAA,IAAAC,GACA,MAGA,OAAA,IAAAL,GAIAR,GAGAI,YAAA,SAAAD,EAAAJ,GAGA,MAAAgB,EAAAtC,MAAAuC,KAAAb,EAAA,IACA,QAAA,IAAAJ,EAAAgB,GACA,MAAA,IAAAZ,EAAAE,KAAA,QAEA,MAAAY,EAAAlB,EAAAgB,GACAG,OAAA,IAAAf,EAAA,GAAA1B,MAAAuC,KAAAb,EAAA,IAAA,OACA,OAAAe,GACA,IAAA,SACA,MAAA,MACA,IAAAC,OAAA,IAAAhB,EAAA,GAAA1B,MAAAuC,KAAAb,EAAA,IAAA,KACA,GAAA,OAAAgB,GAAA,YAAAA,EACA,KAAA,gEAEA,IACAZ,EADAa,EAAA3C,MAAA4C,aAAAJ,GAKA,OAHA,OAAAE,IAAA,KAAAZ,GAAA,GAAAU,GAAAP,QAAA,QACAU,GAAA,IAAAH,EAAAK,OAAAf,EAAA,IAEAa,GAVA,GAYA,IAAA,OACA,OAAAH,EACA,IAAA,SACA,MAAA,MAIA,QAAA,IAAAd,EAAA,GACA,OAAA,EAEA,IAAAoB,EAAA3B,KAAAK,iBAAAE,EAAA,IACAqB,EAAAD,EAAArB,OACAT,GAAA,EACA,IAAA,IAAAR,EAAA,EAAAA,EAAA,EAAAuC,EAAAvC,IAAA,CACA,GAAAwC,QAAA3C,QAAAyC,EAAAtC,MAAAwC,QAAA3C,QAAAyC,EAAAtC,EAAA,IACA,OAAA,EAEA,IAAAyC,EAAAjD,MAAAuC,KAAAO,EAAAtC,QACA,IAAAQ,GAAA,UAAAiC,GAAAA,GAAAT,KACAxB,EAAA8B,EAAAtC,GAAAoB,KAAA,MAGA,OAAA,IAAAZ,GAGAG,KAAAC,cAAAJ,EAAAM,IAtBA,GAwBA,IAAA,SACA,MAAA,MASA,QAAA,IAAAI,EAAA,GACA,OAAA,EAEA,IAAAwB,EAAA/B,KAAAK,iBAAAE,EAAA,IACA,MAAAqB,EAAAG,EAAAzB,OACA,IAAAT,GAAA,EACAmC,EAAA,EACA,IAAA,IAAA3C,EAAA,EAAAA,EAAA,EAAAuC,EAAAvC,IAAA,CACA,GAAA,iBAAA0C,EAAA1C,IAAA,iBAAA0C,EAAA1C,EAAA,GACA,OAAA,EAEA,IAAAyC,EAAAjD,MAAAuC,KAAAW,EAAA1C,MACA4C,EAAA,IAAAH,GAEA,GAAA,IAAAzC,GAAA,YAAAyC,EAAAI,UAAA,EAAA,GAAA,CACA,IAAAvB,EAAA,IAAAmB,EAAAnD,QAAA,YAAA,MAAAmC,QAAA,IAAA,GACA,IAAA,IAAAH,EACA,KAAA,8BAEAqB,EAAAG,SAAAtD,MAAAuC,KAAAa,EAAAlB,MAAA,EAAAJ,GAAAF,KAAA,MACAqB,EAAAjD,MAAAuC,KAAAa,EAAAlB,MAAAJ,EAAA,EAAAA,EAAA,EAAAsB,EAAA3B,QAAAG,KAAA,OAGA,IAAAZ,GACA,UAAAiC,GACA,MAAAA,EAAA,IAAAK,SAAAF,EAAAlB,MAAA,EAAA,EAAAkB,EAAA3B,QAAAG,KAAA,OAAAY,GACA,QAAAS,GAAAT,EAAAW,GAAA,KAEAnC,GAAA,iBAAAkC,EAAA1C,GAAA,CAAA0C,EAAA1C,IAAA0C,EAAA1C,IAAA+C,IAAAC,GACAA,EAAA1D,QAAA,IAAA0C,EAAAW,IACAvB,KAAA,MAGA,OAAA,IAAAZ,GAGAG,KAAAC,cAAAJ,EAAAM,IA7CA,GA+CA,QACA,KAAA,mBAAAmB,yBAIAgB,WAAA,SAAAC,GAKA,MAJA,iBAAAA,IACAA,EAAA,IAAAC,KAAAD,IAGAjE,EAAAmE,WAAAH,WAAAzD,MAAA6D,kBAAAC,WAAAJ,IASAd,aAAA,SAAAD,EAAAD,GAOA,YANA,IAAAA,IACAA,EAAA,QAGAqB,GAAAC,aAAAC,0BAAAvB,OAAAA,EAEAwB,CAAAvB,IAQAwB,aAAA,SAAA/D,EAAAgE,EAAAC,GACA,MAAA,QAAArE,MAAAsE,UACAD,EAAA,IAAA,KAAAD,EAAA,IAAA,IAAA,IAAAhE,EAEA,SAAAiE,EAAA,OAAA,KAAAD,EAAA,SAAA,IAAAhE,GASAmE,WAAA,SAAAC,GACA,OAAA/E,EAAA,UAAAgF,KAAAD,GAAA3E,QASA6E,YAAA,SAAAF,GAEA,OAAAA,EAAA1E,QAAA,2BAAA,SASA6E,QAAA,SAAAH,GACA,OAAA/E,EAAA,UAAAI,KAAA2E,GAAAC,QAUAG,mBAAA,SAAAJ,GACAA,EAAAK,mBAAAL,GAEA,IAAAM,EAAA,CACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,OAGA,IAAA,IAAAC,KAAAN,EAAA,CACA,IAAAO,EAAA,IAAAC,OAAA,KAAAF,EAAA,KACAZ,EAAAA,EAAA1E,QAAAuF,EAAAP,EAAAM,IAGA,OAAAZ,GAQAe,gBAAA,SAAAC,GACA,IAAAC,EAAAhG,EAAA+F,GACAE,EAAAD,EAAAC,MAGA,QAAA,IAAAD,EAAA,GAAAE,kBAAA,CAEA,IAAAlE,EAAA,EAAAiE,EAAAjE,OACAgE,EAAA,GAAAE,kBAAA,EAAAlE,QAGAgE,EAAAC,IAAAA,IAUAE,cAAA,SAAAC,GACA,OAAA1E,KAAA2E,MAAAD,EAAA/F,QAAA,UAAA,KAAA,MASAiG,OAAA,SAAAC,EAAA/E,EAAAgF,GACA,iBAAAD,IACAA,EAAA,IAIA,IAAAE,EAAA,GAEA,GAAAzG,EAAA0G,cAAAlF,GAAA,CACA,IAAAmF,EAAA,GAEA,IAAA,IAAAC,KAAApF,EACA,GAAAA,EAAAL,eAAAyF,GAAA,CAIA,IAAAC,EAAArF,EAAAoF,GAEA,MAAAA,EACAH,EAAAI,EACA,OAAAA,GAAA,KAAAA,GACAF,EAAAvF,KAAAwF,EAAA,IAAAC,GAIArF,EAAAmF,EAIAnF,EADA+B,QAAA3C,QAAAY,GACAA,EAAAW,KAAA,KAEA5B,MAAAuC,KAAAtB,EAAA,MAIA,IAAAsF,EAAAP,EAAA/D,QAAA,MACA,IAAAsE,IAEAL,IACAA,EAAAF,EAAAnD,OAAA0D,EAAA,IAEAP,EAAAA,EAAAnD,OAAA,EAAA0D,IAIA,IAcAC,EAdAC,EAAAT,EAAA/D,QAAA,KAOA,IANA,IAAAwE,IACAxF,EAAA+E,EAAAnD,OAAA4D,EAAA,IAAAxF,EAAA,IAAAA,EAAA,IACA+E,EAAAA,EAAAnD,OAAA,EAAA4D,KAIA,IAAAT,EAAAU,OAAA,QAAA,MAAAV,EAAA,GACA,OAAAA,GAAA/E,EAAA,IAAAA,EAAA,KAAAiF,EAAA,IAAAA,EAAA,IAQA,GALAF,EAAAhG,MAAAuC,KAAAyD,EAAA,KAKAC,GAGA,GAFAO,EAAAP,EAEAD,GAAAhG,MAAA2G,UAAA,CAEA,IAAAC,EAAAJ,EAAAK,MAAA,IAAAvB,OAAA,OAAAtF,MAAA0E,YAAA1E,MAAA2G,WAAA,WACAC,IACAJ,EAAAA,EAAA1G,QAAA8G,EAAA,GAAA5G,MAAA8F,MAAAc,EAAA,GAAA,KAAA,IAAAZ,GACAA,EAAA,UAIAQ,EAAAxG,MAAAiG,QAUA,IALA,KADAQ,EAAAD,EAAAvE,QAAA,QAEAhB,EAAAuF,EAAA3D,OAAA4D,EAAA,IAAAxF,EAAA,IAAAA,EAAA,IACAuF,EAAAA,EAAA3D,OAAA,EAAA4D,KAGAzG,MAAA8G,sBAAAd,EACA,GAAAhG,MAAA+G,cAAA/G,MAAA2G,WAEA,IAAAH,EAAAE,OAAA1G,MAAAgH,cACAR,EAAAxG,MAAA8F,MAAAU,EAAA,KAAA,IAAAxG,MAAAgH,gBAEA,CAIA,GAAA/F,GAAAA,EAAA4B,OAAA,EAAA7C,MAAA2G,UAAAlF,OAAA,KAAAzB,MAAA2G,UAAA,IAAA,CACA,IAAAM,EACAC,EAAAjG,EAAAgB,QAAA,MAEA,IAAAiF,GACAD,EAAAhG,EAAAoC,UAAA,EAAA6D,GACAjG,EAAAA,EAAA4B,OAAAqE,EAAA,KAEAD,EAAAhG,EAAA4B,OAAA,GACA5B,EAAA,MAMA+E,GAFAiB,EAAAjH,MAAA8F,MAAAmB,KAEAjB,EAAA,IAAAA,EAAA,IAIA/E,EAAAjB,MAAA2G,UAAA,IAAAX,GAAA/E,EAAA,IAAAA,EAAA,IACA+E,EAAA,KAgBA,OAZAA,IACAQ,EAAAxG,MAAA8F,MAAAU,EAAA,KAAA,IAAAR,GAGA/E,IACAuF,GAAA,IAAAvF,GAGAiF,IACAM,GAAA,IAAAN,GAGAM,GAQAW,SAAA,SAAAnB,EAAA/E,GACA,OAAAE,KAAA4E,OAAAC,EAAA/E,EAAAjB,MAAAoH,YAQAC,WAAA,SAAArB,EAAA/E,GACA,OAAAE,KAAA4E,OAAAC,EAAA/E,EAAAjB,MAAAsH,cAUAC,aAAA,SAAAvB,EAAA/E,GACA,OAAAjB,MAAA+F,OAAAC,EAAA/E,EAAAjB,MAAAwH,YAQAC,WAAA,SAAAjB,GACAkB,SAAAC,SAAAC,KAAAzG,KAAA4E,OAAAS,IAQAqB,aAAA,WACA,OAAA7H,MAAA8H,cACA,8BAAA9H,MAAA8H,cAAA,YAAA9H,MAAA+H,eAAA,MAEA,IAcAC,kBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,mBAAAF,IACAE,EAAAD,EACAA,EAAAD,EACAA,EAAA,KAGAE,EAAAA,GAAA,IAEAC,aAAAD,EAAAC,YAAAxB,MAAA,cACA,iBAAAqB,IACAA,EAAAI,KAAAC,UAAAL,IAEAE,EAAAC,YAAA,mCAGA,IAAAG,EAAA/I,EAAAgJ,KAAAhJ,EAAAM,OAAA,CACAyG,IAAAxG,MAAAuH,aAAAU,GACAxF,KAAA,OACAiG,SAAA,OACAC,QAAAxH,KAAAyH,iBACAV,KAAAA,EACAW,QAAAV,EACAW,MAAA,SAAAN,EAAAO,EAAAC,GAGA,IAAAR,EAAAS,kBAIA,IAAAjJ,MAAAkJ,GACAlJ,MAAAkJ,GAAAC,eAEAC,MAAApJ,MAAAc,EAAA,MAAA,6BAGAqH,GACAA,EAAA,KAAAY,EAAAP,MAGAJ,IAOA,MAJA,mBAAAA,EAAAiB,MACAjB,EAAAiB,KAAAb,GAGAA,GAGAc,gBAAA,EACAC,WAAA,GAKAC,mBAAA,SAAAvB,EAAAC,EAAAC,EAAAC,GAEA,mBAAAF,IACAE,EAAAD,EACAA,EAAAD,EACAA,OAAAuB,GAGAzJ,MAAAuJ,WAAA1I,KAAA,CAAAoH,EAAAC,EAAAC,EAAAC,IAEApI,MAAAsJ,gBACAtJ,MAAA0J,iCAIAA,8BAAA,WACA1J,MAAAsJ,gBAAA,EAEA,IAAAhI,EAAAtB,MAAAuJ,WAAAnF,QAEApE,MAAAgI,kBAAA1G,EAAA,GAAAA,EAAA,IAAA,SAAA4G,EAAAa,EAAAP,GACAlH,EAAA,IAAA,mBAAAA,EAAA,IACAA,EAAA,GAAA4G,EAAAa,EAAAP,GAGAxI,MAAAuJ,WAAA9H,OACAzB,MAAA0J,gCAEA1J,MAAAsJ,gBAAA,IAEAhI,EAAA,KAGAsH,eAAA,WACA,IAAAD,EAAA,CACAgB,6BAAAC,OAAAC,KAAA7J,MAAA8J,wBAAAlI,KAAA,KACAmI,wBAAAH,OAAAC,KAAA7J,MAAAgK,mBAAApI,KAAA,MAOA,OAJA5B,MAAA+H,iBACAY,EAAA,gBAAA3I,MAAA+H,gBAGAY,GAWAsB,kBAAA,SAAAC,EAAAjC,EAAAG,GACA,OAAA,IAAA+B,QAAA,CAAAC,EAAAC,MACAjC,EAAAA,EAAA3I,EAAAM,OAAA,GAAAqI,GAAA,IACA8B,OAAAA,EACA9B,EAAA5B,IAAAxG,MAAAuH,aAAAU,GACAG,EAAAO,QAAAlJ,EAAAM,OAAA,CACAuK,mBAAA,kBACAlC,EAAAO,SAAA,GAAAxH,KAAAyH,kBACAR,EAAAnH,OAAAxB,EAAAM,OAAA,GAAAqI,EAAAnH,QAAA,GAAA,CAEAsJ,GAAA,IAAA5G,MAAA6G,YAEAC,MAAAC,QAAAtC,GAAAuC,KAAAP,GAAAQ,MAAAP,MAYAQ,eAAA,SAAAX,EAAAY,EAAA1C,GACA,OAAA,IAAA+B,QAAA,CAAAC,EAAAC,KAEA,IAAAU,GADA3C,EAAAA,EAAA3I,EAAAM,OAAA,GAAAqI,GAAA,IACA2C,aAAA,KAGA5J,KAAA6J,eAAAD,GAAAJ,KAAAM,IAEA7C,EAAA8B,OAAAA,EACA9B,EAAA8C,QAAAlL,MAAAmL,WACA/C,EAAA5B,IAAAsE,EACA1C,EAAAO,QAAAlJ,EAAAM,OAAAkL,EAAA7C,EAAAO,SAAA,IACAP,EAAAnH,OAAAxB,EAAAM,OAAAC,MAAAoL,WAAA,GAAAhD,EAAAnH,QAAA,GAAA,CAEAsJ,GAAA,IAAA5G,MAAA6G,YAIArJ,KAAAkK,cACAjD,EAAAnH,OAAAqK,oBAAA,GAGAtL,MAAAuL,YACAnD,EAAAoD,MAAAxL,MAAAuL,WAGAd,MAAAC,QAAAtC,GAAAuC,KAAAc,IAEAtK,KAAAuK,mBAAAD,EAAA9C,QAAAoC,GAAAJ,KAAA,KAEAP,EAAAqB,EAAAvD,QACA0C,MAAAP,KACAO,MAAAP,KACAO,MAAAP,MAIAsB,oBAAA,EACAN,YAAA,KACAO,mBAAA,GAQAZ,eAAA,SAAAD,GACA,OAAA,IAAAZ,QAAA,CAAAC,EAAAC,KAEAlJ,KAAAwK,mBACAxK,KAAAyK,mBAAA/K,KAAA,CAAAuJ,EAAAC,IAKAlJ,KAAAkK,YACAjB,EAAAjJ,KAAAkK,cAIAlK,KAAAwK,oBAAA,EACAxK,KAAA8I,kBAAA,OAAA,kBAAA,CACAc,YAAAA,IACAJ,KAAAkB,IAEA1K,KAAAwK,mBAKAvB,EAAAyB,EAAA3D,MAJAmC,EAAAyB,KAKAlB,MAAAkB,IACA3K,KAAA4K,mBAAA1B,EAAAyB,SAKAJ,mBAAA,SAAA/C,EAAAoC,GACA,OAAA,IAAAZ,QAAA,CAAAC,EAAAC,KAEAlJ,KAAAkK,YACAjB,IAIAjJ,KAAA8I,kBAAA,OAAA,mCAAA,CACA/B,KAAA,CACAS,QAAAA,GAEAoC,YAAAA,IACAJ,KAAAkB,IAEA,GAAA1K,KAAAwK,mBAWA,IANAxK,KAAAkK,YAAAQ,EAAA3D,KACA/G,KAAAwK,oBAAA,EAEAvB,IAGAjJ,KAAAyK,mBAAAnK,QACAN,KAAAyK,mBAAAxH,QAAA,GAAAjD,KAAAkK,kBAXAhB,EAAAyB,KAaAlB,MAAAkB,IACA3K,KAAA4K,mBAAA1B,EAAAyB,QAKAC,mBAAA,SAAA1B,EAAAyB,GAGA,IAFA3K,KAAAwK,oBAAA,EACAtB,EAAAyB,GACA3K,KAAAyK,mBAAAnK,QACAN,KAAAyK,mBAAAxH,QAAA,GAAA0H,IAOAE,sBAAA,WAKA,IAJA7K,KAAAkK,YAAA,KACAlK,KAAAwK,oBAAA,EAGAxK,KAAAyK,mBAAAnK,QACAN,KAAAyK,mBAAAxH,QAAA,MAYA6H,gBAAA,SAAA/B,EAAA1D,EAAA0F,GACA,OAAA,IAAA/B,QAAA,CAAAC,EAAAC,KAEA,IAAAK,EAAA,IAAAyB,eACAzB,EAAAvI,KAAA+H,EAAA1D,GAAA,GACA,iBAAA0F,GACAxB,EAAA0B,iBAAA,eAAA,mCACAF,EAAA5D,KAAAC,UAAA2D,IAEAxB,EAAA0B,iBAAA,eAAA,oDAEA1B,EAAA2B,aAAA,OAEA3B,EAAA4B,OAAA,KAEA,GAAA,MAAA5B,EAAA6B,OAAA,CAEA,IAAAC,EAAA9B,EAAA+B,kBAAA,uBACAC,EAAA,YAAAC,KAAAH,GACAI,EAAA,MAAAF,GAAAA,EAAA,GAAAA,EAAA,GAAA,WAGArE,EAAAqC,EAAA+B,kBAAA,gBACAI,EAAA,IAAAC,KAAA,CAAApC,EAAAmB,UAAA,CAAApJ,KAAA4F,IACA0E,EAAArF,SAAAsF,cAAA,KACAD,EAAAnF,KAAAqF,OAAAC,IAAAC,gBAAAN,GACAE,EAAAK,SAAAR,EACAlF,SAAAwE,KAAAmB,YAAAN,GACAA,EAAAO,QACA5F,SAAAwE,KAAAqB,YAAAR,GAEA3C,SAEAC,KAIAK,EAAArB,KAAA6C,MAUAsB,cAAA,SAAAhJ,GACA,GAAA,iBAAAA,EACA,OAAAA,EAIA,IADA,IAAArE,EAAAqE,EAAAnC,MAAA,KACA7B,EAAA,EAAAA,EAAAL,EAAAsB,OAAAjB,IACAL,EAAAK,GAAAf,EAAA8C,KAAApC,EAAAK,IAEA,OAAAL,GAcAsN,cAAA,SAAAC,EAAAC,EAAAC,EAAAzF,EAAA0F,GAEAH,EAAA,iBAAAA,EAAAA,EAAA,GACAC,EAAA,iBAAAA,EAAAA,EAAA,GAGAC,EAAAE,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAtM,SAAAuM,EAAAvM,OACA,EAEAsM,EAAAtM,OAAAuM,EAAAvM,OAAA,GAAA,UAIA,IAAAoM,IACAA,EAAA7N,MAAA6N,oBAQA,IANA,IAAAI,EAAA9M,KAAA+M,yBAAAR,EAAArL,MAAA,KAAAuL,GAAA,EAAAC,GACAM,EAAAhN,KAAA+M,yBAAAP,EAAAtL,MAAA,KAAAuL,GAAA,GAAA,GAGA3M,EAAAkN,EAAAC,SAEAC,EAAA,EAAAA,EAAAT,EAAAnM,OAAA4M,KACArO,MAAAsO,QAAAV,EAAAS,GAAArO,MAAAuO,qBACA,iBAAAJ,EAAAP,EAAAS,MAEA,iBAAAJ,EAAAL,EAAAS,KACA/F,KAAAC,UAAA0F,EAAAL,EAAAS,OAAA/F,KAAAC,UAAA4F,EAAAP,EAAAS,UAGApN,EAAAA,EAAAuN,OAAAL,EAAAP,EAAAS,MACAxN,KAAA,wBAAA+M,EAAAS,IACAlG,GACAA,EAAAyF,EAAAS,GAAAF,EAAAP,EAAAS,MAKA,OAAApN,EAAAW,KAAA,MAWAsM,yBAAA,SAAAjN,EAAA2M,EAAAa,EAAAC,GACA,MAAAhO,EAAA,GAEA+N,IACA/N,EAAA0N,SAAA,IAGA,MAAAO,EAAAC,GAAA/J,mBAAA+J,GAAA9O,QAAA,MAAA,KAEAmB,EAAAA,EAAAsC,IAAAC,GAAAqL,mBAAArL,IAEAsL,EAAA,IAAA,IAAAtL,EAAA,EAAAA,EAAAvC,EAAAQ,OAAA+B,IAAA,CAEA,IAAA,IAAA6K,EAAAT,EAAAnM,OAAA,EAAA4M,GAAA,EAAAA,IAAA,CACA,MAAAU,EAAA9N,EAAAuC,GAAAX,OAAA,EAAA+K,EAAAS,GAAA5M,OAAA,GACA,GACAsN,IAAAnB,EAAAS,GAAA,KACAU,IAAAnB,EAAAS,GAAA,IACA,MACA,IAAA3N,EAAAkN,EAAAS,MACA3N,EAAAkN,EAAAS,IAAA,IAEA3N,EAAAkN,EAAAS,IAAAxN,KAAA8N,EAAA1N,EAAAuC,KACA,SAAAsL,GAIAL,GACA/N,EAAA0N,SAAAvN,KAAA8N,EAAA1N,EAAAuC,KAIA,GAAAkL,EACA,IAAA,IAAArI,KAAAqI,EACAA,EAAA9N,eAAAyF,KACA3F,EAAA2F,GAAA,CAAAxB,mBAAAwB,GAAA,IAAA5G,EAAA6C,MAAAoM,EAAArI,MAKA,OAAA3F,GASAsO,gBAAA,SAAA7O,GACA,IACAK,EADAyO,EAAA,GAGA,IAAA,IAAA7O,KAAAD,EACA,GAAAA,EAAAS,eAAAR,GAAA,CAIA,IAEAyJ,EAFAvD,EAAAnG,EAAAC,GACA8O,EAAA9O,EAAAyG,MAAA,iBAGA,GAAAqI,EAAA,GAKA,IAHArF,EAAAqF,EAAA,GAAArI,MAAA,iBAGArG,EAAA,EAAAA,EAAAqJ,EAAApI,OAAAjB,IACAqJ,EAAArJ,GAAAqJ,EAAArJ,GAAA6C,UAAA,EAAAwG,EAAArJ,GAAAiB,OAAA,QAGAoI,EAAA,GAGAA,EAAAsF,QAAAD,EAAA,IAEA,IAAAE,EAAAH,EAEA,IAAAzO,EAAA,EAAAA,EAAAqJ,EAAApI,OAAAjB,IACAA,EAAAqJ,EAAApI,OAAA,GACA,iBAAA2N,EAAAvF,EAAArJ,MAEAqJ,EAAArJ,EAAA,IAAA8C,SAAAuG,EAAArJ,EAAA,KAAAqJ,EAAArJ,EAAA,GAGA4O,EAAAvF,EAAArJ,IAAA,GAFA4O,EAAAvF,EAAArJ,IAAA,IAMA4O,EAAAA,EAAAvF,EAAArJ,MAGAqJ,EAAArJ,KACAqJ,EAAArJ,GAAA4O,EAAA3N,QAGA2N,EAAAvF,EAAArJ,IAAA8F,GAKA,OAAA2I,GASAI,WAAA,SAAAnH,GACA,IAAAoH,EAAA7P,EAAA,UAAA,CACA8P,KAAA,CACArF,OAAA,OACAjC,OAAA,GACAuH,iBAAA,WAIA,GAAA,iBAAAtH,EAGA,IAFA,IACAuH,EADAC,EAAAxH,EAAA7F,MAAA,KAEA7B,EAAA,EAAAA,EAAAkP,EAAAjO,OAAAjB,IACAiP,EAAAC,EAAAlP,GAAA6B,MAAA,IAAA,GACA5C,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAwI,mBAAAY,EAAA,IACAnJ,MAAAuI,mBAAAY,EAAA,IAAA,MACAE,SAAAL,GAIA,OAAAA,GAYAM,QAAA,SAAAC,EAAAC,EAAAC,GAEA,UAAAF,UAAAC,EACA,OAAA,EAGA,GAAA,iBAAAD,EAAA,CAEA,GAAAA,EAAApO,SAAAqO,EAAArO,OACA,OAAA,EAIA,GAAAoO,aAAAG,OAAAF,aAAAE,MACA,OAAA,EAIA,KAAAH,aAAAG,OACA,QAAA,IAAAD,IAAA,IAAAA,GACA,IAAA/P,MAAA4P,QAAA5P,MAAAiQ,cAAAJ,GAAA/B,OAAA9N,MAAAiQ,cAAAH,GAAAhC,QACA,OAAA,OAGA,IAAA9N,MAAA4P,QAAA5P,MAAAiQ,cAAAJ,GAAA7P,MAAAiQ,cAAAH,IACA,OAAA,EAMA,IAAA,IAAAtP,KAAAqP,EACA,GAAAA,EAAAjP,eAAAJ,KAIAR,MAAA4P,QAAAC,EAAArP,GAAAsP,EAAAtP,IACA,OAAA,EAKA,OAAA,EAEA,OAAAqP,IAAAC,GAUAG,cAAA,SAAA1P,GACA,IAAAsJ,EAAA,GAEA,IAAA,IAAAzJ,KAAAG,EACAA,EAAAK,eAAAR,IAIAyJ,EAAAhJ,KAAAT,GAGA,OAAAyJ,GAWAqG,YAAA,SAAAlO,GACAgB,QAAA3C,QAAA2B,KACAA,EAAAA,EAAAK,SAKA,IAFA,IAAA8N,EAAA,GAEA3P,EAAA,EAAAA,EAAAwB,EAAAP,OAAAjB,IACA2P,GAAA,KAAAnO,EAAAxB,GAGA,OAAA2P,GAUAC,MAAA,SAAA5L,EAAAxC,GACA,IAAAwC,EACA,OAAAA,OAEA,IAAAxC,IACAA,EAAA,eAEA,IAAAqD,EAAA,IAAAC,OAAA,KAAAtF,MAAAkQ,YAAAlO,GAAA,MACA,OAAAwC,EAAA1E,QAAAuF,EAAA,KAUAS,MAAA,SAAAtB,EAAAxC,GACA,IAAAwC,EACA,OAAAA,OAEA,IAAAxC,IACAA,EAAA,eAEA,IAAAqD,EAAA,IAAAC,OAAA,IAAAtF,MAAAkQ,YAAAlO,GAAA,OACA,OAAAwC,EAAA1E,QAAAuF,EAAA,KAUA9C,KAAA,SAAAiC,EAAAxC,GAGA,OAFAwC,EAAAxE,MAAAoQ,MAAA5L,EAAAxC,GACAwC,EAAAxE,MAAA8F,MAAAtB,EAAAxC,IAWAqO,WAAA,SAAA7L,EAAA3B,GACA,OAAA2B,EAAA3B,OAAA,EAAAA,EAAApB,UAAAoB,GAUAyN,YAAA,SAAAnQ,EAAAgI,GAGA,IAFA,IAAAoI,EAAA,GAEA/P,EAAA,EAAAA,EAAAL,EAAAsB,OAAAjB,IAAA,EAGA,mBAAA2H,EACAA,EAAAhI,EAAAK,GAAAA,GAEAL,EAAAK,KAIA+P,EAAA1P,KAAAV,EAAAK,IAIA,OAAA+P,GAUAjC,QAAA,SAAAkC,EAAArQ,GAIA,OAHAV,EAAA0G,cAAAhG,KACAA,EAAAyJ,OAAA8F,OAAAvP,IAEAA,EAAAsQ,SAAAD,IAUAE,gBAAA,SAAAF,EAAArQ,GACA,IAAAD,EAAAT,EAAA6O,QAAAkC,EAAArQ,GACA,OAAA,IAAAD,IACAC,EAAAwQ,OAAAzQ,EAAA,IACA,IAYA0Q,QAAA,SAAAzQ,GACA,OAAAA,EAAAsB,OAGAtB,EAAAA,EAAAsB,OAAA,GAFA,MAYAoP,eAAA,SAAArM,GACA,OAAAA,EAAAsM,OAAA,GAAAC,cAAAvM,EAAAtC,MAAA,IASA8O,eAAA,SAAAxM,GACA,OAAAA,EAAAsM,OAAA,GAAAG,cAAAzM,EAAAtC,MAAA,IAGAgP,SAAA,SAAA1K,GACA,IAAA0I,EAAA1I,EAAAK,MAAA,gFACA,OAAAqI,EAGA,CACAiC,OAAAjC,EAAA,GACAkC,KAAAlC,EAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,IACAmC,SAAAnC,EAAA,GACAoC,KAAApC,EAAA,IAAA,KACAlJ,KAAAkJ,EAAA,IAAA,IACAqC,MAAArC,EAAA,IAAA,KACAsC,KAAAtC,EAAA,IAAA,MATA,IAaAuC,WAAA,SAAAjL,GACA,IAAAkL,EAAAvQ,KAAA+P,SAAAxJ,SAAAC,SAAAC,MACA,IAAA8J,EACA,OAAA,EAEA,IAAAC,EAAAxQ,KAAA+P,SAAA1K,GACA,QAAAmL,GAGAD,EAAAN,OAAAO,EAAAP,MAMAQ,2BAAA,SAAAC,EAAAC,QACA,IAAAA,IACAA,GAAA,GAGA,IAKAC,EAAAC,KAAAC,MAAAJ,EALA,QAMAA,GANA,OAQA,IAAAK,EAAAF,KAAAC,MAAAJ,EAPA,OAQAA,GARA,MAUA,IAGAM,EAHAC,EAAAJ,KAAAC,MAAAJ,EATA,MAUAA,GAVA,KAcAC,GACAK,EAAAH,KAAAC,MAAAJ,EAdA,IAeAA,GAfA,KAiBAM,EAAAH,KAAAK,MAAAR,EAjBA,IAkBAA,EAAA,GAGA,IAAAS,EAAA,GAsBA,OApBAP,GACAO,EAAAzR,KAAAkR,EAAA,KAAA,IAAAA,EAAA/R,MAAAc,EAAA,MAAA,QAAAd,MAAAc,EAAA,MAAA,WAGAoR,GACAI,EAAAzR,KAAAqR,EAAA,KAAA,IAAAA,EAAAlS,MAAAc,EAAA,MAAA,OAAAd,MAAAc,EAAA,MAAA,UAGAsR,GACAE,EAAAzR,KAAAuR,EAAA,KAAA,IAAAA,EAAApS,MAAAc,EAAA,MAAA,QAAAd,MAAAc,EAAA,MAAA,YAGAqR,IAAAL,GAAAC,GAAAG,GAAAE,IACAE,EAAAzR,KAAAsR,EAAA,KAAA,IAAAA,EAAAnS,MAAAc,EAAA,MAAA,UAAAd,MAAAc,EAAA,MAAA,cAGA+Q,KAAAC,GAAAC,GAAAG,GAAAE,GAAAD,IACAG,EAAAzR,KAAAgR,EAAA,KAAA,IAAAA,EAAA7R,MAAAc,EAAA,MAAA,UAAAd,MAAAc,EAAA,MAAA,aAGAwR,EAAA1Q,KAAA,OAUA2Q,YAAA,SAAA/N,EAAAgO,GAEAhO,EAAAA,EAAAiO,UAAA,OAKA,IAHA,IACAC,EADAC,EAAA,GAGAnS,EAAA,EAAAA,EAAAgE,EAAA/C,OAAAjB,IACAkS,EAAAlO,EAAAsM,OAAAtQ,GACAmS,GAAA,iBAAAH,GAAAxS,MAAA4S,cAAAF,IAAAF,GAAAxS,MAAA4S,cAAAF,GAAAA,EAGA,OAAAC,GAGAE,KAAA,WACA,MAAA,mBAAAC,OAAAC,WACAD,OAAAC,cAIA,CAAA,MAAA,KAAA,KAAA,KAAA,MAAAjT,QAAA,SAAAiD,IACAA,EAAA+P,OAAAE,gBAAA,IAAAC,WAAA,IAAA,GAAA,IAAAlQ,EAAA,GAAAmQ,SAAA,MAIAC,aAAA,SAAA1R,GAIA,IAFA,IAAA2R,EAAA,GAEA5S,EAAA,EAAAA,EAAAiB,EAAAjB,IACA4S,GAFA,iEAEAtC,OAAAkB,KAAAC,MAAA,GAAAD,KAAAqB,WAEA,OAAAD,GASAE,gBAAA,SAAAC,GAGA,IAFA,IAAAC,EAAA/T,EAAAiI,SAAAsF,cAAA,OAAAyG,SAAA,UAEAjT,EAAA,EAAAA,EAAA+S,EAAA9R,OAAAjB,IAAA,CACA,IAAAkT,EAAAjU,EAAAiI,SAAAsF,cAAA,OACA0G,EAAA/D,SAAA6D,GACAE,EAAA7T,KAAA0T,EAAA/S,IAGA,OAAAgT,GAGAG,eAAA,SAAA9T,GACA,GAAAA,EAAA,CAKA,IAAA+T,EAAAnU,EAAA,cAEA,GAAAmU,EAAAnS,OAAA,CAIA,IAHA,IACAmG,EADAiM,EAAA,GAGArT,EAAA,EAAAA,EAAAoT,EAAAnS,OAAAjB,IACAoH,EAAAgM,EAAAE,GAAAtT,GAAA+O,KAAA,QAAAzP,QAAA,KAAA,SACA+T,EAAAhT,KAAAb,MAAA0E,YAAAkD,IAGA,IAAAmM,EAAA,IAAAzO,OAAA,yBAAAuO,EAAAjS,KAAA,KAAA,mBAAA,KAEA/B,EAAAA,EAAAC,QAAAiU,EAAA,IAGAtU,EAAA,QAAAuU,OAAAnU,KAGAoU,eAAA,SAAApU,GACA,GAAAA,EAAA,CAKA,IAAAqU,EAAAzU,EAAA,eAEA,GAAAyU,EAAAzS,OAAA,CAIA,IAHA,IACA0S,EADAC,EAAA,GAGA5T,EAAA,EAAAA,EAAA0T,EAAAzS,OAAAjB,IACA2T,EAAAD,EAAAJ,GAAAtT,GAAA+O,KAAA,OAAAzP,QAAA,KAAA,SACAsU,EAAAvT,KAAAb,MAAA0E,YAAAyP,IAGA,IAAAJ,EAAA,IAAAzO,OAAA,0BAAA8O,EAAAxS,KAAA,KAAA,mBAAA,KAEA/B,EAAAA,EAAAC,QAAAiU,EAAA,IAGA/Q,QAAAqR,KAAAL,OAAAnU,KAQAyU,eAAA,SAAAC,GACA9U,EAAA,QAAA8U,GAAAC,OACA/U,EAAA,QAAA8U,GAAAE,WACAhV,EAAA,mBAAA8U,GAAAG,iBACAjV,EAAA,eAAA8U,GAAAI,cACAlV,EAAA,eAAA8U,GAAAK,cACAnV,EAAA,YAAA8U,GAAAM,WACApV,EAAA,cAAA8U,GAAAO,aACArV,EAAA,WAAA8U,GAAAQ,UACAtV,EAAA,mBAAA8U,GAAAS,WACAvV,EAAA,uEAAA8U,GAAAU,gBAIAxV,EAAA,IAAA8U,GAAAW,MAAA,WACA/T,KAAAkQ,SAAA5P,QAAAN,KAAAkQ,WAAA1J,SAAA0J,eAAA,IAAA5R,EAAA0B,MAAAoO,KAAA,WACA9P,EAAA0B,MAAAoO,KAAA,MAAA,YAAAA,KAAA,SAAA,cAKA4F,qBAAA,GACAC,6BAAA,GACAC,sBAAA,GAQAC,0BAAA,SAAAC,EAAAC,GACA,QAAA,IAAArU,KAAAgU,qBAAAI,GACA,KAAA,4EAAAA,EAAA,KAGApU,KAAAgU,qBAAAI,GAAAC,GASAC,kCAAA,SAAAF,EAAAC,GACA,QAAA,IAAArU,KAAAiU,6BAAAG,GACA,KAAA,qFAAAA,EAAA,KAGApU,KAAAiU,6BAAAG,GAAAC,GASAE,2BAAA,SAAAH,EAAAC,GACA,QAAA,IAAArU,KAAAkU,sBAAAE,GACA,KAAA,6EAAAA,EAAA,KAGApU,KAAAkU,sBAAAE,GAAAC,GAWAG,mBAAA,SAAAJ,EAAAhB,EAAAqB,GASA,OAAA,SANA,IAAAzU,KAAAgU,qBAAAI,GACApU,KAAAgU,qBAAAI,GAEAvV,MAAA6V,kBAGAN,EAAAhB,EAAAqB,IASAE,2BAAA,SAAAP,EAAAK,GASA,OAAA,SANA,IAAAzU,KAAAiU,6BAAAG,GACApU,KAAAiU,6BAAAG,GAEAvV,MAAA+V,0BAGAR,EAAAK,IAUAI,oBAAA,SAAAT,EAAAU,EAAAL,GAqBA,YAnBA,IAAAA,GAAAnW,EAAA0G,cAAA8P,IAEAL,EAAAK,EACAA,EAAA,MACA,iBAAAL,IACAA,EAAA,IAGAA,EAAAL,cACAK,EAAAL,YAAAA,GAUA,SANA,IAAApU,KAAAkU,sBAAAE,GACApU,KAAAkU,sBAAAE,GAEAvV,MAAAkW,mBAGAD,EAAAL,IASAO,gBAAA,SAAA/V,EAAAgW,GAGA,OAFAhW,EAAA,SAAAJ,MAAAqW,UAAA,IAAAjW,EAEA,oBAAAkW,mBAAA,IAAAA,aAAAlW,GACAkI,KAAAiO,MAAAD,aAAAlW,IAEAgW,GAUAI,gBAAA,SAAApW,EAAAkG,GACA,GAAA,oBAAAgQ,aAAA,CACAlW,EAAA,SAAAJ,MAAAqW,UAAA,IAAAjW,EAKA,IACAkW,aAAAlW,GAAAkI,KAAAC,UAAAjC,GACA,MAAAwF,OASA2K,mBAAA,SAAArW,GACA,oBAAAkW,cACAA,aAAAI,WAAA,SAAA1W,MAAAqW,aAAAjW,MAQAuW,UAAA,SAAAtQ,GAEA,OAAAqB,SAAAkP,OAAA9W,QAAA,IAAAwF,OAAA,yBAAAtF,MAAAqW,aAAAhQ,gCAAA,OAiBAwQ,UAAA,SAAAxQ,EAAAC,EAAA8B,GACAA,EAAA3I,EAAAM,OAAA,GAAAoB,KAAA2V,qBAAA1O,GACA,IAAAwO,EAAA,SAAA5W,MAAAqW,aAAAhQ,KAAAxB,mBAAAyB,KACA8B,EAAApC,OACA4Q,GAAA,SAAAxO,EAAApC,MAEAoC,EAAA2O,SACAH,GAAA,WAAAxO,EAAA2O,QAEA3O,EAAA4O,OACAJ,GAAA,uBAAAxO,EAAA4O,OACA5O,EAAA6O,UACAL,GAAA,YAAAxO,EAAA6O,QAAAC,eAEA9O,EAAA+O,SACAP,GAAA,WAEAlP,SAAAkP,OAAAA,GAOAQ,aAAA,SAAA/Q,GACAlF,KAAA0V,UAAAxQ,EAAA,GAAA,IAAA1C,KAAA,yBASA0T,eAAA,SAAApB,GACA,IAAAqB,EAAA7X,EAAAwW,GAMA,OAJAqB,EAAAC,SAAA,aACAD,EAAAA,EAAAE,KAAA,mBAGA,CACAC,GAAAH,EAAApP,KAAA,MACAwP,OAAAJ,EAAApP,KAAA,WACAyP,MAAAL,EAAApP,KAAA,SACAqE,OAAA+K,EAAApP,KAAA,UACA1B,IAAA8Q,EAAApP,KAAA,OACA0P,SAAAN,EAAAC,SAAA,YACAD,SAAAA,IAUAO,eAAA,SAAA5B,EAAA6B,GACA,IAAAR,EAAA7X,EAAAwW,GAMA,GAJA,UAAA6B,GAAA,UAAAA,IACAA,EAAA,UAGAR,EAAAC,SAAAO,GAAA,CAIA,IAAAC,EAAA,UAAAD,EAAA,QAAA,QAMA,GAJAR,EACA7D,SAAAqE,GACAE,YAAAD,GAEAT,EAAAC,SAAA,YAAA,CACA,IAAAU,EAAAX,EAAAE,KAAA,yBAEAU,EAAAzY,EAAA,SAAA,CACA0Y,OAFA,UAAAL,EAAA,KAAA,OAEA,KACAM,OAAAH,EAAA1I,KAAA,WAAA0I,EAAA1I,KAAA,mBAGA0I,EAAAI,YAAAH,GAEAI,YAAA,CACAC,SAAA,CAAAL,EAAA,SAgBAM,WAAA,SAAAlJ,EAAAlH,GAKA,QAJA,IAAAA,IACAA,EAAA,KAGAA,EAAAqQ,SAAAA,QAAArQ,EAAAqQ,SAAA,CAsBA,GAlBArQ,EAAAH,QACAxI,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAA,SACAX,IAAA0C,EAAAH,SAEA0H,SAAAL,GAGAlH,EAAAsQ,UACAjZ,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAA,WACAX,IAAA0C,EAAAsQ,WAEA/I,SAAAL,GAGAlH,EAAAnH,OACA,IAAA,IAAAoF,KAAA+B,EAAAnH,OAAA,CACA,IAAAqF,EAAA8B,EAAAnH,OAAAoF,GACA5G,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAA,EACAX,IAAAY,IAEAqJ,SAAAL,GAIAlH,EAAAuQ,cACAxX,KAAAqV,gBAAA,UAAAvJ,OAAA2L,SAGAtJ,EAAAuJ,QAAApZ,EAAAM,OAAA,CAAA0C,KAAA,UAAA2F,EAAAF,SAOA4Q,gBAAA,SAAAC,GACA,MAAAxE,EAAA9U,EAAAsZ,GACAxE,EAAAyE,GAAA,qBAAAC,IAEA,GAAA,IAAAA,EAAAC,QAAA,CACA,MAAAC,EAAA5E,EAAAiD,KAAA,cACAtX,EAAAiZ,EAAAjZ,MAAAwH,SAAA0R,gBACA,IAAAlZ,IACA,IAAAA,GAAA+Y,EAAAI,UACAJ,EAAAK,iBACAL,EAAAM,kBACAJ,EAAAK,OAAAC,SACAvZ,IAAAiZ,EAAA1X,OAAA,GAAAwX,EAAAI,WACAJ,EAAAK,iBACAL,EAAAM,kBACAJ,EAAAO,QAAAD,cAWAE,eAAA,SAAAZ,GACAtZ,EAAAsZ,GAAAvB,KAAA,oBAAAiC,WAQAha,EAAAM,OAAAN,EAAAma,GACA,CACAC,YAAA,SAAA/X,EAAAgY,EAAAC,EAAAC,GACA,MAAA,QAAAha,MAAAia,YACA9Y,KAAA+Y,SAAA,CAAAC,KAAArY,GAAAgY,EAAAC,EAAAC,GAEA7Y,KAAA+Y,SAAA,CAAAE,MAAAtY,GAAAgY,EAAAC,EAAAC,IAIAK,aAAA,SAAAvY,EAAAgY,EAAAC,EAAAC,GACA,MAAA,QAAAha,MAAAia,YACA9Y,KAAA+Y,SAAA,CAAAE,MAAAtY,GAAAgY,EAAAC,EAAAC,GAEA7Y,KAAA+Y,SAAA,CAAAC,KAAArY,GAAAgY,EAAAC,EAAAC,IAOAM,QAAA,WACA,OAAAnZ,KAAA+T,MAAA,WACA,IAAAqF,EAAA9a,EAAA0B,MACAoZ,EAAA9G,SAAA,YAEA8G,EAAArS,KAAA,gBACAqS,EAAAC,WAAA,gBAQAC,OAAA,WACA,OAAAtZ,KAAA+T,MAAA,WACA,IAAAqF,EAAA9a,EAAA0B,MACAoZ,EAAAvC,YAAA,YAEAuC,EAAArS,KAAA,gBACAqS,EAAAhL,KAAA,WAAA,SAQAiF,KAAA,WACA,OAAArT,KAAA+T,MAAA,WACA,IAAAX,EAAA9U,EAAA0B,MACAyU,EAAA,GAEArB,EAAArM,KAAA,mBACA0N,EAAA8E,aAAAnG,EAAArM,KAAA,kBAEAqM,EAAArM,KAAA,UACA0N,EAAA+E,KAAArX,SAAAiR,EAAArM,KAAA,UAEAqM,EAAArM,KAAA,cACA0N,EAAAgF,QAAAtX,SAAAiR,EAAArM,KAAA,cAEAqM,EAAArM,KAAA,mBACA0N,EAAAiF,YAAAvX,SAAAiR,EAAArM,KAAA,mBAEAqM,EAAArM,KAAA,UACA0N,EAAAkF,KAAAvG,EAAArM,KAAA,SAEAqM,EAAArM,KAAA,eACA0N,EAAAmF,SAAAxG,EAAArM,KAAA,cAEAqM,EAAArM,KAAA,eACA0N,EAAAoF,SAAAzG,EAAArM,KAAA,cAEAqM,EAAArM,KAAA,kBACA0N,EAAAqF,aAAA1G,EAAArM,KAAA,iBAGA,IAAAlI,MAAAkb,KAAA/Z,KAAAyU,OAIAnB,SAAA,WACA,OAAAtT,KAAA+T,MAAA,WACA,IAAAlV,MAAAmb,SAAAha,UAOAuT,eAAA,WACA,OAAAvT,KAAA+T,MAAA,WACAzV,EAAAyI,KAAA/G,KAAA,mBACA,IAAA6B,QAAAoY,eAAAja,UAQAwT,YAAA,WACA,OAAAxT,KAAA+T,MAAA,WACAzV,EAAAyI,KAAA/G,KAAA,gBACA,IAAAnB,MAAAqb,YAAAla,UAKAyT,YAAA,SAAAgB,EAAA0F,EAAAC,GAEA,MAAA,aAAA3F,GACA,iBAAA0F,GACA1F,EAAA,IACA0F,GAAAC,EAEA3F,EAAA0F,EAGAna,KAAA+T,MAAA,WACA,IAAA3U,EAAAd,EAAAyI,KAAA/G,KAAA,eACAZ,GACAA,EAAAib,YAAA5F,QAIAnW,EAAA0G,cAAAyP,KACAA,EAAA,IAGAzU,KAAA+T,MAAA,WACA,IAAAuG,EAAAhc,EAAAM,OAAA,GAAA6V,GAEA5S,QAAA0Y,QAAAva,KAAA,gBACAsa,EAAAnV,MAAA7G,EAAA0B,MAAAoO,KAAA,eAGAvM,QAAA0Y,QAAAva,KAAA,8BACAsa,EAAAE,mBAAAlc,EAAA0B,MAAAoO,KAAA,6BAGA9P,EAAAyI,KAAA/G,KAAA,gBACA,IAAAnB,MAAA4b,YAAAza,KAAAsa,QAMA5G,SAAA,WACA,OAAA1T,KAAA+T,MAAA,WACAzV,EAAAyI,KAAA/G,KAAA,aACA,IAAA6B,QAAA6Y,SAAA1a,UAKA2T,WAAA,WAEA,OAAA3T,KAAA6X,GAAA,SAAA,SAAAC,GACA,IAAA6C,EAAArc,EAAAwZ,EAAA8C,eACA9a,EAAA6a,EAAA5T,KAAA,WAAA,GACA4T,EAAA5T,KAAA,WACAjH,EAAA6a,EAAA5T,KAAA,UAAA4T,EAAA5T,KAAA,UAGA,IAAA8T,EAAAF,EAAA5T,KAAA,QAAA4T,EAAA5T,KAAA,QAAA8T,QAAAF,EACAxM,EAAA0M,EAAAzM,KAAA,aAAA9P,EAAA,IAAAuc,EAAAzM,KAAA,cAAAyM,EAAAC,QAAA,QAEAjc,MAAAwY,WAAAlJ,EAAA,CACAmJ,QAAAqD,EAAA5T,KAAA,WACAD,OAAA6T,EAAA5T,KAAA,UACAwQ,SAAAoD,EAAA5T,KAAA,YACAjH,OAAAA,EACAiH,KAAAzI,EAAAM,OAAA,CACAmc,cAAAJ,GACAA,EAAA5T,KAAA,qBAKA6M,QAAA,WACA,OAAA5T,KAAA+T,MAAA,WACA,IAAA4G,EAAArc,EAAA0B,MAEA,IAAA2a,EAAA5T,KAAA,YAAA4T,EAAAK,OAAA5E,SAAA,QAAA,CACA,IAAA3B,EAAA,GAEAkG,EAAA5T,KAAA,iBACA0N,EAAAwG,WAAAN,EAAA5T,KAAA,gBAGA,IAAAlF,QAAAqZ,QAAAP,EAAAlG,QAKAZ,SAAA,WACA,OAAA7T,KAAA+T,MAAA,WACA,IAAAoH,EAAA7c,EAAA0B,MACAob,EAAAD,EAAA9E,KAAA,mCACAgF,EAAA,KACA,IAAAC,GAAA,EACA,IAAA,IAAAjc,EAAA,EAAAA,EAAA+b,EAAA9a,OAAAjB,IACA,GAAA+b,EAAAzI,GAAAtT,GAAAkF,MAAA,CACA+W,GAAA,EACA,MAGA,GAAAA,GACA,IAAAH,EAAAI,SAAA,cAAAjb,OAAA,CACA,IAAAqa,EAAArc,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,YACAC,MAAA5c,MAAAc,EAAA,MAAA,SACA+b,aAAA7c,MAAAc,EAAA,MAAA,WAEA6O,SAAA2M,GACAtD,GAAA,QAAA,KACA,IAAA,IAAAxY,EAAA,EAAAA,EAAA+b,EAAA9a,OAAAjB,IACA+b,EAAAzI,GAAAtT,GAAAkF,IAAA,IAAAmT,QAAA,SAAAA,QAAA,UAEAiD,EAAAgB,SACAP,EAAA7C,QAAAqD,OAAA,iBAAAtD,gBAIA6C,EAAAI,SAAA,cAAAI,UAGAP,EAAAvD,GAAA,SAAAwD,GACAA,QAIAvH,cAAA,WACA,OAAA9T,KAAA+T,MAAA,WACA,MAAAzP,EAAAhG,EAAA0B,MACAqb,EAAA,KACA,KAAA/W,EAAAC,MACAD,EAAAgO,SAAA,eAEAhO,EAAAuS,YAAA,gBAGAvS,EAAAuT,GAAA,QAAAwD,GACAA,UAMAxZ,QAAA6Y,SAAAmB,cAAAC,GACAjd,MAAAc,EAAA,MAAA,wEAAA,CACAkB,MAAAib,IAIAja,QAAAka,KAAAC,OAAA,WACAnd,MAAAsU,oBCnqEAtU,MAAAkW,kBAAAlT,QAAAoa,KAAArd,OAAA,CACAuX,SAAA,KACA+F,UAAA,KACA3F,OAAA,KACA9J,WAAA,KACA0P,YAAA,KAEAC,QAAA,KACAC,SAAA,KACAC,cAAA,KACAC,UAAA,KACAC,YAAA,KACAC,aAAA,KAEAC,MAAA,KACAC,iBAAA,KAEAC,SAAA,KAEAC,QAAA,KACAC,qBAAA,KACAC,YAAA,KACAC,aAAA,KACAC,WAAA,KACAC,SAAA,KACAC,aAAA,KAEAC,SAAA,KACAC,WAAA,KACAC,gBAAA,EAEA1T,YAAA,KACA2T,qBAAA,EACA7Q,mBAAA,KAEA8Q,KAAA,SAAA1I,EAAAL,QAEA,IAAAA,GAAAnW,EAAA0G,cAAA8P,KAEAL,EAAAK,EACAA,EAAA,MAGA9U,KAAAmW,SAAA7X,EAAAwW,GACA9U,KAAAqa,YAAA5F,EAAA5V,MAAAkW,kBAAA0I,UAGAzd,KAAAoc,QAAA9d,EAAA,YAAA,CAAAkd,MAAA,gBACAxb,KAAAqc,SAAA/d,EAAA,SAAA,CAAAkd,MAAA,eAAAhN,SAAAxO,KAAAoc,SACApc,KAAAsc,cAAAhe,EAAA,SAAA,CAAAkd,MAAA,cAAAhN,SAAAxO,KAAAqc,UACArc,KAAAyc,aAAAne,EAAA,SAAA,CACAkd,MAAA,UACAC,MAAA5c,MAAAc,EAAA,MAAA,WACA+b,aAAA7c,MAAAc,EAAA,MAAA,aACA6O,SAAAxO,KAAAqc,UACArc,KAAAuc,UAAAje,EAAA,OAAA,CACAof,OAAA,SACAlC,MAAA,aACAC,MAAA5c,MAAAc,EAAA,MAAA,wCACA+b,aAAA7c,MAAAc,EAAA,MAAA,wCACAge,YAAA,aACAnP,SAAAxO,KAAAqc,UACArc,KAAAwc,YAAAle,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,yBACAC,MAAA5c,MAAAc,EAAA,MAAA,gBACA+b,aAAA7c,MAAAc,EAAA,MAAA,gBACAge,YAAA,YAAA9b,QAAA+b,IAAA,QAAA,UACApP,SAAAxO,KAAAqc,UAEArc,KAAA6d,YAAA7d,KAAAwc,YAAA,QAAA1E,IACAA,EAAAK,iBACAnY,KAAAsd,eAGAtd,KAAA8d,cAFA9d,KAAA+d,gBAOA/d,KAAA0c,MAAApe,EAAA,SAAA,CAAAkd,MAAA,YAGAxb,KAAA2c,iBAAAre,EAAA,SAAA,CAAAkd,MAAA,WAAAhN,SAAAxO,KAAA0c,OAGA1c,KAAA4c,SAAAte,EAAA,SAAA,CAAAkd,MAAA,sBAAAhN,SAAAxO,KAAA0c,OACA7d,MAAA8Y,gBAAA3X,KAAA4c,UAGA5c,KAAA6c,QAAAve,EAAA,SAAA,CAAAkd,MAAA,qBACA,MAAAwC,EAAA1f,EAAA,SAAA,CAAAkd,MAAA,mBAAAhN,SAAAxO,KAAA6c,SACA7c,KAAA8c,qBAAAxe,EAAA,SAAA,CAAAkd,MAAA,kBAAAhN,SAAAwP,GACAhe,KAAA+c,YAAAze,EAAA,aAAAkQ,SAAAxO,KAAA8c,sBACA9c,KAAAgd,aAAA1e,EAAA,SAAA,CAAAkd,MAAA,mBAAAhN,SAAAwP,GACAhe,KAAAid,WAAA3e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAA6c,SACA7c,KAAAkd,SAAA5e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,aACAlY,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAAxO,KAAA6c,SACA7c,KAAAmd,aAAA7e,EAAA,SAAA,CAAAkd,MAAA,mBAAAhN,SAAAxO,KAAA6c,SAEA,IAAAoB,EAAAje,KAAAoc,QAAA8B,IAAAle,KAAA0c,OAAAwB,IAAAle,KAAA6c,SAGA7c,KAAAod,SAAA,IAAAve,MAAAsf,SAAAF,EAAA,CACAG,iBAAA,OACAC,oBAAA,CACAvX,OAAA,GACAiC,OAAA,OACAuV,WAAA,GACA9C,MAAA,kBAEA+C,YAAA,EACAC,mBAAA,IAEAxe,KAAAod,SAAAhK,WAAArM,KAAA,gBAAA/G,MACAA,KAAAod,SAAAvF,GAAA,cAAA,KACA7X,KAAA8d,gBAEA9d,KAAAod,SAAAvF,GAAA,QAAA,KACA7X,KAAA0X,QAAA,iBACA1X,KAAAye,YAIA5c,QAAA6c,gBAAAC,iBAAA,CACA5G,QAAAlW,QAAA+c,MACAC,MAAA,GACA,KACA7e,KAAA8e,gBAEAjd,QAAA6c,gBAAAC,iBAAA9c,QAAAkd,QAAA,KACA/e,KAAAgf,uBAEAhf,KAAA6d,YAAA7d,KAAAid,WAAA,QAAA,KACAjd,KAAAgf,uBAEAhf,KAAA6d,YAAA7d,KAAAod,SAAA6B,OAAA,QAAA,KACAjf,KAAAgf,uBAEAhf,KAAA6d,YAAA7d,KAAAod,SAAAhK,WAAA,QAAA0E,IACA,MAAAoH,EAAA5gB,EAAA6gB,MAAAzB,SAGA1d,KAAAsd,gBACA4B,EAAApE,QAAA9a,KAAAwc,aAAAlc,QACA4e,EAAApE,QAAA9a,KAAA4c,UAAAtc,QAEAN,KAAA8d,gBAGA9d,KAAA6d,YAAA7d,KAAAod,SAAAhK,WAAA,SAAA0E,IACAA,EAAAK,iBACAnY,KAAA8e,gBAEA9e,KAAA6d,YAAA7d,KAAA+c,YAAA,SAAA,cAEA/c,KAAAof,OAAA5V,KAAA,KACAxJ,KAAAqf,YACArf,KAAAsf,aAAAtf,KAAA0c,UAIA6C,oBAAA,SAAAra,EAAAC,GACAnF,KAAAyU,SAAA+K,aACAxf,KAAAyU,SAAA+K,WAAA,IAGA,OAAAra,SACAnF,KAAAyU,SAAA+K,WAAAta,GAEAlF,KAAAyU,SAAA+K,WAAAta,GAAAC,GAIAsa,YAAA,WACA,MAAA1Y,EAAAzI,EAAAM,OAAA,GAAAoB,KAAAyU,SAAA3U,QA0BA,OAxBAE,KAAAyU,SAAA8B,OACAxP,EAAAwP,OAAAvW,KAAAyU,SAAA8B,OACAvW,KAAAmW,UAAAnW,KAAAmW,SAAApP,KAAA,aACAA,EAAAwP,OAAAvW,KAAAmW,SAAApP,KAAA,YAGA/G,KAAAyU,SAAAyH,UACAnV,EAAAmV,UAAAlc,KAAAyU,SAAAyH,UACAlc,KAAAmW,UAAAnW,KAAAmW,SAAApP,KAAA,QACAA,EAAAmV,UAAAlc,KAAAmW,SAAApP,KAAA,OAGA/G,KAAAyU,SAAAL,cACArN,EAAAqN,YAAApU,KAAAyU,SAAAL,aAGApU,KAAAyU,SAAA+K,aACAzY,EAAAyY,WAAAxf,KAAAyU,SAAA+K,YAGAxf,KAAAyU,SAAAiL,cACA3Y,EAAA2Y,YAAA,GAGA3Y,GAGAqY,KAAA,SAAArY,GACA,OAAA,IAAAiC,QAAA,CAAAC,EAAAC,KACAlJ,KAAA0X,QAAA,cAEA1X,KAAA0X,QAAA,gBACA1X,KAAA2f,kBACA3f,KAAA4f,iBAEA5f,KAAA4J,cACA5J,KAAAud,qBAAA,EACAvd,KAAA4J,YAAAiW,UAGA7f,KAAA4J,YAAAN,MAAAwW,YAAAC,SAEAlhB,MAAAiK,kBAAA,OAAA,2BAAA,CACAc,YAAA5J,KAAA4J,YAAArJ,MACAwG,KAAAzI,EAAAM,OAAAoB,KAAAyf,cAAA1Y,GAAA,GAAA,CACAiZ,aAAAnhB,MAAAohB,aAAAjgB,KAAAyU,SAAAyL,qBAEA1W,KAAAkB,IACA1K,KAAAmgB,kBACAngB,KAAA0X,QAAA,QAEA1X,KAAA0X,QAAA,cACA1X,KAAAogB,eACApgB,KAAA4J,YAAA,KACA,OAAA5J,KAAA0M,qBACA1M,KAAA0M,mBAAAhC,EAAA3D,KAAA2F,oBAEA1M,KAAAqgB,WAAA3V,EAAA3D,MAAA,GACA/G,KAAA4J,YAAA,KACAX,MACAQ,MAAAkB,IACA3K,KAAAmgB,kBACAngB,KAAAogB,eACApgB,KAAA4J,YAAA,KACA5J,KAAAud,sBACA1e,MAAAkJ,GAAAC,eACAkB,EAAAyB,IAEA3K,KAAAud,qBAAA,OAKA+C,WAAA,WACAtgB,KAAAoc,QAAAvF,YAAA,WAGA0J,WAAA,WACAvgB,KAAAoc,QAAA9J,SAAA,WAGAqN,gBAAA,WACA3f,KAAAsgB,aACAtgB,KAAAyc,aAAA5F,YAAA,WAGAsJ,gBAAA,WACAngB,KAAAyc,aAAAnK,SAAA,WAGAkO,WAAA,WACA,GAAAxgB,KAAAygB,YAAAnJ,QAAAzY,MAAAc,EAAA,MAAA,sFAEA,YADAK,KAAA+c,YAAAxY,IAAAvE,KAAAuW,QAIA,MAAAmK,EAAA1gB,KAAA+c,YAAAxY,MAEAmc,GAAA1gB,KAAAuW,SAIAvW,KAAAgd,aAAAnG,YAAA,UAEA7W,KAAAof,KAAA,CAAA7I,OAAAmK,IAAAlX,KAAA,KACAxJ,KAAAgd,aAAA1K,SAAA,YACA7I,MAAA,KACAzJ,KAAAgd,aAAA1K,SAAA,UAEAtS,KAAA+c,YAAAxY,IAAAvE,KAAAuW,YAIA8J,WAAA,SAAAtZ,EAAA4Z,GAEA3gB,KAAAqd,aACArd,KAAAsc,cAAA5d,KAAA,IACAsB,KAAAqd,WAAAoB,UACAze,KAAAqd,WAAA,MAGArd,KAAAuW,OAAAxP,EAAAwP,OACAvW,KAAA2c,iBAAAje,KAAAqI,EAAA6Z,WAEA,IAAAN,GAAA,EAEA,GAAAvZ,EAAA8Z,OAAA9Z,EAAA8Z,MAAAvgB,OAAA,EAAA,CACAggB,GAAA,EACAtgB,KAAA8c,qBAAAjG,YAAA,UACA7W,KAAA+c,YAAAre,KAAA,IAEA,IAAA,IAAAW,EAAA,EAAAA,EAAA0H,EAAA8Z,MAAAvgB,OAAAjB,IAAA,CACA,MAAAyhB,EAAA/Z,EAAA8Z,MAAAxhB,GACA0hB,EAAAziB,EAAA,YAAA,CACA6G,MAAA2b,EAAAxK,GACAhT,KAAAwd,EAAA5b,OACAsJ,SAAAxO,KAAA+c,aACA+D,EAAAxK,IAAAvP,EAAAwP,QACAwK,EAAA3S,KAAA,WAAA,kBAIApO,KAAA8c,qBAAAxK,SAAA,UAGAvL,EAAAia,UACAV,GAAA,EACAtgB,KAAAsc,cAAApF,YAAAlX,KAAAsc,cAAAhe,EAAAyI,EAAAia,UACAhhB,KAAAqd,WAAA,IAAAxe,MAAAoiB,KAAAjhB,KAAAsc,eACAtc,KAAAqd,WAAAxF,GAAA,cAAAC,IACAxZ,EAAAwZ,EAAAoJ,KAAA9S,KAAA,SAAAkE,SAAA,YAEAtS,KAAAqd,WAAAxF,GAAA,YAAAC,IACAxZ,EAAAwZ,EAAAoJ,KAAA9S,KAAA,SAAAyI,YAAA,UACAhV,QAAAsf,KAAAzJ,QAAA,UACA1X,KAAA0c,MAAAhF,QAAA,aAIA3Q,EAAAqa,SACAd,GAAA,EACAtgB,KAAAuc,UACA1F,YAAA,UACAzI,KAAA,OAAArH,EAAAqa,UACAphB,KAAAuc,WACAvc,KAAAuc,UAAAjK,SAAA,UAGAvL,EAAAsa,aACAf,GAAA,EACAtgB,KAAAwc,YAAA3F,YAAA,UACA7W,KAAA4c,SAAAle,KAAAqI,EAAAsa,aACAxiB,MAAAsU,eAAAnT,KAAA4c,WACA,IAAA/d,MAAAyiB,oBAAAlC,KAAA9gB,EAAA0B,KAAA4c,WAGA5c,KAAA4c,SAAAvG,KAAA,KAAAtC,MAAA,WACA/T,KAAAkQ,SAAA5P,aAAA,IAAAhC,EAAA0B,MAAAoO,KAAA,WACA9P,EAAA0B,MAAAoO,KAAA,SAAA,cAGApO,KAAAwc,cACAxc,KAAAwc,YAAAlK,SAAA,UACAtS,KAAA4c,SAAAtK,SAAA,WAGAgO,EACAtgB,KAAAsgB,aAEAtgB,KAAAugB,aAGAvgB,KAAA6c,QAAAhG,YAAA,WAEA,IAAA8J,IACA3gB,KAAAyM,WAAA1F,EAAA0F,YAGA5K,QAAA0f,sBAAA,KACA1iB,MAAA2T,eAAAzL,EAAAya,UACA3iB,MAAAiU,eAAA/L,EAAA0a,UACA5iB,MAAAsU,eAAAnT,KAAA2c,kBAEAgE,IACA3gB,KAAAmc,YAAAnc,KAAAod,SAAAhK,WAAAsO,aAGA7f,QAAA8f,mBACA9iB,MAAA2Z,eAAAxY,KAAA2c,kBAGA3c,KAAA0X,QAAA,iBAIAqG,YAAA,WACA/d,KAAAsd,iBAIAtd,KAAA0c,MAAAkF,UAAA,GAAAtP,SAAA,aAEAtS,KAAA4c,SACAiF,IAAA,gCACAC,IAAA9hB,KAAA+hB,wBACAlL,YAAA,UAGA7W,KAAA4c,SAAA,GAAAoF,YAEAhiB,KAAA4c,SAAAkF,IAAA9hB,KAAAiiB,wBAEApgB,QAAA8f,mBACA3hB,KAAA4c,SAAAsF,IAAA,+BAAA,KACArjB,MAAA2Z,eAAAxY,KAAA4c,YAIA5c,KAAAwc,YACAlK,SAAA,UACAlE,KAAA,CACAqN,MAAA5c,MAAAc,EAAA,MAAA,gBACA+b,aAAA7c,MAAAc,EAAA,MAAA,kBAGAkC,QAAAsf,KAAAzJ,QAAA,UACA1X,KAAA4c,SAAAlF,QAAA,UAEA7V,QAAA6c,gBAAAyD,WACAtgB,QAAA6c,gBAAAC,iBAAA9c,QAAAkd,QAAA,KACA/e,KAAA8d,gBAGA9d,KAAAsd,gBAAA,IAGAQ,YAAA,WACA9d,KAAAsd,iBAIAtd,KAAA0c,MAAA7F,YAAA,aAEA7W,KAAA4c,SACAiF,IAAA,gCACAC,IAAA9hB,KAAA+hB,wBACAG,IAAA,+BAAA,KACAliB,KAAA4c,SAAAtK,SAAA,YAGAtS,KAAAwc,YACA3F,YAAA,UACAzI,KAAA,CACAqN,MAAA5c,MAAAc,EAAA,MAAA,gBACA+b,aAAA7c,MAAAc,EAAA,MAAA,kBAGAkC,QAAA6c,gBAAA0D,cAEApiB,KAAAsd,gBAAA,IAGA2E,qBAAA,WACA,MAAA,CACAI,CAAAxgB,QAAA+b,IAAA,QAAA,QAAA,MAIAmE,qBAAA,WACA,MAAA,CACAM,CAAAxgB,QAAA+b,IAAA,QAAA,QAAA,WAIAkB,YAAA,WACA,MAAAwD,EAAAtiB,KAAAyU,SAAA6N,WAEA,GAAAhkB,EAAAY,QAAAojB,GACA,IAAA,IAAAjjB,EAAA,EAAAA,EAAAijB,EAAAhiB,OAAAjB,IACA,GAAAf,EAAAikB,WAAAD,EAAAjjB,MAAAijB,EAAAjjB,GAAAmjB,OACA,OAAA,EAKAxiB,KAAAmd,aAAAtG,YAAA,UAEA,IAAA9P,EAAAzI,EAAA6C,MAAAnB,KAAAyf,eAAA,IAAAzf,KAAAod,SAAAhK,WAAAsO,YACA3a,EAAAlI,MAAAyN,cAAAtM,KAAAmc,YAAApV,EAAA/G,KAAAyM,WAAA,KAAAzM,KAAA0M,oBAEA7N,MAAAgI,kBAAA,wBAAAE,EAAA,CAAA2D,EAAA9C,KAGA,GAFA5H,KAAAmd,aAAA7K,SAAA,UAEA,YAAA1K,EACA,GAAA8C,EAAAhD,QAAA,CACA,GAAA1H,KAAAmW,UAAAnW,KAAAuW,QAAAvW,KAAAmW,SAAApP,KAAA,WAAA,CAEA,MAAA0b,EAAAziB,KAAAmW,SAAAE,KAAA,UACAqM,EAAAD,EAAApM,KAAA,KAEAqM,EAAApiB,QAAAoK,EAAAiY,WACAD,EAAAtU,KAAA,OAAA1D,EAAAiY,WACAD,EAAApf,KAAAoH,EAAAkY,WAEAH,EAAAnf,KAAAoH,EAAAkY,UAIA5iB,KAAAyU,SAAAL,aAAAvV,MAAAgkB,iBAAA7iB,KAAAyU,SAAAL,cACAvV,MAAAkJ,GAAA+a,cAAAjkB,MAAAc,EAAA,MAAA,gBAAA,CACA2B,KAAAzC,MAAAgkB,iBAAA7iB,KAAAyU,SAAAL,aAAA,MAIApU,KAAA+iB,gBACA/iB,KAAA0X,QAAA,cAAA,CACAhN,SAAAA,IAEA1K,KAAAgjB,cAAAtY,GACA1K,KAAAyU,SAAAuO,cAAAtY,GAGA7L,MAAAkJ,GAAAkb,gBAEAjjB,KAAAqgB,WAAA3V,GAAA,GACA7I,QAAAqhB,MAAAljB,KAAAod,SAAAhK,eAMAqN,QAAA,WACA,OAAA,OAAAzgB,KAAAmc,aAAAnc,KAAAod,SAAAhK,WAAAsO,cAAA1hB,KAAAmc,aAGA6C,mBAAA,WACAhf,KAAAod,SAAA+F,SAIAnjB,KAAAygB,YAAAnJ,QAAA,yEACAtX,KAAA+iB,kBAIAA,cAAA,WACA/iB,KAAAod,SAAAnc,QACAjB,KAAAojB,YAEApjB,KAAA4J,cACA5J,KAAAud,qBAAA,EACAvd,KAAA4J,YAAAiW,WAIApB,QAAA,WACAze,KAAAod,SAAAqB,iBACAze,KAAAod,SACApd,KAAAqjB,QAOAC,QAAA,WACAtjB,KAAAof,QAGAmE,cAAA,WACAvjB,KAAAgf,sBAGAwE,SAAA,WACAxjB,KAAA+iB,iBAGAU,WAAA,SAAA1c,EAAAC,GACAhH,KAAAof,KAAArY,GAAAyC,KAAA,KACAxC,EAAA,aACAyC,MAAA,KACAzC,EAAA,YAIA4Y,eAAA,WACA5f,KAAAyU,SAAAmL,kBAGAQ,aAAA,WACApgB,KAAAyU,SAAA2L,gBAGA4C,cAAA,SAAAtY,KAGA4U,aAAA,SAAAnR,GACAnO,KAAAyU,SAAA6K,aAAAnR,IAGAkR,UAAA,WACArf,KAAA0X,QAAA,WACA1X,KAAAyU,SAAA4K,aAGA+D,UAAA,WACApjB,KAAA0X,QAAA,WACA1X,KAAAyU,SAAA2O,cAEA,CACA3F,SAAA,CACAyC,kBAAA,EACAhE,UAAA,KACA9H,YAAA,KACAmC,OAAA,KACAiJ,WAAA,KACA1f,OAAA,KACA4f,aAAA,EACAgE,aAAA,KACAV,cAAA1kB,EAAAqlB,KACArB,WAAA,GAGAjD,UAAA/gB,EAAAqlB,KAEAP,UAAA9kB,EAAAqlB,KAEA/D,eAAAthB,EAAAqlB,KAEAvD,aAAA9hB,EAAAqlB,KAEArE,aAAAhhB,EAAAqlB,QC3nBA9kB,MAAA6V,iBAAA7S,QAAAoa,KAAArd,OAAA,CACAglB,aAAA,EACAxP,YAAA,KAEAyP,cAAA,KACAC,aAAA,KACAC,uBAAA,KAEAC,cAAA,KACAC,aAAA,KAEA7Q,WAAA,KACA8Q,MAAA,KACAC,aAAA,EAEAvH,SAAA,KACAU,eAAA,KACA8G,UAAA,KACAC,gBAAA,KACAC,QAAA,KACAC,aAAA,KACAC,gBAAA,KAEAC,qBAAA,KACAC,sBAAA,KAEArI,SAAA,KACAsI,cAAA,KAEAC,iBAAA,KACAC,QAAA,KACAC,WAAA,KACAC,WAAA,EACAC,WAAA,KACAC,SAAA,EACAC,QAAA,EACAC,gBAAA,KAEAC,eAAA,KACAC,qBAAA,KACAC,WAAA,KACAla,OAAA,KAEAma,aAAA,KACAC,SAAA,KACAjP,OAAA,KAEAkP,aAAA,KACAC,SAAA,KACAC,oBAAA,KACAC,oBAAA,KACAC,oBAAA,KACAC,wBAAA,KAEAC,UAAA,KACAC,sBAAA,KACAC,aAAA,KACAC,SAAA,KACAC,KAAA,KACAC,oBAAA,KACAC,cAAA,KACAC,gBAAA,KACAC,KAAA,EACAC,UAAA,KACAC,aAAA,KACAC,WAAA,KAEAC,QAAA,KACAC,gBAAA,KACAC,gBAAA,KACAC,oBAAA,KACAC,mBAAA,KACAC,uBAAA,EACAC,UAAA,KACAC,gBAAA,KACAC,uBAAA,KACAC,WAAA,KAEAC,sBAAA,EACAC,aAAA,KAEAC,WAAA,KAKA/J,KAAA,SAAApJ,EAAAhB,EAAAqB,GAqDA,GApDAzU,KAAAoU,YAAAA,EACApU,KAAAoT,WAAAA,EACApT,KAAAqa,YAAA5F,EAAA5V,MAAA6V,iBAAA+I,UAKAzd,KAAA6jB,cAAA7jB,KAAAwnB,0BAEAxnB,KAAA8jB,aAAA,GAGA9jB,KAAAyU,SAAAgT,YACAnpB,EAAAM,OAAAoB,KAAA6jB,cAAAhlB,MAAAmW,gBAAAhV,KAAAyU,SAAAgT,YAAA,IAIAznB,KAAA+jB,uBAAA,oBAAA/jB,KAAAoU,YAAA,IAAApU,KAAAyU,SAAAiT,QACAppB,EAAAM,OAAAoB,KAAA8jB,aAAAjlB,MAAAmW,gBAAAhV,KAAA+jB,uBAAA,KAKA/jB,KAAAkkB,MAAAlkB,KAAAoT,WAAAiD,KAAA,SACArW,KAAAqc,SAAArc,KAAAoT,WAAAiD,KAAArW,KAAAyU,SAAAkT,iBACA3nB,KAAAolB,eAAAplB,KAAAqc,SAAAhG,KAAA,wBACArW,KAAAqlB,qBAAArlB,KAAAolB,eAAAwC,SACA5nB,KAAAulB,aAAAvlB,KAAAoT,WAAAiD,KAAA,sBACArW,KAAAylB,aAAAzlB,KAAAqc,SAAAhG,KAAA,sBAEArW,KAAA4kB,iBAAA5kB,KAAAqc,SAAAhG,KAAA,iBACArW,KAAA6kB,QAAA7kB,KAAA4kB,iBAAArJ,SAAA,eACAvb,KAAA8kB,WAAA9kB,KAAA4kB,iBAAArJ,SAAA,qBACAvb,KAAAmlB,gBAAAnlB,KAAA4kB,iBAAArJ,SAAA,gBAEAvb,KAAA4c,SAAA5c,KAAAoT,WAAAiD,KAAA,kBACArW,KAAAykB,qBAAAzkB,KAAA4c,SAAAvG,KAAA,sBAEArW,KAAA+lB,UAAA/lB,KAAAoT,WAAAiD,KAAA,mBACArW,KAAAqmB,cAAArmB,KAAAoT,WAAAiD,KAAA,kBACArW,KAAAsmB,gBAAAtmB,KAAAoT,WAAAiD,KAAA,oBACArW,KAAA0mB,WAAA1mB,KAAAoT,WAAAiD,KAAA,eAGArW,KAAAyU,SAAAqJ,cACA9d,KAAA4c,SAAAiL,OACAvpB,EAAA,kBAAA0B,KAAAoT,YAAAyD,YAAA,gBAMA7W,KAAA8nB,cAAA,CAqBA,GAhBA9nB,KAAAykB,qBAAAnkB,QACAN,KAAA6d,YAAA7d,KAAAykB,qBAAA,QAAA,+BAMAzkB,KAAAolB,eAAA9kB,SACAN,KAAAslB,WAAAtlB,KAAAolB,eAAAxR,UAAA7M,KAAA,WAAAghB,KACA/nB,KAAAslB,WAAAzN,GAAA,eAAA7X,KAAAgoB,oBAAAC,KAAAjoB,QAOAA,KAAAulB,aAAAjlB,OAAA,CACAN,KAAAwlB,SAAAxlB,KAAAulB,aAAA3R,UAAA7M,KAAA,WAAAghB,KAGA,IAAAhH,EAAA/gB,KAAAwlB,SAAA0C,SAAAtM,OAAA,cAeA,GAbAmF,EAAAzgB,SACAygB,EAAA/gB,KAAAwlB,SAAA0C,SAAA3P,SAGAwI,EAAAzgB,OACAN,KAAAmoB,SAAApH,EAAAha,KAAA,YAGA/G,KAAAyU,SAAA2T,SAAA,CAAA9R,GAAA,KAGAtW,KAAAwlB,SAAA3N,GAAA,eAAA7X,KAAAqoB,kBAAAJ,KAAAjoB,OAEAA,KAAAuW,OAAA,CAEA,IAAA+R,EAAAtoB,KAAAyU,SAAA6T,eAAAzpB,MAAAkJ,GAAAwgB,YAEA,GAAAD,GAAAA,GAAAtoB,KAAAuW,OAAA,CAEA,IAAAiS,EAAAxoB,KAAAwlB,SAAA0C,SAAAtM,OAAA,kBAAA0M,EAAA,YAEAE,EAAAloB,QAEAkoB,EAAA9Q,QAAA,gBAIA1X,KAAAyU,SAAA2T,UAAApoB,KAAAyU,SAAA2T,SAAA7R,QAAA,MAAAvW,KAAAyU,SAAA2T,SAAA7R,OACAvW,KAAAmoB,SAAAnoB,KAAAyU,SAAA2T,SAAA7R,QAEAvW,KAAAmoB,SAAAtpB,MAAA0X,QAIAvW,KAAAyU,SAAA2T,UAAApoB,KAAAyU,SAAA2T,SAAA7R,eACAvW,KAAAyU,SAAA2T,SAAA7R,OAOAvW,KAAA6d,YAAA7d,KAAA6kB,QAAA,QAAA,MACA7kB,KAAA+kB,WAAA/kB,KAAA6kB,QAAAtgB,MACAvE,KAAAyoB,iBACAzoB,KAAA+kB,YAAA/kB,KAAA6kB,QAAAtgB,OACAvE,KAAA0oB,gBAGA1oB,KAAAgkB,eACA2E,aAAA3oB,KAAAgkB,eAGAhkB,KAAAgkB,cAAA4E,WAAA5oB,KAAA6oB,kCAAAZ,KAAAjoB,MAAA,OAIAA,KAAA6d,YAAA7d,KAAA6kB,QAAA,WAAA/M,IACAA,EAAAC,UAAAlW,QAAAinB,aACAhR,EAAAK,iBAEAnY,KAAAgkB,eACA2E,aAAA3oB,KAAAgkB,eAGAhkB,KAAA6oB,uCAKA7oB,KAAA6d,YAAA7d,KAAAmlB,gBAAA,QAAA,KACAnlB,KAAA6kB,QAAAtgB,IAAA,IAEAvE,KAAAgkB,eACA2E,aAAA3oB,KAAAgkB,eAGAniB,QAAA8f,iBAAA,IACA3hB,KAAA6kB,QAAAnN,QAAA,SAGA1X,KAAA0oB,gBAEA1oB,KAAA6oB,sCAIAhnB,QAAA8f,iBAAA,IACA3hB,KAAA6kB,QAAAnN,QAAA,SAIA1X,KAAAunB,WAAA,GACAvnB,KAAA6d,YAAA7d,KAAA8kB,WAAA,QAAA,iBAMA9kB,KAAAylB,aAAAnlB,SACAN,KAAA0lB,SAAA1lB,KAAAylB,aAAA7R,UAAA7M,KAAA,WAAAghB,KACA/nB,KAAA2lB,oBAAA3lB,KAAA0lB,SAAAtS,WAAAmI,SAAA,oBACAvb,KAAA4lB,oBAAA5lB,KAAA0lB,SAAAtS,WAAAmI,SAAA,oBAEAvb,KAAA0lB,SAAA7N,GAAA,eAAA7X,KAAA+oB,kBAAAd,KAAAjoB,QAMAA,KAAA6d,YAAA7d,KAAA0mB,WAAA,QAAA,kBAKA1mB,KAAA4jB,aAAA,EACA5jB,KAAAgpB,YAKAhpB,KAAAipB,sBAMAjpB,KAAAkpB,QAAArqB,MAAAsqB,SAEAnpB,KAAAopB,gBAAA,KAGAJ,UAAA,WACAhpB,KAAAqpB,eAGAC,mBAAA,WAEA,OADAtpB,KAAAsnB,aAAAhe,MAAAwW,YAAAC,SACA/f,KAAAsnB,aAAA/mB,OAGAgpB,gBAAA,WACAvpB,KAAAsnB,eACAtnB,KAAAqnB,sBAAA,EACArnB,KAAAsnB,aAAAzH,SACAhe,QAAA0f,sBAAA,KACAvhB,KAAAqnB,sBAAA,MAKAmC,mBAAA,WACA,OAAAxpB,KAAA4c,SAAAvG,KAAA,aAGAoT,eACA,GAAAzpB,KAAAikB,aAIA,OAAAjkB,KAAAikB,aAAAyF,QAGAC,QAAA,WACA,GAAA3pB,KAAAuW,OAGA,OAAA1X,MAAAgiB,MAAAxK,KAAAuT,GAAAA,EAAAtT,IAAAtW,KAAAuW,SAGAuR,YAAA,WACA,IAAA2B,EAAAzpB,KAAA6pB,kBAAA7pB,KAAAwpB,sBAGA,GAAA,IAAAC,EAAAnpB,OACA,OAAA,EAIAN,KAAAikB,eACAjkB,KAAAikB,aAAA,IAAApiB,QAAAioB,OAAA9pB,KAAA4c,SAAAvG,KAAA,OAAA,CACA0T,OAAA,EACAC,YAAA,EACAC,UAAA,EACAC,kBAAAlqB,KAAAmqB,6BAAAlC,KAAAjoB,SAIAA,KAAAukB,aAAA,GAEA,IAAA,IAAAllB,EAAA,EAAAA,EAAAoqB,EAAAnpB,OAAAjB,IACAW,KAAAoqB,WAAA9rB,EAAAmrB,EAAApqB,KAGA,OAAA,GAGA4pB,oBAAA,WACA,IACA3E,EADAF,EAAApkB,KAAAqqB,sBAiBA,OAdAjG,IACAE,EAAAtkB,KAAAsqB,eAAAlG,IAGA,IAAApkB,KAAAwkB,gBAAAzlB,MAAAulB,KACAA,EAAA,OAIAF,GAAAE,IAEAA,EAAAtkB,KAAAwkB,gBAAAjM,SAGAvY,KAAAuqB,aAAAjG,IAGAkG,eAAA,WACAxqB,KAAAikB,aAAAwG,iBAEAzqB,KAAA0qB,eAEA7rB,MAAAiK,kBAAA,OAAA9I,KAAAyU,SAAAkW,qBAAA,CACA5jB,KAAA,CACA2gB,QAAA1nB,KAAAyU,SAAAiT,QACAtT,YAAApU,KAAAoU,eAEA5K,KAAAkB,IACA1K,KAAA4qB,oBACA5qB,KAAAwpB,qBAAAtS,YAAAxM,EAAA3D,KAAArI,MACAsB,KAAA8nB,cACA9nB,KAAAipB,wBACAxf,MAAA,KACAzJ,KAAA4qB,oBACA5qB,KAAAqnB,sBACAxoB,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,gCAKAyqB,WAAA,SAAA9F,GACAtkB,KAAAikB,aAAA4G,SAAAvG,GACAtkB,KAAA8qB,iBAAAxG,GACAtkB,KAAAukB,aAAAD,EAAAvd,KAAA,QAAAud,EAEAA,EAAAvd,KAAA,sBAAA,IAAA/G,KAAA6jB,cAAAkH,gBAAAjqB,QAAAwjB,EAAAvd,KAAA,SACA/G,KAAAgrB,cAAA1G,IAIAwG,iBAAA,SAAAxG,GAEAtkB,KAAAirB,mBAAA3G,GAEA,IAAA4G,EAAAlrB,KAAAmrB,iBAAA7G,GAEA4G,EAAA5qB,QACAN,KAAA6d,YAAAyG,EAAA,WAAA,yBACAtkB,KAAA6d,YAAAqN,EAAA,QAAA,4BACA5G,EAAAvd,KAAA,oBAAA,IAEAud,EAAAvd,KAAA,oBAAA,IAIAqkB,aAAA,SAAA9G,GACAtkB,KAAAikB,aAAAoH,YAAA/G,GACAtkB,KAAAirB,mBAAA3G,UACAtkB,KAAAukB,aAAAD,EAAAvd,KAAA,SAGAkkB,mBAAA,SAAA3G,GACAA,EAAAvd,KAAA,sBACA/G,KAAAsrB,eAAAhH,EAAA,YACAtkB,KAAAsrB,eAAAtrB,KAAAmrB,iBAAA7G,GAAA,UAGAA,EAAAiH,WAAA,qBAGA/D,wBAAA,WACA,MAAA,CACAgE,eAAA,KACAT,gBAAA,KAIAV,oBAAA,WACA,GAAArqB,KAAAyU,SAAAgX,cAAA,CAKA,IAJA,IAAAC,EAAA1rB,KAAAyU,SAAAgX,cAAAvqB,MAAA,KACA2D,EAAA,GAGAxF,EAAA,EAAAA,EAAAqsB,EAAAprB,OAAAjB,IAAA,CACAwF,GAAA6mB,EAAArsB,GACA,IAAAilB,EAAAtkB,KAAAsqB,eAAAzlB,GAGA,IAAAyf,EACA,OAAAtkB,KAAA6jB,cAAA2H,eAGAxrB,KAAAgrB,cAAA1G,GACAzf,GAAA,IAMA,OAFA7E,KAAAmoB,SAAAnoB,KAAAuW,QAEAvW,KAAAyU,SAAAgX,cAGA,OAAAzrB,KAAA6jB,cAAA2H,gBAGAG,0BAAA,WACA,OAAA3rB,KAAA6jB,cAAAkH,iBAGAtC,eAAA,WAEAzoB,KAAAmlB,gBAAAtO,YAAA,UAEA7W,KAAA6lB,sBACA7lB,KAAA6lB,oBAAAvnB,EAAA,4BAAAO,MAAAc,EAAA,MAAA,SAAA,aACAK,KAAA0lB,SAAAkG,WAAA5rB,KAAA6lB,oBAAAtK,aAGAvb,KAAA6lB,oBAAAgG,UAAA7rB,KAAA2lB,qBAEA3lB,KAAA+kB,WAAA,EAEA/kB,KAAA8rB,6BACA9rB,KAAA+rB,iBAAA,UAGArD,cAAA,WAEA1oB,KAAAmlB,gBAAA7S,SAAA,UAEAtS,KAAA6lB,oBAAAmG,SAEAhsB,KAAA+kB,WAAA,EAEA/kB,KAAA8rB,8BAGAG,iBAAA,SAAAhtB,EAAAkG,GACA,iBAAAlG,EACAX,EAAAM,OAAAoB,KAAA6jB,cAAA5kB,GAEAe,KAAA6jB,cAAA5kB,GAAAkG,EAGAnF,KAAAksB,sBAGAA,mBAAA,WACAlsB,KAAAyU,SAAAgT,YACA5oB,MAAAwW,gBAAArV,KAAAyU,SAAAgT,WAAAznB,KAAA6jB,gBAIAsI,eAAA,SAAApM,EAAA9gB,EAAAgW,GAMA,YALA,IAAAjV,KAAA8jB,aAAA/D,KAEA/f,KAAA8jB,aAAA/D,GAAA,SAGA,IAAA9gB,EACAe,KAAA8jB,aAAA/D,QACA,IAAA/f,KAAA8jB,aAAA/D,GAAA9gB,GACAe,KAAA8jB,aAAA/D,GAAA9gB,QAEA,IAAAgW,EAAAA,EAAA,MAIAmX,uBAAA,SAAAntB,EAAAgW,GACA,OAAAjV,KAAAmsB,eAAAnsB,KAAA6jB,cAAA2H,eAAAvsB,EAAAgW,IAGAoX,wBAAA,SAAAptB,EAAAkG,GACA,IAAAmnB,EAAAtsB,KAAAosB,yBAEA,iBAAAntB,EACAX,EAAAM,OAAA0tB,EAAArtB,GAEAqtB,EAAArtB,GAAAkG,EAGAnF,KAAA8jB,aAAA9jB,KAAA6jB,cAAA2H,gBAAAc,EAGAztB,MAAAwW,gBAAArV,KAAA+jB,uBAAA/jB,KAAA8jB,eAGAyI,+BAAA,WACA,IAAAne,EAAApO,KAAAwsB,2BAEA,UAAApe,GACApO,KAAAqsB,wBAAA,CACAI,MAAAre,EACAzB,KAAA3M,KAAA0sB,8BAQAxD,QAAA,SAAA3C,GACA,GAAA,UAAAvmB,KAAAyU,SAAAiT,QAAA,CAIAnB,EAAA1V,KAAA8b,IAAApG,EAAA,GACAvmB,KAAAumB,KAAAA,EAGA,IAAAlhB,EAAAkB,SAAAC,SAAAC,KACA9H,QAAA,QAAA,IACAA,QAAA,IAAAwF,OAAA,IAAAtF,MAAA+tB,YAAAjuB,QAAA,sBAAA,QAAA,SAAA,IACAA,QAAA,OAAA,IAEA,IAAAqB,KAAAumB,OACA,MAAA1nB,MAAA+tB,YAAA,KACAvnB,GAAA,KAEAA,GAAAxG,MAAA+tB,YAAA5sB,KAAAumB,MAGAsG,QAAAC,aAAA,GAAA,GAAAznB,KAGA0nB,YAAA,WACA/sB,KAAAwmB,UAAA,KACAxmB,KAAAymB,aAAA,MAOAuG,cAAA,WACA,IAAA5E,EAAA,CACA7R,OAAAvW,KAAAuW,OACAhR,OAAAvF,KAAAglB,WACAhjB,OAAAhC,KAAAyU,SAAAwY,WAAAjtB,KAAAumB,KAAA,GACA2G,MAAAltB,KAAAyU,SAAAwY,WAKAjtB,KAAAyU,SAAA0Y,gBACAntB,KAAAklB,QAAA,UAAAllB,KAAAyU,SAAAiT,UAAA1nB,KAAAoL,UAEAgd,EAAAlD,OAAAllB,KAAAklB,QAAA,KACAkD,EAAAgF,iBAAA,EACAptB,KAAAklB,SACAkD,EAAAiF,SAAA,IAGArtB,KAAAilB,UACAmD,EAAAnD,SAAA,GAGApjB,QAAA0Y,QAAAva,KAAAskB,QAAA,0BACA8D,EAAAhd,OAAApL,KAAAoL,QAGA9M,EAAAM,OAAAwpB,EAAApoB,KAAAyU,SAAA2T,UAEA,IAAAtoB,EAAA,CACA4nB,QAAA1nB,KAAAyU,SAAAiT,QACAtT,YAAApU,KAAAoU,YACA2L,OAAA/f,KAAA6jB,cAAA2H,eACApD,SAAAA,EACAkF,mBAAAttB,KAAAyU,SAAA6Y,mBACAhB,UAAAhuB,EAAAM,OAAA,GAAAoB,KAAAosB,0BACAmB,UAAAvtB,KAAAwtB,mBAAA,EAAA,GAuBA,OAnBA1tB,EAAAwsB,UAAAG,MAAAzsB,KAAAwsB,2BACA1sB,EAAAwsB,UAAA3f,KAAA3M,KAAA0sB,2BAEA,cAAA1sB,KAAAwsB,kCACA,IAAAxsB,KAAA6jB,cAAA4J,sBACAztB,KAAA6jB,cAAA4J,oBAAA,IAEA3tB,EAAA2tB,oBAAAztB,KAAA6jB,cAAA4J,qBAGAztB,KAAAunB,WAAAvnB,KAAAokB,YAAApkB,KAAAunB,WAAAvnB,KAAAokB,WAAAsJ,aACA5tB,EAAA6tB,UAAA3tB,KAAAunB,WAAAvnB,KAAAokB,WAAAsJ,YAIA1tB,KAAA0X,QAAA,qBAAA,CACA5X,OAAAA,IAGAA,GAGAspB,eAAA,SAAAwE,GAEA,GAAA5tB,KAAA4jB,YAAA,CAKA5jB,KAAAupB,kBAEAvpB,KAAA0qB,eAGA1qB,KAAAmmB,OACAnmB,KAAAmmB,KAAA1H,iBACAze,KAAAmmB,OAGA,IAAAyH,IACA5tB,KAAAkpB,QAAA,GACAlpB,KAAA+sB,eAGA,IAAAjtB,EAAAE,KAAAgtB,gBAEAnuB,MAAAiK,kBAAA,OAAA9I,KAAAyU,SAAAoZ,qBAAA,CACA9mB,KAAAjH,EACA8J,YAAA5J,KAAAspB,uBACA9f,KAAAkB,IACA1K,KAAA4qB,qBACA,UAAA5qB,KAAAyU,SAAAiT,QAAA7lB,QAAAisB,iBAAA9tB,KAAAkkB,OAAAtC,UAAA,GACA5hB,KAAA+tB,YAAAjuB,EAAA4K,EAAA3D,QACA0C,MAAAkB,IACA3K,KAAA4qB,oBACA5qB,KAAAqnB,sBACAxoB,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,iCAKAkpB,kCAAA,WACA7oB,KAAAglB,cAAAhlB,KAAAglB,WAAAhlB,KAAA+kB,UAAA/kB,KAAA6kB,QAAAtgB,MAAA,OACAvE,KAAAopB,kBAIA4E,mBAAA,WAEAhuB,KAAAgnB,wBAMAhnB,KAAAqc,SAAAyF,IAAA,aAAA9hB,KAAAqc,SAAA4R,UAGAjuB,KAAAmnB,uBAAAnnB,KAAAqc,SAAAd,WACAvb,KAAAmnB,uBAAA6E,SAEAhsB,KAAAonB,WAGApnB,KAAAonB,WAAA5Y,SAAAxO,KAAAqc,UAFArc,KAAAkuB,kBAKAluB,KAAAgnB,uBAAA,IAGAmH,aAAA,SAAArnB,EAAAsnB,GAEA,IAAAC,EAAAruB,KAAAmmB,KAAAmI,wBAGA,GAAA,IAFAD,EAAA/tB,SAMA,iBAAAwG,IACAA,EAAA9G,KAAAuuB,YAAAznB,KAGAA,EAAAwQ,SAAAA,QAAAxQ,EAAAwQ,UAAA,CAKAtX,KAAAupB,kBAGA,IAAAiF,EAAAxuB,KAAAgtB,gBAEAoB,EAAAA,EAAAvvB,MAAAgP,gBAAAugB,GAAA,GACA,IAAAtuB,EAAAxB,EAAAM,OAAA4vB,EAAA1nB,EAAA2N,UAAA,GAAA2Z,EAAA,CACAK,cAAA3nB,EAAAxF,KACAotB,WAAAL,IAIAruB,KAAA0qB,eACA1qB,KAAAomB,oBAAAiI,EAEAvnB,EAAAmF,UACApN,MAAA8H,gBACA7G,EAAAjB,MAAA8H,eAAA9H,MAAA+H,gBAEA/H,MAAAiM,gBAAA,OAAAjM,MAAAuH,aAAApG,KAAAyU,SAAAka,qBAAA7uB,GAAA0J,KAAAkB,IACA1K,KAAA4qB,sBACAnhB,MAAAkB,IACA3K,KAAA4qB,uBAGA/rB,MAAAiK,kBAAA,OAAA9I,KAAAyU,SAAAka,oBAAA,CACA5nB,KAAAjH,EACA8J,YAAA5J,KAAAspB,uBACA9f,KAAAkB,IACA1K,KAAA4qB,oBACAlgB,EAAA3D,KAAAW,SAEA1H,KAAA+sB,cACA/sB,KAAA+tB,YAAAS,EAAA9jB,EAAA3D,WAEA,IAAA2D,EAAA3D,KAAA6nB,aACA5uB,KAAA6uB,mBAAAnkB,EAAA3D,KAAA6nB,aAGAlkB,EAAA3D,KAAAlH,SACAhB,MAAAkJ,GAAA+a,cAAApY,EAAA3D,KAAAlH,SAGAG,KAAA8uB,YAAAhoB,EAAAhH,IAEAjB,MAAAkJ,GAAAC,aAAA0C,EAAA3D,KAAAlH,WAEA4J,MAAA,KACAzJ,KAAA4qB,wBAKA2D,YAAA,SAAAQ,GACA,IAAA,IAAA1vB,EAAA,EAAAA,EAAAW,KAAA2mB,QAAArmB,OAAAjB,IACA,GAAAW,KAAA2mB,QAAAtnB,GAAAiC,OAAAytB,EACA,OAAA/uB,KAAA2mB,QAAAtnB,GAGA,KAAA,2BAAA0vB,GAGAD,YAAA,SAAAhoB,EAAAhH,GAEAjB,MAAAkJ,GAAAkb,WAEAjjB,KAAAgvB,cAAAloB,EAAAhH,IAGAmvB,mBAAA,WAEAjvB,KAAAgnB,wBAIAhnB,KAAAmnB,uBAAA3Y,SAAAxO,KAAAqc,UACArc,KAAAonB,WAAA4E,SAIAhsB,KAAAqc,SAAAyF,IAAA,aAAA,IAEA9hB,KAAAgnB,uBAAA,IAGAkI,qBAAA,WAEA,GAAAlvB,KAAA2mB,QAAA,CACA,IAAAwI,EAAAnvB,KAAAmmB,KAAAiJ,sBAAA9uB,OAEA,IAAA6uB,GACAA,IAAAnvB,KAAAmmB,KAAAkJ,qBAAA/uB,QACAN,KAAA+mB,mBAAAlQ,YAAA,iBACA7W,KAAA+mB,mBAAAzU,SAAA,WACAtS,KAAA8mB,oBAAA1Y,KAAA,eAAA,UAEApO,KAAA+mB,mBAAAzU,SAAA,iBACAtS,KAAA+mB,mBAAAlQ,YAAA,WACA7W,KAAA8mB,oBAAA1Y,KAAA,eAAA,UAGApO,KAAAguB,uBAEAhuB,KAAA+mB,mBAAAlQ,YAAA,yBACA7W,KAAA8mB,oBAAA1Y,KAAA,eAAA,SACApO,KAAAivB,wBAKAG,oBAAA,WACA,OAAApvB,KAAAmmB,KAAAnmB,KAAAmmB,KAAAiJ,sBAAA9wB,KAGAgwB,sBAAA,WACA,OAAAtuB,KAAAmmB,KAAAnmB,KAAAmmB,KAAAmI,wBAAA,IAGAgB,UAAA,SAAAlkB,GAEA,IAAA2V,EAAA/gB,KAAAslB,WAAA4C,SAAAtM,OAAA,kBAAAxQ,EAAA,YAEA2V,EAAAzgB,QACAN,KAAAslB,WAAAiK,aAAAxO,EAAA,KAIAyO,uBAAA,SAAAphB,GACA,OAAApO,KAAA2lB,oBAAAtP,KAAA,gBAAAjI,EAAA,aAGAoe,yBAAA,WACA,OAAAxsB,KAAA2lB,oBAAAtP,KAAA,eAAAtP,KAAA,SAGAglB,iBAAA,SAAA3d,GAEA,IAAA2S,EAAA/gB,KAAAwvB,uBAAAphB,GAEA,GAAA2S,EAAAzgB,OAAA,CACAN,KAAA2lB,oBAAAtP,KAAA,SAAAQ,YAAA,OACAkK,EAAAzO,SAAA,OAEA,IAAAkE,EAAAuK,EAAAzd,OACAtD,KAAAylB,aAAArX,KAAA,QAAAvP,MAAAc,EAAA,MAAA,sBAAA,CAAA8vB,UAAAjZ,KACAxW,KAAAylB,aAAAniB,KAAAkT,GAEA,UAAApI,EACApO,KAAA0vB,iBAAA,QAEA1vB,KAAA0vB,iBAAA3O,EAAAha,KAAA,gBAAA,OAGA,cAAAqH,EACApO,KAAA4lB,oBAAAvP,KAAA,KAAA/D,SAAA,YAEAtS,KAAA4lB,oBAAAvP,KAAA,KAAAQ,YAAA,cAKA8Y,uBAAA,SAAAC,GACA,OAAA5vB,KAAA4lB,oBAAAvP,KAAA,cAAAuZ,EAAA,YAGAlD,yBAAA,WACA,OAAA1sB,KAAA4lB,oBAAAvP,KAAA,eAAAtP,KAAA,QAGA8oB,oBAAA,WACA,OAAA7vB,KAAAosB,uBAAA,SAAA,SAGAsD,iBAAA,SAAAE,GACA,SAAAA,IACAA,EAAA,OAGA5vB,KAAAylB,aAAArX,KAAA,YAAAwhB,GACA5vB,KAAA4lB,oBAAAvP,KAAA,SAAAQ,YAAA,OACA7W,KAAA2vB,uBAAAC,GAAAtd,SAAA,QAGAgY,eAAA,SAAArrB,GACA,YAAA,IAAAe,KAAAukB,aAAAtlB,GACA,KAGAe,KAAAukB,aAAAtlB,IAGAsrB,aAAA,SAAAjG,GACA,IAAAA,IAAAA,EAAAhkB,OACA,OAAA,EAGA,GAAAN,KAAAskB,SAAAtkB,KAAAskB,QAAA,IAAAtkB,KAAAskB,QAAA,KAAAA,EAAA,IAAAA,EAAAvd,KAAA,SAAA/G,KAAAokB,UACA,OAAA,EAIApkB,KAAAivB,qBAEAjvB,KAAAskB,QAAAA,EACAtkB,KAAAokB,UAAAE,EAAAvd,KAAA,OACA/G,KAAAisB,iBAAA,iBAAAjsB,KAAAokB,WACApkB,KAAAikB,aAAA6L,WAAAxL,GAEAzlB,MAAAkJ,GAAAgoB,yBAEA/vB,KAAA+kB,YAEA/kB,KAAAglB,WAAA,KACAhlB,KAAA6kB,QAAAtgB,IAAA,IACAvE,KAAA0oB,iBAOA1oB,KAAA2lB,oBAAApK,SAAA,kBAAAI,SAGA,IACAqU,EADAhwB,KAAAskB,QAAAxJ,QAAA,iBAAAS,SAAA,KACAxU,KAAA,gBACA,GAAAipB,EACA,IAAA,IAAA3wB,EAAA,EAAAA,EAAA2wB,EAAA1vB,OAAAjB,IAAA,CACA,IAAA0hB,EAAAziB,EAAA,QAAA,CACA2xB,cAAA,IAEApd,OACAvU,EAAA,OAAA,CACAgF,KAAA0sB,EAAA3wB,GAAA,GACA6wB,YAAAF,EAAA3wB,GAAA,MAGAmP,SAAAxO,KAAA2lB,qBACA3lB,KAAA0lB,SAAAkG,WAAA7K,EAAAxF,YAqBA,GAhBA1Z,QAAA0Y,QAAAva,KAAAskB,QAAA,uBACAtkB,KAAA8lB,0BACA9lB,KAAA8lB,wBAAAxnB,EAAA,gCAAAO,MAAAc,EAAA,MAAA,aAAA,aACAK,KAAA0lB,SAAAkG,WAAA5rB,KAAA8lB,wBAAAvK,aAGAvb,KAAA8lB,wBAAA+F,UAAA7rB,KAAA2lB,sBACA3lB,KAAA8lB,yBACA9lB,KAAA8lB,wBAAAjP,YAAA,OAAAmV,SAGAhsB,KAAAmwB,gCAKAnwB,KAAAolB,eAAA9kB,SACAuB,QAAA0Y,QAAAva,KAAAskB,QAAA,wBACAtkB,KAAAqlB,qBAAA/S,SAAA,UAEAtS,KAAAqlB,qBAAAxO,YAAA,UAGA7W,KAAAilB,SAAA,CAEA,IAAAmL,EAAApwB,KAAAslB,WAAA4C,SAAA3P,QACAvY,KAAAsvB,UAAAc,EAAArpB,KAAA,WAmBA,GAXA/G,KAAAgmB,uBACAhmB,KAAAgmB,sBAAArK,SAGA3b,KAAAimB,aAAA,GACAjmB,KAAAkmB,SAAA,KAGAlmB,KAAAqkB,gBAAArkB,KAAAqwB,wBAGArwB,KAAAqkB,gBAAA/jB,OAAA,EAAA,CACAN,KAAAgmB,sBAAA1nB,EAAA,2BAAAkQ,SAAAxO,KAAAqc,UAEA,IAAA,IAAAhd,EAAA,EAAAA,EAAAW,KAAAqkB,gBAAA/jB,OAAAjB,IAAA,CACA,IAAAixB,EAAAtwB,KAAAqkB,gBAAAhlB,GAEAkxB,EAAAjyB,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,YAAA,IAAA8U,EAAAE,UAAA,IAAAF,EAAAE,UAAA,IACAC,YAAAH,EAAA3W,KACAgE,YAAA2S,EAAAI,KACAhV,aAAA4U,EAAA7U,MACAA,MAAA6U,EAAA7U,QACAjN,SAAAxO,KAAAgmB,uBAEAhmB,KAAAimB,aAAAqK,EAAA3W,MAAA4W,EAEAvwB,KAAA6d,YAAA0S,EAAA,QAAA,CAAA5W,KAAA2W,EAAA3W,OAAA,SAAA7B,GACA9X,KAAA2wB,eAAA7Y,EAAA/Q,KAAA4S,MACA3Z,KAAAopB,qBAMA,IAAAlD,EAAAlmB,KAAA6vB,sBAsBA,OApBA3J,GAAAlmB,KAAA4wB,uBAAA1K,KAGAA,EADAlmB,KAAAkmB,UAAAlmB,KAAA4wB,uBAAA5wB,KAAAkmB,UACAlmB,KAAAkmB,SAIAlmB,KAAAqkB,gBAAA,GAAA1K,MAIA3Z,KAAA2wB,eAAAzK,GAKAlmB,KAAA6wB,kBAEA7wB,KAAA8wB,kBAEA,GAGAC,kBAAA,SAAA9xB,GACA,IAAAqlB,EAAAtkB,KAAAsqB,eAAArrB,GAEA,QAAAqlB,GACAtkB,KAAAuqB,aAAAjG,IAMA6L,8BAAA,WACA,IAAAa,EAAAhxB,KAAAosB,uBAAA,SACA6E,EAAAjxB,KAAAosB,uBAAA,QAEA4E,GAAAC,IAEAD,EAAAhxB,KAAAkxB,iBAEArvB,QAAA3C,QAAA8xB,KACAC,EAAAD,EAAA,GACAA,EAAAA,EAAA,KAIA,QAAAC,GAAA,SAAAA,IACAA,EAAA,OAGAjxB,KAAA+rB,iBAAAiF,GACAhxB,KAAA0vB,iBAAAuB,IAGAC,eAAA,WAEA,OAAAlxB,KAAAskB,SAAAziB,QAAA0Y,QAAAva,KAAAskB,QAAA,qBACAtkB,KAAAskB,QAAAlW,KAAA,qBAAAlN,MAAA,KAGA,CAAAlB,KAAA2lB,oBAAAtP,KAAA,WAAAtP,KAAA,QAAA,QAIAspB,sBAAA,WACA,IAAAc,EAAA,CACA,CAAAxX,KAAA,QAAA8B,MAAA5c,MAAAc,EAAA,MAAA,sBAAA+wB,KAAA,SAOA,OAJA1wB,KAAAskB,SAAAziB,QAAA0Y,QAAAva,KAAAskB,QAAA,oBACA6M,EAAAzxB,KAAA,CAAAia,KAAA,SAAA8B,MAAA5c,MAAAc,EAAA,MAAA,yBAAA+wB,KAAA,SAGAS,GAGAP,uBAAA,SAAA1K,GACA,IAAA,IAAA7mB,EAAA,EAAAA,EAAAW,KAAAqkB,gBAAA/jB,OAAAjB,IACA,GAAAW,KAAAqkB,gBAAAhlB,GAAAsa,OAAAuM,EACA,OAAA,EAIA,OAAA,GAGAyK,eAAA,SAAAzK,EAAAkL,GAEAA,GAAApxB,KAAA4wB,uBAAA1K,KACAA,EAAAlmB,KAAAqkB,gBAAA,GAAA1K,MAIAuM,IAAAlmB,KAAAkmB,WAKAlmB,KAAAkmB,eAAA,IAAAlmB,KAAAimB,aAAAjmB,KAAAkmB,WACAlmB,KAAAimB,aAAAjmB,KAAAkmB,UAAArP,YAAA,UAGA7W,KAAAkmB,SAAAA,EACAlmB,KAAAqsB,wBAAA,OAAArsB,KAAAkmB,eAEA,IAAAlmB,KAAAimB,aAAAjmB,KAAAkmB,WACAlmB,KAAAimB,aAAAjmB,KAAAkmB,UAAA5T,SAAA,YAIA+e,WAAA,SAAA1X,EAAAlF,GAEA,OAAA,IADAzU,KAAAsxB,aAAA3X,GACA,CAAA3Z,KAAAA,KAAA+lB,UAAAtR,IAGA6c,aAAA,SAAA3X,GACA,OAAAA,GACA,IAAA,QACA,OAAA9a,MAAA0yB,sBACA,IAAA,SACA,OAAA1yB,MAAA2yB,uBACA,QACA,KAAA,cAAA7X,sBAIA8X,0BAAA,SAAAnb,IAGA,IAFAhY,EAAA6O,QAAAmJ,EAAAtW,KAAAyU,SAAA6Y,qBAGAttB,KAAAyU,SAAA6Y,mBAAA5tB,KAAA4W,IAIAob,wBAAA,SAAApb,GACA,IAAAvX,EAAAT,EAAA6O,QAAAmJ,EAAAtW,KAAAyU,SAAA6Y,qBAEA,IAAAvuB,GACAiB,KAAAyU,SAAA6Y,mBAAA9d,OAAAzQ,EAAA,IAIA4yB,eAAA,SAAA5L,GACAA,EAAAlP,YAAA,YAAA+a,QAAA,aAAA/a,YAAA,YAEA,IAAA,IAAAxX,EAAA,EAAAA,EAAA0mB,EAAAzlB,OAAAjB,IAAA,CACA,IAAAiX,EAAAhY,EAAAynB,EAAA1mB,IAAA0H,KAAA,MACA/G,KAAA0xB,wBAAApb,GAGAtW,KAAA6xB,iBAAA9L,IAGA+L,gBAAA,SAAA/L,GACAA,EAAAlP,YAAA,OAAAvE,SAAA,YAEA,IAAA,IAAAjT,EAAA,EAAAA,EAAA0mB,EAAAzlB,OAAAjB,IAAA,CACA,IAAAiX,EAAAhY,EAAAynB,EAAA1mB,IAAA0H,KAAA,MACA/G,KAAAyxB,0BAAAnb,GAGAtW,KAAA+xB,kBAAAhM,IAGAiM,eAAA,SAAA1b,GACA,OAAAtW,KAAAmmB,KAAA6L,eAAA1b,IAGA2b,mBAAA,SAAAC,GACAA,EAAA5zB,EAAA6zB,UAAAD,GAEA,IAAA,IAAA7yB,EAAA,EAAAA,EAAA6yB,EAAA5xB,OAAAjB,IAAA,CACA,IAAAiX,EAAA4b,EAAA7yB,GACA8W,EAAAnW,KAAAgyB,eAAA1b,GAEAH,GAAAA,EAAA7V,OACAN,KAAA2xB,eAAAxb,GAEAnW,KAAA0xB,wBAAApb,KAKA8b,oBAAA,SAAAF,GACAA,EAAA5zB,EAAA6zB,UAAAD,GAEA,IAAA,IAAA7yB,EAAA,EAAAA,EAAA6yB,EAAA5xB,OAAAjB,IAAA,CACA,IAAAiX,EAAA4b,EAAA7yB,GACA8W,EAAAnW,KAAAgyB,eAAA1b,GAEAH,GAAAA,EAAA7V,OACAN,KAAA8xB,gBAAA3b,GAEAnW,KAAAyxB,0BAAAnb,KAKA+b,yBAAA,SAAA/b,GACA,OAAAtW,KAAAomB,sBACApmB,KAAAomB,oBAAA,IAGApmB,KAAAomB,oBAAA1mB,KAAA4W,IAGAgc,UAAA,SAAAC,GACAvyB,KAAAwyB,qBAAA3f,OAAA0f,IAGAE,iBAAA,WAKA,OAJA,OAAAzyB,KAAAsd,iBACAtd,KAAAsd,eAAAtd,KAAA4c,SAAAtc,SAAAN,KAAA4c,SAAAxG,SAAA,WAGApW,KAAAsd,gBAGAkV,mBAAA,WAEA,GAAAxyB,KAAAyU,SAAAie,gBACA,OAAAp0B,EAAA0B,KAAAyU,SAAAie,iBAEA,IAAAtf,EAAA9U,EAAA,kBAMA,OAJA8U,EAAA9S,SACA8S,EAAA9U,EAAA,6BAAAkQ,SAAAlQ,EAAA,aAGA8U,GAIAsX,aAAA,WACA1qB,KAAA+lB,UAAAzT,SAAA,QACAtS,KAAAmkB,aAAA,GAGAyG,kBAAA,WACA5qB,KAAA+lB,UAAAlP,YAAA,QACA7W,KAAAmkB,aAAA,GAGAwO,4BAAA,WAEA,IAAAC,EAAA,IAAA/zB,MAAAg0B,sBAAA7yB,KAAA,CACA8yB,OAAA,WACAF,EAAAnU,aAIA,OAAAmU,GAGAzZ,QAAA,WACAnZ,KAAAikB,cACAjkB,KAAAikB,aAAA9K,UAGAnZ,KAAAmmB,MACAnmB,KAAAmmB,KAAAhN,UAGAnZ,KAAAqjB,QAGA/J,OAAA,WACAtZ,KAAAikB,cACAjkB,KAAAikB,aAAA3K,SAGAtZ,KAAAmmB,MACAnmB,KAAAmmB,KAAA7M,SAGAtZ,KAAAqjB,QAGAgG,YAAA,WACArpB,KAAAyU,SAAA4U,cACArpB,KAAA0X,QAAA,cAGAoZ,eAAA,WACA9wB,KAAAyU,SAAAqc,eAAA9wB,KAAAokB,WACApkB,KAAA0X,QAAA,eAAA,CAAA0M,UAAApkB,KAAAokB,aAGA2O,aAAA,WACA/yB,KAAAyU,SAAAse,aAAA/yB,KAAAuW,QACAvW,KAAA0X,QAAA,aAAA,CAAAnB,OAAAvW,KAAAuW,UAGAyc,iBAAA,WACAhzB,KAAAyU,SAAAue,mBACAhzB,KAAA0X,QAAA,mBAGAwS,kBAAA,WACAlqB,KAAAyU,SAAAyV,oBACAlqB,KAAA0X,QAAA,oBAGAma,iBAAA,SAAA9L,GACA/lB,KAAAyU,SAAAod,iBAAA9L,GACA/lB,KAAA0X,QAAA,iBAAA,CAAAN,SAAA2O,KAGAgM,kBAAA,SAAAhM,GACA/lB,KAAAyU,SAAAsd,kBAAAhM,GACA/lB,KAAA0X,QAAA,kBAAA,CAAAN,SAAA2O,KAGAiJ,cAAA,SAAAloB,EAAAhH,GACAE,KAAAyU,SAAAua,cAAAloB,EAAAhH,GACAE,KAAA0X,QAAA,cAAA,CAAA5Q,OAAAA,EAAAhH,OAAAA,KAMAqqB,6BAAA,WAGAnqB,KAAAikB,aAAAkL,cAKAnvB,KAAAuqB,aAAAvqB,KAAAikB,aAAAgP,iBACAjzB,KAAAopB,iBALAppB,KAAAikB,aAAA6L,WAAA9vB,KAAAwkB,gBAAAjM,UASA2a,2BAAA,SAAApb,GACAA,EAAAK,iBAEA,IAAAhK,EAAA7P,EAAAwZ,EAAA8C,eAGAzM,EAAAiI,SAAA,aAAAjI,EAAApH,KAAA,mBAIA/G,KAAAmuB,aAAAhgB,EAAApH,KAAA,UAAAlF,QAAAsxB,YAAAhlB,KAGAilB,+BAAA,SAAAtb,GACA,IAAAiJ,EAAAziB,EAAAwZ,EAAAub,QAGAtS,EAAA3K,SAAA,aAAA2K,EAAAha,KAAA,mBAIA/G,KAAAmuB,aAAApN,EAAAha,KAAA,YAGAihB,oBAAA,SAAAlQ,GACA9X,KAAAslB,WAAA4C,SAAArR,YAAA,OACA,IAAAkK,EAAAziB,EAAAwZ,EAAAwb,gBAAAhhB,SAAA,OACAtS,KAAAolB,eAAA1mB,KAAAqiB,EAAAriB,QAEAsB,KAAAilB,SAAA,EACAjlB,KAAAklB,QAAA,EACAllB,KAAAoL,OAAA,KAEAvJ,QAAA0Y,QAAAwG,EAAA,gBACA/gB,KAAAilB,SAAA,EACApjB,QAAA0Y,QAAAwG,EAAA,eACA/gB,KAAAklB,QAAA,EAEAllB,KAAAoL,OAAA2V,EAAAha,KAAA,UAGA/G,KAAA8rB,6BACA9rB,KAAAopB,kBAGAf,kBAAA,SAAAvQ,GACA9X,KAAAwlB,SAAA0C,SAAArR,YAAA,OACA,IAAAkK,EAAAziB,EAAAwZ,EAAAwb,gBAAAhhB,SAAA,OACAtS,KAAAulB,aAAA7mB,KAAAqiB,EAAAriB,QACAsB,KAAAmoB,SAAApH,EAAAha,KAAA,YACA/G,KAAA+yB,gBAGA5K,SAAA,SAAA5R,GACA,IAAAgd,EAAA,OAAAvzB,KAAAuW,OAKA,IAAAid,EACAlP,EALAtkB,KAAAuW,OAAAA,EACAvW,KAAAwkB,gBAAAlmB,IASA,IAFA,IAAAm1B,IAAAF,GAAAvzB,KAAAskB,SAAAtkB,KAAAskB,QAAAhkB,QAEAjB,EAAA,EAAAA,EAAAW,KAAAypB,SAAAnpB,OAAAjB,SAEA,KADAilB,EAAAtkB,KAAAypB,SAAA9W,GAAAtT,IACA0H,KAAA,WAAA,IAAAud,EAAAvd,KAAA,SAAAgL,WAAA7Q,MAAA,KAAAJ,QAAAyV,EAAAxE,aACAuS,EAAAsD,SAAA/Q,YAAA,UACA7W,KAAAwkB,gBAAAxkB,KAAAwkB,gBAAAtG,IAAAoG,GACAkP,IACAA,EAAAlP,KAGAA,EAAAsD,SAAAtV,SAAA,UAGAtS,KAAAskB,SAAAtkB,KAAAskB,QAAAoP,IAAA,IAAApP,EAAAoP,IAAA,KACAD,GAAA,IAKAzzB,KAAA4jB,aAAA6P,GACAzzB,KAAAuqB,aAAAiJ,GAIA,IACAG,EADAC,EAAA5zB,KAAAwpB,qBAAAjO,SAAA,YAGA,IAAAlc,EAAA,EAAAA,EAAAu0B,EAAAtzB,OAAAjB,IAEA,KADAs0B,EAAAC,EAAAjhB,GAAAtT,IACAw0B,UAAA,WAAA,iBAAAvzB,OACAqzB,EAAA9c,YAAA,UAEA8c,EAAArhB,SAAA,UAIAtS,KAAA4jB,cACA,UAAA5jB,KAAAyU,SAAAiT,SAEA7oB,MAAAkJ,GAAA+rB,UAAAvd,GAIAvW,KAAAopB,mBAIAL,kBAAA,SAAAjR,GACA,IAAAiJ,EAAAziB,EAAAwZ,EAAAwb,gBAEAvS,EAAA3K,SAAA,aAAA2K,EAAA3K,SAAA,SAKA2K,EAAA6G,SAAAA,SAAAmM,GAAA/zB,KAAA2lB,qBACA3lB,KAAA+rB,iBAAAhL,EAAAha,KAAA,SAEA/G,KAAA0vB,iBAAA3O,EAAAha,KAAA,QAGA/G,KAAAusB,iCACAvsB,KAAAopB,mBAGA4K,uBAAA,WACAh0B,KAAAkvB,uBACAlvB,KAAAkqB,qBAGA+J,sBAAA,SAAAnc,GACA9X,KAAAk0B,cAAA51B,EAAAwZ,EAAA8C,gBACA9C,EAAAM,mBAGA+b,yBAAA,SAAArc,GACA9X,KAAAk0B,cAAA51B,EAAAwZ,EAAA8C,eAAAwZ,KAAA,MACAtc,EAAAM,mBAGA0T,2BAAA,WACA,IAAA/K,EAAA/gB,KAAAwvB,uBAAA,aAEA,GAAAzO,EAAAzgB,OAIA,GAAAN,KAAAilB,SAAAjlB,KAAAklB,QAAAllB,KAAA+kB,WAEA,GADAhE,EAAAzO,SAAA,YACA,cAAAtS,KAAAwsB,2BAAA,CAEA,IAAA4D,EAAApwB,KAAA2lB,oBAAAtP,KAAA,0BACArW,KAAA+rB,iBAAAqE,EAAArpB,KAAA,SACA/G,KAAA0vB,iBAAA,aAGA3O,EAAAlK,YAAA,YACA7W,KAAAmwB,iCAOAtG,kBAAA,SAAAwK,GACA,OAAAA,EAAA9Y,SAAA,MAAAA,SAAA,MAGA+Y,iBAAA,SAAAhQ,GACA,IAAA+P,EAAA/P,EAAAiQ,SAAA,MACA,OAAAv0B,KAAA6pB,kBAAAwK,IAGAlJ,iBAAA,SAAA7G,GACA,OAAAA,EAAAiQ,SAAA,YAGAL,cAAA,SAAA5P,GACAA,EAAAsD,OAAA,MAAAxR,SAAA,YACApW,KAAAw0B,gBAAAlQ,GAEAtkB,KAAAgrB,cAAA1G,IAIA0G,cAAA,SAAA1G,GACAA,EAAAtJ,KAAA,WAAA5M,KAAA,CACAqmB,gBAAA,OACA/Y,aAAA7c,MAAAc,EAAA,MAAA,yBAEA2kB,EAAAsD,OAAA,MAAAtV,SAAA,YAEA,IAAAoiB,EAAA10B,KAAAs0B,iBAAAhQ,GACA,IAAA,IAAAjlB,EAAA,EAAAA,EAAAq1B,EAAAp0B,OAAAjB,IACAW,KAAAoqB,WAAA9rB,EAAAo2B,EAAAr1B,KACAW,KAAAwkB,kBACAxkB,KAAAwkB,gBAAAxkB,KAAAwkB,gBAAAtG,IAAAwW,EAAAr1B,KAIA,IAAAJ,EAAAqlB,EAAAvd,KAAA,QACA,IAAA/G,KAAA6jB,cAAAkH,gBAAAjqB,QAAA7B,KACAe,KAAA6jB,cAAAkH,gBAAArrB,KAAAT,GACAe,KAAAksB,uBAIAsI,gBAAA,SAAAlQ,GACAA,EAAAtJ,KAAA,WAAA5M,KAAA,CACAqmB,gBAAA,QACA/Y,aAAA7c,MAAAc,EAAA,MAAA,yBAEA2kB,EAAAsD,OAAA,MAAA/Q,YAAA,YAEA,IAAA6d,EAAA10B,KAAAs0B,iBAAAhQ,GACA,IAAA,IAAAjlB,EAAA,EAAAA,EAAAq1B,EAAAp0B,OAAAjB,IACAW,KAAAorB,aAAA9sB,EAAAo2B,EAAAr1B,KACAW,KAAAwkB,gBAAAxkB,KAAAwkB,gBAAAmQ,IAAAD,EAAAr1B,IAGA,IAAAA,EAAAW,KAAA6jB,cAAAkH,gBAAAjqB,QAAAwjB,EAAAvd,KAAA,SACA,IAAA1H,IACAW,KAAA6jB,cAAAkH,gBAAAvb,OAAAnQ,EAAA,GACAW,KAAAksB,uBAOAsB,iBAAA,WACA,MAAA,UAAAxtB,KAAAyU,SAAAiT,SAAA,cAAA1nB,KAAAwsB,4BAGAuB,YAAA,SAAAjuB,EAAA4K,GAKA1K,KAAA2mB,UACA3mB,KAAAivB,qBACAjvB,KAAA2mB,QAAA3mB,KAAA4mB,gBAAA5mB,KAAA6mB,gBAAA7mB,KAAAonB,WAAA,MAMApnB,KAAAsmB,gBAAAhmB,SACAN,KAAAqmB,cAAAxP,YAAA,UACA7W,KAAAsmB,gBAAA5nB,KAAA,IAEAsB,KAAA40B,gBACAprB,KAAAqrB,IACA70B,KAAAqmB,cAAA/T,SAAA,UAEA,IAAAwiB,EAAAj2B,MAAAgkB,iBAAA7iB,KAAAoU,aAAAvV,MAAAgkB,iBAAA7iB,KAAAoU,aAAA,GAAA,UACA2gB,EAAAl2B,MAAAgkB,iBAAA7iB,KAAAoU,aAAAvV,MAAAgkB,iBAAA7iB,KAAAoU,aAAA,GAAA,WAEA,GAAApU,KAAAwtB,mBAOA,CACA,IAAAjV,EAAA1H,KAAAmkB,IAAAh1B,KAAAyU,SAAAwY,WAAAjtB,KAAAumB,KAAA,GAAA,EAAAsO,GACAxc,EAAAxH,KAAAmkB,IAAAzc,GAAAvY,KAAAyU,SAAAwY,UAAA,GAAA4H,GACAI,EAAAp2B,MAAAc,EAAA,MAAA,+FAAA,CACA4Y,MAAAA,EACAF,KAAAA,EACAwc,MAAAA,EACAK,KAAAJ,EACAK,MAAAJ,IAGAK,EAAA92B,EAAA,kCAAAkQ,SAAAxO,KAAAsmB,iBACA+O,EAAAxkB,KAAA8b,IAAA9b,KAAAykB,KAAAT,EAAA70B,KAAAyU,SAAAwY,WAAA,GAEAsI,EAAAj3B,EAAA,SAAA,CACAkd,MAAA,uBAAAxb,KAAAumB,KAAA,EAAA,GAAA,aACA9K,MAAA5c,MAAAc,EAAA,MAAA,mBACA6O,SAAA4mB,GACAI,EAAAl3B,EAAA,SAAA,CACAkd,MAAA,uBAAAxb,KAAAumB,KAAA8O,EAAA,GAAA,aACA5Z,MAAA5c,MAAAc,EAAA,MAAA,eACA6O,SAAA4mB,GAEA92B,EAAA,SAAA,CACAkd,MAAA,YACAlY,KAAA2xB,IACAzmB,SAAA4mB,GAEAp1B,KAAAumB,KAAA,GACAvmB,KAAA6d,YAAA0X,EAAA,SAAA,WACAv1B,KAAAsrB,eAAAiK,EAAA,SACAv1B,KAAAsrB,eAAAkK,EAAA,SACAx1B,KAAAkpB,QAAAlpB,KAAAumB,KAAA,GACAvmB,KAAAopB,gBAAA,MAIAppB,KAAAumB,KAAA8O,GACAr1B,KAAA6d,YAAA2X,EAAA,SAAA,WACAx1B,KAAAsrB,eAAAiK,EAAA,SACAv1B,KAAAsrB,eAAAkK,EAAA,SACAx1B,KAAAkpB,QAAAlpB,KAAAumB,KAAA,GACAvmB,KAAAopB,gBAAA,UAjDA,CACA,IAAA6L,EAAAp2B,MAAAc,EAAA,MAAA,6DAAA,CACAk1B,MAAAA,EACAK,KAAAJ,EACAK,MAAAJ,IAEA/0B,KAAAsmB,gBAAAhjB,KAAA2xB,MAgDAxrB,MAAA,KACAzJ,KAAAqmB,cAAA/T,SAAA,aAOAtS,KAAA+lB,UAAArnB,KAAAgM,EAAAhM,MACAG,MAAA2T,eAAA9H,EAAA8W,UACA3iB,MAAAiU,eAAApI,EAAA+W,UAKAzhB,KAAA8mB,oBAAA9mB,KAAA+lB,UAAA1P,KAAA,6BAEA3L,EAAAic,SAAAjc,EAAAic,QAAArmB,OACAN,KAAA8mB,oBAAAxmB,SACAN,KAAA2mB,QAAAjc,EAAAic,QACA3mB,KAAA4mB,gBAAAlc,EAAAkc,gBACA5mB,KAAA6mB,gBAAAnc,EAAAmc,gBAGA7mB,KAAA+mB,mBAAAzoB,EAAA,2BAAAutB,UAAA7rB,KAAA8mB,qBAEA9mB,KAAA8mB,oBAAA1Y,KAAA,CACAqnB,KAAA,WACAC,SAAA,IACAC,eAAA,QACAja,aAAA7c,MAAAc,EAAA,MAAA,gBAGAK,KAAA6d,YAAA7d,KAAA8mB,oBAAA,SAAA,WACA,IAAA9mB,KAAAmmB,KAAAiJ,sBAAA9uB,OACAN,KAAAmmB,KAAAyP,oBAEA51B,KAAAmmB,KAAA0P,yBAIA71B,KAAA6d,YAAA7d,KAAA8mB,oBAAA,WAAA,SAAAhP,GACAA,EAAAC,UAAAlW,QAAAi0B,YACAhe,EAAAK,iBAEA7Z,EAAAwZ,EAAA8C,eAAAlD,QAAA,eAKA1X,KAAA8mB,oBAAAyN,WAAAj0B,QACAN,KAAA8mB,oBAAAc,OAAA,WAAAjM,SAEA3b,KAAA8mB,oBAAAnL,UAMA3b,KAAAinB,UAAAvc,EAAAuc,UACAjnB,KAAAknB,gBAAAroB,MAAAE,MAAAiB,KAAAinB,WAAA,GAAAtc,GAAAA,EAAArJ,MAEAtB,KAAAinB,WAAAjnB,KAAAinB,UAAA3mB,OACAN,KAAA0mB,WAAA7P,YAAA,UAEA7W,KAAA0mB,WAAApU,SAAA,UAOA,IAAAyjB,EAAA/1B,KAAA2mB,SAAA3mB,KAAAyU,SAAAshB,WAeA,GAbA/1B,KAAAmmB,KAAAnmB,KAAAqxB,WAAArxB,KAAA6vB,sBAAA,CACAnI,QAAA1nB,KAAAyU,SAAAiT,QACAuF,UAAA,UAAAjtB,KAAAyU,SAAAiT,SAAA,cAAA1nB,KAAAwsB,2BAAAxsB,KAAAyU,SAAAwY,UAAA,KACAntB,OAAAA,EACAi2B,WAAAA,EACAC,YAAAh2B,KAAA2mB,SAAA3mB,KAAAyU,SAAAuhB,YACAC,eAAAj2B,KAAA2mB,QACAuD,kBAAAlqB,KAAAg0B,uBAAA/L,KAAAjoB,QAMAA,KAAAomB,oBAAA,CACA,GAAA2P,EACA,IAAA,IAAA12B,EAAA,EAAAA,EAAAW,KAAAomB,oBAAA9lB,OAAAjB,IACAW,KAAAmmB,KAAA+P,kBAAAl2B,KAAAomB,oBAAA/mB,IAIAW,KAAAomB,oBAAA,KAMApmB,KAAAgzB,oBAGAnE,mBAAA,SAAAD,GACA,IAAA,IAAAxK,KAAAwK,EACA,GAAAA,EAAAnvB,eAAA2kB,GAAA,CACA,MAAAE,EAAAtkB,KAAAsqB,eAAAlG,GACA,GAAAE,EAAA,CACA,IAAA6R,EAAA7R,EAAA/I,SAAA,UACA,OAAAqT,EAAAxK,IACA+R,EAAA71B,SACA61B,EAAA73B,EAAA,yBAAAkQ,SAAA8V,IAEA6R,EAAA7yB,KAAAsrB,EAAAxK,KACA+R,GACAA,EAAAxa,YAOAiZ,cAAA,WACA,OAAA,IAAA5rB,QAAA,CAAAC,EAAAC,KACA,GAAA,OAAAlJ,KAAAymB,aACAxd,EAAAjJ,KAAAymB,kBACA,CACA,IAAA3mB,EAAAE,KAAAgtB,uBACAltB,EAAAsoB,SAAApmB,cACAlC,EAAAsoB,SAAA8E,MAGA,OAAAltB,KAAAwmB,YACAxmB,KAAAwmB,UAAA3V,KAAAC,MAAA,IAAAD,KAAAqB,WAEApS,EAAA0mB,UAAAxmB,KAAAwmB,UAEA3nB,MAAAiK,kBAAA,OAAA9I,KAAAyU,SAAA2hB,oBAAA,CACArvB,KAAAjH,EACA8J,YAAA5J,KAAAspB,uBACA9f,KAAAkB,IACAA,EAAA3D,KAAAyf,WAAAxmB,KAAAwmB,WACAxmB,KAAAymB,aAAA/b,EAAA3D,KAAAsvB,MACAptB,EAAAyB,EAAA3D,KAAAsvB,QAEAntB,MAEAO,MAAAP,OAKAglB,gBAAA,WACA,IAIA7uB,EAqBAsb,EAzBA2b,EAAA,GACAC,EAAA,GACAC,EAAA,GAIA,IAAAn3B,EAAA,EAAAA,EAAAW,KAAA2mB,QAAArmB,OAAAjB,IAAA,CACA,IAAAyH,EAAA9G,KAAA2mB,QAAAtnB,GAEA,GAAAyH,EAAA4Q,QAAA,CACA,IAAAvJ,EAAA7P,EAAA,aAAAO,MAAA4F,cAAAqC,EAAAxF,MAAA,qBACAyF,KAAA,SAAAD,GACA+L,OAAA/L,EAAA4Q,SAEA1X,KAAA6d,YAAA1P,EAAA,SAAA,8BACAmoB,EAAA52B,KAAAyO,QAEArH,EAAA2vB,YAGAD,EAAA92B,KAAAoH,GAFAyvB,EAAA72B,KAAAoH,GASA,GAAAyvB,EAAAj2B,QAAAk2B,EAAAl2B,OAAA,CACA,IAAAo2B,EAAAp4B,EAAA,WAEAqc,EAAArc,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,cACAmC,YAAA,WACAlC,MAAA5c,MAAAc,EAAA,MAAA,aACA6O,SAAAkoB,GAEA,IAAAC,EAAAr4B,EAAA,sBAAAkQ,SAAAkoB,GACAE,EAAA52B,KAAA62B,uBAAAN,GAAA,GACAO,EAAA92B,KAAA62B,uBAAAL,GAAA,GAEAI,GACAA,EAAApoB,SAAAmoB,GAGAC,GAAAE,GACAx4B,EAAA,SAAAkQ,SAAAmoB,GAGAG,GACAA,EAAAtoB,SAAAmoB,GAGAL,EAAA52B,KAAAg3B,GAKA,IAFA12B,KAAAonB,WAAA9oB,IAEAe,EAAA,EAAAA,EAAAi3B,EAAAh2B,OAAAjB,IAAA,CACA,IAAA03B,EAAAz4B,EAAA,UAAAuU,OAAAyjB,EAAAj3B,IACAW,KAAAonB,WAAApnB,KAAAonB,WAAAlJ,IAAA6Y,GAGA/2B,KAAAonB,WAAA5Y,SAAAxO,KAAAqc,UACAxd,MAAA2T,eAAAxS,KAAA4mB,iBACA/nB,MAAAiU,eAAA9S,KAAA6mB,iBAEAhoB,MAAAsU,eAAAnT,KAAAonB,YAEAzM,GACAA,EAAA5T,KAAA,WAAA8Q,GAAA,eAAA7X,KAAAozB,+BAAAnL,KAAAjoB,QAIAg3B,eAAA,WACAh3B,KAAA0mB,WAAApU,SAAA,UAOA,IALA,IAAAnE,EAAA7P,EAAA,UAAA,CACAkd,MAAA,gBAGAyb,EAAA,GACA53B,EAAA,EAAAA,EAAAW,KAAAinB,UAAA3mB,OAAAjB,IACA43B,EAAAv3B,KAAA,CAAA8W,MAAAxW,KAAAinB,UAAA5nB,GAAA6F,KAAAC,MAAAnF,KAAAinB,UAAA5nB,GAAAiC,OAEA,IAAA41B,EAAAr4B,MAAAs4B,GAAAC,kBAAA,CACA5gB,MAAA3X,MAAAc,EAAA,MAAA,eACAsH,QAAAgwB,EACAzb,MAAA,cACAhN,SAAAL,GAEAkpB,EAAAx4B,MAAAs4B,GAAAC,kBAAA,CACA5gB,MAAA3X,MAAAc,EAAA,MAAA,UACAsH,QAAA,CACA,CAAAuP,MAAA,MAAArR,MAAA,OAAA,CAAAqR,MAAA,OAAArR,MAAA,QAAA,CAAAqR,MAAA,MAAArR,MAAA,QAEAqW,MAAA,cACAhN,SAAAL,GAEA,IAAAmpB,EAAAJ,EAAA7gB,KAAA,UACArW,KAAA6d,YAAAyZ,EAAA,SAAA,KACA,IAAAh2B,EAAAg2B,EAAA/yB,MACAvE,KAAAknB,gBAAA5lB,GAAAi2B,YACAF,EAAAxgB,YAAA,UAEAwgB,EAAA/kB,SAAA,YAGAglB,EAAA5f,QAAA,UAGA,IAAA2W,EAAAruB,KAAAmmB,KAAAmI,wBAEA,IAAAD,EAAA/tB,OACA,IAAAk3B,EAAA34B,MAAAs4B,GAAAM,gBAAA,CACAjhB,MAAA3X,MAAAc,EAAA,MAAA,SACA+3B,YAAA74B,MAAAc,EAAA,MAAA,YACA2B,KAAA,SACA0zB,IAAA,IACAxmB,SAAAL,GAGA7P,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,uBACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAL,GAEA,IAAAwpB,EAAAr5B,EAAA,SAAA,CACAkd,MAAA,mBACAhN,SAAAL,GAEA,IAAAtM,QAAA+1B,IAAA53B,KAAA0mB,WAAAvY,GAEA0J,GAAA,OAAA,KACA7X,KAAA0mB,WAAA7P,YAAA,YAGA,IAAAghB,GAAA,EAEA73B,KAAA6d,YAAA1P,EAAA,UAAA,SAAA2J,GAEA,GADAA,EAAAK,kBACA0f,EAAA,CAIAA,GAAA,EACAF,EAAA9gB,YAAA,UAEA,IAAA/W,EAAAE,KAAAgtB,gBAQA,UAPAltB,EAAAsoB,SAAApmB,cACAlC,EAAAsoB,SAAA8E,aACAptB,EAAA2tB,oBAEA3tB,EAAAwB,KAAA41B,EAAA7gB,KAAA,UAAA9R,MACAzE,EAAAyB,OAAA81B,EAAAhhB,KAAA,UAAA9R,MAEA8pB,EAAA/tB,OACAR,EAAAsoB,SAAA9R,GAAA+X,MACA,CACA,IAAAnB,EAAA/qB,SAAAq1B,EAAAnhB,KAAA,SAAA9R,OACA2oB,IAAA4K,MAAA5K,KACAptB,EAAAsoB,SAAA8E,MAAAA,GAIAruB,MAAA+H,iBACA9G,EAAAjB,MAAA8H,eAAA9H,MAAA+H,gBAGA/H,MAAAiM,gBAAA,OAAAjM,MAAAuH,aAAA,0BAAAtG,GACA0J,MAAA,WACAquB,GAAA,EACAF,EAAArlB,SAAA,aAEA7I,OAAA,WACAouB,GAAA,EACAF,EAAArlB,SAAA,UACAtS,KAAAqnB,sBACAxoB,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,qCAMAk3B,uBAAA,SAAAlQ,EAAA8P,GACA,GAAA9P,GAAAA,EAAArmB,OAAA,CAGA,IAFA,IAAA+R,EAAA/T,EAAA,SAEAe,EAAA,EAAAA,EAAAsnB,EAAArmB,OAAAjB,IACAf,EAAA,SAAAuU,OAAAvU,EAAA,OAAA,CACAgY,GAAAzX,MAAA4F,cAAAkiB,EAAAtnB,GAAAiC,MAAA,iBACAka,MAAAib,EAAA,QAAA,KACA1vB,KAAA,CACAD,OAAA6f,EAAAtnB,IAEAiE,KAAAqjB,EAAAtnB,GAAA6F,QACAsJ,SAAA6D,GAGA,OAAAA,IAIA0lB,cAAA,WACA/3B,KAAAunB,WAAAvnB,KAAAokB,WAGApkB,KAAAunB,WAAAvnB,KAAAokB,WAAA4T,OAFAh4B,KAAAunB,WAAAvnB,KAAAokB,WAAA,IAAA6T,EAAAj4B,KAAAA,KAAAokB,YAMAyM,gBAAA,WACA7wB,KAAAunB,WAAAvnB,KAAAokB,YAAApkB,KAAAunB,WAAAvnB,KAAAokB,WAAA8T,WACAl4B,KAAA8kB,WAAAxS,SAAA,UAEAtS,KAAA8kB,WAAAjO,YAAA,YAGA,CACA4G,SAAA,CACAiK,QAAA,QACAkL,MAAA,KACAnL,WAAA,KACAW,SAAA,KACA6E,UAAA,IACAK,mBAAA,GACAyI,YAAA,EACAC,aAAA,EACAtD,gBAAA,KACA5U,aAAA,EACA6J,gBAAA,iBACAgD,qBAAA,uCACAkD,qBAAA,+BACAuI,oBAAA,iCACAzH,oBAAA,iCACArG,cAAA,KACAmD,cAAA,KACA0B,eAAA,EAEA9D,YAAA/qB,EAAAqlB,KACAmN,eAAAxyB,EAAAqlB,KACAoP,aAAAz0B,EAAAqlB,KACAqP,iBAAA10B,EAAAqlB,KACAuG,kBAAA5rB,EAAAqlB,KACAkO,iBAAAvzB,EAAAqlB,KACAoO,kBAAAzzB,EAAAqlB,KACAqL,cAAA1wB,EAAAqlB,QAIA,MAAAsU,EAAAp2B,QAAA+1B,IAAAh5B,OAAA,CACA8kB,aAAA,KACAU,UAAA,KACA+T,SAAA,EACAzK,WAAA,KAEAlQ,KAAA,SAAAkG,EAAAU,GACApkB,KAAA0jB,aAAAA,EACA1jB,KAAAokB,UAAAA,EAEA,MAAAuT,EAAAr5B,EAAA,SAAA,CACAkd,MAAA,YAGAxb,KAAAqjB,KAAArjB,KAAA0jB,aAAAoB,WAAA6S,EAAA,CACAS,SAAA,mCAGAp4B,KAAAq4B,KAAA1c,SACA3b,KAAAq4B,KAAA,KAEA,MAAA/hB,EAAA,kBAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,UAEArT,MAAAiK,kBAAA,OAAA,6BAAA,CACA/B,KAAA,CACAqN,YAAApU,KAAA0jB,aAAAtP,YACA2L,OAAA/f,KAAAokB,UACAkU,cAAAhiB,EACAA,GAAAA,KAEA9M,KAAAkB,IACA1K,KAAAm4B,SAAA,EACAn4B,KAAAu4B,KAAA1hB,YAAA,WACA8gB,EAAAhc,SAEA3b,KAAAkkB,MAAArR,OAAAnI,EAAA3D,KAAAyxB,SACA35B,MAAA2T,eAAA9H,EAAA3D,KAAAya,UACA3iB,MAAAiU,eAAApI,EAAA3D,KAAA0xB,YACAhvB,MAAA,KACA5K,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,gCAIA+4B,8BAAA,WACA,MAAAC,EAAA34B,KAAA0jB,aAAAkB,iBAAA5iB,SAEAhC,KAAAu4B,KAAAzW,IAAA,CACA8W,MAAA54B,KAAA0jB,aAAAkB,iBAAAiU,aAAA,EACAC,IAAAH,EAAAG,IAAA94B,KAAA0jB,aAAAkB,iBAAAmU,cACA/f,KAAA2f,EAAA3f,KAAA,KAIAggB,OAAA,WACAh5B,KAAA0jB,aAAAoB,WAAAxS,SAAA,UACAtS,KAAAqjB,QAGAyP,OAAA,WACA9yB,KAAAqjB,OAEArjB,KAAA0jB,aAAAmN,kBAGA7wB,KAAA0tB,cAAA1tB,KAAA0tB,WAAA1tB,KAAA0hB,cACA1hB,KAAA0jB,aAAA0F,kBAIA8O,SAAA,WACA,OAAA,IAAAl4B,KAAAkkB,MAAA+U,IAAA,mBAAA34B,QAGAohB,UAAA,WACA,OAAA1hB,KAAAk4B,WAAAl4B,KAAA0c,MAAAgF,YAAA,QC3pEA7iB,MAAAq6B,qBAAAr3B,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACA+lB,oBAAA,KACAC,kBAAA,KACAC,UAAA,KAEA3V,aAAA,KACA4V,YAAA,KACAC,cAAA,KAEAC,aAAA,EAEAC,cAAA,KACAC,aAAA,KACAC,sBAAA,KACAC,uBAAA,KAEApc,KAAA,SAAAkG,EAAA9L,EAAAnD,GACAzU,KAAA0jB,aAAAA,EACA1jB,KAAAoT,WAAA9U,EAAAsZ,GACA5X,KAAAqa,YAAA5F,EAAA5V,MAAAq6B,qBAAAzb,UAGAzd,KAAAm5B,oBAAA76B,EACA,iFAGAu7B,YAAA75B,KAAAoT,YAGApT,KAAAo5B,kBAAAp5B,KAAA85B,sBACA,IAAA/T,EAAA/lB,KAAAo5B,kBAAA7d,WAEAvb,KAAA+5B,gBAAAhU,EAAAzlB,QACAN,KAAAg6B,eAAAh6B,KAAAyU,SAAAwY,WAAAlH,EAAAzlB,QAAAN,KAAAyU,SAAAwY,WAGAjtB,KAAAs5B,YAAA,IAAAz6B,MAAAyiB,mBACAthB,KAAAs5B,YAAAla,KAAA2G,GAEA/lB,KAAAyU,SAAAshB,aACA/1B,KAAAu5B,cAAA,IAAA13B,QAAAioB,OACA9pB,KAAAo5B,kBACArT,EAAAnK,OAAA,mBACA,CACAmO,MAAA/pB,KAAAyU,SAAAuhB,YACA/L,SAAAjqB,KAAAi6B,iBACAC,OAAA,UAAAl6B,KAAAyU,SAAAiT,QAAA,4BAAA,KACA9L,OAAA,uBACAqa,aAAAj2B,KAAAyU,SAAAwhB,aACA/L,kBAAAlqB,KAAAkqB,kBAAAjC,KAAAjoB,QAGAA,KAAA25B,sBAAA7hB,IACA9X,KAAAu5B,cAAA1O,SAAA/S,EAAAV,WAGApX,KAAA45B,uBAAA9hB,IACA9X,KAAAu5B,cAAAlO,YAAAvT,EAAAV,WAGApX,KAAA0jB,aAAA7L,GAAA,iBAAA7X,KAAA25B,uBACA35B,KAAA0jB,aAAA7L,GAAA,kBAAA7X,KAAA45B,yBAIA,UAAA55B,KAAAyU,SAAAiT,UACA1nB,KAAAm6B,sBAAAriB,IACA,IAAAoH,EAAA5gB,EAAAwZ,EAAA4F,QAEA,GAAA,MAAAwB,EAAAkb,KAAA,YAAA,CAKA,IAAAjkB,EAEA,GAAA+I,EAAA9I,SAAA,WACAD,EAAA+I,OAIA,KAFA/I,EAAA+I,EAAApE,QAAA,aAEAxa,OACA,OAIAuB,QAAA0Y,QAAApE,EAAA,kBACAnW,KAAA6U,oBAAAsB,KAIAnW,KAAA0jB,aAAAuB,UACAjlB,KAAA6d,YAAA7d,KAAAo5B,kBAAA,WAAAp5B,KAAAm6B,uBACA77B,EAAA+7B,kBACAr6B,KAAA6d,YAAA7d,KAAAo5B,kBAAA,UAAAp5B,KAAAm6B,yBAMAn6B,KAAAgpB,YAGAhpB,KAAAyU,SAAAwY,YACA,UAAAjtB,KAAAyU,SAAAiT,QACA1nB,KAAAq5B,UAAAx3B,QAAAisB,iBAEA9tB,KAAAq5B,UAAAr5B,KAAA0jB,aAAAQ,MAGAlkB,KAAAq5B,UAAAzX,UAAA,GACA5hB,KAAA6d,YAAA7d,KAAAq5B,UAAA,SAAA,iBACAr5B,KAAAs6B,kBAIAR,oBAAA,WACA,KAAA,8FAGA9Q,UAAA,aAGAuR,eAAA,WACA,OAAAv6B,KAAAo5B,kBAAA7d,YAGA8T,mBAAA,WACA,OAAArvB,KAAAo5B,kBAAA7d,SAAA,oBAGAyW,eAAA,SAAA1b,GACA,IAAAH,EAAAnW,KAAAo5B,kBAAA7d,SAAA,aAAAjF,EAAA,YAEA,OAAAH,EAAA7V,OACA6V,EAEA,MAIAiZ,oBAAA,WACA,IAAApvB,KAAAu5B,cACA,KAAA,+BAGA,OAAAv5B,KAAAu5B,cAAAtG,gBAGA3E,sBAAA,WACA,IAAAkM,EACA,IACAA,EAAAx6B,KAAAovB,sBACA,MAAAzkB,IAGA,IAAAunB,EAAA,GACA,GAAAsI,EACA,IAAA,IAAAn7B,EAAA,EAAAA,EAAAm7B,EAAAl6B,OAAAjB,IACA6yB,EAAAxyB,KAAA86B,EAAA7nB,GAAAtT,GAAA0H,KAAA,OAGA,OAAAmrB,GAGAuI,cAAA,SAAAtkB,GACA,IAAAnW,KAAAu5B,cACA,KAAA,+BAIA,OADAv5B,KAAAu5B,cAAAzJ,WAAA3Z,GAAA,IACA,GAGA+f,kBAAA,SAAA5f,GACA,IAAAtW,KAAAu5B,cACA,KAAA,+BAGA,IAAApjB,EAAAnW,KAAAgyB,eAAA1b,GAEA,QAAAH,IACAnW,KAAAu5B,cAAAzJ,WAAA3Z,GAAA,IACA,IAMAyf,kBAAA,WACA51B,KAAAu5B,cAAAmB,aAGA7E,oBAAA,WACA71B,KAAAu5B,cAAAoB,eAGAV,eAAA,WACA,OAAA,GAGAW,gBAAA,WACA,OAAA56B,KAAAy5B,eAGAM,gBAAA,SAAAc,GACA76B,KAAAy5B,cAAAoB,GAGAC,eAAA,WACA,OAAA96B,KAAA05B,cAGAM,eAAA,SAAAe,GACA/6B,KAAA05B,aAAAqB,GAMAT,cAAA,WACAt6B,KAAAg7B,eACAh7B,KAAAi7B,YAOAD,YAAA,WACA,SAAAh7B,KAAA86B,mBAAA96B,KAAAyU,SAAAwY,aAOAjtB,KAAAq5B,UAAA,KAAAx3B,QAAAsf,KAAA,GACAtf,QAAAsf,KAAA+Z,cACAr5B,QAAAsf,KAAAS,aACA5hB,KAAAoT,WAAApR,SAAA82B,IACA94B,KAAAoT,WAAA6a,SAIAjuB,KAAAq5B,UAAAe,KAAA,gBACAp6B,KAAAq5B,UAAAzX,aACA5hB,KAAAq5B,UAAAN,cAEA,KAOAkC,SAAA,WACAj7B,KAAA86B,mBAAA96B,KAAAw5B,aAAAx5B,KAAAyU,SAAAwY,YAIAjtB,KAAAw5B,aAAA,EACAx5B,KAAAm5B,oBAAAtiB,YAAA,UACA7W,KAAAsrB,eAAAtrB,KAAAq5B,UAAA,UAEAx6B,MAAAiK,kBAAA,OAAA9I,KAAAyU,SAAA0mB,uBAAA,CACAp0B,KAAA/G,KAAAo7B,sBACA5xB,KAAAkB,IACA1K,KAAAw5B,aAAA,EACAx5B,KAAAm5B,oBAAA7mB,SAAA,UAEA,IAAA+oB,EAAA/8B,EAAAoM,EAAA3D,KAAArI,MAEAsB,KAAAs7B,eAAAD,GACAx8B,MAAA2T,eAAA9H,EAAA3D,KAAAya,UACA3iB,MAAAiU,eAAApI,EAAA3D,KAAA0a,UAEAzhB,KAAAu5B,gBACAv5B,KAAAu5B,cAAA1O,SAAAwQ,EAAAzf,OAAA,oBACA5b,KAAA0jB,aAAAwL,wBAGAlvB,KAAA+5B,gBAAA/5B,KAAA46B,kBAAAS,EAAA/6B,QACAN,KAAAg6B,eAAAqB,EAAA/6B,QAAAN,KAAAyU,SAAAwY,WAGAjtB,KAAA6d,YAAA7d,KAAAq5B,UAAA,SAAA,iBACAr5B,KAAAs6B,kBACA7wB,MAAAkB,IACA3K,KAAAw5B,aAAA,EACAx5B,KAAAm5B,oBAAA7mB,SAAA,cAIA8oB,kBAAA,WAEA,IAAAt7B,EAAAxB,EAAAM,QAAA,EAAA,GAAAoB,KAAAyU,SAAA3U,QAEA,OADAA,EAAAsoB,SAAApmB,OAAAhC,KAAA46B,kBACA96B,GAGAw7B,eAAA,SAAAD,GACAA,EAAA7sB,SAAAxO,KAAAo5B,mBACAp5B,KAAAs5B,YAAAla,KAAAic,GACAr7B,KAAAu7B,iBAAAF,IAGAE,iBAAA,SAAAF,GACAr7B,KAAAyU,SAAA8mB,iBAAAF,GACAr7B,KAAA0X,QAAA,iBAAA,CACA8jB,YAAAH,KAIAnR,kBAAA,WACAlqB,KAAAyU,SAAAyV,oBACAlqB,KAAA0X,QAAA,oBAGA7C,oBAAA,SAAAsB,GACAtX,MAAAgW,oBAAAsB,EAAApP,KAAA,QAAAoP,EAAA,CACAuN,aAAA1jB,KAAA0jB,gBAIAvK,QAAA,WACAnZ,KAAAu5B,eACAv5B,KAAAu5B,cAAApgB,WAIAG,OAAA,WACAtZ,KAAAu5B,eACAv5B,KAAAu5B,cAAAjgB,UAIAmF,QAAA,WAEAze,KAAAm5B,oBAAAxd,SAGA3b,KAAAs5B,YAAA7a,iBACAze,KAAAs5B,YAGAt5B,KAAAu5B,gBACAv5B,KAAA0jB,aAAA7B,IAAA,iBAAA7hB,KAAA25B,uBACA35B,KAAA0jB,aAAA7B,IAAA,kBAAA7hB,KAAA45B,wBAEA55B,KAAAu5B,cAAA9a,iBACAze,KAAAu5B,eAGAv5B,KAAAqjB,SAEA,CACA5F,SAAA,CACAiK,QAAA,QACAuF,UAAA,KACAntB,OAAA,KACAi2B,YAAA,EACAC,aAAA,EACAC,cAAA,EACAkF,uBAAA,oCACAI,iBAAAj9B,EAAAqlB,KACAuG,kBAAA5rB,EAAAqlB,QC/WA9kB,MAAA48B,uBAAA55B,QAAAoa,KAAArd,OAAA,CACA06B,YAAA,KACAC,cAAA,KACAmC,YAAA,KACA9I,MAAA,KACA+I,cAAA,KAEAvoB,WAAA,KACAwoB,mBAAA,KACA7V,UAAA,KACA8V,eAAA,KACAC,wBAAA,KAEAC,cAAA,EAEAve,KAAA,SAAA/I,GAKA,IAAAnW,EAAA0G,cAAAyP,GAAA,CAKA,IAHA,IAAAunB,EAAA,GACA77B,EAAA,CAAA,KAAA,OAAA,cAAA,UAAA,WAAA,kBAAA,QAAA,kBAAA,WAEAd,EAAA,EAAAA,EAAAc,EAAAG,aACA,IAAA27B,UAAA58B,GADAA,IAEA28B,EAAA77B,EAAAd,IAAA48B,UAAA58B,GAMAoV,EAAAunB,EAGAh8B,KAAAqa,YAAA5F,EAAA5V,MAAA48B,uBAAAhe,UAGAzd,KAAAyU,SAAAynB,kBACAl8B,KAAAk8B,gBAAA,0BAAAl8B,KAAAyU,SAAAynB,iBAIA,GAAAl8B,KAAAyU,SAAAyY,QACAltB,KAAAyU,SAAA0nB,UAAA,GAGAn8B,KAAAoT,WAAApT,KAAAo8B,eAGAp8B,KAAAoT,WAAArM,KAAA,gBAAA/G,MAEAA,KAAA47B,mBAAA57B,KAAAq8B,uBAEAr8B,KAAA67B,eAAA77B,KAAAs8B,oBACAt8B,KAAA67B,iBACA77B,KAAA87B,wBAAA97B,KAAA67B,eAAAjU,OAAA,SACA5nB,KAAA87B,wBAAAx7B,SACAN,KAAA87B,wBAAA,OAIA97B,KAAAs5B,YAAA,IAAAz6B,MAAAyiB,mBAEAthB,KAAAu8B,oBACAv8B,KAAAw8B,kBACAx8B,KAAAy8B,gBAEAz8B,KAAA67B,gBACA77B,KAAA6d,YAAA7d,KAAA67B,eAAA,WAAA,aAGAh6B,QAAA0f,sBAAA,KACAvhB,KAAA+7B,cAAA,KAIA5M,oBACA,OAAAnvB,KAAA+lB,UAAAzlB,QAGA87B,aAAA,WACA,OAAA99B,EAAA,IAAA0B,KAAAyU,SAAA6B,KAGA+lB,qBAAA,WACA,OAAAr8B,KAAAoT,WAAAmI,SAAA,cAGAmhB,YAAA,WACA,OAAA18B,KAAA47B,mBAAArgB,YAGA+gB,kBAAA,WACA,OAAAt8B,KAAAoT,WAAAiD,KAAA,mBAGAkmB,kBAAA,WACAv8B,KAAAyU,SAAAshB,aACA/1B,KAAAu5B,cAAA,IAAA13B,QAAAioB,OAAA,CACAC,MAAA/pB,KAAAyU,SAAA0nB,SACAvgB,OAAA,oBAKA4gB,gBAAA,WACAx8B,KAAAyU,SAAA0nB,WACAn8B,KAAA07B,YAAA,IAAA75B,QAAA86B,SAAA,CACA/kB,UAAA5X,KAAA47B,mBACAhgB,OAAA5b,KAAAyU,SAAAshB,WAAA,IAEA/1B,KAAA07B,YAAAkB,YAAAxmB,SAAA,OACApW,KAAAu5B,cAAAsD,mBAEA78B,KAAA07B,YAAAkB,YAEA,KACAE,qBAAA,UACAC,KAAA/8B,KAAAg9B,qBACAC,kBAAA,EACAC,eAAA,EACAC,cAAA,IACAC,aAAAp9B,KAAAyU,SAAAshB,WAAA,KACA/1B,KAAAu5B,cAAA8D,kBACA,SAKAL,mBAAA,WACA,MAAA,SAAAh9B,KAAAyU,SAAAyR,SAAA,IAAA,MAGAoX,mBAAA,WACA,OAAAt9B,KAAAyU,SAAAyY,OAAAltB,KAAA+lB,UAAAzlB,OAAAN,KAAAyU,SAAAyY,OAGAqQ,qBAAA,WACAv9B,KAAAs9B,qBACAt9B,KAAAw9B,uBAEAx9B,KAAAy9B,yBAIAA,sBAAA,WACA,IAAA9iB,EAAA3a,KAAA87B,yBAAA97B,KAAA67B,eACAlhB,GACAA,EAAArI,SAAA,WAIAkrB,qBAAA,WACA,IAAA7iB,EAAA3a,KAAA87B,yBAAA97B,KAAA67B,eACAlhB,GACAA,EAAA9D,YAAA,WAIA4lB,cAAA,WACA,OAAAz8B,KAAA+lB,UACA/lB,KAAA09B,eAAA19B,KAAA+lB,WAEA/lB,KAAA+lB,UAAAznB,IAGA0B,KAAA29B,YAAA39B,KAAA08B,gBAGAiB,YAAA,SAAA5X,GACA/lB,KAAAs5B,YAAAla,KAAA2G,GAEA/lB,KAAAyU,SAAAshB,YACA/1B,KAAAu5B,cAAA1O,SAAA9E,GAGA/lB,KAAAyU,SAAA0nB,UACAn8B,KAAA07B,YAAA7Q,SAAA9E,GAGA/lB,KAAAyU,SAAAmpB,WACA59B,KAAA69B,yBAAA/lB,IACA,IAAA3B,EAAA7X,EAAAwZ,EAAA8C,gBACA/Y,QAAA0Y,QAAApE,EAAA,kBAAAA,EAAAC,SAAA,aAAAD,EAAAC,SAAA,aACApW,KAAA27B,cAAA37B,KAAA6U,oBAAAsB,KAIAnW,KAAA6d,YAAAkI,EAAA,WAAA/lB,KAAA69B,0BAEAv/B,EAAA+7B,kBACAr6B,KAAA6d,YAAAkI,EAAA,UAAA/lB,KAAA69B,2BAIA9X,EAAA1P,KAAA,WAAAwB,GAAA,iBAAAC,IACA9X,KAAA89B,cAAAx/B,EAAAwZ,EAAA8C,eAAAE,QAAA,aAEAhD,EAAAM,oBAGApY,KAAA+lB,UAAA/lB,KAAA+lB,UAAA7H,IAAA6H,GACA/lB,KAAAu9B,wBAGA1oB,oBAAA,SAAAsB,EAAA1B,GAKA,OAJAA,IACAA,EAAA,IAEAA,EAAAiL,YAAA1f,KAAAyU,SAAAiL,YACA7gB,MAAAgW,oBAAA7U,KAAAyU,SAAAL,YAAA+B,EAAA1B,IAGAipB,eAAA,SAAA3X,GAKA,GAJA/lB,KAAAyU,SAAAshB,YACA/1B,KAAAu5B,cAAAlO,YAAAtF,GAGA/lB,KAAA4yB,MAAA,CAGA,IAFA,IAAAV,EAAA,GAEA7yB,EAAA,EAAAA,EAAA0mB,EAAAzlB,OAAAjB,IAAA,CACA,IAAAiX,EAAAyP,EAAApT,GAAAtT,GAAA0H,KAAA,MAEAuP,GACA4b,EAAAxyB,KAAA4W,GAIA4b,EAAA5xB,QACAN,KAAA4yB,MAAAlP,aAAAuO,mBAAAC,GAKAnM,EAAAxK,SAAA,SAAA6e,KAAA,YAAA,GAEAp6B,KAAA+lB,UAAA/lB,KAAA+lB,UAAA4O,IAAA5O,GACA/lB,KAAAu9B,uBAEAv9B,KAAA+9B,oBAGAD,cAAA,SAAA3nB,GACAnW,KAAA09B,eAAAvnB,GACAnW,KAAAg+B,mBAAA7nB,EAAA,KACAA,EAAAwF,YAIAqiB,mBAAA,SAAA7nB,EAAAnP,GACAmP,EAAA2L,IAAA,UAAA,GAEA,IAAAmc,EAAA,CACAC,SAAA,GAEAD,EAAA,UAAAp/B,MAAAma,QAAA7C,EAAA0iB,aAAA12B,SAAAgU,EAAA2L,IAAA,UAAAjjB,MAAAoa,SAEA,SAAAjZ,KAAAyU,SAAAyR,UAAA,IAAAlmB,KAAA+lB,UAAAzlB,SACA29B,EAAA,mBAAA9nB,EAAA4iB,cAAA52B,SAAAgU,EAAA2L,IAAA,oBAIAhW,OAAAqyB,aACAryB,OAAAqyB,YAAAC,QAGAjoB,EAAA4C,SAAAklB,EAAAp/B,MAAA48B,uBAAA4C,mBAAA,KACAr3B,IAGA8E,OAAAqyB,aACAryB,OAAAqyB,YAAAG,YAKAC,UAAA,WAEAv+B,KAAAs9B,uBAIAt9B,KAAA4yB,MAGA5yB,KAAA4yB,MAAAoF,OAFAh4B,KAAA4yB,MAAA5yB,KAAAw+B,gBAMAA,YAAA,WACA,OAAA3/B,MAAA8V,2BAAA3U,KAAAyU,SAAAL,YAAApU,KAAAy+B,qBAGAA,iBAAA,WACA,OAAAngC,EAAAM,OAAA,CACA8/B,kBAAA,EACAjX,WAAAznB,KAAAk8B,gBACAyC,QAAA3+B,KAAAyU,SAAAkqB,QACAvW,SAAApoB,KAAAyU,SAAA2T,SACA4N,YAAA,GAAAh2B,KAAAyU,SAAAyY,MACA0R,aAAA5+B,KAAAyU,SAAAmqB,aACAtR,mBAAAttB,KAAA6+B,wBACAC,SAAA9+B,KAAA++B,cAAA9W,KAAAjoB,OACAA,KAAAyU,SAAAuqB,gBAGA1Q,sBAAA,WAGA,IAFA,IAAA4D,EAAA,GAEA7yB,EAAA,EAAAA,EAAAW,KAAA+lB,UAAAzlB,OAAAjB,IACA6yB,EAAAxyB,KAAAM,KAAA+lB,UAAApT,GAAAtT,GAAA0H,KAAA,OAGA,OAAAmrB,GAGA2M,sBAAA,WACA,IAAA3M,EAAAlyB,KAAAsuB,wBAUA,OARAtuB,KAAAyU,SAAAwqB,oBAAAj/B,KAAAyU,SAAAyqB,iBACAhN,EAAAxyB,KAAAM,KAAAyU,SAAAyqB,iBAGAl/B,KAAAyU,SAAA6Y,oBACA4E,EAAAxyB,QAAAM,KAAAyU,SAAA6Y,oBAGA4E,GAGA6M,cAAA,SAAA3nB,GACA,GAAApX,KAAAyU,SAAAyY,MAAA,CAEA,IAAAiS,EAAAn/B,KAAAyU,SAAAyY,MAAAltB,KAAA+lB,UAAAzlB,OAEA8W,EAAA9W,OAAA6+B,IACA/nB,EAAAA,EAAArW,MAAA,EAAAo+B,IAIAn/B,KAAAo/B,eAAAhoB,GACApX,KAAAq/B,iCAGAD,eAAA,SAAAhoB,GACA,IAAA,IAAA/X,EAAA,EAAAA,EAAA+X,EAAA9W,OAAAjB,IAAA,CACA,IAAAigC,EAAAloB,EAAA/X,GACA8W,EAAAnW,KAAAu/B,iBAAAD,GAEAt/B,KAAAw/B,cAAArpB,GACAnW,KAAA29B,YAAAxnB,GACAnW,KAAAy/B,wBAAAH,EAAAnpB,SAAAA,GAGAmpB,EAAAnpB,SAAAA,EAGAnW,KAAA0/B,iBAAAtoB,IAGAmoB,iBAAA,SAAAD,GACA,IAAAnpB,EAAAmpB,EAAAnpB,SAAAwpB,QAQA,OALA9gC,MAAA6X,eAAAP,EAAA,UAAAnW,KAAAyU,SAAAyR,SAAA,QAAA,SACA/P,EAAA7D,SAAA,aACA6D,EAAAypB,QAAA,8BAAA5/B,KAAAyU,SAAAvP,OAAAlF,KAAAyU,SAAAorB,OAAA,GAAA,gBAAAP,EAAAhpB,qCACAzX,MAAAc,EAAA,MAAA,UAAA,UAEAwW,GAGAqpB,cAAA,SAAArpB,GACAA,EAAA3H,SAAAxO,KAAA47B,qBAGA6D,wBAAA,SAAAK,EAAAC,GACA,IAAAC,EAAAF,EAAA99B,SACAi+B,EAAAF,EAAA/9B,SACAk+B,EAAAH,EAAAJ,QAAAnxB,SAAA3M,QAAAqR,MAEA6sB,EAAAje,IAAA,aAAA,UAEAoe,EAAApe,IAAA,CACAqe,SAAA,WACAC,OAAA,IACAtH,IAAAkH,EAAAlH,IACA9f,KAAAgnB,EAAAhnB,OAGA,IAAAilB,EAAA,CACAnF,IAAAmH,EAAAnH,IACA9f,KAAAinB,EAAAjnB,MAGAknB,EAAAnnB,SAAAklB,EAAAp/B,MAAA48B,uBAAA4E,iBAAA,WACAH,EAAAvkB,SACAokB,EAAAje,IAAA,aAAA,eAIAud,8BAAA,WACAr/B,KAAA4yB,MAAAlP,cACA1jB,KAAA4yB,MAAAlP,aAAA0O,oBAAApyB,KAAA6+B,0BAIA7M,eAAA,SAAA1b,GACA,IAAA,IAAAjX,EAAA,EAAAA,EAAAW,KAAA+lB,UAAAzlB,OAAAjB,IAAA,CACA,IAAA8W,EAAAnW,KAAA+lB,UAAApT,GAAAtT,GAEA,GAAA8W,EAAApP,KAAA,OAAAuP,EACA,OAAAH,IAKAupB,iBAAA,SAAAtoB,GACApX,KAAA0X,QAAA,iBAAA,CAAAN,SAAAA,IACApX,KAAAyU,SAAAirB,iBAAAtoB,GAEAtL,OAAAqyB,aACAryB,OAAAqyB,YAAAmC,aAIAvC,iBAAA,WACA/9B,KAAA0X,QAAA,kBACA1X,KAAAyU,SAAAspB,qBAEA,CACAsC,gBAAA,IACAhC,mBAAA,IAEA5gB,SAAA,CACAnH,GAAA,KACApR,KAAA,KACAq7B,QAAA,KACAnsB,YAAA,KACAuqB,QAAA,KACAvW,SAAA,GACA6W,oBAAA,EACAC,gBAAA,KACA5R,mBAAA,KACApH,SAAA,OACA2Z,QAAA,EACA3S,MAAA,KACA0R,cAAA,EACA1C,gBAAA,KACA8C,cAAA,GACAU,iBAAAphC,EAAAqlB,KACAoa,iBAAAz/B,EAAAqlB,KACAwY,UAAA,EACApG,YAAA,EACA6H,UAAA,EACAle,aAAA,EACA8gB,eAAA,MC3cA3hC,MAAA+V,yBAAA/S,QAAA4+B,MAAA7hC,OAAA,CACAwV,YAAA,KACAsP,aAAA,KAEAhH,MAAA,KACAgkB,WAAA,KACA9jB,SAAA,KACA6M,SAAA,KACAkX,eAAA,KACAzc,MAAA,KACAW,QAAA,KACAkB,UAAA,KACA6a,OAAA,KACAC,gBAAA,KACAC,kBAAA,KACA7jB,WAAA,KACA8jB,eAAA,KAEAvjB,KAAA,SAAApJ,EAAAK,GACAzU,KAAAoU,YAAAA,EACApU,KAAAqa,YAAA5F,EAAA5V,MAAA+V,yBAAA6I,UAGA,IAAArK,EAAA9U,EAAA,kDAAAkQ,SAAA3M,QAAAqR,MACAwJ,EAAApe,EAAA,2DAAAkQ,SAAA4E,GACAyJ,EAAAve,EAAA,yBAAAkQ,SAAA4E,GAEApT,KAAAqjB,KAAAjQ,EAAApT,KAAAyU,UAEAzU,KAAA+gC,eAAAziC,EAAA,iCAAAkQ,SAAAqO,GACA7c,KAAA6gC,gBAAAviC,EAAA,gCAAAkQ,SAAAqO,GACA7c,KAAA8gC,kBAAAxiC,EAAA,iDAAAkQ,SAAAqO,GACA7c,KAAAid,WAAA3e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAA6gC,iBACA7gC,KAAA0gC,WAAApiC,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,sBACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAA6gC,iBAEA7gC,KAAA0c,MAAAA,EAEA1c,KAAA6d,YAAA7d,KAAAid,WAAA,WAAA,UACAjd,KAAA6d,YAAA7d,KAAA0gC,WAAA,WAAA,mBAGAM,SAAA,WACAhhC,KAAA0jB,aAIA7hB,QAAA8f,iBAAA,IACA3hB,KAAA0jB,aAAAmB,QAAAnN,QAAA,SAJA1X,KAAAihC,sBAQAjhC,KAAAqjB,QAGA6G,kBAAA,WACAlqB,KAAAkhC,wBAGAA,qBAAA,WACAlhC,KAAA0gC,aACA1gC,KAAA0jB,aAAA0L,sBAAA9uB,OACAN,KAAAmhC,kBAEAnhC,KAAAohC,qBAKAD,gBAAA,WACAnhC,KAAA0gC,WAAA7pB,YAAA,aAGAuqB,iBAAA,WACAphC,KAAA0gC,WAAApuB,SAAA,aAGA+uB,gBAAA,WACArhC,KAAAid,WAAApG,YAAA,aAGAyqB,iBAAA,WACAthC,KAAAid,WAAA3K,SAAA,aAGAivB,kBAAA,WACAvhC,KAAA+gC,eAAAlqB,YAAA,WAGA2qB,kBAAA,WACAxhC,KAAA+gC,eAAAzuB,SAAA,WAGAuN,OAAA,WACA7f,KAAAid,WAAA7G,SAAA,aACApW,KAAA6nB,QAIAuX,eAAA,WACA,GAAAp/B,KAAA0jB,cAAA1jB,KAAA0jB,aAAA0L,sBAAA9uB,OAAA,CAEAN,KAAA0jB,aAAAyC,KAAAoT,cAAAkI,sBAEA,IAAAjH,EAAAx6B,KAAA0jB,aAAA0L,sBACAkQ,EAAAt/B,KAAAkW,eAAAskB,GAEAx6B,KAAA8+B,SAAAQ,GAEAt/B,KAAAyU,SAAAitB,yBACA1hC,KAAA0jB,aAAAoO,gBAAA9xB,KAAA0jB,aAAA0L,uBAGApvB,KAAAyU,SAAAktB,cACA3hC,KAAA6nB,SAKA3R,eAAA,SAAAskB,GAGA,IAFA,IAAAoH,EAAA,GAEAviC,EAAA,EAAAA,EAAAm7B,EAAAl6B,OAAAjB,IAAA,CACA,IAAA8W,EAAA7X,EAAAk8B,EAAAn7B,IACAigC,EAAAzgC,MAAAqX,eAAAC,GAEAyrB,EAAAliC,KAAA4/B,GAGA,OAAAsC,GAGA5J,KAAA,WACAh4B,KAAAkhC,uBACAlhC,KAAAqjB,QAGAyb,SAAA,SAAAQ,GACAt/B,KAAAyU,SAAAqqB,SAAAQ,IAGAnmB,QAAA,WACAnZ,KAAA0jB,cACA1jB,KAAA0jB,aAAAvK,UAGAnZ,KAAAqjB,QAGA/J,OAAA,WACAtZ,KAAA0jB,cACA1jB,KAAA0jB,aAAApK,SAGAtZ,KAAAqjB,QAGA4d,oBAAA,WAEA,IAAAl6B,EAAA,CACA2gB,QAAA,QACAtT,YAAApU,KAAAoU,YACAuqB,QAAA3+B,KAAAyU,SAAAkqB,SAGA,OAAA3+B,KAAAyU,SAAAmqB,cAAA,SAAA5+B,KAAAyU,SAAAmqB,eACA73B,EAAA63B,aAAA5+B,KAAAyU,SAAAmqB,aAAA,IAAA,KAGA//B,MAAAgI,kBAAA,0BAAAE,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,IACA5H,KAAA0c,MAAAhe,KAAAgM,EAAAhM,MAEAsB,KAAA0c,MAAAuc,IAAA,yBAAA34B,QACAN,KAAA0c,MAAApK,SAAA,eAIAtS,KAAA0jB,aAAA7kB,MAAA2V,mBAAAxU,KAAAoU,YAAApU,KAAA0c,MAAA,CACAgL,QAAA,QACAkL,MAAA5yB,KACAynB,WAAAznB,KAAAyU,SAAAgT,WACAW,SAAApoB,KAAAyU,SAAA2T,SACAkF,mBAAAttB,KAAAyU,SAAA6Y,mBACAyI,YAAA,EACAC,YAAAh2B,KAAAyU,SAAAuhB,YACAtD,gBAAA1yB,KAAA8gC,kBACA5W,kBAAAlqB,KAAAkqB,kBAAAjC,KAAAjoB,MACA8d,YAAA9d,KAAAyU,SAAAqJ,YACAwK,cAAAtoB,KAAAyU,SAAA6T,cACAmD,cAAAzrB,KAAAyU,SAAAgX,gBAIAzrB,KAAA6d,YAAA7d,KAAA0jB,aAAAqC,UAAA,aAAA,SAAAjO,EAAA+pB,GAGAA,EAAAC,SAAApkB,SAAAmkB,EAAAE,UAAArkB,QACA1d,KAAAo/B,yBAMA,CACA3hB,SAAA,CACAukB,WAAA,EACAva,WAAA,KACAkX,QAAA,KACAvW,SAAA,KACA4N,aAAA,EACA4I,aAAA,KACAtR,mBAAA,GACAoU,yBAAA,EACAC,cAAA,EACAM,SAAA3jC,EAAAqlB,KACAmb,SAAAxgC,EAAAqlB,KACA7F,aAAA,EACAwK,cAAA,KACAmD,cAAA,QClOA5sB,MAAAqjC,mBAAArgC,QAAAoa,KAAArd,OAAA,CACA0lB,QAAA,KACApF,QAAA,KACA/Q,MAAA,KACAsG,SAAA,KAEA0tB,UAAA,KACAC,QAAA,KAEA5kB,KAAA,SAAAuC,EAAArC,EAAAjJ,GACAzU,KAAAskB,QAAAhmB,EAAAyhB,GACA/f,KAAAkf,QAAA5gB,EAAAof,GACA1d,KAAAmO,MAAAnO,KAAAskB,QAAAxJ,QAAA,QAEA9a,KAAAqa,YAAA5F,GAEAzU,KAAAqiC,kBAGAC,aAAA,SAAAviB,GACA,IAAAoiB,EAAAniC,KAAAmiC,UACAniC,KAAAuiC,gBAEAviC,KAAAskB,QAAAhmB,EAAAyhB,GAEAoiB,GACAniC,KAAAqiC,kBAIAA,eAAA,WACAriC,KAAAmiC,YAIAniC,KAAAmiC,WAAA,EAEAniC,KAAA6d,YAAA7d,KAAAskB,QAAA,QAAA,sBACAtkB,KAAA6d,YAAA7d,KAAAkf,QAAA,QAAA,sBACAlf,KAAA6d,YAAA7d,KAAAmO,MAAA,SAAA,kBAGAo0B,cAAA,WACAviC,KAAAmiC,YAIAniC,KAAAmiC,WAAA,EAEAniC,KAAAoiC,SACAzZ,aAAA3oB,KAAAoiC,SAGApiC,KAAAwiC,mBAAAxiC,KAAAskB,SACAtkB,KAAAwiC,mBAAAxiC,KAAAkf,SACAlf,KAAAwiC,mBAAAxiC,KAAAmO,SAGAs0B,mBAAA,WACAziC,KAAAoiC,SACAzZ,aAAA3oB,KAAAoiC,SAGApiC,KAAAoiC,QAAAxZ,WAAA5oB,KAAA0iC,aAAAza,KAAAjoB,MAAA,MAGA2iC,mBAAA,WACA3iC,KAAAkf,QAAAwU,IAAA,KAAAntB,SAAA0R,eACAjY,KAAAuiC,iBAIAK,aAAA,WACA5iC,KAAAoiC,SACAzZ,aAAA3oB,KAAAoiC,SAGApiC,KAAA0iC,gBAGAA,aAAA,WACA,GAAA1iC,KAAAkf,QAAA6U,GAAA,YAAA,CAIA,IAAA8O,EAAA7iC,KAAAskB,QAAA/f,MAEA,QAAA,IAAAs+B,EAAA,CAKA,IAAAC,EAAA9iC,KAAA+iC,oBAAAF,GAEA7iC,KAAAkf,QAAA3a,IAAAu+B,GAEA,IAAA,IAAAzjC,EAAA,EAAAA,EAAAW,KAAAkf,QAAA5e,OAAAjB,IACAW,KAAAkf,QAAA7f,GAAA2jC,cAAA,IAAAC,WAAA,QAAA,CACAC,UAAA,gBAEAljC,KAAAkf,QAAA7f,GAAA2jC,cAAA,IAAAG,MAAA,UAKAnjC,KAAAkf,QAAA6U,GAAA,WACAl1B,MAAAuF,gBAAApE,KAAAkf,YAIA6jB,oBAAA,SAAAF,GACA,OAAAA,KC/GAhkC,MAAAoiB,KAAApf,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACAf,IAAA,KACA+wB,SAAA,KACAC,MAAA,KACAC,aAAA,KACAC,cAAA,KACAxb,KAAA,KAEAvK,KAAA,SAAA5F,GACA5X,KAAAoT,WAAA9U,EAAAsZ,GACA5X,KAAAqS,IAAArS,KAAAoT,WAAAiD,KAAA,cACArW,KAAAqjC,MAAArjC,KAAAqS,IAAAgE,KAAA,YACArW,KAAAsjC,aAAAtjC,KAAAqjC,MAAAznB,OAAA,cACA5b,KAAAujC,cAAAvjC,KAAAqjC,MAAAznB,OAAA,sBACA5b,KAAAojC,SAAApjC,KAAAoT,WAAAiD,KAAA,oBAAAzC,UACA5T,KAAA+nB,KAAA/nB,KAAAojC,SAAAr8B,KAAA,WAAAghB,KAGA/nB,KAAAoT,WAAArM,KAAA,UACAlF,QAAA2hC,IAAA,oDACAxjC,KAAAoT,WAAArM,KAAA,QAAA0X,WAGAze,KAAAoT,WAAArM,KAAA,OAAA/G,MAEA,IAAA,IAAAX,EAAA,EAAAA,EAAAW,KAAAqjC,MAAA/iC,OAAAjB,IAAA,CACA,MAAAqjB,EAAA1iB,KAAAqjC,MAAA1wB,GAAAtT,GAGAoH,EAAAic,EAAAtU,KAAA,QACA3H,GAAA,MAAAA,EAAAkJ,OAAA,KACA3P,KAAA6d,YAAA6E,EAAA,UAAA5K,IACA,CAAAjW,QAAAi0B,UAAAj0B,QAAAinB,YAAAxZ,SAAAwI,EAAAC,WACAD,EAAAK,iBACAnY,KAAAyjC,UAAA3rB,EAAA8C,kBAGA5a,KAAA6d,YAAA6E,EAAA,QAAA5K,IACAA,EAAAK,iBACA7Z,EAAAwZ,EAAA8C,eACA5a,KAAAyjC,UAAA3rB,EAAA8C,eACA5a,KAAA0jC,iBAAA5rB,EAAA8C,iBAGAnU,EAAA/E,OAAA,KAAAoK,OAAA63B,gBACAC,YAAAlhB,IAIA1iB,KAAA6d,YAAA6E,EAAA,UAAA5K,IACA,GACA,CAAAjW,QAAAgiC,SAAAhiC,QAAAiiC,WAAAx0B,SAAAwI,EAAAC,UACAzZ,EAAAylC,SAAA/jC,KAAAqS,IAAA,GAAAyF,EAAA8C,eACA,CACA,IAAAsG,EAEAA,EADApJ,EAAAC,WAAA,QAAAlZ,MAAAia,YAAAjX,QAAAgiC,SAAAhiC,QAAAiiC,WACAxlC,EAAAwZ,EAAA8C,eAAAgN,SAAAwM,KAAA,MAAA7Y,SAAA,KAEAjd,EAAAwZ,EAAA8C,eAAAgN,SAAA5M,KAAA,MAAAO,SAAA,KAEA2F,EAAA5gB,SACAwX,EAAAK,iBACAnY,KAAA0jC,iBAAAxiB,GACAA,EAAA5I,QACAtY,KAAAgkC,YAAA9iB,OAMAlhB,KAAAikC,gBAEApiC,QAAAsf,KAAAtJ,GAAA,SAAA,KACA7X,KAAAikC,kBAIAjkC,KAAA+nB,KAAAG,SAAArQ,GAAA,QAAAC,IAEA,MADAxZ,EAAAwZ,EAAA8C,eACAxM,KAAA,QAAAuB,OAAA,IACAmI,EAAAK,mBAIAnY,KAAA+nB,KAAAlQ,GAAA,eAAAC,IACA9X,KAAAyjC,UAAAnlC,EAAAwZ,EAAAwb,gBAAAvsB,KAAA,UAIA08B,UAAA,SAAAS,GACA,MAAAhjB,EAAAlhB,KAAAmkC,QAAAD,GAEAhjB,EAAA,KAAAlhB,KAAAsjC,aAAA,KAIAtjC,KAAAokC,cACApkC,KAAAsjC,aAAApiB,EAAA5O,SAAA,OACAtS,KAAA0jC,iBAAAxiB,GACAlhB,KAAAgkC,YAAA9iB,GAEAlhB,KAAA+nB,KAAAG,SAAArR,YAAA,OACA7W,KAAA+nB,KAAAG,SAAAtM,OAAA,aAAAsF,EAAAna,KAAA,WAAAuL,SAAA,OAEAtS,KAAA0X,QAAA,YAAA,CACAwJ,KAAAA,MAIAkjB,YAAA,WACA,MAAAljB,EAAAlhB,KAAAsjC,aAAAzsB,YAAA,OACA7W,KAAAsjC,aAAA,KAEAtjC,KAAA0X,QAAA,cAAA,CACAwJ,KAAAA,KAIAwiB,iBAAA,SAAAQ,GACA,MAAAhjB,EAAAlhB,KAAAmkC,QAAAD,GAEAhjB,EAAA,KAAAlhB,KAAAujC,cAAA,KAIAvjC,KAAAujC,cAAAn1B,KAAA,WAAA,MACApO,KAAAujC,cAAAriB,EAAA9S,KAAA,WAAA,OAGA41B,YAAA,SAAAE,GACA,MAAAhjB,EAAAlhB,KAAAmkC,QAAAD,GACAG,EAAArkC,KAAAqS,IAAAgyB,aAEAC,EADApjB,EAAAlf,SAAAgX,KACAhZ,KAAAqS,IAAArQ,SAAAgX,KACA,IAAAurB,GAAA,EAGA,GAAAD,EAAA,EACAC,EAAAF,EAAAC,EAAA,OACA,CACA,MAAAE,EAAAtjB,EAAA2X,aACA4L,EAAAzkC,KAAAqS,IAAA+nB,KAAA,eAGAkK,EAAAE,EAAAC,IACAF,EAAAF,GAAAC,GAAAG,EAAAD,IAAA,KAIA,IAAAD,GACAvkC,KAAAqS,IAAAgyB,WAAAE,IAIAN,cAAA,WACApzB,KAAAC,MAAA9Q,KAAAqS,IAAA+nB,KAAA,eAAA,IAAAp6B,KAAAoT,WAAAgnB,KAAA,gBACAp6B,KAAAqS,IAAAC,SAAA,cACAtS,KAAAojC,SAAAvsB,YAAA,YAEA7W,KAAAqS,IAAAwE,YAAA,cACA7W,KAAAojC,SAAA9wB,SAAA,YAIA6xB,QAAA,SAAAD,GACA,GAAAA,aAAA1lC,OACA,OAAA0lC,EAGA,GAAAA,aAAAQ,YACA,OAAApmC,EAAA4lC,GAGA,GAAA,iBAAAA,EACA,KAAA,iBAGA,MAAAhjB,EAAAlhB,KAAAqjC,MAAAznB,OAAA,aAAAsoB,OAEA,IAAAhjB,EAAA5gB,OACA,KAAA,mBAAA4jC,EAGA,OAAAhjB,KCxLAriB,MAAA8lC,WAAA9iC,QAAAoa,KAAArd,OAAA,CACA6V,SAAA,KACAmwB,WAAA,KACAC,OAAA,KAEAC,SAAA,KACAC,OAAA,KACAnE,OAAA,KACAoE,YAAA,KAEAxnB,KAAA,SAAA/I,GACAzU,KAAAqa,YAAA5F,EAAA5V,MAAA8lC,WAAAlnB,UAEAzd,KAAAyU,SAAAwwB,iBACAjlC,KAAAyU,SAAAywB,SAAA,GAGAllC,KAAA8kC,SAAAxmC,EAAA0B,KAAAyU,SAAA0wB,iBACAnlC,KAAA+kC,OAAAzmC,EAAA0B,KAAAyU,SAAA2wB,eACAplC,KAAA4gC,OAAA5gC,KAAA+kC,OAAAxpB,SAAA,SACAvb,KAAA4kC,WAAA5kC,KAAA4gC,OAAArlB,WAAAjb,OAEAN,KAAAyU,SAAA0nB,WACAn8B,KAAA6kC,OAAA,IAAAhmC,MAAAwmC,gBAAArlC,KAAA+kC,OAAA,CACA3H,aAAAp9B,KAAAslC,aAAArd,KAAAjoB,SAIAA,KAAAglC,YAAAhlC,KAAA+kC,OAAA1uB,KAAA,0BACArW,KAAA6d,YAAA7d,KAAAglC,YAAA,QAAA,wBAEAhlC,KAAAulC,YAGAC,OAAA,SAAAC,GACA,KAAAzlC,KAAAyU,SAAAixB,UAAA1lC,KAAA4kC,YAAA5kC,KAAAyU,SAAAixB,UAAA,CAKA,IAAAC,EAAArnC,EAAAmnC,GAAAj3B,SAAAxO,KAAA4gC,QACAgF,EAAAD,EAAAtvB,KAAA,WAEArW,KAAAyU,SAAA0nB,UACAn8B,KAAA6kC,OAAAha,SAAA8a,GAGA3lC,KAAAglC,YAAAhlC,KAAAglC,YAAA9mB,IAAA0nB,GAEA5lC,KAAA6d,YAAA+nB,EAAA,QAAA,wBACA5lC,KAAA4kC,aAEA5kC,KAAAulC,aAGAD,aAAA,WACA,GAAAtlC,KAAAyU,SAAA0nB,SAAA,CAOA,IAFA,IAAAjK,EAAA,GAEA7yB,EAAA,EAAAA,EAAAW,KAAA6kC,OAAAnb,OAAAppB,OAAAjB,IAAA,CACA,IAAAiX,EAAAhY,EAAA0B,KAAA6kC,OAAAnb,OAAArqB,IAAA+O,KAAApO,KAAAyU,SAAAoxB,aACA3T,EAAAxyB,KAAA4W,GAIA,IAAAvP,EAAA,CACAmrB,IAAA/qB,KAAAC,UAAA8qB,IAGArzB,MAAAgI,kBAAA7G,KAAAyU,SAAAqxB,cAAA/+B,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,IACA8C,EAAAhD,SACA1H,KAAA+lC,eAAA7T,GACArzB,MAAAkJ,GAAA+a,cAAAjkB,MAAAc,EAAA,MAAAK,KAAAyU,SAAAuxB,yBAEAnnC,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAAK,KAAAyU,SAAAwxB,0BAMAC,qBAAA,SAAA/mB,GACA,KAAAnf,KAAAyU,SAAAywB,UAAAllC,KAAA4kC,YAAA5kC,KAAAyU,SAAAywB,UAAA,CAKA,IAAAS,EAAArnC,EAAA6gB,EAAAzB,QAAA5C,QAAA,MAEA9a,KAAAmmC,kBAAAR,IACA3lC,KAAAomC,WAAAT,KAIAQ,kBAAA,SAAAR,GACA,IAAAzgC,EAAAlF,KAAAqmC,YAAAV,GACA,OAAAruB,QAAAzY,MAAAc,EAAA,MAAAK,KAAAyU,SAAA6xB,qBAAA,CAAAphC,KAAAA,MAGAkhC,WAAA,SAAAT,GACA,IAAA5+B,EAAA,CACAuP,GAAAtW,KAAAumC,UAAAZ,IAGA9mC,MAAAgI,kBAAA7G,KAAAyU,SAAA+xB,aAAAz/B,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,GACA5H,KAAAymC,yBAAA/7B,EAAAi7B,MAKAc,yBAAA,SAAA/7B,EAAAi7B,GACA,IAAArvB,EAAAtW,KAAAumC,UAAAZ,GACAzgC,EAAAlF,KAAAqmC,YAAAV,GAEAj7B,EAAAhD,SACA1H,KAAA6kC,QACA7kC,KAAA6kC,OAAAxZ,YAAAsa,GAGAA,EAAAhqB,SACA3b,KAAA4kC,aACA5kC,KAAAulC,WACAvlC,KAAA0mC,aAAApwB,GAEAzX,MAAAkJ,GAAA+a,cAAAjkB,MAAAc,EAAA,MAAAK,KAAAyU,SAAAkyB,qBAAA,CAAAzhC,KAAAA,MAEArG,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAAK,KAAAyU,SAAAmyB,kBAAA,CAAA1hC,KAAAA,MAIA6gC,eAAA,SAAA7T,GACAlyB,KAAAyU,SAAAsxB,eAAA7T,IAGAwU,aAAA,SAAApwB,GACAtW,KAAAyU,SAAAiyB,aAAApwB,IAGAiwB,UAAA,SAAAZ,GACA,OAAAA,EAAAv3B,KAAApO,KAAAyU,SAAAoxB,cAGAQ,YAAA,SAAAV,GACA,OAAA9mC,MAAAuE,WAAAuiC,EAAAv3B,KAAApO,KAAAyU,SAAAoyB,iBAGAtB,SAAA,WAWA,GATA,IAAAvlC,KAAA4kC,YACA5kC,KAAA+kC,OAAAld,OACA7nB,KAAA8kC,SAAAjuB,YAAA,YAEA7W,KAAA+kC,OAAA/M,OACAh4B,KAAA8kC,SAAAxyB,SAAA,WAIAtS,KAAAyU,SAAA0nB,SAAA,CACA,IAAA2K,EAAA9mC,KAAA+kC,OAAA1uB,KAAA,SAEA,IAAArW,KAAA4kC,WACAkC,EAAAx0B,SAAA,YAEAw0B,EAAAjwB,YAAA,YAKA7W,KAAAyU,SAAAywB,UAAAllC,KAAA4kC,YAAA5kC,KAAAyU,SAAAywB,SACAllC,KAAAglC,YAAA1yB,SAAA,YAEAtS,KAAAglC,YAAAnuB,YAAA,YAIA7W,KAAAyU,SAAAsyB,qBACA/mC,KAAAyU,SAAAixB,UAAA1lC,KAAA4kC,YAAA5kC,KAAAyU,SAAAixB,SACApnC,EAAA0B,KAAAyU,SAAAsyB,oBAAAz0B,SAAA,UAEAhU,EAAA0B,KAAAyU,SAAAsyB,oBAAAlwB,YAAA,aAIA,CACA4G,SAAA,CACA2nB,cAAA,KACAD,gBAAA,KACA4B,mBAAA,KACAlB,YAAA,UACAgB,cAAA,YACA1K,UAAA,EACA8I,gBAAA,EACAC,SAAA,EACAQ,SAAA,KACAI,cAAA,KACAU,aAAA,KACAR,sBAAAnnC,MAAAc,EAAA,MAAA,oBACAsmC,mBAAApnC,MAAAc,EAAA,MAAA,4BACA2mC,qBAAAznC,MAAAc,EAAA,MAAA,6CACAgnC,qBAAA9nC,MAAAc,EAAA,MAAA,qBACAinC,kBAAA/nC,MAAAc,EAAA,MAAA,6BACAomC,eAAAznC,EAAAqlB,KACA+iB,aAAApoC,EAAAqlB,QC/MA9kB,MAAAmoC,YAAAnoC,MAAAkW,kBAAAnW,OAAA,CACAqoC,eAAA,KAEAC,iBAAA,KACAC,kBAAA,KACAC,aAAA,EACAC,aAAA,KAEA7pB,KAAA,SAAA1I,EAAAL,GACAzU,KAAA6X,GAAA,aAAA,KACA7X,KAAA6d,YAAA7d,KAAA4c,SAAAvG,KAAA,sCAAA,QAAA,mBACArW,KAAA6d,YAAA7d,KAAA4c,SAAAvG,KAAA,yCAAA,QAAA,oBAEArW,KAAAinC,eAAAjnC,KAAA4c,SAAAvG,KAAA,aACArW,KAAA6d,YAAA7d,KAAAinC,eAAA,QAAA,oBAGAjnC,KAAA6X,GAAA,gBAAA,KACA7X,KAAAonC,cACApnC,KAAAyU,SAAAiP,aACA1jB,KAAAyU,SAAAiP,aAAA0F,iBACAppB,KAAAyU,SAAApQ,QACArE,KAAAqnC,aACArnC,KAAAyU,SAAApQ,MAAAijC,eAAAtnC,KAAAmW,SAAApP,KAAA,MAAA/G,KAAAqnC,cAEArnC,KAAAyU,SAAApQ,MAAAkjC,iBAAAvnC,KAAAmW,SAAApP,KAAA,WAMA/G,KAAAqjB,KAAAvO,EAAAL,GAEAzU,KAAAyU,SAAA6N,WAAA5iB,KAAA,IAAAM,KAAAwnC,sBAGAC,gBAAA,WACA,IAAA5oC,MAAA6oC,iBAAA1nC,KAAAmW,SAAApP,KAAA,MAAA,CAEA4gC,OAAA5gC,IACAA,EAAAmV,YACAlc,KAAAyU,SAAAyH,UAAAlc,KAAAqnC,aAAAtgC,EAAAmV,WAGAlc,KAAAonC,aAAA,EACApnC,KAAAof,WAKAwoB,iBAAA,WACA,IAAAnzB,EAAA,GAEAzU,KAAAmW,SAAApP,KAAA,iBACA0N,EAAAozB,cAAA7nC,KAAAmW,SAAApP,KAAA,eACA0N,EAAAqzB,eAAA9nC,KAAAmW,SAAApP,KAAA,iBAGA,IAAAlI,MAAAkpC,iBAAA/nC,KAAAmW,SAAApP,KAAA,MAAA,KAAA0N,IAGAuzB,eAAA,WACA,QAAA,IAAAhoC,KAAAinC,eAAA,GAAAgB,eACA,OAGA,MAAAC,SAAAA,EAAAC,UAAAA,GAAAnoC,KAAAooC,iBAEA,OAAApoC,KAAAknC,mBACAlnC,KAAAknC,iBAAAgB,EACAloC,KAAAmnC,kBAAAgB,GAGAnoC,KAAAinC,eAAA,GAAAgB,eAAA,EACAjoC,KAAAinC,eAAA,GAAAoB,aAAAH,EAAA5nC,OAGAN,KAAAinC,eAAA/kB,IAAA,wBAAApK,IACAA,EAAAK,mBAEAyQ,WAAA,KACA5oB,KAAAinC,eAAAplB,IAAA,0BACA,MAGA2lB,kBAAA,WACA,GAAA,OAAAxnC,KAAAknC,iBACA,OAAA,EAGA,MAAAgB,SAAAA,EAAAC,UAAAA,GAAAnoC,KAAAooC,iBAEA,OAAAD,IAAAnoC,KAAAmnC,oBAKAgB,EAcA7wB,QAAAzY,MAAAc,EAAA,MAAA,iFAAA,CACA2oC,OAAAtoC,KAAAmnC,kBACAoB,OAAAJ,KAdAnoC,KAAAwoC,mBAAAN,GACAloC,KAAAinC,eAAA1iC,IAAA,GAAA1F,MAAA8F,MAAAujC,EAAA,QAAAloC,KAAAmnC,sBACA,GAIA7vB,QAAAzY,MAAAc,EAAA,MAAA,0DAAA,CACA8oC,IAAAzoC,KAAAmnC,uBAWAiB,eAAA,WACA,MAAAM,EAAA1oC,KAAAinC,eAAA1iC,MAAArD,MAAA,KACAinC,EAAAO,EAAApoC,OAAA,EAAAooC,EAAAC,MAAA,KAEA,MAAA,CAAAT,SADAQ,EAAAjoC,KAAA,KACA0nC,UAAAA,MAKAtpC,MAAA0V,2BAAA,yBAAA1V,MAAAmoC,aC5HAnoC,MAAA6oC,iBAAA7lC,QAAA4+B,MAAA7hC,OAAA,CAEA8d,MAAA,KACAG,QAAA,KACA+rB,YAAA,KACAC,SAAA,KACA5rB,WAAA,KACA6rB,YAAA,KACA5rB,SAAA,KACA6rB,iBAAA,KACAC,YAAA,KACAC,gBAAA,KACAC,eAAA,KAGAC,OAAA,KACAC,MAAA,KACAC,SAAA,KACAC,WAAA,KACAj2B,KAAA,KACAk2B,eAAA,KACAC,QAAA,KACAC,kBAAA,KACAC,eAAA,KACAC,YAAA,KACAC,cAAA,KACAC,iBAAA,KAGAC,qBAAA,EACAC,iBAAA,EACAC,cAAA,EACAC,eAAA,EACAC,mBAAA,KACAC,UAAA,EAGAC,qBAAA,EACAC,YAAA,GACAC,QAAA,KACAC,UAAA,KACAC,iBAAA,EACAC,gBAAA,EACAC,eAAA,EACAC,eAAA,EACAC,eAAA,EACAC,cAAA,EACAC,aAAA,EACAC,YAAA,EACAC,cAAA,EACAC,YAAA,EACAC,SAAA,GACAC,iBAAA,EACAC,gBAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,gBAAA,EACAC,eAAA,KACAC,oBAAA,EACAC,sBAAA,YACAC,yBAAA,EAGAC,YAAA,KACAC,cAAA,KAEAruB,KAAA,SAAA8sB,EAAA71B,GACAzU,KAAAuqC,UAAA/nC,KAAAspC,MAEA9rC,KAAAqa,YAAA5F,EAAA5V,MAAA6oC,iBAAAjqB,UAEA,OAAAzd,KAAAyU,SAAAs3B,uBACA/rC,KAAAyU,SAAAs3B,qBAAAltC,MAAAmtC,WAGAhsC,KAAAsqC,QAAAA,EACAtqC,KAAAkrC,SAAA,CAAAe,EAAA,EAAAC,EAAA,GAGAlsC,KAAAoT,WAAA9U,EAAA,kDAAAkQ,SAAA3M,QAAAqR,MACAlT,KAAA0c,MAAApe,EAAA,4BAAAkQ,SAAAxO,KAAAoT,YACApT,KAAA6c,QAAAve,EAAA,yBAAAkQ,SAAAxO,KAAAoT,YAEApT,KAAAqjB,KAAArjB,KAAAoT,WAAApT,KAAAyU,UAEAzU,KAAA6oC,SAAAvqC,EAAA,gCAAAkQ,SAAAxO,KAAA6c,SACA7c,KAAAid,WAAA3e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,aACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAA6oC,UACA7oC,KAAA8oC,YAAAxqC,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,0BACAlY,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAAxO,KAAA6oC,UAEA7oC,KAAAyU,SAAA03B,mBACAnsC,KAAAkd,SAAA5e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,uBACAlY,KAAAzE,MAAAc,EAAA,MAAA,yBACA6O,SAAAxO,KAAA6oC,UACA7oC,KAAA6d,YAAA7d,KAAAkd,SAAA,WAAAld,KAAAosC,YAGApsC,KAAA6d,YAAA7d,KAAA8oC,YAAA,WAAA9oC,KAAAosC,WACApsC,KAAA6d,YAAA7d,KAAAid,WAAA,WAAAjd,KAAA6nB,MACA7nB,KAAAsrB,eAAAtrB,KAAAif,OAAA,SAEAjf,KAAAqrC,aAAArrC,KAAAqsC,kBACAxtC,MAAAgI,kBAAA,sBAAA,CAAAyjC,QAAAA,GAAAtqC,KAAAssC,WAAArkB,KAAAjoB,QAMAqsC,gBAAA,WACA,IAAAE,EAAA1qC,QAAAka,KAAA2X,IAAA,GAAA8Y,gBAAAC,YACAC,EAAA7qC,QAAAka,KAAA2X,IAAA,GAAA8Y,gBAAAG,aAEA,OAAA97B,KAAA8b,IAAA+f,EAAAH,IAAAzgC,OAAA8gC,iBAAA,EAAA,EAAA,IAQAN,WAAA,SAAAvlC,GACAA,EAAArI,MACAuJ,MAAApJ,MAAAc,EAAA,MAAA,qCAGAK,KAAA0c,MAAAhe,KAAAqI,EAAArI,MACAsB,KAAAqjC,MAAA/kC,EAAA,WAAA0B,KAAA0c,OACA1c,KAAA6sC,gBAAAvuC,EAAA,SAAA0B,KAAA0c,OACA1c,KAAA8sC,OAAAxuC,EAAA,QAAA0B,KAAA6sC,iBACA7sC,KAAA4oC,YAAAtqC,EAAA,gCAAA0B,KAAA0c,OACA1c,KAAA+oC,iBAAAzqC,EAAA,0BAAA0B,KAAA0c,OACA1c,KAAA8qC,aAAA9qC,KAAA+oC,iBAAA7N,cACAl7B,KAAA+qC,YAAA/qC,KAAA+oC,iBAAAgE,aAEA/sC,KAAAgtC,eAEAhtC,KAAAitC,wBAGAjtC,KAAAmpC,OAAA,IAAA+D,OAAAC,aAAA,gBAGAntC,KAAAipC,gBAAA3qC,EAAA,mBAAA0B,KAAA+oC,kBACA/oC,KAAAipC,gBAAArQ,MAAA54B,KAAA+qC,aACA/qC,KAAAipC,gBAAAhb,OAAAjuB,KAAA8qC,cAEA9qC,KAAAmpC,OAAAiE,qBAAA,EACAptC,KAAA4rC,YAAA,KACA/pC,QAAA0f,sBAAAvhB,KAAAmpC,OAAAkE,UAAAplB,KAAAjoB,KAAAmpC,UAIA,IAAAmE,EAAAzuC,MAAAuH,aAAA,oBAAA,CACAkkC,QAAAtqC,KAAAsqC,QACA3zB,KAAA3W,KAAAqrC,aACAd,UAAAvqC,KAAAuqC,YAIA2C,OAAAK,MAAAC,QAAAF,EAAAG,IACAztC,KAAAopC,MAAAqE,EACAztC,KAAAopC,MAAAsE,IAAA,CACAC,QAAA,SACAC,QAAA,SACA50B,KAAAhZ,KAAA+qC,YAAA,EACAjS,IAAA94B,KAAA8qC,aAAA,IAEA9qC,KAAAmpC,OAAAjrB,IAAAle,KAAAopC,OAEAppC,KAAAiqC,eAAAjqC,KAAAopC,MAAAyE,YACA7tC,KAAAgqC,cAAAhqC,KAAAopC,MAAA0E,WACA9tC,KAAAmqC,UAAA,EAEAnqC,KAAAsrC,qBAAAtrC,KAAA+tC,2BAGA/tC,KAAAguC,oCACAhuC,KAAAiuC,4BAGA,IAAAC,EAAA,CACAC,gBAAAnuC,KAAA+tC,2BACAK,QAAA,EACAC,QAAA,GAGAC,GAAA,EACA,GAAAvnC,EAAAuiC,WAAA,CAEA,IAAAiF,EAAAxnC,EAAAuiC,WAGAkF,EAAAN,EAAAC,gBAAAvV,MAAA2V,EAAAtC,EACAwC,EAAAP,EAAAC,gBAAAlgB,OAAAsgB,EAAArC,EAEAgC,EAAAE,QAAAI,EAAAN,EAAAC,gBAAAvV,MAAA,EACAsV,EAAAG,QAAAI,EAAAP,EAAAC,gBAAAlgB,OAAA,EAEAqgB,GAAA,EAGAtuC,KAAA0uC,qBAAAR,GAEAI,GACAtuC,KAAA2uC,oBAGA3uC,KAAA4uC,kBACA5uC,KAAA6uC,oBAGA7uC,KAAA8uC,uBAGA9uC,KAAA6d,YAAA7d,KAAAipC,gBAAA,sBAAAjpC,KAAA+uC,kBACA/uC,KAAA6d,YAAA7d,KAAAipC,gBAAA,uBAAAjpC,KAAAgvC,kBACAhvC,KAAA6d,YAAA7d,KAAAipC,gBAAA,mBAAAjpC,KAAAivC,gBACAjvC,KAAA6d,YAAA7d,KAAAipC,gBAAA,uBAAAjpC,KAAAkvC,iBAEAlvC,KAAAmvC,eAGAnvC,KAAA4rC,cAGA5rC,KAAAqjC,MAAA9qB,QAAAb,QAAA,YAOA03B,aAAA,WACA,IAAApvC,KAAAurC,eAAA,CAIAvrC,KAAAurC,gBAAA,EACAvrC,KAAAqrC,aAAArrC,KAAAqsC,kBAGA,IAAAiB,EAAAzuC,MAAAuH,aAAA,oBAAA,CACAkkC,QAAAtqC,KAAAsqC,QACA3zB,KAAA3W,KAAAqrC,aACAd,UAAAvqC,KAAAuqC,YAGAvqC,KAAAopC,MAAAiG,OAAA/B,EAAAG,IACAztC,KAAAiqC,eAAAwD,EAAAI,YACA7tC,KAAAgqC,cAAAyD,EAAAK,WACA9tC,KAAAsrC,qBAAA,CAAA1S,MAAA54B,KAAAiqC,eAAAhc,OAAAjuB,KAAAgqC,eACAhqC,KAAAitC,wBACAjtC,KAAA4rC,cACA5rC,KAAAurC,gBAAA,MAOA0B,sBAAA,WACA,GAAAjtC,KAAAoT,WAAA,CAKA,IAAA25B,EAAAjhC,OAAAihC,WACA7R,EAAApvB,OAAAovB,YAEAl7B,KAAAoT,WAAA0O,IAAA,CACA8W,MAAAmU,EACAuC,YAAAvC,EACA/zB,KAAA,EAEAiV,OAAAiN,EACAqU,aAAArU,EACApC,IAAA,IAGA94B,KAAA0c,MAAAoF,IAAA,CACAmM,OAAAiN,EAAA,KAGA6R,EAAA7R,EACAl7B,KAAAoT,WAAAd,SAAA,YAEAtS,KAAAoT,WAAAyD,YAAA,YAGA7W,KAAAkpC,gBACAlpC,KAAAkpC,eAAApnB,IAAA,CACA9I,KAAAhZ,KAAAkpC,eAAAthB,SAAAgR,QAAA,EAAA54B,KAAAkpC,eAAAtQ,QAAA,EAAA,KACAE,IAAA94B,KAAAkpC,eAAAthB,SAAAqG,SAAA,EAAAjuB,KAAAkpC,eAAAjb,SAAA,EAAA,OAKAjuB,KAAA+oC,kBAAA/oC,KAAAopC,OACAppC,KAAAiuC,8BAOAA,0BAAA,WAEA,IAAAuB,EAAA,CACA5W,MAAA54B,KAAA+qC,YACA9c,OAAAjuB,KAAA8qC,cAGA9qC,KAAA8qC,aAAA9qC,KAAA+oC,iBAAA7N,cACAl7B,KAAA+qC,YAAA/qC,KAAA+oC,iBAAAgE,aAEA/sC,KAAAmpC,OAAAsG,cAAA,CACA7W,MAAA54B,KAAA+qC,YACA9c,OAAAjuB,KAAA8qC,eAGA,IAAA4E,EAAA1vC,KAAA+tC,2BAIA,GAAA,SAAA/tC,KAAAqqC,YAAA,CACArqC,KAAAmqC,UAAAnqC,KAAA2vC,kBAAA3vC,KAAA+tC,4BACA,IAAA6B,EAAA5vC,KAAA6vC,sBAAA7vC,KAAAkqC,oBACAlqC,KAAAguC,oCACAhuC,KAAA8vC,mBAAAF,QAGA5vC,KAAAmqC,UAAAnqC,KAAA+vC,oBAAA/vC,KAAA+tC,4BAAA/tC,KAAAirC,YAIAjrC,KAAAgwC,iBAAAR,GACAxvC,KAAAiwC,sBACAjwC,KAAAkwC,sBAAAV,GACAxvC,KAAAmwC,aAEAnwC,KAAA4rC,eAEA8D,EAAA9W,MAAA54B,KAAAsrC,qBAAA1S,MAAA,KAAA8W,EAAAzhB,OAAAjuB,KAAAsrC,qBAAArd,OAAA,MACAjuB,KAAAovC,gBAUAY,iBAAA,SAAAR,GACAxvC,KAAAopC,MAAAsE,IAAA,CACA10B,KAAAhZ,KAAAopC,MAAApwB,MAAAw2B,EAAA5W,MAAA54B,KAAA+qC,aAAA,EACAjS,IAAA94B,KAAAopC,MAAAtQ,KAAA0W,EAAAvhB,OAAAjuB,KAAA8qC,cAAA,KAOA8D,gBAAA,WACA5uC,KAAAqpC,SAAA,IAAA6D,OAAAkD,KAAA,CACAxX,MAAA54B,KAAAopC,MAAAxQ,MACA3K,OAAAjuB,KAAAopC,MAAAnb,OACAoiB,KAAA,kBACA1C,QAAA,SACAC,QAAA,SACA0C,yBAAA,iBACAt3B,KAAAhZ,KAAAopC,MAAApwB,KACA8f,IAAA94B,KAAAopC,MAAAtQ,MAEA94B,KAAAmpC,OAAAjrB,IAAAle,KAAAqpC,UACArpC,KAAA4rC,eAMA+C,kBAAA,WACA,IAAAxD,EAAAnrC,KAAAmrC,gBACAoF,EAAAvwC,KAAA+tC,2BAAAnV,MAAAuS,EAAAgD,gBAAAvV,MAEA4X,EAAArF,EAAAiD,QAAAmC,EAAAvwC,KAAAmqC,UAAAnqC,KAAAirC,YACAwF,EAAAtF,EAAAkD,QAAAkC,EAAAvwC,KAAAmqC,UAAAnqC,KAAAirC,YAGAuF,GAAAxwC,KAAAopC,MAAApwB,KACAy3B,GAAAzwC,KAAAopC,MAAAtQ,IAEA,IAAA4X,EAAA,EACAC,EAAA,EAGA3wC,KAAAqpC,UAAA,IAAA8B,EAAAiD,SAAA,IAAAjD,EAAAkD,UACA,SAAAruC,KAAAqqC,aACAqG,EAAA1wC,KAAAqpC,SAAArwB,KAAAhZ,KAAAopC,MAAApwB,KACA23B,EAAA3wC,KAAAqpC,SAAAvQ,IAAA94B,KAAAopC,MAAAtQ,MAGA4X,EAAA1wC,KAAAwpC,QAAAxwB,KAAAhZ,KAAAopC,MAAApwB,KACA23B,EAAA3wC,KAAAwpC,QAAA1Q,IAAA94B,KAAAopC,MAAAtQ,KAIA0X,GAAAE,EACAD,GAAAE,EAGAxF,EAAAiD,SAAAsC,GAAAH,EAAAvwC,KAAAmqC,UAAAnqC,KAAAirC,aACAE,EAAAkD,SAAAsC,GAAAJ,EAAAvwC,KAAAmqC,UAAAnqC,KAAAirC,cAGAjrC,KAAAspC,WAAA,IAAA4D,OAAA0D,MAAA,CACA,IAAA1D,OAAA2D,OAAA,CAAAC,OAAA,EAAAT,KAAA,kBAAAU,YAAA,EAAAC,OAAA,wBAAAh4B,KAAA,EAAA8f,IAAA,EAAA6U,QAAA,SAAAC,QAAA,WACA,IAAAV,OAAA2D,OAAA,CAAAC,OAAA,EAAAT,KAAA,sBAAAU,YAAA,EAAAC,OAAA,wBAAAh4B,KAAA,EAAA8f,IAAA,EAAA6U,QAAA,SAAAC,QAAA,YACA,CACAD,QAAA,SACAC,QAAA,SACA50B,KAAAw3B,EACA1X,IAAA2X,IAGAzwC,KAAA0uC,qBAAAvD,GACAnrC,KAAAmpC,OAAAjrB,IAAAle,KAAAspC,aAMA2H,iBAAA,WACAjxC,KAAAspC,YAGAtpC,KAAAmpC,OAAAxtB,OAAA3b,KAAAspC,YACAtpC,KAAAspC,WAAA,MAHAtpC,KAAA2uC,oBAMA3uC,KAAA4rC,eAMAqE,oBAAA,WACA,GAAAjwC,KAAAqpC,SAAA,CACA,IAAA6H,EAAA,CACAl4B,KAAAhZ,KAAA+qC,YAAA,EACAjS,IAAA94B,KAAA8qC,aAAA,GAIA,GAAA,SAAA9qC,KAAAqqC,YACA6G,EAAAtY,MAAA54B,KAAA+qC,YACAmG,EAAAjjB,OAAAjuB,KAAA8qC,kBAGA,GAAA9qC,KAAAgrC,aAAA,CAEA,IAAAmG,EAAAnxC,KAAAgrC,aAIAuF,EAFAvwC,KAAA+tC,2BAEAnV,MAAAuY,EAAAhD,gBAAAvV,MAGAsY,EAAAtY,MAAAuY,EAAAvY,MAAA2X,EAAAvwC,KAAAmqC,UACA+G,EAAAjjB,OAAAkjB,EAAAljB,OAAAsiB,EAAAvwC,KAAAmqC,UAGAnqC,KAAAopC,MAAAsE,IAAA,CACA10B,KAAAhZ,KAAA+qC,YAAA,EAAAoG,EAAA/C,QAAAmC,EACAzX,IAAA94B,KAAA8qC,aAAA,EAAAqG,EAAA9C,QAAAkC,SAGAjyC,EAAAM,OAAAsyC,EAAAlxC,KAAA+tC,4BAGA/tC,KAAAqpC,SAAAqE,IAAAwD,KAIAhB,sBAAA,SAAAV,GACA,GAAAxvC,KAAAspC,WAAA,CACA,IAAA8E,EAAApuC,KAAAspC,WAAAtwB,KAAAhZ,KAAA+qC,YAAA,EACAsD,EAAAruC,KAAAspC,WAAAxQ,IAAA94B,KAAA8qC,aAAA,EAEAsG,EAAApxC,KAAAopC,MAAAxQ,MAEAyY,EADArxC,KAAA+tC,2BAAAnV,MAAA54B,KAAAmqC,UACAiH,EAAApxC,KAAAirC,YAEAmD,IAAAoB,EAAA5W,MAAA54B,KAAA+qC,aAAA,EACAsD,IAAAmB,EAAAvhB,OAAAjuB,KAAA8qC,cAAA,EAEAsD,GAAAiD,EACAhD,GAAAgD,EAEArxC,KAAAspC,WAAAoE,IAAA,CACA10B,KAAAhZ,KAAA+qC,YAAA,EAAAqD,EACAtV,IAAA94B,KAAA8qC,aAAA,EAAAuD,MAQAiD,sBAAA,WACA,OAAAtxC,KAAA+pC,iBAAA,KAAA,GAMAgE,yBAAA,WAiBA,YAhBA,IAAA/tC,KAAA+tC,yBAAAwD,IACAvxC,KAAA+tC,yBAAAwD,EAAA,IAGAvxC,KAAA+tC,yBAAAwD,EAAAC,WAAAxxC,KAAAiqC,eAAAjqC,KAAAgqC,cACAhqC,KAAA+tC,yBAAAwD,EAAAE,YAAAzxC,KAAA8qC,aAAA9qC,KAAA+qC,YAEA/qC,KAAA+tC,yBAAAwD,EAAAL,WAAA,GACAlxC,KAAA+tC,yBAAAwD,EAAAC,WAAAxxC,KAAA+tC,yBAAAwD,EAAAE,aACAzxC,KAAA+tC,yBAAAwD,EAAAL,WAAAjjB,OAAApd,KAAAmkB,IAAAh1B,KAAA8qC,aAAA9qC,KAAAiqC,gBACAjqC,KAAA+tC,yBAAAwD,EAAAL,WAAAtY,MAAA/nB,KAAAK,MAAAlR,KAAAgqC,eAAAhqC,KAAAiqC,eAAAjqC,KAAA+tC,yBAAAwD,EAAAL,WAAAjjB,WAEAjuB,KAAA+tC,yBAAAwD,EAAAL,WAAAtY,MAAA/nB,KAAAmkB,IAAAh1B,KAAA+qC,YAAA/qC,KAAAgqC,eACAhqC,KAAA+tC,yBAAAwD,EAAAL,WAAAjjB,OAAApd,KAAAK,MAAAlR,KAAAiqC,gBAAAjqC,KAAA+tC,yBAAAwD,EAAAL,WAAAtY,MAAA54B,KAAAgqC,iBAGAhqC,KAAA+tC,yBAAAwD,EAAAL,YAMAf,WAAA,gBACA,IAAAnwC,KAAAmwC,WAAAoB,IACAvxC,KAAAmwC,WAAAoB,EAAA,IAGAvxC,KAAAmwC,WAAAoB,EAAApD,gBAAAnuC,KAAA+tC,2BACA/tC,KAAAopC,MAAAsE,IAAA,CACA9U,MAAA54B,KAAAmwC,WAAAoB,EAAApD,gBAAAvV,MAAA54B,KAAAmqC,UACAlc,OAAAjuB,KAAAmwC,WAAAoB,EAAApD,gBAAAlgB,OAAAjuB,KAAAmqC,aAOA2E,qBAAA,WAEA9uC,KAAA6d,YAAA7d,KAAAqjC,MAAA,QAAArjC,KAAA0xC,iBAGA1xC,KAAA6d,YAAAvf,EAAA,gBAAA,QAAA0B,KAAAixC,kBAGAjxC,KAAA6d,YAAAvf,EAAA,gBAAA,SAAA,WACA0B,KAAA2xC,aAAA,OAEA3xC,KAAA6d,YAAAvf,EAAA,iBAAA,SAAA,WACA0B,KAAA2xC,YAAA,OAEA3xC,KAAA6d,YAAAvf,EAAA,kBAAA,SAAA,WACA0B,KAAA4xC,UAAA,QAEA5xC,KAAA6d,YAAAvf,EAAA,oBAAA,SAAA,WACA0B,KAAA4xC,UAAA,QAIA5xC,KAAA6xC,mBAAA,IAAAhzC,MAAAizC,eAAA,aAAA,CACAC,QAAA,KACA/xC,KAAAgyC,aAEAC,SAAAC,IACAlyC,KAAAmyC,WAAAD,IAEAE,MAAA,KACApyC,KAAAqyC,YACAryC,KAAAsyC,uCAKAtyC,KAAA6d,YAAAhc,QAAAka,KAAA,WAAA,SAAAjE,GACAA,EAAAC,UAAAlW,QAAA0wC,YACAvyC,KAAA6qC,cAAA,MAGA7qC,KAAA6d,YAAAhc,QAAAka,KAAA,SAAA,SAAAjE,GACAA,EAAAC,UAAAlW,QAAA0wC,YACAvyC,KAAA6qC,cAAA,MAIA7qC,KAAA6d,YAAAvf,EAAA,kCAAA0B,KAAAoT,YAAA,QAAApT,KAAAwyC,wBACAxyC,KAAA6d,YAAAvf,EAAA,qBAAA0B,KAAAoT,YAAA,QAAApT,KAAAyyC,yBACAzyC,KAAA6d,YAAAvf,EAAA,0CAAA0B,KAAAoT,YAAA,QAAApT,KAAA0yC,yBAQAF,uBAAA,SAAA16B,GACA,IAAA66B,EAAAr0C,EAAAwZ,EAAA8C,eAAA7T,KAAA,cACAmY,EAAA5gB,EAAAwZ,EAAA8C,eAIA,GAHAsE,EAAAqV,WAAA1d,YAAA,UACAqI,EAAA5M,SAAA,UAEA,UAAAqgC,EAGA,OAFA3yC,KAAA4yC,6BACA5yC,KAAA0yC,yBAIA1yC,KAAA6yC,wBAEA7yC,KAAA8yC,sBAAAH,GACA3yC,KAAA+yC,6BAQAN,wBAAA,SAAA36B,GACA,GAAAA,EAAA8C,cAAAzV,QAAAnF,KAAA0rC,sBAAA,CAGA1rC,KAAA0rC,sBAAA5zB,EAAA8C,cAAAzV,MAIA,IAFA,IAAA6tC,EAAA10C,EAAA,mBAAA0B,KAAAoT,YAEA/T,EAAA,EAAAA,EAAA2zC,EAAA1yC,OAAAjB,IAAA,CACA,IAAA4zC,EAAA30C,EAAA00C,EAAA3zC,IACA4zC,EAAAlsC,KAAA,aAAA,EAAAksC,EAAAlsC,KAAA,eACAksC,EAAAv0C,KAAAu0C,EAAAv0C,OAAAwC,MAAA,KAAAgyC,UAAAzyC,KAAA,MAGAuyC,EAAAp3B,OAAA,WAAAzP,UAMAumC,uBAAA,WACA,IAAAC,EAAA3yC,KAAAmzC,uBAEAR,EAAAS,EAAA,GAAAT,EAAAU,EAAA,IACArzC,KAAA8yC,sBAAAH,EAAAS,EAAAT,EAAAU,GACArzC,KAAA+yC,8BASAI,qBAAA,WACA,IAAAC,EAAAE,WAAAh1C,EAAA,wBAAAiG,OACA8uC,EAAAC,WAAAh1C,EAAA,wBAAAiG,OACA,MAAA,CACA6uC,EAAAtb,MAAAsb,GAAA,EAAAA,EACAC,EAAAvb,MAAAub,GAAA,EAAAA,IAUAE,qBAAA,SAAAH,EAAAC,GACA/0C,EAAA,wBAAAiG,IAAA+uC,WAAAF,IACA90C,EAAA,wBAAAiG,IAAA+uC,WAAAD,KAMAR,sBAAA,WACA7yC,KAAA2rC,yBAAA,EACArtC,EAAA,mCAAA0B,KAAAoT,YAAAd,SAAA,UACAhU,EAAA,mCAAA0B,KAAAoT,YAAAyD,YAAA,UACAvY,EAAA,eAAA0B,KAAAoT,YAAAyD,YAAA,WAMA+7B,sBAAA,WACA5yC,KAAA2rC,0BAIA3rC,KAAA2rC,yBAAA,EACArtC,EAAA,mCAAA0B,KAAAoT,YAAAyD,YAAA,UACAvY,EAAA,mCAAA0B,KAAAoT,YAAAd,SAAA,UACAhU,EAAA,eAAA0B,KAAAoT,YAAAd,SAAA,YAQAo/B,gBAAA,SAAA55B,GACA,IAAA9X,KAAAoqC,oBAAA,CACA,IAAAlpB,EAAA5iB,EAAAwZ,EAAA8C,eACAuL,EAAAjF,EAAAna,KAAA,QACA/G,KAAAqjC,MAAAxsB,YAAA,YACAqK,EAAA5O,SAAA,YACAtS,KAAAwzC,SAAArtB,KASAqtB,SAAA,SAAArtB,GACAnmB,KAAAqqC,cAAAlkB,IAIAnmB,KAAA8sC,OAAAx6B,SAAA,UACAtS,KAAA8sC,OAAAlxB,OAAA,eAAAuK,EAAA,MACAtP,YAAA,UAEA,WAAAsP,EACAnmB,KAAAyzC,eAEAzzC,KAAA0zC,gBAIA1zC,KAAAitC,wBAGA,SAAAjtC,KAAAqqC,aAAA,SAAAlkB,EACAnmB,KAAA2zC,kBACA,SAAA3zC,KAAAqqC,aAAA,SAAAlkB,GACAnmB,KAAA4zC,iBAIA5zC,KAAAqqC,YAAAlkB,IAWA0oB,kBAAA,SAAAsC,QACA,IAAAnxC,KAAA6uC,kBAAA0C,IACAvxC,KAAA6uC,kBAAA0C,EAAA,IAIAJ,EACAnxC,KAAAgrC,aAAAmG,EACAnxC,KAAAwpC,SACAxpC,KAAA6uC,kBAAA0C,EAAAsC,WAAA,EAAA7zC,KAAAmqC,UAEAnqC,KAAAgrC,aAAA,CACAoD,SAAApuC,KAAAwpC,QAAAxwB,KAAAhZ,KAAAopC,MAAApwB,MAAAhZ,KAAA6uC,kBAAA0C,EAAAsC,WACAxF,SAAAruC,KAAAwpC,QAAA1Q,IAAA94B,KAAAopC,MAAAtQ,KAAA94B,KAAA6uC,kBAAA0C,EAAAsC,WACA5lB,OAAAjuB,KAAAwpC,QAAAvb,OAAAjuB,KAAA6uC,kBAAA0C,EAAAsC,WACAjb,MAAA54B,KAAAwpC,QAAA5Q,MAAA54B,KAAA6uC,kBAAA0C,EAAAsC,WACA1F,gBAAAnuC,KAAA+tC,8BAGA/tC,KAAA6uC,kBAAA0C,EAAAL,WAAAlxC,KAAA+tC,2BACA/tC,KAAAgrC,aAAA,CACAoD,QAAA,EACAC,QAAA,EACApgB,OAAAjuB,KAAA6uC,kBAAA0C,EAAAL,WAAAjjB,OACA2K,MAAA54B,KAAA6uC,kBAAA0C,EAAAL,WAAAtY,MACAuV,gBAAAnuC,KAAA6uC,kBAAA0C,EAAAL,cAQAxC,qBAAA,SAAAyC,QACA,IAAAnxC,KAAA0uC,qBAAA6C,IACAvxC,KAAA0uC,qBAAA6C,EAAA,IAIAJ,EACAnxC,KAAAmrC,gBAAAgG,EACAnxC,KAAAspC,aACAtpC,KAAA0uC,qBAAA6C,EAAAsC,WAAA,EAAA7zC,KAAAmqC,UACAnqC,KAAAmrC,gBAAA,CACAiD,SAAApuC,KAAAspC,WAAAtwB,KAAAhZ,KAAAopC,MAAApwB,MAAAhZ,KAAA0uC,qBAAA6C,EAAAsC,WAAA7zC,KAAAirC,YACAoD,SAAAruC,KAAAspC,WAAAxQ,IAAA94B,KAAAopC,MAAAtQ,KAAA94B,KAAA0uC,qBAAA6C,EAAAsC,WAAA7zC,KAAAirC,YACAkD,gBAAAnuC,KAAA+tC,8BAUA4D,YAAA,SAAAmC,GACA,IAAA9zC,KAAAoqC,oBAAA,CAEA,GAAA,KAAA0J,IAAA,KAAAA,EACA,OAAA,EAGA9zC,KAAAoqC,qBAAA,EACApqC,KAAA+pC,kBAAA+J,EAGA9zC,KAAA+pC,iBAAA5nC,UAAAnC,KAAA+pC,iBAAA,KAAA,IAAA,IAEA,IAEAgK,EAFAC,EAAAh0C,KAAAopC,MAAA6K,MAAAH,EACAI,EAAAl0C,KAAA+tC,2BAIAgG,EADA/zC,KAAAsxC,wBACAtxC,KAAA+vC,oBAAA,CAAA9hB,OAAAimB,EAAAtb,MAAAA,MAAAsb,EAAAjmB,SAEAjuB,KAAA+vC,oBAAAmE,GAKAl0C,KAAAmqC,UAAA4J,IACAA,EAAA/zC,KAAAmqC,WAGA,IAAAgK,EAAA,CACAF,MAAA,KAAAH,EAAA,OAAA,QAGAM,EAAA,CACAH,MAAAD,EACApb,MAAAsb,EAAAtb,MAAAmb,EACA9lB,OAAAimB,EAAAjmB,OAAA8lB,GAGA9I,EAAA,EACAjrC,KAAAirC,YAAA,GACAA,EAAA,EAAAjrC,KAAAirC,YACAjrC,KAAAirC,YAAA,IAEAjrC,KAAAqpC,SAAAzQ,MAAA54B,KAAA8qC,aACAG,EAAAjrC,KAAA8qC,aAAA9qC,KAAAqpC,SAAAzQ,MACA54B,KAAAqpC,SAAApb,OAAAjuB,KAAA+qC,cACAE,EAAAjrC,KAAA+qC,YAAA/qC,KAAAqpC,SAAApb,QAEAjuB,KAAAirC,YAAAA,GAGAA,EAAA,IACAmJ,EAAAxb,OAAAqS,EACAmJ,EAAAnmB,QAAAgd,GAGA,IAAAkG,EAAAnxC,KAAAgrC,aAGA0F,EAAAS,EAAA/C,QACAuC,EAAAQ,EAAA9C,QACAgG,EAAAP,GAAAjjC,KAAAyjC,GAAA,KAIAC,EAAA7D,EAAA7/B,KAAA2jC,IAAAH,GAAA1D,EAAA9/B,KAAA4jC,IAAAJ,GACAK,EAAAhE,EAAA7/B,KAAA4jC,IAAAJ,GAAA1D,EAAA9/B,KAAA2jC,IAAAH,GAEA9D,EAAA2D,EAAAtb,MAAAuY,EAAAhD,gBAAAvV,MAEA+b,EAAAJ,EAAAhE,EAAAvwC,KAAAmqC,UAAAnqC,KAAAirC,YACA2J,EAAAF,EAAAnE,EAAAvwC,KAAAmqC,UAAAnqC,KAAAirC,YAEAmJ,EAAAp7B,KAAAhZ,KAAA+qC,YAAA,EAAA4J,EACAP,EAAAtb,IAAA94B,KAAA8qC,aAAA,EAAA8J,EAEAzD,EAAA/C,QAAAmG,EACApD,EAAA9C,QAAAqG,EAEA,IAAAG,EAAA1D,EAAAvY,MACAuY,EAAAvY,MAAAuY,EAAAljB,OACAkjB,EAAAljB,OAAA4mB,EAEA70C,KAAA6uC,kBAAAsC,GAEAnxC,KAAAspC,YACAtpC,KAAAmpC,OAAAxtB,OAAA3b,KAAAspC,YAGAtpC,KAAAqpC,SAAAyL,QAAAX,EAAA,CACAx7B,SAAA3Y,KAAAyU,SAAAsgC,kBACAC,WAAA,KAEA,IAAAH,EAAA70C,KAAAqpC,SAAApb,OAAAgd,EACAjrC,KAAAqpC,SAAApb,OAAAjuB,KAAAqpC,SAAAzQ,MAAAqS,EACAjrC,KAAAqpC,SAAAzQ,MAAAic,EACA70C,KAAAqpC,SAAAqE,IAAA,CAAAuG,MAAA,OAKAj0C,KAAAopC,MAAA0L,QAAAV,EAAA,CACAnC,SAAAjyC,KAAAmpC,OAAAkE,UAAAplB,KAAAjoB,KAAAmpC,QACAxwB,SAAA3Y,KAAAyU,SAAAsgC,kBACAC,WAAA,KACA,IAAAC,EAAA3B,YAAAtzC,KAAAopC,MAAA6K,MAAA,KAAA,KACAj0C,KAAAopC,MAAAsE,IAAA,CAAAuG,MAAAgB,IACAj1C,KAAAoqC,qBAAA,EACApqC,KAAAspC,YACAtpC,KAAAk1C,yBAAApB,GACA9zC,KAAAmyC,WAAAnyC,KAAA6xC,oBACA7xC,KAAAmpC,OAAAjrB,IAAAle,KAAAspC,aAEAtpC,KAAAm1C,gCAYAvD,UAAA,SAAA7U,GACA,IAAA/8B,KAAAoqC,oBAAA,CACApqC,KAAAoqC,qBAAA,EAEApqC,KAAAsxC,0BACAvU,EAAA,MAAAA,EAAA,IAAA,KAGA/8B,KAAAspC,WACAtpC,KAAAmpC,OAAAxtB,OAAA3b,KAAAspC,YAEAtpC,KAAAm1C,2BAGA,IAAAC,EAAA,CAAAnJ,EAAAjsC,KAAA+qC,YAAA,EAAAmB,EAAAlsC,KAAA8qC,aAAA,GACA9qC,KAAA6xC,mBAAAwD,UAAAr1C,KAAA8pC,sBACA9pC,KAAA8pC,sBAAA9pC,KAAA8pC,qBACA,IAIA6G,EAAAD,EAJA4E,EAAA,CACArB,MAAAj0C,KAAA+pC,iBAAA/pC,KAAA8pC,sBAIAkB,EAAAhrC,KAAAgrC,aACAG,EAAAnrC,KAAAmrC,gBAGA,MAAApO,GAAA/8B,KAAAsxC,yBAAA,MAAAvU,IAAA/8B,KAAAsxC,yBACAtG,EAAAoD,SAAApD,EAAAoD,QACAjD,EAAAiD,SAAAjD,EAAAiD,QACAsC,EAAA1wC,KAAAopC,MAAApwB,KAAAo8B,EAAAnJ,EACAqJ,EAAAt8B,KAAAo8B,EAAAnJ,EAAAyE,IAEA1F,EAAAqD,SAAArD,EAAAqD,QACAlD,EAAAkD,SAAAlD,EAAAkD,QACAsC,EAAA3wC,KAAAopC,MAAAtQ,IAAAsc,EAAAlJ,EACAoJ,EAAAxc,IAAAsc,EAAAlJ,EAAAyE,GAGA,MAAA5T,GACAuY,EAAAC,QAAA,EAAAv1C,KAAAopC,MAAAmM,OACAv1C,KAAAkrC,SAAAgB,EAAA,EAAAlsC,KAAAkrC,SAAAgB,IAEAoJ,EAAAE,QAAA,EAAAx1C,KAAAopC,MAAAoM,OACAx1C,KAAAkrC,SAAAe,EAAA,EAAAjsC,KAAAkrC,SAAAe,GAGAjsC,KAAA6uC,kBAAA7D,GACAhrC,KAAA0uC,qBAAAvD,GAEAnrC,KAAAopC,MAAA0L,QAAAQ,EAAA,CACArD,SAAAjyC,KAAAmpC,OAAAkE,UAAAplB,KAAAjoB,KAAAmpC,QACAxwB,SAAA3Y,KAAAyU,SAAAsgC,kBACAC,WAAA,KACAh1C,KAAAoqC,qBAAA,EACApqC,KAAAspC,aAEAtpC,KAAAk1C,yBAAA,GACAl1C,KAAAmpC,OAAAjrB,IAAAle,KAAAspC,kBAYA6I,WAAA,SAAAD,GACA,IAAAlyC,KAAAoqC,oBAAA,CACApqC,KAAAoqC,qBAAA,EAEA,IAAAqL,EAAAz1C,KAAAopC,MAAA6K,MAEAj0C,KAAA8pC,sBAAA9pC,KAAAyU,SAAAs3B,qBAAAuH,WAAApB,EAAA/sC,OAAA0L,KAAAK,MAAAoiC,WAAApB,EAAA/sC,SAAA,IAGAnF,KAAAopC,MAAAsE,IAAA,CACAuG,MAAAj0C,KAAA+pC,iBAAA/pC,KAAA8pC,uBAIA9pC,KAAAmqC,UAAAnqC,KAAA+vC,oBAAA/vC,KAAA+tC,4BAAA/tC,KAAAirC,YACAjrC,KAAAmwC,aAEAnwC,KAAAgrC,cACAhrC,KAAA01C,kCAAAD,GAGAz1C,KAAA4rC,cAEA5rC,KAAAoqC,qBAAA,IAWAsL,kCAAA,SAAAD,GACA,IAOA/E,EAAAC,EAAAgF,EAAAC,EAAArF,EAPA2D,EAAAl0C,KAAA+tC,2BACA8H,EAAA71C,KAAAopC,MAAA6K,MAAAwB,EACAtE,EAAAnxC,KAAAgrC,aAEA8K,EAAA91C,KAAAmqC,UACA4L,EAAA,EAIA,EAAA,CAEA,IAAAC,EAAA7E,EAAA/C,QACA6H,EAAA9E,EAAA9C,QACAgG,EAAAwB,GAAAhlC,KAAAyjC,GAAA,KAIAqB,EAAAK,EAAAnlC,KAAA2jC,IAAAH,GAAA4B,EAAAplC,KAAA4jC,IAAAJ,GACAuB,EAAAI,EAAAnlC,KAAA4jC,IAAAJ,GAAA4B,EAAAplC,KAAA2jC,IAAAH,GAKA3D,EAAAiF,EAAAG,GAHAvF,EAAA2D,EAAAtb,MAAAuY,EAAAhD,gBAAAvV,OAIA+X,EAAAiF,EAAAE,EAAAvF,EAGA,IAAA2F,EAAAl2C,KAAAm2C,sBAAAL,GACAM,EAAA,CACAxd,MAAA54B,KAAAqpC,SAAAzQ,MACA3K,OAAAjuB,KAAAqpC,SAAApb,OACAjV,KAAAhZ,KAAA+qC,YAAA,EAAA/qC,KAAAqpC,SAAAzQ,MAAA,EAAA8X,EACA5X,IAAA94B,KAAA8qC,aAAA,EAAA9qC,KAAAqpC,SAAApb,OAAA,EAAA0iB,GAGAmF,GADAC,EAAA/1C,KAAAq2C,4BAAAD,EAAAF,SAIA,IAAAH,GAGA/1C,KAAAopC,MAAAsE,IAAA,CACA10B,KAAAhZ,KAAA+qC,YAAA,EAAA2F,EACA5X,IAAA94B,KAAA8qC,aAAA,EAAA6F,IAIAQ,EAAA/C,QAAAuH,EACAxE,EAAA9C,QAAAuH,EACAzE,EAAAvY,MAAA54B,KAAAqpC,SAAAzQ,MAAAkd,EAAAvF,EACAY,EAAAljB,OAAAjuB,KAAAqpC,SAAApb,OAAA6nB,EAAAvF,EAEAvwC,KAAA6uC,kBAAAsC,GAGAnxC,KAAAmqC,UAAA2L,EAEA91C,KAAAspC,YACAtpC,KAAAk1C,yBAAAW,GAEA71C,KAAAs2C,gBAAAt2C,KAAAspC,WAAAtpC,KAAAqpC,UAGArpC,KAAAspC,WAAAoE,IAAA,CAAAxP,QAAA,IAFAl+B,KAAAspC,WAAAoE,IAAA,CAAAxP,QAAA,KAIA,IAAA2X,GACA71C,KAAAm1C,2BAGAn1C,KAAAmwC,cAMAmC,kCAAA,WACA,GAAAtyC,KAAAspC,aAAAtpC,KAAAs2C,gBAAAt2C,KAAAspC,WAAAtpC,KAAAqpC,UAAA,CACArpC,KAAAspC,WAAAoE,IAAA,CAAAxP,QAAA,IACA,IAAAiT,EAAAnxC,KAAAmrC,gBACAgG,EAAA/C,QAAA,EACA+C,EAAA9C,QAAA,EACAruC,KAAA0uC,qBAAAyC,GACAnxC,KAAAixC,qBAOAkE,yBAAA,WACA,IAAAhE,EAAAnxC,KAAAmrC,gBACAgG,EAAA/C,QAAA,EACA+C,EAAA9C,QAAA,EACAruC,KAAA0uC,qBAAAyC,IAWAmF,gBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAv9B,KAAAw9B,EAAAx9B,KAAAw9B,EAAA5d,MAAA,GACA2d,EAAAzd,IAAA0d,EAAA1d,IAAA0d,EAAAvoB,OAAA,GACAsoB,EAAAv9B,KAAAw9B,EAAAx9B,KAAAw9B,EAAA5d,MAAA,GACA2d,EAAAzd,IAAA0d,EAAA1d,IAAA0d,EAAAvoB,OAAA,GAQAinB,yBAAA,SAAAjB,GACA,IAAAI,EAAAJ,GAAApjC,KAAAyjC,GAAA,KACAnD,EAAAnxC,KAAAmrC,gBAEAqF,EAAAW,EAAA/C,QACAqC,EAAAU,EAAA9C,QAIAoI,EAAAjG,EAAA3/B,KAAA2jC,IAAAH,GAAA5D,EAAA5/B,KAAA4jC,IAAAJ,GACAqC,EAAAlG,EAAA3/B,KAAA4jC,IAAAJ,GAAA5D,EAAA5/B,KAAA2jC,IAAAH,GACA9D,EAAAvwC,KAAA+tC,2BAAAnV,MAAAuY,EAAAhD,gBAAAvV,MAEA+d,EAAAF,EAAAlG,EAAAvwC,KAAAmqC,UACAyM,EAAAF,EAAAnG,EAAAvwC,KAAAmqC,UAEAnqC,KAAAspC,WAAAtwB,KAAAhZ,KAAAopC,MAAApwB,KAAA29B,EACA32C,KAAAspC,WAAAxQ,IAAA94B,KAAAopC,MAAAtQ,IAAA8d,EAEAzF,EAAA/C,QAAAqI,EACAtF,EAAA9C,QAAAqI,EACA12C,KAAA0uC,qBAAAyC,IAUAkF,4BAAA,SAAAD,EAAAS,GAKA,IAJA,IACAC,EAcAf,EAfAgB,EAAA/2C,KAAAg3C,sBAAAZ,GAIAa,EAAA,EAAAA,EAAAF,EAAAz2C,SACAw2C,EAAAC,EAAAE,GAEAj3C,KAAAk3C,yBAAA,CAAAJ,GAAAD,IAHAI,IAOAH,GAAA,EAMA,GAAAA,EAEA,CAEA,IAAAK,EAAAn3C,KAAAo3C,gBAAAP,EAAAC,GAEAO,EAAA,CACApL,EAAAmK,EAAAp9B,KAAAo9B,EAAAxd,MAAA,EACAsT,EAAAkK,EAAAtd,IAAAsd,EAAAnoB,OAAA,GAKAqpB,EAAAzmC,KAAA0mC,KAAAJ,EAAA,GAAAjL,EAAAiL,EAAA,GAAAjL,GAAA4K,EAAA7K,GAAAkL,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,GAAA6K,EAAA5K,EAAAiL,EAAA,GAAAlL,EAAAkL,EAAA,GAAAjL,EAAAiL,EAAA,GAAAjL,EAAAiL,EAAA,GAAAlL,GAAAp7B,KAAA2mC,KAAA3mC,KAAA4mC,IAAAN,EAAA,GAAAjL,EAAAiL,EAAA,GAAAjL,EAAA,GAAAr7B,KAAA4mC,IAAAN,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,EAAA,IACAyL,EAAA7mC,KAAA0mC,KAAAJ,EAAA,GAAAjL,EAAAiL,EAAA,GAAAjL,GAAAmL,EAAApL,GAAAkL,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,GAAAoL,EAAAnL,EAAAiL,EAAA,GAAAlL,EAAAkL,EAAA,GAAAjL,EAAAiL,EAAA,GAAAjL,EAAAiL,EAAA,GAAAlL,GAAAp7B,KAAA2mC,KAAA3mC,KAAA4mC,IAAAN,EAAA,GAAAjL,EAAAiL,EAAA,GAAAjL,EAAA,GAAAr7B,KAAA4mC,IAAAN,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,EAAA,IAGA8J,GAAAuB,EAAAI,GAAAA,OAhBA3B,EAAA,EAmBA,OAAAA,GAQA3J,UAAA,SAAAt0B,GACA,IAAAya,EAAAj0B,EAAAwZ,EAAA8C,eACA,GAAA2X,EAAAnc,SAAA,YACA,OAAA,EAGA9X,EAAA,OAAA0B,KAAA6oC,UAAAv2B,SAAA,YACAtS,KAAA6oC,SAAAh2B,OAAA,+BAEA,IAAA8kC,EAAA,CACArN,QAAAtqC,KAAAsqC,QACAP,iBAAA/pC,KAAA+pC,iBACA6N,cAAA53C,KAAA8pC,qBACAnrC,QAAA4zB,EAAAnc,SAAA,WAAA,EAAA,GAGA,GAAApW,KAAAgrC,aAAA,CACA,IAAA6M,EAAA,GAEAA,EAAA5pB,OAAAjuB,KAAAgrC,aAAA/c,OACA4pB,EAAAjf,MAAA54B,KAAAgrC,aAAApS,MACAif,EAAAzJ,QAAApuC,KAAAgrC,aAAAoD,QACAyJ,EAAAxJ,QAAAruC,KAAAgrC,aAAAqD,QAEAsJ,EAAAxJ,gBAAAnuC,KAAAgrC,aAAAmD,gBAEAwJ,EAAAE,SAAAA,OAEAF,EAAAxJ,gBAAAnuC,KAAA+tC,2BAGA/tC,KAAAspC,aACAqO,EAAArO,WAAAtpC,KAAAmrC,iBAGAwM,EAAAzM,SAAAlrC,KAAAkrC,SACAyM,EAAAG,KAAA93C,KAAAmqC,UAEAtrC,MAAAgI,kBAAA,oBAAA8wC,EAAA5wC,IACA/G,KAAA6oC,SAAAxyB,KAAA,QAAAQ,YAAA,YAAAkhC,MAAA1hC,KAAA,YAAAsF,SAEA5U,EAAAY,MACAM,MAAAlB,EAAAY,QAIA3H,KAAA2nC,OAAA5gC,GACA/G,KAAA6nB,OACAhpB,MAAAkJ,GAAAkb,eASA8sB,oBAAA,SAAAmB,GAEA,IAAAmD,EAAAxjC,KAAA0mC,IAAAv3C,KAAA8pC,uBAAAj5B,KAAAyjC,GAAA,KAGA0D,EAAAnnC,KAAA4jC,IAAAJ,GAAAnD,EAAAjjB,OAAApd,KAAA2jC,IAAAH,GAAAnD,EAAAtY,MACAqf,EAAApnC,KAAA4jC,IAAAJ,GAAAnD,EAAAtY,MAAA/nB,KAAA2jC,IAAAH,GAAAnD,EAAAjjB,OAGA,OAAApd,KAAA8b,IAAAqrB,EAAA9G,EAAAtY,MAAAqf,EAAA/G,EAAAjjB,SAQA0hB,kBAAA,SAAAuB,GAEA,IAAAgH,EAAAl4C,KAAAm4C,qBAAAjH,GAGAkH,EAAA,EACA,GAAAF,EAAAjqB,OAAAjuB,KAAA8qC,cAAAoN,EAAAtf,MAAA54B,KAAA+qC,YAAA,CACA,IAAAsN,EAAAr4C,KAAA8qC,aAAAoN,EAAAjqB,OACAqqB,EAAAt4C,KAAA+qC,YAAAmN,EAAAtf,MACAwf,EAAAvnC,KAAAmkB,IAAAsjB,EAAAD,GAGA,OAAAD,GAMAG,qBAAA,SAAArH,GACA,OAAAlxC,KAAA+vC,oBAAAmB,GAAAlxC,KAAA2vC,kBAAAuB,IAQAc,UAAA,WACA,IAAAhyC,KAAAqT,KAAA,CACA,IAyBAhU,EAzBAm5C,EAAA,CACAzH,YAAA,EACAC,OAAA,yBAIAyH,EAAAz4C,KAAAqpC,SAAAzQ,MACA8f,EAAA14C,KAAAqpC,SAAApb,OACA0qB,EAAAF,EAAA,EACAG,EAAAF,EAAA,EAEArlC,EAAA,CACA,IAAA65B,OAAAkD,KAAA,CACAW,YAAA,EACAC,OAAA,sBACArD,QAAA,SACAC,QAAA,SACAhV,MAAA6f,EACAxqB,OAAAyqB,EACA1/B,KAAAy/B,EAAA,EACA3f,IAAA4f,EAAA,EACArI,KAAA,yBAKA,IAAAhxC,EAAA,EAAAA,GArBA,EAqBAA,IACAgU,EAAA3T,KAAA,IAAAwtC,OAAA2L,KAAA,CAAAx5C,EAAAs5C,EAAA,EAAAt5C,EAAAs5C,EAAAD,GAAAF,IAEA,IAAAn5C,EAAA,EAAAA,GAxBA,EAwBAA,IACAgU,EAAA3T,KAAA,IAAAwtC,OAAA2L,KAAA,CAAA,EAAAx5C,EAAAu5C,EAAAH,EAAAp5C,EAAAu5C,GAAAJ,IAGAx4C,KAAAqT,KAAA,IAAA65B,OAAA0D,MAAAv9B,EAAA,CACA2F,KAAAhZ,KAAA+qC,YAAA,EACAjS,IAAA94B,KAAA8qC,aAAA,EACA6C,QAAA,SACAC,QAAA,SACAqG,MAAAj0C,KAAAqpC,SAAA4K,QAGAj0C,KAAAmpC,OAAAjrB,IAAAle,KAAAqT,MACArT,KAAA4rC,gBAOAyG,UAAA,WACAryC,KAAAmpC,OAAAxtB,OAAA3b,KAAAqT,MACArT,KAAAqT,KAAA,KACArT,KAAA4rC,eAMAkN,UAAA,WACA94C,KAAAye,WAMAuZ,KAAA,WACAh4B,KAAAqjB,OACAxhB,QAAAqR,KAAAZ,SAAA,cAMAuV,KAAA,WACA7nB,KAAAwiC,qBACAxiC,KAAA6xC,mBAAArP,qBACA3gC,QAAAqR,KAAA2D,YAAA,aACA7W,KAAAqjB,QAMAskB,OAAA,SAAA5gC,GACA/G,KAAAyU,SAAAkzB,OAAA5gC,GACA/G,KAAA0X,QAAA,SAMA+7B,aAAA,WACAzzC,KAAA4oC,YAAA/xB,YAAA,WAMA68B,cAAA,WACA1zC,KAAA4oC,YAAAt2B,SAAA,WAMAshC,eAAA,WACA,IAAAzF,EAAAnuC,KAAA+tC,2BACA/tC,KAAAmqC,UAAAnqC,KAAA2vC,kBAAAxB,GAEA,IAAAgG,EAAA,CACAvb,MAAA54B,KAAA+qC,YACA9c,OAAAjuB,KAAA8qC,cAGAsJ,EAAA,CACAxb,MAAAuV,EAAAvV,MAAA54B,KAAAmqC,UACAlc,OAAAkgB,EAAAlgB,OAAAjuB,KAAAmqC,UACAnxB,KAAAhZ,KAAA+qC,YAAA,EACAjS,IAAA94B,KAAA8qC,aAAA,GA6BA9qC,KAAA+4C,sBA1BA,KACA/4C,KAAAguC,oCAGA,IAAAmD,EAAAnxC,KAAAgrC,aACAkJ,EAAAl0C,KAAA+tC,2BACAwC,EAAA2D,EAAAtb,MAAAuY,EAAAhD,gBAAAvV,MAGAogB,EAAA,CACAhgC,KAAAhZ,KAAAopC,MAAApwB,KAAAm4B,EAAA/C,QAAAmC,EAAAvwC,KAAAmqC,UACArR,IAAA94B,KAAAopC,MAAAtQ,IAAAqY,EAAA9C,QAAAkC,EAAAvwC,KAAAmqC,UACAvR,MAAAuY,EAAAvY,MAAA2X,EAAAvwC,KAAAmqC,UACAlc,OAAAkjB,EAAAljB,OAAAsiB,EAAAvwC,KAAAmqC,WAGAnqC,KAAAi5C,aAAAD,GAEAh5C,KAAAspC,aACAiH,EAAA2D,EAAAtb,MAAA54B,KAAAmrC,gBAAAgD,gBAAAvV,MACA54B,KAAAspC,WAAAtwB,KAAAhZ,KAAAopC,MAAApwB,KAAAhZ,KAAAmrC,gBAAAiD,QAAAmC,EAAAvwC,KAAAmqC,UACAnqC,KAAAspC,WAAAxQ,IAAA94B,KAAAopC,MAAAtQ,IAAA94B,KAAAmrC,gBAAAkD,QAAAkC,EAAAvwC,KAAAmqC,UACAnqC,KAAAmpC,OAAAjrB,IAAAle,KAAAspC,cAIA8K,EAAAD,IAMAR,gBAAA,WACA,IAAAQ,EAAA,GAEAn0C,KAAAk5C,eACA,IAAA/K,EAAAnuC,KAAA+tC,2BACAoL,EAAAn5C,KAAA+vC,oBAAA5B,GAAAnuC,KAAAirC,YACAmO,EAAAD,EAAAn5C,KAAAmqC,UACAnqC,KAAAmqC,UAAAgP,EAEA,IAAA/E,EAAA,CACAxb,MAAAuV,EAAAvV,MAAA54B,KAAAmqC,UACAlc,OAAAkgB,EAAAlgB,OAAAjuB,KAAAmqC,UACAnxB,KAAAhZ,KAAA+qC,YAAA,EACAjS,IAAA94B,KAAA8qC,aAAA,GAMAuO,GAHAr5C,KAAAwpC,QAAAxwB,KAAAhZ,KAAAopC,MAAApwB,MAGAogC,EACAE,GAHAt5C,KAAAwpC,QAAA1Q,IAAA94B,KAAAopC,MAAAtQ,KAGAsgB,EACAhF,EAAAp7B,KAAAhZ,KAAA+qC,YAAA,EAAAsO,EACAjF,EAAAtb,IAAA94B,KAAA8qC,aAAA,EAAAwO,EAGAnF,EAAAlmB,OAAAjuB,KAAAwpC,QAAAvb,OAAAmrB,EACAjF,EAAAvb,MAAA54B,KAAAwpC,QAAA5Q,MAAAwgB,IAEAp5C,KAAAspC,YAAAtpC,KAAAspC,aAAAtpC,KAAAs2C,gBAAAt2C,KAAAspC,WAAAtpC,KAAAwpC,YACAxpC,KAAAspC,YACAtpC,KAAAixC,mBAGAjxC,KAAAm1C,4BAaAn1C,KAAA+4C,sBAVA,KAEA,GAAA/4C,KAAAspC,WAAA,CACA,IAAAiH,EAAAvwC,KAAA+tC,2BAAAnV,MAAA54B,KAAAmrC,gBAAAgD,gBAAAvV,MACA54B,KAAAspC,WAAAtwB,KAAAhZ,KAAAopC,MAAApwB,KAAAhZ,KAAAmrC,gBAAAiD,QAAAmC,EAAAvwC,KAAAmqC,UACAnqC,KAAAspC,WAAAxQ,IAAA94B,KAAAopC,MAAAtQ,IAAA94B,KAAAmrC,gBAAAkD,QAAAkC,EAAAvwC,KAAAmqC,UACAnqC,KAAAmpC,OAAAjrB,IAAAle,KAAAspC,cAIA8K,EAAAD,IAWA4E,sBAAA,SAAA/xC,EAAAotC,EAAAD,GACAn0C,KAAAoqC,sBACApqC,KAAAoqC,qBAAA,EAGApqC,KAAAspC,aACAtpC,KAAAmpC,OAAAxtB,OAAA3b,KAAAspC,YACAtpC,KAAA4rC,eAGA5rC,KAAAopC,MAAA0L,QAAAV,EAAA,CACAnC,SAAAjyC,KAAAmpC,OAAAkE,UAAAplB,KAAAjoB,KAAAmpC,QACAxwB,SAAA3Y,KAAAyU,SAAAsgC,kBACAC,WAAA,KACAhuC,IACAhH,KAAAoqC,qBAAA,EACApqC,KAAA4rC,iBAIA5rC,KAAAqpC,SAAAyL,QAAAX,EAAA,CACAx7B,SAAA3Y,KAAAyU,SAAAsgC,sBAKA/H,aAAA,WACAhtC,KAAAkpC,eAAA5qC,EAAA,yCAAAkQ,SAAAlQ,EAAA,SAAA0B,KAAAoT,aACA,IACAsU,EADAnhB,SAAAyrB,eAAA,kBACAunB,WAAA,MACA74C,EAAA,IAAA8B,KAEAg3C,EAAA9xB,EAAAyhB,OAAAvQ,MACA6gB,EAAA/xB,EAAAyhB,OAAAlb,OAmBAjuB,KAAAorC,gBAAAt/B,OAAA4tC,aAjBA,WACA,IAAAC,EAAAx3C,UAAA,IAAAK,KAAA9B,GAAA,IALA,IAAA,GAMAgnB,EAAAkyB,OACAlyB,EAAAmyB,UAAA,EAAA,EAAAL,EAAAC,GACA/xB,EAAAoyB,UAAAN,EAAA,EAAAC,EAAA,GACA/xB,EAAAqyB,OAAA,EAAAlpC,KAAAyjC,GAAAqF,GACA,IAAA,IAAAt6C,EAAA,EAAAA,EAVA,GAUAA,IACAqoB,EAAAsyB,YACAtyB,EAAAqyB,OAAA,EAAAlpC,KAAAyjC,GAZA,IAaA5sB,EAAAuyB,OAAAT,EAAA,GAAA,GACA9xB,EAAAwyB,OAAAV,EAAA,EAAA,GACA9xB,EAAAyyB,UAAAX,EAAA,GACA9xB,EAAA0yB,YAAA,oBAAA/6C,EAhBA,GAgBA,IACAqoB,EAAAspB,SAEAtpB,EAAA2yB,YAEA,IAAA,KAGAlL,aAAA,WACArjC,OAAAwuC,cAAAt6C,KAAAorC,iBACAprC,KAAAkpC,eAAAvtB,SACA3b,KAAAkpC,eAAA,MAQA+P,aAAA,SAAAsB,GACAv6C,KAAAw6C,mBAAAD,GACAv6C,KAAAy6C,yBACAz6C,KAAA6rC,iBAMAqN,aAAA,WACAl5C,KAAAwpC,UACAxpC,KAAAupC,eAAA5tB,OAAA3b,KAAAwpC,SACAxpC,KAAAupC,eAAA5tB,OAAA3b,KAAA4pC,eACA5pC,KAAAupC,eAAA5tB,OAAA3b,KAAA0pC,gBACA1pC,KAAAupC,eAAA5tB,OAAA3b,KAAA2pC,aACA3pC,KAAAupC,eAAA5tB,OAAA3b,KAAAypC,mBACAzpC,KAAAupC,eAAA5tB,OAAA3b,KAAA6pC,kBAEA7pC,KAAAupC,eAAA,KACAvpC,KAAA6rC,cAAA,OASA2O,mBAAA,SAAAD,GAEAv6C,KAAAupC,eAAA,IAAA2D,OAAAC,aAAA,kBAAA,CACAuN,gBAAA,gBACAC,YAAA,UACAC,WAAA,IAGA56C,KAAAupC,eAAAkG,cAAA,CACA7W,MAAA54B,KAAA+qC,YACA9c,OAAAjuB,KAAA8qC,eAGA9qC,KAAA6rC,cAAA,IAAAhqC,QAAA0f,sBAAAvhB,KAAAupC,eAAA8D,UAAAplB,KAAAjoB,KAAAupC,iBAEAjrC,EAAA,mBAAA0B,KAAA+oC,kBAAAjnB,IAAA,CACAqe,SAAA,WACArH,IAAA,EACA9f,KAAA,IAGAhZ,KAAA4pC,cAAA,IAAAsD,OAAAkD,KAAA,CACAp3B,KAAAhZ,KAAA+qC,YAAA,EACAjS,IAAA94B,KAAA8qC,aAAA,EACA6C,QAAA,SACAC,QAAA,SACAhV,MAAA54B,KAAA+qC,YACA9c,OAAAjuB,KAAA8qC,aACAuF,KAAA,oBAIA,IAAAlC,EAAAnuC,KAAA+tC,2BACA8M,EAAA,IAAA76C,KAAA8pC,qBAAA,EAAA,IAAA9pC,KAAAu4C,qBAAApK,GACA2M,EAAA3M,EAAAvV,MAAAiiB,EACAE,EAAA5M,EAAAlgB,OAAA4sB,EAEA,GAAA76C,KAAAsxC,wBAAA,CACA,IAAAuD,EAAAkG,EACAA,EAAAD,EACAA,EAAAjG,EAIA70C,KAAAwpC,QAAA,IAAA0D,OAAAkD,KAAA,CACAp3B,KAAAhZ,KAAA+qC,YAAA,EACAjS,IAAA94B,KAAA8qC,aAAA,EACA6C,QAAA,SACAC,QAAA,SACAhV,MAAAkiB,EACA7sB,OAAA8sB,EACA/J,OAAA,QACAX,KAAA,kBACAU,YAAA,IAIAwJ,GACAv6C,KAAAwpC,QAAAkE,IAAA6M,GAGAv6C,KAAAwpC,QAAA8G,yBAAA,kBACAtwC,KAAAupC,eAAArrB,IAAAle,KAAA4pC,eACA5pC,KAAAupC,eAAArrB,IAAAle,KAAAwpC,UAMAiR,uBAAA,gBACA,IAAAz6C,KAAAy6C,uBAAAlJ,IACAvxC,KAAAy6C,uBAAAlJ,EAAA,IAGAvxC,KAAA0pC,iBACA1pC,KAAAupC,eAAA5tB,OAAA3b,KAAA0pC,gBACA1pC,KAAAupC,eAAA5tB,OAAA3b,KAAA2pC,aACA3pC,KAAAupC,eAAA5tB,OAAA3b,KAAAypC,mBACAzpC,KAAAupC,eAAA5tB,OAAA3b,KAAA6pC,mBAEA7pC,KAAAy6C,uBAAAlJ,EAAAyJ,YAAA,CACAjK,YAAA,EACAC,OAAA,mBACAX,MAAA,GAGArwC,KAAAy6C,uBAAAlJ,EAAA0J,YAAA,CACAlK,YAAA,EACAC,OAAA,yBAIAhxC,KAAAy6C,uBAAAlJ,EAAA2J,UAAA,CACA,IAAAhO,OAAAiO,KAAA,sBAAAn7C,KAAAy6C,uBAAAlJ,EAAAyJ,aACA,IAAA9N,OAAAiO,KAAA,MAAAn7C,KAAAwpC,QAAA5Q,MAAA,GAAA,SAAA54B,KAAAwpC,QAAA5Q,MAAA,GAAA,SAAA54B,KAAAwpC,QAAA5Q,MAAA,GAAA,MAAA54B,KAAAy6C,uBAAAlJ,EAAAyJ,aACA,IAAA9N,OAAAiO,KAAA,MAAAn7C,KAAAwpC,QAAA5Q,MAAA,GAAA,KAAA54B,KAAAwpC,QAAAvb,OAAA,GAAA,MAAAjuB,KAAAwpC,QAAA5Q,MAAA,GAAA,KAAA54B,KAAAwpC,QAAAvb,OAAA,GAAA,OAAAjuB,KAAAwpC,QAAA5Q,MAAA,GAAA,KAAA54B,KAAAwpC,QAAAvb,OAAA,GAAAjuB,KAAAy6C,uBAAAlJ,EAAAyJ,aACA,IAAA9N,OAAAiO,KAAA,SAAAn7C,KAAAwpC,QAAAvb,OAAA,GAAA,SAAAjuB,KAAAwpC,QAAAvb,OAAA,GAAA,SAAAjuB,KAAAwpC,QAAAvb,OAAA,GAAAjuB,KAAAy6C,uBAAAlJ,EAAAyJ,cAGAh7C,KAAA0pC,eAAA,IAAAwD,OAAA0D,MAAA5wC,KAAAy6C,uBAAAlJ,EAAA2J,UAAA,CACAliC,KAAAhZ,KAAAwpC,QAAAxwB,KACA8f,IAAA94B,KAAAwpC,QAAA1Q,IACA6U,QAAA,SACAC,QAAA,WAIA5tC,KAAAypC,kBAAA,IAAAyD,OAAAkD,KAAA,CACAp3B,KAAAhZ,KAAAwpC,QAAAxwB,KACA8f,IAAA94B,KAAAwpC,QAAA1Q,IACAF,MAAA54B,KAAAwpC,QAAA5Q,MACA3K,OAAAjuB,KAAAwpC,QAAAvb,OACAoiB,KAAA,gBACAW,OAAA,wBACAD,YAAA,EACApD,QAAA,SACAC,QAAA,WAGA5tC,KAAA2pC,YAAA,IAAAuD,OAAA0D,MACA,CACA,IAAA1D,OAAA2L,KAAA,CAAA,IAAA74C,KAAAwpC,QAAA5Q,MAAA,EAAA,IAAA54B,KAAAwpC,QAAA5Q,MAAA54B,KAAAwpC,QAAAvb,QAAAjuB,KAAAy6C,uBAAAlJ,EAAA0J,aACA,IAAA/N,OAAA2L,KAAA,CAAA,IAAA74C,KAAAwpC,QAAA5Q,MAAA,EAAA,IAAA54B,KAAAwpC,QAAA5Q,MAAA54B,KAAAwpC,QAAAvb,QAAAjuB,KAAAy6C,uBAAAlJ,EAAA0J,aACA,IAAA/N,OAAA2L,KAAA,CAAA,EAAA,IAAA74C,KAAAwpC,QAAAvb,OAAAjuB,KAAAwpC,QAAA5Q,MAAA,IAAA54B,KAAAwpC,QAAAvb,QAAAjuB,KAAAy6C,uBAAAlJ,EAAA0J,aACA,IAAA/N,OAAA2L,KAAA,CAAA,EAAA,IAAA74C,KAAAwpC,QAAAvb,OAAAjuB,KAAAwpC,QAAA5Q,MAAA,IAAA54B,KAAAwpC,QAAAvb,QAAAjuB,KAAAy6C,uBAAAlJ,EAAA0J,cACA,CACAjiC,KAAAhZ,KAAAwpC,QAAAxwB,KACA8f,IAAA94B,KAAAwpC,QAAA1Q,IACA6U,QAAA,SACAC,QAAA,WAGA5tC,KAAAy6C,uBAAAlJ,EAAA6J,YAAAp7C,KAAAypC,kBAAA3Q,IAAA94B,KAAAwpC,QAAAvb,OAAA,EAAA,GACAjuB,KAAAy6C,uBAAAlJ,EAAA8J,wBAAA,gBAEAr7C,KAAAy6C,uBAAAlJ,EAAA6J,YAAA,GAAAp7C,KAAA8qC,aAAA,IACA9qC,KAAAy6C,uBAAAlJ,EAAA6J,aAAA,GACAp7C,KAAAy6C,uBAAAlJ,EAAA8J,wBAAA,mBAGAr7C,KAAA6pC,iBAAA,IAAAqD,OAAAoO,QAAAzqC,KAAAK,MAAAlR,KAAAwpC,QAAA5Q,OAAA,MAAA/nB,KAAAK,MAAAlR,KAAAwpC,QAAAvb,QAAA,CACAjV,KAAAhZ,KAAAypC,kBAAAzwB,KACA8f,IAAA94B,KAAAy6C,uBAAAlJ,EAAA6J,YACAG,SAAA,GACAlL,KAAA,mBACAqK,gBAAA16C,KAAAy6C,uBAAAlJ,EAAA8J,wBACAG,KAAA,QACA5iB,MAAA,GACA3K,OAAA,GACA0f,QAAA,SACAC,QAAA,SACA6N,UAAA,WAGAz7C,KAAAupC,eAAArrB,IAAAle,KAAA0pC,gBACA1pC,KAAAupC,eAAArrB,IAAAle,KAAA2pC,aACA3pC,KAAAupC,eAAArrB,IAAAle,KAAAypC,mBACAzpC,KAAAupC,eAAArrB,IAAAle,KAAA6pC,mBAQAiG,mBAAA,SAAA4L,GACA,GAAA17C,KAAAupC,eAAA,CAKA,IAAAoS,EACA37C,KAAAwpC,QAAAxwB,KAAAhZ,KAAAupC,eAAA3Q,MAAA,EADA+iB,EAEA37C,KAAAwpC,QAAA1Q,IAAA94B,KAAAupC,eAAAtb,OAAA,EAIAjuB,KAAAupC,eAAAkG,cAAA,CACA7W,MAAA54B,KAAA+qC,YACA9c,OAAAjuB,KAAA8qC,eAIA,IACA8Q,EADA57C,KAAA6vC,sBAAA7vC,KAAAkqC,oBACAtR,MAAA8iB,EAAA9iB,MAGA54B,KAAAwpC,QAAA5Q,MAAA/nB,KAAAK,MAAAlR,KAAAwpC,QAAA5Q,MAAAgjB,GACA57C,KAAAwpC,QAAAvb,OAAApd,KAAAK,MAAAlR,KAAAwpC,QAAAvb,OAAA2tB,GAIA57C,KAAAwpC,QAAAxwB,KAAAhZ,KAAA+qC,YAAA,EAAA4Q,EAAAC,EACA57C,KAAAwpC,QAAA1Q,IAAA94B,KAAA8qC,aAAA,EAAA6Q,EAAAC,EAGA57C,KAAA4pC,cAAA8D,IAAA,CACA9U,MAAA54B,KAAA+qC,YACA9c,OAAAjuB,KAAA8qC,aACA9xB,KAAAhZ,KAAA+qC,YAAA,EACAjS,IAAA94B,KAAA8qC,aAAA,IAGA9qC,KAAAy6C,yBACAz6C,KAAA6rC,kBAQAgE,sBAAA,SAAAgM,GACA,MAAA,CACAjjB,MAAA/nB,KAAA8b,IAAAkvB,EAAAjvC,EAAAq/B,EAAA4P,EAAAhvC,EAAAo/B,EAAA4P,EAAAj6C,EAAAqqC,EAAA4P,EAAAC,EAAA7P,GAAAp7B,KAAAmkB,IAAA6mB,EAAAjvC,EAAAq/B,EAAA4P,EAAAhvC,EAAAo/B,EAAA4P,EAAAj6C,EAAAqqC,EAAA4P,EAAAC,EAAA7P,GACAhe,OAAApd,KAAA8b,IAAAkvB,EAAAjvC,EAAAs/B,EAAA2P,EAAAhvC,EAAAq/B,EAAA2P,EAAAj6C,EAAAsqC,EAAA2P,EAAAC,EAAA5P,GAAAr7B,KAAAmkB,IAAA6mB,EAAAjvC,EAAAs/B,EAAA2P,EAAAhvC,EAAAq/B,EAAA2P,EAAAj6C,EAAAsqC,EAAA2P,EAAAC,EAAA5P,KASA8C,iBAAA,SAAAl3B,GAEA,IAAAw2B,EAAAtuC,KAAAspC,YAAAtpC,KAAA+7C,aAAAjkC,EAAA9X,KAAAspC,YACA0S,EAAAh8C,KAAAupC,gBAAAvpC,KAAA+7C,aAAAjkC,EAAA9X,KAAAwpC,SACAtP,EAAAl6B,KAAAupC,gBAAAvpC,KAAAi8C,sBAAAnkC,IAEAoiB,GAAA8hB,GAAA1N,KACAtuC,KAAA2qC,eAAA7yB,EAAAokC,MACAl8C,KAAA4qC,eAAA9yB,EAAAqkC,MAEA7N,EACAtuC,KAAA0qC,eAAA,EACAxQ,EACAl6B,KAAAyqC,eAAAvQ,EACA8hB,IACAh8C,KAAAwqC,iBAAA,KAUAuE,iBAAA,SAAAj3B,GACA,OAAA9X,KAAAwrC,gBACA3pC,QAAA0f,sBAAAvhB,KAAAo8C,yBAAAn0B,KAAAjoB,OAEAA,KAAAwrC,eAAA1zB,GAGAskC,yBAAA,WACA,OAAAp8C,KAAAwrC,iBAIAxrC,KAAAspC,YAAAtpC,KAAA0qC,eACA1qC,KAAAq8C,iBAAAr8C,KAAAwrC,gBACAxrC,KAAA0uC,uBACA1uC,KAAA4rC,eACA5rC,KAAAwqC,iBAAAxqC,KAAAyqC,gBACAzqC,KAAAwqC,gBACAxqC,KAAAs8C,mBAAAt8C,KAAAwrC,gBAEAxrC,KAAAu8C,qBAAAv8C,KAAAwrC,gBAGAxrC,KAAAy6C,yBAEAz6C,KAAA6uC,oBACA7uC,KAAA6rC,iBAEA7rC,KAAAw8C,gBAAAx8C,KAAAwrC,gBAGAxrC,KAAA2qC,eAAA3qC,KAAAwrC,eAAA0Q,MACAl8C,KAAA4qC,eAAA5qC,KAAAwrC,eAAA2Q,MAEAn8C,KAAAwrC,eAAA,OAQAyD,eAAA,SAAAn3B,GACA9X,KAAAwqC,iBAAA,EACAxqC,KAAAyqC,gBAAA,EACAzqC,KAAA0qC,eAAA,GAQAwE,gBAAA,SAAAp3B,GACA9X,KAAAivC,eAAAn3B,GACA9X,KAAAwrC,eAAA1zB,EACA9X,KAAAo8C,4BAQAE,mBAAA,SAAAxkC,GAQA,QAPA,IAAA9X,KAAAs8C,mBAAA/K,IACAvxC,KAAAs8C,mBAAA/K,EAAA,IAGAvxC,KAAAs8C,mBAAA/K,EAAAb,OAAA54B,EAAAokC,MAAAl8C,KAAA2qC,eACA3qC,KAAAs8C,mBAAA/K,EAAAZ,OAAA74B,EAAAqkC,MAAAn8C,KAAA4qC,eAEA,IAAA5qC,KAAAs8C,mBAAA/K,EAAAb,QAAA,IAAA1wC,KAAAs8C,mBAAA/K,EAAAZ,OACA,OAAA,EAaA,GAVA3wC,KAAAs8C,mBAAA/K,EAAA6E,UAAA,CACAp9B,KAAAhZ,KAAAwpC,QAAAxwB,KAAAhZ,KAAAwpC,QAAA5Q,MAAA,EACAE,IAAA94B,KAAAwpC,QAAA1Q,IAAA94B,KAAAwpC,QAAAvb,OAAA,EACA2K,MAAA54B,KAAAwpC,QAAA5Q,MACA3K,OAAAjuB,KAAAwpC,QAAAvb,QAGAjuB,KAAAs8C,mBAAA/K,EAAAkL,SAAAz8C,KAAAg3C,sBAAAh3C,KAAAs8C,mBAAA/K,EAAA6E,UAAAp2C,KAAAs8C,mBAAA/K,EAAAb,OAAA1wC,KAAAs8C,mBAAA/K,EAAAZ,SAGA3wC,KAAAk3C,yBAAAl3C,KAAAs8C,mBAAA/K,EAAAkL,SAAAz8C,KAAAkqC,oBAAA,CAcA,IAVAlqC,KAAAs8C,mBAAA/K,EAAAmL,IAAA,EACA18C,KAAAs8C,mBAAA/K,EAAAoL,IAAA,EACA38C,KAAAs8C,mBAAA/K,EAAAoH,MAAA34C,KAAAs8C,mBAAA/K,EAAAb,OAAA,GAAA,EAAA,EACA1wC,KAAAs8C,mBAAA/K,EAAAqH,MAAA54C,KAAAs8C,mBAAA/K,EAAAZ,OAAA,GAAA,EAAA,EAGA3wC,KAAAs8C,mBAAA/K,EAAAqL,SAAA,EACA58C,KAAAs8C,mBAAA/K,EAAAsL,eAAA,GAGA78C,KAAAs8C,mBAAA/K,EAAAmL,IAAA7rC,KAAAmkB,IAAAnkB,KAAA0mC,IAAAv3C,KAAAs8C,mBAAA/K,EAAAb,QAAA,IAAA1wC,KAAAs8C,mBAAA/K,EAAAmL,KAAA,EAAA18C,KAAAs8C,mBAAA/K,EAAAmL,MACA,IAAA18C,KAAAs8C,mBAAA/K,EAAAoL,IAAA9rC,KAAAmkB,IAAAnkB,KAAA0mC,IAAAv3C,KAAAs8C,mBAAA/K,EAAAZ,QAAA,IAAA3wC,KAAAs8C,mBAAA/K,EAAAoL,KAAA,EAAA38C,KAAAs8C,mBAAA/K,EAAAoL,MACA38C,KAAAs8C,mBAAA/K,EAAAkL,SAAAz8C,KAAAg3C,sBAAAh3C,KAAAs8C,mBAAA/K,EAAA6E,UAAAp2C,KAAAs8C,mBAAA/K,EAAAmL,KAAA18C,KAAAs8C,mBAAA/K,EAAAb,OAAA,EAAA,GAAA,GAAA1wC,KAAAs8C,mBAAA/K,EAAAoL,KAAA38C,KAAAs8C,mBAAA/K,EAAAZ,OAAA,EAAA,GAAA,IAEA3wC,KAAAk3C,yBAAAl3C,KAAAs8C,mBAAA/K,EAAAkL,SAAAz8C,KAAAkqC,qBACAlqC,KAAAs8C,mBAAA/K,EAAAmL,IAAA18C,KAAAs8C,mBAAA/K,EAAAoL,IAAA38C,KAAAs8C,mBAAA/K,EAAAqL,WACA58C,KAAAs8C,mBAAA/K,EAAAqL,SAAA58C,KAAAs8C,mBAAA/K,EAAAmL,IAAA18C,KAAAs8C,mBAAA/K,EAAAoL,IACA38C,KAAAs8C,mBAAA/K,EAAAsL,eAAA,CACA5Q,EAAAjsC,KAAAs8C,mBAAA/K,EAAAmL,KAAA18C,KAAAs8C,mBAAA/K,EAAAb,OAAA,EAAA,GAAA,GACAxE,EAAAlsC,KAAAs8C,mBAAA/K,EAAAoL,KAAA38C,KAAAs8C,mBAAA/K,EAAAZ,OAAA,EAAA,GAAA,KAQA,GAAA,GAAA3wC,KAAAs8C,mBAAA/K,EAAAqL,SACA,OAEA58C,KAAAs8C,mBAAA/K,EAAAb,OAAA1wC,KAAAs8C,mBAAA/K,EAAAsL,eAAA5Q,EACAjsC,KAAAs8C,mBAAA/K,EAAAZ,OAAA3wC,KAAAs8C,mBAAA/K,EAAAsL,eAAA3Q,EAIAlsC,KAAAwpC,QAAAkE,IAAA,CACA10B,KAAAhZ,KAAAwpC,QAAAxwB,KAAAhZ,KAAAs8C,mBAAA/K,EAAAb,OACA5X,IAAA94B,KAAAwpC,QAAA1Q,IAAA94B,KAAAs8C,mBAAA/K,EAAAZ,UASA0L,iBAAA,SAAAvkC,GAKA,QAJA,IAAA9X,KAAAq8C,iBAAA9K,IACAvxC,KAAAq8C,iBAAA9K,EAAA,IAGAvxC,KAAAspC,WAAA,CAIA,GAHAtpC,KAAAq8C,iBAAA9K,EAAAb,OAAA54B,EAAAokC,MAAAl8C,KAAA2qC,eACA3qC,KAAAq8C,iBAAA9K,EAAAZ,OAAA74B,EAAAqkC,MAAAn8C,KAAA4qC,eAEA,IAAA5qC,KAAAq8C,iBAAA9K,EAAAb,QAAA,IAAA1wC,KAAAq8C,iBAAA9K,EAAAZ,OACA,OAOA,GAJA3wC,KAAAq8C,iBAAA9K,EAAAuL,KAAA98C,KAAAspC,WAAAtwB,KAAAhZ,KAAAq8C,iBAAA9K,EAAAb,OACA1wC,KAAAq8C,iBAAA9K,EAAAwL,KAAA/8C,KAAAspC,WAAAxQ,IAAA94B,KAAAq8C,iBAAA9K,EAAAZ,OAGA,SAAA3wC,KAAAqqC,aACA,IAAArqC,KAAAk3C,yBAAA,CAAA,CAAAjL,EAAAjsC,KAAAq8C,iBAAA9K,EAAAuL,KAAA5Q,EAAAlsC,KAAAq8C,iBAAA9K,EAAAwL,OAAA/8C,KAAAkqC,oBACA,YAGA,KAAAlqC,KAAAqpC,SAAArwB,KAAAhZ,KAAAqpC,SAAAzQ,MAAA,EAAA54B,KAAAq8C,iBAAA9K,EAAAuL,KAAA,GAAA98C,KAAAqpC,SAAArwB,KAAAhZ,KAAAqpC,SAAAzQ,MAAA,EAAA54B,KAAAq8C,iBAAA9K,EAAAuL,KAAA,GACA98C,KAAAqpC,SAAAvQ,IAAA94B,KAAAqpC,SAAApb,OAAA,EAAAjuB,KAAAq8C,iBAAA9K,EAAAwL,KAAA,GAAA/8C,KAAAqpC,SAAAvQ,IAAA94B,KAAAqpC,SAAApb,OAAA,EAAAjuB,KAAAq8C,iBAAA9K,EAAAwL,KAAA,GACA,OAIA/8C,KAAAspC,WAAAoE,IAAA,CACA10B,KAAAhZ,KAAAspC,WAAAtwB,KAAAhZ,KAAAq8C,iBAAA9K,EAAAb,OACA5X,IAAA94B,KAAAspC,WAAAxQ,IAAA94B,KAAAq8C,iBAAA9K,EAAAZ,WASAmC,sBAAA,SAAAH,GAIA,OAFA3yC,KAAAitC,wBAEA0F,GACA,IAAA,OACA3yC,KAAAyrC,oBAAA,EACA,MAEA,IAAA,WACAzrC,KAAAyrC,mBAAAzrC,KAAAgqC,cAAAhqC,KAAAiqC,eACA,MAEA,IAAA,UACAjqC,KAAAyrC,mBAAAzrC,KAAAwpC,QAAA5Q,MAAA54B,KAAAwpC,QAAAvb,OACA,MAEA,IAAA,SAEA,MACA,QACAjuB,KAAAyrC,mBAAA6H,WAAAX,KASAI,0BAAA,gBACA,IAAA/yC,KAAA+yC,0BAAAxB,IACAvxC,KAAA+yC,0BAAAxB,EAAA,KAGAvxC,KAAAoqC,qBAAApqC,KAAAyrC,qBAIAzrC,KAAAoqC,qBAAA,EAGApqC,KAAA+yC,0BAAAxB,EAAA6E,UAAA,CACAp9B,KAAAhZ,KAAAwpC,QAAAxwB,KAAAhZ,KAAAwpC,QAAA5Q,MAAA,EACAE,IAAA94B,KAAAwpC,QAAA1Q,IAAA94B,KAAAwpC,QAAAvb,OAAA,EACA2K,MAAA54B,KAAAwpC,QAAA5Q,MACA3K,OAAAjuB,KAAAwpC,QAAAvb,QAIAjuB,KAAAwpC,QAAA5Q,MAAA54B,KAAAwpC,QAAAvb,OAAAjuB,KAAAyrC,oBACAzrC,KAAA+yC,0BAAAxB,EAAAyL,eAAAh9C,KAAA+yC,0BAAAxB,EAAA6E,UAAAnoB,OAGAjuB,KAAA+yC,0BAAAxB,EAAA6E,UAAAnoB,OAAAjuB,KAAAwpC,QAAA5Q,MAAA54B,KAAAyrC,mBAGAzrC,KAAA+yC,0BAAAxB,EAAA6E,UAAAtd,MAAA94B,KAAA+yC,0BAAAxB,EAAA6E,UAAAnoB,OAAAjuB,KAAA+yC,0BAAAxB,EAAAyL,gBAAA,EAGAh9C,KAAAk3C,yBAAAl3C,KAAAg3C,sBAAAh3C,KAAA+yC,0BAAAxB,EAAA6E,WAAAp2C,KAAAkqC,sBACAlqC,KAAA+yC,0BAAAxB,EAAA6E,UAAAxd,MAAA54B,KAAAwpC,QAAAvb,OAAAjuB,KAAAyrC,mBACAzrC,KAAA+yC,0BAAAxB,EAAA6E,UAAAnoB,OAAAjuB,KAAA+yC,0BAAAxB,EAAA6E,UAAAxd,MAAA54B,KAAAyrC,sBAIAzrC,KAAA+yC,0BAAAxB,EAAA0L,cAAAj9C,KAAA+yC,0BAAAxB,EAAA6E,UAAAxd,MACA54B,KAAA+yC,0BAAAxB,EAAA6E,UAAAxd,MAAA54B,KAAAwpC,QAAAvb,OAAAjuB,KAAAyrC,mBACAzrC,KAAA+yC,0BAAAxB,EAAA6E,UAAAp9B,OAAAhZ,KAAA+yC,0BAAAxB,EAAA6E,UAAAxd,MAAA54B,KAAA+yC,0BAAAxB,EAAA0L,eAAA,EAEAj9C,KAAAk3C,yBAAAl3C,KAAAg3C,sBAAAh3C,KAAA+yC,0BAAAxB,EAAA6E,WAAAp2C,KAAAkqC,sBACAlqC,KAAA+yC,0BAAAxB,EAAA6E,UAAAnoB,OAAAjuB,KAAAwpC,QAAA5Q,MAAA54B,KAAAyrC,mBACAzrC,KAAA+yC,0BAAAxB,EAAA6E,UAAAxd,MAAA54B,KAAA+yC,0BAAAxB,EAAA6E,UAAAnoB,OAAAjuB,KAAAyrC,qBAIAzrC,KAAA+yC,0BAAAxB,EAAA+D,WAAA,CACArnB,OAAAjuB,KAAA+yC,0BAAAxB,EAAA6E,UAAAnoB,OACA2K,MAAA54B,KAAA+yC,0BAAAxB,EAAA6E,UAAAxd,OAIA54B,KAAAwpC,QAAAsL,QAAA90C,KAAA+yC,0BAAAxB,EAAA+D,WAAA,CACArD,SAAA,KACAjyC,KAAAy6C,yBACAz6C,KAAAupC,eAAA8D,aAEA10B,SAAA3Y,KAAAyU,SAAAsgC,kBACAC,WAAA,KACAh1C,KAAAy6C,yBACAz6C,KAAAoqC,qBAAA,EACApqC,KAAA6rC,gBACA7rC,KAAA6uC,yBAUA0N,qBAAA,SAAAzkC,QACA,IAAA9X,KAAAu8C,qBAAAhL,IACAvxC,KAAAu8C,qBAAAhL,EAAA,IAIAvxC,KAAAu8C,qBAAAhL,EAAAb,OAAA54B,EAAAokC,MAAAl8C,KAAA2qC,eACA3qC,KAAAu8C,qBAAAhL,EAAAZ,OAAA74B,EAAAqkC,MAAAn8C,KAAA4qC,eAEA,MAAA5qC,KAAAyqC,gBAAA,MAAAzqC,KAAAyqC,iBACAzqC,KAAAu8C,qBAAAhL,EAAAb,OAAA,GAGA,MAAA1wC,KAAAyqC,gBAAA,MAAAzqC,KAAAyqC,iBACAzqC,KAAAu8C,qBAAAhL,EAAAZ,OAAA,GAGA,IAAA3wC,KAAAu8C,qBAAAhL,EAAAb,QAAA,IAAA1wC,KAAAu8C,qBAAAhL,EAAAZ,SAKA3wC,KAAAu8C,qBAAAhL,EAAA2L,kBAAA,CACAlkC,KAAAhZ,KAAAwpC,QAAAxwB,KAAAhZ,KAAAwpC,QAAA5Q,MAAA,EACAE,IAAA94B,KAAAwpC,QAAA1Q,IAAA94B,KAAAwpC,QAAAvb,OAAA,EACA2K,MAAA54B,KAAAwpC,QAAA5Q,MACA3K,OAAAjuB,KAAAwpC,QAAAvb,QAGAjuB,KAAAu8C,qBAAAhL,EAAA6E,UAAAp2C,KAAAm9C,iCAAAn9C,KAAAu8C,qBAAAhL,EAAA2L,kBAAAl9C,KAAAu8C,qBAAAhL,EAAAb,OAAA1wC,KAAAu8C,qBAAAhL,EAAAZ,OAAA3wC,KAAAyqC,gBAEAzqC,KAAAu8C,qBAAAhL,EAAA6E,UAAAnoB,OAAA,IAAAjuB,KAAAu8C,qBAAAhL,EAAA6E,UAAAxd,MAAA,IAIA54B,KAAAk3C,yBAAAl3C,KAAAg3C,sBAAAh3C,KAAAu8C,qBAAAhL,EAAA6E,WAAAp2C,KAAAkqC,sBAKAlqC,KAAAwpC,QAAAkE,IAAA,CACA5U,IAAA94B,KAAAu8C,qBAAAhL,EAAA6E,UAAAtd,IAAA94B,KAAAu8C,qBAAAhL,EAAA6E,UAAAnoB,OAAA,EACAjV,KAAAhZ,KAAAu8C,qBAAAhL,EAAA6E,UAAAp9B,KAAAhZ,KAAAu8C,qBAAAhL,EAAA6E,UAAAxd,MAAA,EACAA,MAAA54B,KAAAu8C,qBAAAhL,EAAA6E,UAAAxd,MACA3K,OAAAjuB,KAAAu8C,qBAAAhL,EAAA6E,UAAAnoB,SAGAjuB,KAAAy6C,4BAGA0C,iCAAA,SAAAD,EAAAxM,EAAAC,EAAAyM,GAcA,QAbA,IAAAp9C,KAAAm9C,iCAAA5L,IACAvxC,KAAAm9C,iCAAA5L,EAAA,IAIAvxC,KAAAm9C,iCAAA5L,EAAA8L,SAAA,EACAr9C,KAAAm9C,iCAAA5L,EAAA+L,UAAA,EAEAt9C,KAAAm9C,iCAAA5L,EAAA6E,UAAA8G,EACAl9C,KAAAm9C,iCAAA5L,EAAAb,OAAAA,EACA1wC,KAAAm9C,iCAAA5L,EAAAZ,OAAAA,EAGA3wC,KAAAyrC,mBAAA,CAIA,OAHAzrC,KAAAm9C,iCAAA5L,EAAAgM,OAAA,EAGAH,GACA,IAAA,IACAp9C,KAAAm9C,iCAAA5L,EAAAgM,QAAAv9C,KAAAm9C,iCAAA5L,EAAAZ,OACA,MACA,IAAA,IACA3wC,KAAAm9C,iCAAA5L,EAAAgM,OAAAv9C,KAAAm9C,iCAAA5L,EAAAZ,OACA,MACA,IAAA,IACA3wC,KAAAm9C,iCAAA5L,EAAAgM,OAAAv9C,KAAAm9C,iCAAA5L,EAAAb,OACA,MACA,IAAA,IACA1wC,KAAAm9C,iCAAA5L,EAAAgM,QAAAv9C,KAAAm9C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACA1wC,KAAAm9C,iCAAA5L,EAAAgM,OAAA1sC,KAAA0mC,IAAAv3C,KAAAm9C,iCAAA5L,EAAAZ,QAAA9/B,KAAA0mC,IAAAv3C,KAAAm9C,iCAAA5L,EAAAb,SAAA1wC,KAAAm9C,iCAAA5L,EAAAZ,OAAA3wC,KAAAm9C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACA1wC,KAAAm9C,iCAAA5L,EAAAgM,OAAA1sC,KAAA0mC,IAAAv3C,KAAAm9C,iCAAA5L,EAAAZ,QAAA9/B,KAAA0mC,IAAAv3C,KAAAm9C,iCAAA5L,EAAAb,SAAA1wC,KAAAm9C,iCAAA5L,EAAAZ,QAAA3wC,KAAAm9C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACA1wC,KAAAm9C,iCAAA5L,EAAAgM,OAAA1sC,KAAA0mC,IAAAv3C,KAAAm9C,iCAAA5L,EAAAZ,QAAA9/B,KAAA0mC,IAAAv3C,KAAAm9C,iCAAA5L,EAAAb,QAAA1wC,KAAAm9C,iCAAA5L,EAAAZ,OAAA3wC,KAAAm9C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACA1wC,KAAAm9C,iCAAA5L,EAAAgM,OAAA1sC,KAAA0mC,IAAAv3C,KAAAm9C,iCAAA5L,EAAAZ,QAAA9/B,KAAA0mC,IAAAv3C,KAAAm9C,iCAAA5L,EAAAb,QAAA1wC,KAAAm9C,iCAAA5L,EAAAZ,QAAA3wC,KAAAm9C,iCAAA5L,EAAAb,OAgBA,OAZA1wC,KAAAyrC,mBAAA,GACAzrC,KAAAm9C,iCAAA5L,EAAAb,OAAA1wC,KAAAm9C,iCAAA5L,EAAAgM,OACAv9C,KAAAm9C,iCAAA5L,EAAAZ,OAAA3wC,KAAAm9C,iCAAA5L,EAAAb,OAAA1wC,KAAAyrC,qBAEAzrC,KAAAm9C,iCAAA5L,EAAAZ,OAAA3wC,KAAAm9C,iCAAA5L,EAAAgM,OACAv9C,KAAAm9C,iCAAA5L,EAAAb,OAAA1wC,KAAAm9C,iCAAA5L,EAAAZ,OAAA3wC,KAAAyrC,oBAGAzrC,KAAAm9C,iCAAA5L,EAAA6E,UAAAnoB,QAAAjuB,KAAAm9C,iCAAA5L,EAAAZ,OACA3wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAxd,OAAA54B,KAAAm9C,iCAAA5L,EAAAb,OAGA0M,GACA,IAAA,IACAp9C,KAAAm9C,iCAAA5L,EAAA6E,UAAAtd,KAAA94B,KAAAm9C,iCAAA5L,EAAAZ,OACA3wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAp9B,MAAAhZ,KAAAm9C,iCAAA5L,EAAAb,OAAA,EACA,MACA,IAAA,IACA1wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAp9B,OAAAhZ,KAAAm9C,iCAAA5L,EAAAb,OAAA,EACA,MACA,IAAA,IACA1wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAtd,MAAA94B,KAAAm9C,iCAAA5L,EAAAZ,OAAA,EACA,MACA,IAAA,IACA3wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAtd,KAAA94B,KAAAm9C,iCAAA5L,EAAAZ,OAAA,EACA3wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAp9B,MAAAhZ,KAAAm9C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACA1wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAtd,KAAA94B,KAAAm9C,iCAAA5L,EAAAZ,OACA,MACA,IAAA,KACA3wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAtd,KAAA94B,KAAAm9C,iCAAA5L,EAAAZ,OACA3wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAp9B,MAAAhZ,KAAAm9C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACA1wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAp9B,MAAAhZ,KAAAm9C,iCAAA5L,EAAAb,aAKA1wC,KAAA6qC,cACA,OAAAuS,GAAA,OAAAA,GACA,OAAAA,GAAA,OAAAA,IAEAp9C,KAAAm9C,iCAAA5L,EAAAF,MACAxgC,KAAA0mC,IAAA7G,GAAA7/B,KAAA0mC,IAAA5G,IACA3wC,KAAAm9C,iCAAA5L,EAAAF,MAAA6L,EAAAtkB,MAAAskB,EAAAjvB,OACAjuB,KAAAm9C,iCAAA5L,EAAAZ,OAAA3wC,KAAAm9C,iCAAA5L,EAAAb,OAAA1wC,KAAAm9C,iCAAA5L,EAAAF,MACArxC,KAAAm9C,iCAAA5L,EAAAZ,QAAA,OAAAyM,GAAA,OAAAA,GAAA,EAAA,IAEAp9C,KAAAm9C,iCAAA5L,EAAAF,MAAA6L,EAAAtkB,MAAAskB,EAAAjvB,OACAjuB,KAAAm9C,iCAAA5L,EAAAb,OAAA1wC,KAAAm9C,iCAAA5L,EAAAZ,OAAA3wC,KAAAm9C,iCAAA5L,EAAAF,MACArxC,KAAAm9C,iCAAA5L,EAAAb,QAAA,OAAA0M,GAAA,OAAAA,GAAA,EAAA,IAIAA,EAAA13C,MAAA,OACA1F,KAAAm9C,iCAAA5L,EAAA6E,UAAAtd,KAAA94B,KAAAm9C,iCAAA5L,EAAAZ,OACA3wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAnoB,QAAAjuB,KAAAm9C,iCAAA5L,EAAAZ,QAEAyM,EAAA13C,MAAA,OACA1F,KAAAm9C,iCAAA5L,EAAA6E,UAAAnoB,QAAAjuB,KAAAm9C,iCAAA5L,EAAAZ,QAEAyM,EAAA13C,MAAA,OACA1F,KAAAm9C,iCAAA5L,EAAA6E,UAAAxd,OAAA54B,KAAAm9C,iCAAA5L,EAAAb,QAEA0M,EAAA13C,MAAA,OACA1F,KAAAm9C,iCAAA5L,EAAA6E,UAAAp9B,MAAAhZ,KAAAm9C,iCAAA5L,EAAAb,OACA1wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAxd,OAAA54B,KAAAm9C,iCAAA5L,EAAAb,QASA,OALA1wC,KAAAm9C,iCAAA5L,EAAA6E,UAAAtd,IAAA94B,KAAAm9C,iCAAA5L,EAAA6E,UAAAtd,IACA94B,KAAAm9C,iCAAA5L,EAAA6E,UAAAp9B,KAAAhZ,KAAAm9C,iCAAA5L,EAAA6E,UAAAp9B,KACAhZ,KAAAm9C,iCAAA5L,EAAA6E,UAAAxd,MAAA54B,KAAAm9C,iCAAA5L,EAAA6E,UAAAxd,MACA54B,KAAAm9C,iCAAA5L,EAAA6E,UAAAnoB,OAAAjuB,KAAAm9C,iCAAA5L,EAAA6E,UAAAnoB,OAEAjuB,KAAAm9C,iCAAA5L,EAAA6E,WAQAoG,gBAAA,SAAA1kC,QACA,IAAA9X,KAAAw8C,gBAAAjL,IACAvxC,KAAAw8C,gBAAAjL,EAAA,IAGA1vC,QAAA8f,iBAAA,KAGA3hB,KAAAw8C,gBAAAjL,EAAAiM,OAAA,UACAx9C,KAAAw8C,gBAAAjL,EAAArX,OAAAl6B,KAAAupC,gBAAAvpC,KAAAi8C,sBAAAnkC,GACA9X,KAAAspC,YAAAtpC,KAAA+7C,aAAAjkC,EAAA9X,KAAAspC,YACAtpC,KAAAw8C,gBAAAjL,EAAAiM,OAAA,UACAx9C,KAAAw8C,gBAAAjL,EAAArX,OACA,MAAAl6B,KAAAw8C,gBAAAjL,EAAArX,QAAA,MAAAl6B,KAAAw8C,gBAAAjL,EAAArX,OACAl6B,KAAAw8C,gBAAAjL,EAAAiM,OAAA,YACA,MAAAx9C,KAAAw8C,gBAAAjL,EAAArX,QAAA,MAAAl6B,KAAAw8C,gBAAAjL,EAAArX,OACAl6B,KAAAw8C,gBAAAjL,EAAAiM,OAAA,YACA,OAAAx9C,KAAAw8C,gBAAAjL,EAAArX,QAAA,OAAAl6B,KAAAw8C,gBAAAjL,EAAArX,OACAl6B,KAAAw8C,gBAAAjL,EAAAiM,OAAA,cACA,OAAAx9C,KAAAw8C,gBAAAjL,EAAArX,QAAA,OAAAl6B,KAAAw8C,gBAAAjL,EAAArX,SACAl6B,KAAAw8C,gBAAAjL,EAAAiM,OAAA,eAEAx9C,KAAAupC,gBAAAvpC,KAAA+7C,aAAAjkC,EAAA9X,KAAAwpC,WACAxpC,KAAAw8C,gBAAAjL,EAAAiM,OAAA,QAGAl/C,EAAA,SAAAwjB,IAAA,SAAA9hB,KAAAw8C,gBAAAjL,EAAAiM,UAQAvB,sBAAA,SAAAnkC,GAgBA,QAfA,IAAA9X,KAAAi8C,sBAAA1K,IACAvxC,KAAAi8C,sBAAA1K,EAAA,IAGAvxC,KAAAi8C,sBAAA1K,EAAAkM,aAAAz9C,KAAAipC,gBAAAjnC,SACAhC,KAAAi8C,sBAAA1K,EAAAmM,OAAA5lC,EAAAokC,MAAAl8C,KAAAi8C,sBAAA1K,EAAAkM,aAAAzkC,KACAhZ,KAAAi8C,sBAAA1K,EAAAoM,OAAA7lC,EAAAqkC,MAAAn8C,KAAAi8C,sBAAA1K,EAAAkM,aAAA3kB,IAGA94B,KAAAi8C,sBAAA1K,EAAAqM,GAAA59C,KAAAwpC,QAAAxwB,KAAAhZ,KAAAwpC,QAAA5Q,MAAA,EACA54B,KAAAi8C,sBAAA1K,EAAAsM,GAAA79C,KAAAi8C,sBAAA1K,EAAAqM,GAAA59C,KAAAwpC,QAAA5Q,MACA54B,KAAAi8C,sBAAA1K,EAAAuM,GAAA99C,KAAAwpC,QAAA1Q,IAAA94B,KAAAwpC,QAAAvb,OAAA,EACAjuB,KAAAi8C,sBAAA1K,EAAAwM,GAAA/9C,KAAAi8C,sBAAA1K,EAAAuM,GAAA99C,KAAAwpC,QAAAvb,OAGAjuB,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAqM,GAAA,IAAA59C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAqM,GAAA,EAAA,CACA,GAAA59C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAuM,GAAA,IAAA99C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAuM,GAAA,EACA,MAAA,KACA,GAAA99C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAwM,GAAA,GAAA/9C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAwM,GAAA,GACA,MAAA,KAIA,GAAA/9C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAsM,GAAA,IAAA79C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAsM,GAAA,EAAA,CACA,GAAA79C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAuM,GAAA,IAAA99C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAuM,GAAA,EACA,MAAA,KACA,GAAA99C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAwM,GAAA,GAAA/9C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAwM,GAAA,GACA,MAAA,KAKA,OAAA/9C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAqM,GAAA,GAAA59C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAqM,GAAA,GAAA59C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAwM,GAAA,IAAA/9C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAuM,GAAA,GACA,IAEA99C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAsM,GAAA,GAAA79C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAsM,GAAA,GAAA79C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAwM,GAAA,IAAA/9C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAuM,GAAA,GACA,IAIA99C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAuM,GAAA,GAAA99C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAuM,GAAA,GAAA99C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAqM,GAAA,IAAA59C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAsM,GAAA,GACA,IAEA79C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAwM,GAAA,GAAA/9C,KAAAi8C,sBAAA1K,EAAAoM,OAAA39C,KAAAi8C,sBAAA1K,EAAAwM,GAAA,GAAA/9C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAqM,GAAA,IAAA59C,KAAAi8C,sBAAA1K,EAAAmM,OAAA19C,KAAAi8C,sBAAA1K,EAAAsM,GAAA,IACA,KAeA9B,aAAA,SAAA58B,EAAAo3B,GAeA,YAdA,IAAAv2C,KAAA+7C,aAAAxK,IACAvxC,KAAA+7C,aAAAxK,EAAA,IAGAvxC,KAAA+7C,aAAAxK,EAAAkM,aAAAz9C,KAAAipC,gBAAAjnC,SACAhC,KAAA+7C,aAAAxK,EAAAmM,OAAAv+B,EAAA+8B,MAAAl8C,KAAA+7C,aAAAxK,EAAAkM,aAAAzkC,KACAhZ,KAAA+7C,aAAAxK,EAAAoM,OAAAx+B,EAAAg9B,MAAAn8C,KAAA+7C,aAAAxK,EAAAkM,aAAA3kB,IAGA94B,KAAA+7C,aAAAxK,EAAAqM,GAAArH,EAAAv9B,KAAAu9B,EAAA3d,MAAA,EACA54B,KAAA+7C,aAAAxK,EAAAsM,GAAA79C,KAAA+7C,aAAAxK,EAAAqM,GAAArH,EAAA3d,MACA54B,KAAA+7C,aAAAxK,EAAAuM,GAAAvH,EAAAzd,IAAAyd,EAAAtoB,OAAA,EACAjuB,KAAA+7C,aAAAxK,EAAAwM,GAAA/9C,KAAA+7C,aAAAxK,EAAAuM,GAAAvH,EAAAtoB,OAGAjuB,KAAA+7C,aAAAxK,EAAAmM,QAAA19C,KAAA+7C,aAAAxK,EAAAqM,IACA59C,KAAA+7C,aAAAxK,EAAAmM,QAAA19C,KAAA+7C,aAAAxK,EAAAsM,IACA79C,KAAA+7C,aAAAxK,EAAAoM,QAAA39C,KAAA+7C,aAAAxK,EAAAuM,IACA99C,KAAA+7C,aAAAxK,EAAAoM,QAAA39C,KAAA+7C,aAAAxK,EAAAwM,IAaA/G,sBAAA,SAAAZ,EAAAhI,EAAAC,GAqBA,YApBA,IAAAruC,KAAAg3C,sBAAAzF,IACAvxC,KAAAg3C,sBAAAzF,EAAA,SAGA,IAAAnD,IACAA,EAAA,QAEA,IAAAC,IACAA,EAAA,GAGAruC,KAAAg3C,sBAAAzF,EAAAyM,QAAA,CACA/R,EAAAmK,EAAAp9B,KAAAo1B,EACAlC,EAAAkK,EAAAtd,IAAAuV,GAGAruC,KAAAg3C,sBAAAzF,EAAA0M,SAAA,CAAAhS,EAAAjsC,KAAAg3C,sBAAAzF,EAAAyM,QAAA/R,EAAAmK,EAAAxd,MAAAsT,EAAAlsC,KAAAg3C,sBAAAzF,EAAAyM,QAAA9R,GACAlsC,KAAAg3C,sBAAAzF,EAAA2M,YAAA,CAAAjS,EAAAjsC,KAAAg3C,sBAAAzF,EAAA0M,SAAAhS,EAAAC,EAAAlsC,KAAAg3C,sBAAAzF,EAAA0M,SAAA/R,EAAAkK,EAAAnoB,QACAjuB,KAAAg3C,sBAAAzF,EAAA4M,WAAA,CAAAlS,EAAAjsC,KAAAg3C,sBAAAzF,EAAAyM,QAAA/R,EAAAC,EAAAlsC,KAAAg3C,sBAAAzF,EAAA2M,YAAAhS,GAEA,CAAAlsC,KAAAg3C,sBAAAzF,EAAAyM,QAAAh+C,KAAAg3C,sBAAAzF,EAAA0M,SAAAj+C,KAAAg3C,sBAAAzF,EAAA2M,YAAAl+C,KAAAg3C,sBAAAzF,EAAA4M,aAMAnQ,kCAAA,WACAhuC,KAAAkqC,mBAAAlqC,KAAAm2C,sBAAA,QASAA,sBAAA,SAAAiI,GACA,IAIA/M,EAJAgD,GAAA,IAAAr0C,KAAAsxC,wBAAA,GAAA,GAAAtxC,KAAA8pC,uBAAAj5B,KAAAyjC,GAAA,KAEAnG,EAAAnuC,KAAA+tC,2BAKAsD,EADA,iBAAA+M,EACAA,EACA,UAAAA,EACAp+C,KAAA+vC,oBAAA5B,GAEAnuC,KAAA2vC,kBAAAxB,GAIA,IAAA8J,EAAA9J,EAAAlgB,OAAAojB,EACA2G,EAAA7J,EAAAvV,MAAAyY,EAKAgN,EAAAxtC,KAAA2jC,IAAAH,GAAA4D,EACAqG,EAAAztC,KAAA4jC,IAAAJ,GAAA2D,EACAuG,EAAA1tC,KAAA2jC,IAAAH,GAAA2D,EACAwG,EAAA3tC,KAAA4jC,IAAAJ,GAAA4D,EAGAwG,GAAAz+C,KAAA8qC,cAAAuT,EAAAC,IAAA,EACAI,GAAA1+C,KAAA+qC,aAAAyT,EAAAD,IAAA,EAGA,MAAA,CACA3xC,EAAA,CACAq/B,EAAAyS,EAAAH,EACArS,EAAAuS,GAEA5xC,EAAA,CACAo/B,EAAAjsC,KAAA+qC,YAAA2T,EACAxS,EAAAuS,EAAAJ,GAEAz8C,EAAA,CACAqqC,EAAAyS,EAAAF,EACAtS,EAAAlsC,KAAA8qC,aAAA2T,GAEA3C,EAAA,CACA7P,EAAAyS,EACAxS,EAAAuS,EAAAH,KAUAK,OAAA,SAAAC,GACA5+C,KAAAmpC,OAAAxtB,OAAA3b,KAAA6+C,UACA7+C,KAAA6+C,SAAAD,EACA5+C,KAAAmpC,OAAAjrB,IAAAle,KAAA6+C,WAaA3H,yBAAA,SAAA4H,EAAA1I,GAWA,SAVA,IAAAp2C,KAAAk3C,yBAAA3F,IACAvxC,KAAAk3C,yBAAA3F,EAAA,IAIAvxC,KAAAk3C,yBAAA3F,EAAAwN,GAAA/+C,KAAAg/C,WAAA5I,EAAAxpC,EAAAwpC,EAAAvpC,GACA7M,KAAAk3C,yBAAA3F,EAAA0N,GAAAj/C,KAAAg/C,WAAA5I,EAAAvpC,EAAAupC,EAAAx0C,GACA5B,KAAAk3C,yBAAA3F,EAAA2N,WAAAl/C,KAAAm/C,kBAAAn/C,KAAAk3C,yBAAA3F,EAAAwN,GAAA/+C,KAAAk3C,yBAAA3F,EAAAwN,IACA/+C,KAAAk3C,yBAAA3F,EAAA6N,WAAAp/C,KAAAm/C,kBAAAn/C,KAAAk3C,yBAAA3F,EAAA0N,GAAAj/C,KAAAk3C,yBAAA3F,EAAA0N,IAEAj/C,KAAAk3C,yBAAA3F,EAAAlyC,EAAA,EAAAW,KAAAk3C,yBAAA3F,EAAAlyC,EAAAy/C,EAAAx+C,OAAAN,KAAAk3C,yBAAA3F,EAAAlyC,IAeA,GAdAW,KAAAk3C,yBAAA3F,EAAA8N,MAAAP,EAAA9+C,KAAAk3C,yBAAA3F,EAAAlyC,GAIAW,KAAAk3C,yBAAA3F,EAAA+N,GAAAt/C,KAAAg/C,WAAA5I,EAAAxpC,EAAA5M,KAAAk3C,yBAAA3F,EAAA8N,OACAr/C,KAAAk3C,yBAAA3F,EAAAgO,GAAAv/C,KAAAg/C,WAAA5I,EAAAvpC,EAAA7M,KAAAk3C,yBAAA3F,EAAA8N,OAGAr/C,KAAAk3C,yBAAA3F,EAAAiO,WAAAx/C,KAAAm/C,kBAAAn/C,KAAAk3C,yBAAA3F,EAAAwN,GAAA/+C,KAAAk3C,yBAAA3F,EAAA+N,IACAt/C,KAAAk3C,yBAAA3F,EAAAkO,WAAAz/C,KAAAm/C,kBAAAn/C,KAAAk3C,yBAAA3F,EAAA0N,GAAAj/C,KAAAk3C,yBAAA3F,EAAAgO,IAEAv/C,KAAAk3C,yBAAA3F,EAAAmO,aAAA,GAAA1/C,KAAAk3C,yBAAA3F,EAAAiO,YAAAx/C,KAAAk3C,yBAAA3F,EAAAiO,YAAAx/C,KAAAk3C,yBAAA3F,EAAA2N,WACAl/C,KAAAk3C,yBAAA3F,EAAAoO,aAAA,GAAA3/C,KAAAk3C,yBAAA3F,EAAAkO,YAAAz/C,KAAAk3C,yBAAA3F,EAAAkO,YAAAz/C,KAAAk3C,yBAAA3F,EAAA6N,YAEAp/C,KAAAk3C,yBAAA3F,EAAAmO,eAAA1/C,KAAAk3C,yBAAA3F,EAAAoO,aACA,OAAA,EAIA,OAAA,GASAX,WAAA,SAAApyC,EAAAC,GACA,MAAA,CAAAo/B,EAAAp/B,EAAAo/B,EAAAr/B,EAAAq/B,EAAAC,EAAAr/B,EAAAq/B,EAAAt/B,EAAAs/B,IASAiT,kBAAA,SAAAvyC,EAAAC,GACA,OAAAD,EAAAq/B,EAAAp/B,EAAAo/B,EAAAr/B,EAAAs/B,EAAAr/B,EAAAq/B,GASA0T,oBAAA,SAAAC,GACA,OAAAhvC,KAAA2mC,KAAAqI,EAAA5T,EAAA4T,EAAA5T,EAAA4T,EAAA3T,EAAA2T,EAAA3T,IASA4T,wBAAA,SAAAlzC,EAAAC,GACA,OAAAgE,KAAAK,MAAA,IAAAL,KAAAkvC,KAAAlvC,KAAAmkB,IAAA,EAAAh1B,KAAAm/C,kBAAAvyC,EAAAC,IAAA7M,KAAA4/C,oBAAAhzC,GAAA5M,KAAA4/C,oBAAA/yC,MAAAgE,KAAAyjC,GAAA,KAAA,KAWA8C,gBAAA,SAAAhB,EAAAU,GAcA,IAZA,IAAAkJ,EAAA,CACA,CAAA5J,EAAAxpC,EAAAwpC,EAAAvpC,GACA,CAAAupC,EAAAvpC,EAAAupC,EAAAx0C,GACA,CAAAw0C,EAAAx0C,EAAAw0C,EAAA0F,GACA,CAAA1F,EAAA0F,EAAA1F,EAAAxpC,IAGAqzC,EAAA,CAAAhU,EAAAjsC,KAAA+qC,YAAA,EAAAmB,EAAAlsC,KAAA8qC,aAAA,GACAoV,EAAA,IACAC,EAAA,KAGAC,EAAA,EAAAA,EAAAJ,EAAA1/C,OAAA8/C,IAAA,CACA,IAAAjJ,EAAA6I,EAAAI,GACAC,EAAArgD,KAAAg/C,WAAA7H,EAAA,GAAA8I,GACAK,EAAAtgD,KAAAg/C,WAAA7H,EAAA,GAAAA,EAAA,IACAoJ,EAAAvgD,KAAAg/C,WAAA7H,EAAA,GAAAL,GAMA0J,EAAA3vC,KAAA0mC,IAAAv3C,KAAA8/C,wBAAAO,EAAAE,IAAAvgD,KAAA8/C,wBAAAO,EAAAC,GAAAtgD,KAAA8/C,wBAAAQ,EAAAC,KAEAC,EAAAN,IACAA,EAAAM,EACAL,EAAAhJ,GAIA,OAAAgJ,GAQAhI,qBAAA,SAAAjH,GACA,IAAAuP,EAAA,GAEApM,EAAAxjC,KAAA0mC,IAAAv3C,KAAA8pC,uBAAAj5B,KAAAyjC,GAAA,KAEAoM,EAAAxP,EAAAjjB,OAAAijB,EAAAtY,MAIA,GAHA6nB,EAAAxyB,OAAAijB,EAAAtY,OAAA/nB,KAAA4jC,IAAAJ,GAAAxjC,KAAA2jC,IAAAH,GAAAqM,GACAD,EAAA7nB,MAAAsY,EAAAtY,OAAA/nB,KAAA2jC,IAAAH,GAAAxjC,KAAA4jC,IAAAJ,GAAAqM,GAEA1gD,KAAAsxC,wBAAA,CACA,IAAAuD,EAAA4L,EAAA7nB,MACA6nB,EAAA7nB,MAAA6nB,EAAAxyB,OACAwyB,EAAAxyB,OAAA4mB,EAGA,OAAA4L,IAEA,CACAhjC,SAAA,CACAs3B,kBAAA,IACA5I,kBAAA,EACAxE,OAAArpC,EAAAqlB,KACAooB,qBAAA,QChsFAltC,MAAA8hD,WAAA9hD,MAAA6V,iBAAA9V,OAAA,CACAgiD,4BAAA,KACAC,2BAAA,KACAC,kCAAA,EAEAC,cAAA,KACAC,aAAA,KACAC,aAAA,KACAC,SAAA,KAEAC,SAAA,KACAC,cAAA,KACAC,YAAA,KAEAC,kBAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,yBAAA,GAEAC,WAAA,KACAC,YAAA,KACAC,+BAAA,KACAC,qBAAA,GAEAC,sBAAA,CACAC,QAAA,CACA,CAAA58C,MAAA,WAAAsW,MAAA5c,MAAAc,EAAA,MAAA,cAAA,CAAAwF,MAAA,UAAAsW,MAAA5c,MAAAc,EAAA,MAAA,iBAGAqiD,wBAAA,CACAD,QAAA,CACA,CAAA58C,MAAA,UAAAsW,MAAA5c,MAAAc,EAAA,MAAA,4DAAA,CAAAwF,MAAA,QAAAsW,MAAA5c,MAAAc,EAAA,MAAA,gEAIA6d,KAAA,SAAApJ,EAAAhB,EAAAqB,GACAzU,KAAAqjB,KAAAjP,EAAAhB,EAAAqB,GAEA,UAAAzU,KAAAyU,SAAAiT,SACA1nB,KAAA2hD,aACA3hD,KAAAiiD,qBAGAjiD,KAAA6d,YAAAhc,QAAAsf,KAAA,gBAAA,0BAEAnhB,KAAA6d,YAAA7d,KAAAkkB,MAAA,SAAA,wBAEAlkB,KAAAyU,SAAAme,OACA5yB,KAAAyU,SAAAme,MAAA/a,GAAA,wBAAA7X,KAAAkiD,qBAAAj6B,KAAAjoB,SAKA8nB,YAAA,WAKA,MAJA,UAAA9nB,KAAAyU,SAAAiT,SAAA1nB,KAAA2hD,aACA3hD,KAAAiiD,qBAGAjiD,KAAAqjB,QAGA+G,WAAA,SAAA9F,GACAtkB,KAAAqjB,KAAAiB,GAEAtkB,KAAAmiD,yBAAA79B,GAEA,UAAAtkB,KAAAyU,SAAAiT,UACA1nB,KAAA2hD,aAAA3hD,KAAAoiD,gBAAA99B,GAAA,GACAA,EAAAvd,KAAA,cACA/G,KAAA2hD,YAAA92B,SAAAvG,EAAAsD,UAIA5nB,KAAA0hD,YACA1hD,KAAA0hD,WAAAW,sBAKAj3B,aAAA,SAAA9G,GACAtkB,KAAAqjB,KAAAiB,GAGA,IAAAg+B,EAAAh+B,EAAAvd,KAAA,eAEAu7C,GACAA,EAAA7jC,UAGA,UAAAze,KAAAyU,SAAAiT,UACA1nB,KAAA2hD,aAAA3hD,KAAAoiD,gBAAA99B,GAAA,GACAtkB,KAAA2hD,YAAAt2B,YAAA/G,EAAAsD,UAGA5nB,KAAA0hD,YACA1hD,KAAA0hD,WAAAW,sBAKAD,gBAAA,SAAA99B,GACA,OAAAA,EAAAi+B,aAAA,MAAA,MAAAjiD,QAMA2hD,mBAAA,WACAjiD,KAAA2hD,cAKA3hD,KAAAyU,SAAAshB,YAAA,EACA/1B,KAAAyU,SAAAuhB,aAAA,EAKAh2B,KAAA0hD,WAAA,IAAA7/C,QAAA2gD,SAAA,CACAC,sBAAA,MACAC,cAAA,IACA9mC,OAAA,IAAA5b,KAAAmmB,KAAAiJ,sBAAA6J,IAAA,6BACA0pB,OAAAC,GAAA5iD,KAAA6iD,mBAAAD,GACAE,YAAA,KAEA,IAAA10C,EAEAA,EADApO,KAAA0hD,WAAAqB,UAAA/iD,KAAA0hD,WAAAqB,SAAA9pB,IAAA,4BAAA34B,OACA,8BAEA,mBAKA,IAFA,IAAA0iD,EAAA,GAEA3jD,EAAA,EAAAA,EAAAW,KAAAypB,SAAAnpB,OAAAjB,IAAA,CAEA,IAAAilB,EAAAtkB,KAAAypB,SAAA9W,GAAAtT,GACAwC,QAAA0Y,QAAA+J,EAAAlW,IACA40C,EAAAtjD,KAAA4kB,GAIA,OAAA0+B,GAGAC,YAAAjjD,KAAAkjD,aAAAj7B,KAAAjoB,MACAmjD,mBAAAnjD,KAAAojD,oBAAAn7B,KAAAjoB,MACAqjD,WAAArjD,KAAAsjD,gBAAAr7B,KAAAjoB,MACAujD,iBAAA,MAMAvjD,KAAA2hD,YAAA,IAAA9/C,QAAA2gD,SAAA,CACAC,sBAAA,MACAC,cAAA,IAEA9mC,OAAA,KAKA,IAHA,IAAA4nC,EAAAxjD,KAAAikB,aAAA4Y,mBACA4mB,EAAA,GAEApkD,EAAA,EAAAA,EAAAmkD,EAAAljD,OAAAjB,IAAA,CACA,IAAAilB,EAAAk/B,EAAA7wC,GAAAtT,GAEAW,KAAA0jD,2BAAAp/B,EAAAvd,KAAA,UAIAud,EAAAlO,SAAA,QAAApW,KAAAoiD,gBAAA99B,GAAA,GACAm/B,EAAA/jD,KAAA4kB,EAAAsD,SAAA,KAIA,OAAAtpB,EAAAmlD,IAGAd,OAAAgB,IACA,IAAAC,EAAAtlD,EAAA,qEACAulD,EAAAvlD,EAAA,UAAAkQ,SAAAo1C,GACAE,EAAAxlD,EAAA,SAAAkQ,SAAAq1C,GAaA,OAXAF,EAAAn1C,SAAAs1C,GAAAjtC,YAAA,YACA8sC,EAAApoC,SAAA,KAAAjJ,SAAA,OAGAqxC,EAAA7hC,IAAA,CACAiiC,cAAA/jD,KAAA2hD,YAAAoB,SAAAjhC,IAAA,eACAkiC,gBAAAhkD,KAAA2hD,YAAAoB,SAAAjhC,IAAA,iBACAmiC,iBAAAjkD,KAAA2hD,YAAAoB,SAAAjhC,IAAA,kBACAoiC,eAAAlkD,KAAA2hD,YAAAoB,SAAAjhC,IAAA,kBAGA8hC,GAGAd,YAAA,KACA,IAAAE,EAAA,GAGAmB,EAAA,GACAnkD,KAAA2hD,YAAAoB,SAAA1sC,KAAA,eAAAtC,MAAA,WACAowC,EAAAzkD,KAAApB,EAAA0B,MAAA+G,KAAA,WAGA,IAAA,IAAA1H,EAAA,EAAAA,EAAAW,KAAAypB,SAAAnpB,OAAAjB,IAAA,CAEA,IAAAilB,EAAAtkB,KAAAypB,SAAA9W,GAAAtT,GACAJ,EAAAqlB,EAAAvd,KAAA,OAEA/G,KAAA0jD,2BAAAzkD,KAIAJ,MAAAsO,QAAAlO,EAAAklD,IACAnB,EAAAtjD,KAAA4kB,IAIA,OAAA0+B,GAGAC,YAAAjjD,KAAAkjD,aAAAj7B,KAAAjoB,MACAmjD,mBAAAnjD,KAAAojD,oBAAAn7B,KAAAjoB,MACAqjD,WAAArjD,KAAAokD,kBAAAn8B,KAAAjoB,UAOAsjD,gBAAA,WACA,GAAAtjD,KAAA0hD,WAAA2C,mBAAArkD,KAAA0hD,WAAA2C,kBAAA,KAAArkD,KAAAskB,QAAA,GAAA,CAQA,IANA,IAAAggC,EAAAtkD,KAAAskB,QAEAigC,EAAAvkD,KAAA0hD,WAAA2C,kBAAAt9C,KAAA,aACAy9C,EAAA,GAGAnlD,EAAA,EAAAA,EAAAW,KAAA0hD,WAAAqB,SAAAziD,OAAAjB,IAAA,CACA,IAAAolD,EAAA5lD,MAAAqX,eAAAlW,KAAA0hD,WAAAqB,SAAA1jD,IAAAiX,GAEAkuC,EAAA9kD,KAAA+kD,GAIA,GAAAD,EAAAlkD,OAAA,CACAN,KAAA0qB,eAEA1qB,KAAAkiD,uBACAliD,KAAAqhD,YAAAqD,mBACA1kD,KAAAqhD,YAAAsD,aAAAH,EAAAlkD,QACAN,KAAAqhD,YAAAuD,kBAGA,IAAAC,EAAA,GACA,IAAAxlD,EAAA,EAAAA,EAAAmlD,EAAAlkD,OAAAjB,IACAwlD,EAAAnlD,KAAA,CACAoH,OAAA,oBACAhH,OAAA,CACAwqC,QAAAka,EAAAnlD,GACAylD,SAAAP,KAMA,IAAAQ,EAAAC,IACAhlD,KAAAohD,cAAA6D,eAGA,IAAA,IAAA5lD,EAAA,EAAAA,EAAA2lD,EAAA1kD,OAAAjB,IAAA,CACA,IAAAqL,EAAAs6C,EAAA3lD,GAGAqL,EAAAw6C,UACAllD,KAAAohD,cAAA+D,UAAA,CACA7a,QAAA5/B,EAAA4/B,QACA8a,kBAAA16C,EAAA06C,kBACAC,OAAA,CAAAxlD,QAAA6K,EAAAw6C,SAAAnD,QAAA/hD,KAAA8hD,sBAAAC,WAIAr3C,EAAA/C,OACAM,MAAAyC,EAAA/C,OAIA3H,KAAA4qB,oBACA5qB,KAAAqhD,YAAAiE,kBACA,IAAAle,GAAA,EAEAme,EAAA,WAEAvlD,KAAAikB,aAAA6L,WAAAw0B,GAGAtkD,KAAAy5B,eAAAz5B,KAAA0hD,WAAAqB,SAAAziD,OAGA,IAAA,IAAAjB,EAAA,EAAAA,EAAAmlD,EAAAlkD,OAAAjB,IACAf,EAAA,YAAAkmD,EAAAnlD,GAAA,KAAAsc,SAGA3b,KAAAmmB,KAAA0P,sBACA71B,KAAAwlD,8BAAAjB,GAEAnd,GACApnC,KAAAopB,kBAIA,GAAAppB,KAAAohD,cAAAqE,iBAAA,CAkDAzlD,KAAA0hD,WAAAgE,iBACA1lD,KAAAohD,cAAAuE,iBAjDAC,IAIA,IAHA,IAAAC,EAAA,GAGAxmD,EAAA,EAAAA,EAAAumD,EAAAtlD,OAAAjB,IACA,WAAAumD,EAAAvmD,GAAAymD,QAKA,aAAAF,EAAAvmD,GAAAymD,QACAD,EAAAnmD,KAAA,CACAoH,OAAA,oBACAhH,OAAA,CACAglD,SAAAP,EACAja,QAAAsb,EAAAvmD,GAAAirC,QACA7+B,SAAAm6C,EAAAvmD,GAAA+lD,qBAKA,YAAAQ,EAAAvmD,GAAAymD,QACAD,EAAAnmD,KAAA,CACAoH,OAAA,oBACAhH,OAAA,CACAglD,SAAAP,EACAja,QAAAsb,EAAAvmD,GAAAirC,QACAlZ,OAAA,MArBAgW,GAAA,EA4BA,IAAAye,EAAAvlD,OACAilD,EAAAQ,MAAA/lD,OAGAA,KAAA0qB,eACA1qB,KAAAqhD,YAAAqD,mBACA1kD,KAAAqhD,YAAAsD,aAAA3kD,KAAAohD,cAAAqE,kBACAzlD,KAAAqhD,YAAAuD,kBAGA5kD,KAAAgmD,sBAAAH,EAAAd,WAOAQ,EAAAQ,MAAA/lD,MACAA,KAAA0hD,WAAAgE,kBAQA,YAHA1lD,KAAAgmD,sBAAAnB,EAAAE,SAOA/kD,KAAAskB,QAAAhS,SAAA,OAEAtS,KAAAwlD,gCAGAxlD,KAAA0hD,WAAAuE,2BAMA7B,kBAAA,WAEA,GACApkD,KAAA2hD,YAAA0C,mBACA,IAAArkD,KAAA2hD,YAAA0C,kBAAA9vB,SAAA,MAAAhZ,SAAA,MAAAK,OAAA5b,KAAA2hD,YAAAoB,UAAAziD,OACA,CACA,IAAAikD,EAAAvkD,KAAA2hD,YAAA0C,kBAAAt9C,KAAA,aAEA/G,KAAAwlD,8BAAAjB,GAKA,IAFA,IAAA2B,EAAA,GAEA7mD,EAAA,EAAAA,EAAAW,KAAA2hD,YAAAoB,SAAAziD,OAAAjB,IAAA,CACA,IACAylD,EADA9kD,KAAA2hD,YAAAoB,SAAApwC,GAAAtT,GAAAkc,SAAA,KACAxU,KAAA,aAGA,GAAA+9C,GAAAP,EAAA,CACA2B,EAAAxmD,KAAAolD,GACA,OAIA,GAAAoB,EAAA5lD,OAAA,CACA4lD,EAAAv5C,OACAu5C,EAAAhT,UAEAlzC,KAAA0qB,eACA1qB,KAAAkiD,uBACAliD,KAAAqhD,YAAAqD,mBACA1kD,KAAAqhD,YAAAsD,aAAAuB,EAAA5lD,QACAN,KAAAqhD,YAAAuD,kBAEA,IAAAC,EAAA,GAEA,IAAAxlD,EAAA,EAAAA,EAAA6mD,EAAA5lD,OAAAjB,IACAwlD,EAAAnlD,KAAA,CACAoH,OAAA,qBACAhH,OAAA,CACAglD,SAAAoB,EAAA7mD,GACA8mD,SAAA5B,KAMAvkD,KAAAomD,YAmBA,IAAAC,EAAA,GAEAC,EAAA,GAEAvB,EAAAC,IACAhlD,KAAAohD,cAAA6D,eAGA,IAAA,IAAA5lD,EAAA,EAAAA,EAAA2lD,EAAA1kD,OAAAjB,IAAA,CACA,IAAA0H,EAAAi+C,EAAA3lD,GAGA0H,EAAAW,UACAX,EAAAw/C,eACAF,EAAAt/C,EAAAw/C,cAGAx/C,EAAAy/C,cACAF,EAAAtmD,KAAA2hD,YAAA0C,kBAAAt9C,KAAA,OAAA,WAAAA,EAAA0/C,eAKA1/C,EAAAm+C,WACAn+C,EAAAs+C,OAAA,CACAxlD,QAAAkH,EAAAm+C,SACAnD,QAAA/hD,KAAAgiD,wBAAAD,SAGA/hD,KAAAohD,cAAA+D,UAAAp+C,IAGAA,EAAAY,OACAM,MAAAlB,EAAAY,OAIA,GAAA3H,KAAAohD,cAAAqE,iBAAA,CA6CAzlD,KAAAohD,cAAAuE,iBA3CAC,IACA5lD,KAAAohD,cAAA6D,eAMA,IAJA,IAAAY,EAAA,GAEA/lD,EAAA,GAEAT,EAAA,EAAAA,EAAAumD,EAAAtlD,OAAAjB,IACA,WAAAumD,EAAAvmD,GAAAymD,SAIA,YAAAF,EAAAvmD,GAAAymD,SACAhmD,EAAAsxB,OAAA,GAGA,UAAAw0B,EAAAvmD,GAAAymD,SACAhmD,EAAA4mD,OAAA,GAGA5mD,EAAAglD,SAAA/9C,EAAA+9C,SACAhlD,EAAAqmD,SAAAp/C,EAAAo/C,SAEAN,EAAAnmD,KAAA,CACAoH,OAAA,qBACAhH,OAAAA,KAKA,IAAA+lD,EAAAvlD,OACAN,KAAA2mD,yBAAAN,EAAAH,EAAAI,IAGAtmD,KAAA0qB,eACA1qB,KAAAqhD,YAAAqD,mBACA1kD,KAAAqhD,YAAAsD,aAAA3kD,KAAAohD,cAAAqE,kBACAzlD,KAAAqhD,YAAAuD,kBAEA5kD,KAAAgmD,sBAAAH,EAAAd,MAMA/kD,KAAA4qB,oBACA5qB,KAAAqhD,YAAAiE,uBAEAtlD,KAAA2mD,yBAAAN,EAAAH,EAAAI,IAQA,YAHAtmD,KAAAgmD,sBAAAnB,EAAAE,SAOA/kD,KAAAskB,QAAAhS,SAAA,OAEAtS,KAAAwlD,gCAGAxlD,KAAA2hD,YAAAsE,2BAMAU,yBAAA,SAAAN,EAAAO,EAAAN,GACAtmD,KAAA0qB,eACA1qB,KAAAqhD,YAAAqD,mBACA1kD,KAAAqhD,YAAAsD,aAAA,GACA3kD,KAAAqhD,YAAAuD,kBAEA,IAAAiC,EAAAD,IAIA,IAFA,IAAAE,EAAA,EACA55B,EAAA05B,EAAAtmD,OACAjB,EAAA,EAAAA,EAAAunD,EAAAtmD,OAAAjB,IAEAR,MAAAgI,kBAAA,uBAAA,CAAAi+C,SAAA8B,EAAAvnD,IAAA,OACAynD,IAAA55B,IACAltB,KAAA4qB,oBACA5qB,KAAAqhD,YAAAiE,kBACAtlD,KAAA2hD,YAAAsE,0BACAjmD,KAAAisB,iBAAA,iBAAAq6B,GACAtmD,KAAAwqB,qBAMA,GAAA67B,EAAA/lD,OAAA,EAAA,CAGA,IAFA,IAAAukD,EAAA,GAEAxlD,EAAA,EAAAA,EAAAgnD,EAAA/lD,OAAAjB,IACAwlD,EAAAnlD,KAAA,CACAoH,OAAA,oBACAhH,OAAAumD,EAAAhnD,KAGAW,KAAAgmD,sBAAAnB,GAAA,WACAgC,EAAAD,WAGAC,EAAAD,IAWAG,eAAA,SAAAziC,GAEA,IADA,IAAA0iC,GACAA,EAAAhnD,KAAAinD,iBAAA3iC,KAAA0iC,EAAA1mD,QACAgkB,EAAA0iC,EAEA,OAAA1iC,GAUA2iC,iBAAA,SAAA3iC,GACA,GAAAtkB,KAAAoiD,gBAAA99B,GAAA,EACA,OAAAA,EAAAsD,SAAAA,SAAA2M,SAAA,MAIA2yB,wBAAA,SAAA3C,GAMA,IALA,IAAA4C,EAAAnnD,KAAAonD,gBAAA7C,GAGA8C,EAAAF,EAAAv/B,SAAAgK,QAAA,MAEAvyB,EAAA,EAAAA,EAAAgoD,EAAA/mD,OAAAjB,IAAA,CACA,IAAAioD,EAAAhpD,EAAA+oD,EAAAhoD,IAEAioD,EAAAlxC,SAAA,aACAkxC,EAAA/rC,SAAA,WAAA7D,QAAA,SAIA1X,KAAAuqB,aAAA48B,GACAnnD,KAAAopB,kBAQAJ,UAAA,WACAhpB,KAAA+gD,gBACA/gD,KAAA+gD,cAAAziD,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,aACAmC,YAAA,SACA4pC,MAAA,wCACAjkD,KAAAzE,MAAAc,EAAA,MAAA,kBAEAK,KAAAsyB,UAAAtyB,KAAA+gD,eAEA/gD,KAAAghD,aAAA1iD,EAAA,kEAAAupB,OAAA2/B,aAAAxnD,KAAA+gD,gBAGA/gD,KAAAohD,cAAA,IAAAviD,MAAA4oD,cACAznD,KAAAqhD,YAAA,IAAAxiD,MAAA6oD,YAAA1nD,KAAAkkB,OAAA,GAEA,IAAAjd,EAAA,CACA5B,IAAAxG,MAAAuH,aAAA,iBACAuhD,UAAA3nD,KAAAghD,aACA4G,SAAA5nD,KAAAoT,YAGAnM,EAAA4gD,OAAA,CACAC,gBAAA9nD,KAAA+nD,eAAA9/B,KAAAjoB,MACAgoD,sBAAAhoD,KAAAioD,kBAAAhgC,KAAAjoB,MACAkoD,eAAAloD,KAAAmoD,kBAAAlgC,KAAAjoB,OAGAA,KAAAyU,SAAA2T,eAAA,IAAApoB,KAAAyU,SAAA2T,SAAAggC,OACAnhD,EAAAohD,aAAAroD,KAAAyU,SAAA2T,SAAAggC,MAGApoD,KAAAyhD,yBAAAx6C,EAEAjH,KAAAmhD,SAAA,IAAAtiD,MAAAypD,SAAAtoD,KAAA+gD,cAAA95C,GAEAjH,KAAA+gD,cAAAlpC,GAAA,QAAA,KACA7X,KAAA+gD,cAAA3qC,SAAA,aAGApW,KAAAmkB,aACAnkB,KAAA+gD,cAAAn5B,SAAAvR,KAAA,6BAAAqB,QAAA,WAIA1X,KAAAqjB,QAGAgH,oBAAA,WAEA,GAAA,UAAArqB,KAAAyU,SAAAiT,cAAA,IAAA5b,OAAA2f,cAAA,CACA,IAAA88B,EAAAz8C,OAAA2f,cAAAvqB,MAAA,KACAsnD,EAAAxoD,KAAAypB,SAAAg/B,UAAApyC,KAAAuT,GACAtrB,EAAAsrB,GAAA7iB,KAAA,mBAAAwhD,EAAA,IAEA,GAAAC,EAAA,CACA,IAAAlkC,EAAAhmB,EAAAkqD,GAEA,IAAA,IAAAnpD,EAAA,EAAAA,EAAAkpD,EAAAjoD,OAAAjB,IAAA,CAEA,IAAAqpD,EAAA1oD,KAAAs0B,iBAAAhQ,GAAAmkC,UAAApyC,KAAAuT,GACAtrB,EAAA,WAAAsrB,GAAAtmB,SAAAilD,EAAAlpD,IAEA,IAAAqpD,EACA,MAEA1oD,KAAAgrB,cAAA1G,GACAA,EAAAhmB,EAAAoqD,GAGA,OAAApkC,EAAAvd,KAAA,QAIA,OAAA/G,KAAAqjB,QAGAyN,eAAA,WACA,IAAAxM,EAAAtkB,KAAAonD,gBAAApnD,KAAAokB,WACAE,EAAAvd,KAAA,cAEAlF,QAAA0Y,QAAAva,KAAAskB,QAAA,oBACAtkB,KAAAmhD,SAAAwH,UAAA,CACA7D,SAAA9kD,KAAAskB,QAAAlW,KAAA,oBAEApO,KAAA+gD,cAAAlqC,YAAA,aAEA7W,KAAA+gD,cAAAzuC,SAAA,YAIAgS,EAAAhkB,QAAA,UAAAN,KAAAyU,SAAAiT,SACA1nB,KAAA4oD,WAAAtkC,GAGAtkB,KAAAqjB,QAGAulC,WAAA,SAAAtkC,GACA,GAAA,oBAAAuI,QACA,OAIA,IAEAm6B,EAFA6B,EAAA,GACAC,EAAAxkC,EAEA,MAAA0iC,EAAAhnD,KAAAinD,iBAAA6B,KAAA9B,EAAA1mD,QACAuoD,EAAA76C,QAAA86C,GACAA,EAAA9B,EAGA,IAAAr9C,EAAA,SACAm/C,EAAA/hD,KAAA,mBACA4C,GAAA,IAAAm/C,EAAA/hD,KAAA,iBACA8hD,EAAAE,QAAAC,IACAr/C,GAAA,IAAAq/C,EAAAztC,SAAA,UAAAjY,UAIAupB,QAAAC,aAAA,GAAA,GAAAjuB,MAAA+F,OAAA+E,KAGA+5C,2BAAA,SAAAt/B,GACA,IAAArW,EAAAqW,EAAA1e,MAAA,2BAEA,OAAAqI,EAAAA,EAAA,GAAA,MAGA0a,eAAA,WAEA,IAAAzoB,KAAAyU,SAAAqJ,aAAA9d,KAAAskB,QAAAiQ,SAAA,MAAAj0B,OAAA,CACA,GAAA,OAAAN,KAAA4gD,4BAAA,CACA,IAAAtqC,EAAA,qBAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,UAEAlS,KAAA4gD,4BAAAtiD,EAAA,oDAAAu7B,YAAA75B,KAAA6kB,SACA,IAAAokC,EAAA3qD,EAAA,oCAAAkQ,SAAAxO,KAAA4gD,6BACA5gD,KAAA6gD,2BAAAviD,EAAA,8BAAAgY,EAAA,wBAAA9H,SAAAy6C,GACA3qD,EAAA,uCAAAgY,EAAA,OAAAhT,KAAA,IAAAzE,MAAAc,EAAA,MAAA,yBAAA6O,SAAAy6C,GAEAjpD,KAAA6d,YAAA7d,KAAA6gD,2BAAA,UAAA,WACA7gD,KAAAqsB,wBAAA,oBAAArsB,KAAA6gD,2BAAAzmB,KAAA,YACAp6B,KAAAopB,yBAGAppB,KAAA4gD,4BAAA7nC,SAAA,QAGA,IAAAmwC,EAAAlpD,KAAAosB,uBAAA,qBAAA,GACApsB,KAAA6gD,2BAAAzmB,KAAA,UAAA8uB,GAEAlpD,KAAA4gD,4BAAA7nC,SAAA,CACAowC,aAAA,EACAjrB,QAAA,GACA,QAEAl+B,KAAA8gD,kCAAA,EAGA9gD,KAAAqjB,QAGAqF,cAAA,WACA1oB,KAAA8gD,mCACA9gD,KAAA4gD,4BAAA7nC,SAAA,QAEA/Y,KAAA4gD,4BAAA7nC,SAAA,CACAowC,cAAA,GACAjrB,QAAA,GACA,QAEAl+B,KAAA8gD,kCAAA,GAGA9gD,KAAAqjB,QAGA2J,cAAA,WACA,IAAAjmB,EAAA/G,KAAAqjB,OAMA,OAJArjB,KAAA8gD,kCAAA9gD,KAAA6gD,2BAAAzmB,KAAA,aACArzB,EAAAqhB,SAAAghC,mBAAA,GAGAriD,GAQAghD,eAAA,WACA/nD,KAAA0qB,eAGA1qB,KAAAkiD,uBACAliD,KAAAqhD,YAAAqD,mBACA1kD,KAAAqhD,YAAAuD,kBAEA5kD,KAAAohD,cAAA6D,gBAMAgD,kBAAA,SAAA9oC,EAAApY,GACA,IAAAsiD,EAAAlnD,SAAA4E,EAAAuiD,OAAAviD,EAAA8tB,MAAA,IAAA,IACA70B,KAAAqhD,YAAAkI,sBAAAF,IAMAlB,kBAAA,SAAAhpC,EAAApY,GACA,IAAA2D,EAAA3D,EAAAkL,OACAxG,EAAA1E,EAAAyiD,MAAA,GAAAtkD,KAEAukD,GAAA,EAEA/+C,EAAAhD,SAAAgD,EAAAw6C,UAEAllD,KAAAwhD,kBAAA9hD,KAAAgL,EAAA4/B,SAGA5/B,EAAAw6C,WACAx6C,EAAA26C,OAAA,CACAxlD,QAAAhB,MAAAc,EAAA,MAAA+K,EAAAw6C,SAAA,CAAAwE,KAAAh/C,EAAAe,WACAs2C,QAAA/hD,KAAA8hD,sBAAAC,SAGA/hD,KAAAohD,cAAA+D,UAAAz6C,IAGA7L,MAAAkJ,GAAAkb,aAEAvY,EAAA/C,MACAM,MAAApJ,MAAAc,EAAA,MAAA,kDAAA,CAAAgI,MAAA+C,EAAA/C,SAEAM,MAAApJ,MAAAc,EAAA,MAAA,gCAAA,CAAA8L,SAAAA,KAGAg+C,GAAA,GAIAzpD,KAAAmhD,SAAAwI,iBACA3pD,KAAA4qB,oBACA5qB,KAAAqhD,YAAAiE,kBAEAtlD,KAAAohD,cAAAqE,iBACAzlD,KAAAohD,cAAAuE,iBAAA3lD,KAAA4pD,gBAAA3hC,KAAAjoB,OAEAypD,GACAzpD,KAAA6pD,uBAWAA,mBAAA,WACA,UAAA7pD,KAAAyU,SAAAiT,UACA1nB,KAAA+rB,iBAAA,gBACA/rB,KAAA0vB,iBAAA,SAEA1vB,KAAAopB,kBASAwgC,gBAAA,SAAAhE,GACA5lD,KAAA0qB,eACA1qB,KAAAqhD,YAAAqD,mBAEA1kD,KAAAohD,cAAA6D,eAQAjlD,KAAAqhD,YAAAsD,aAAAiB,EAAAtlD,QAEA,IAAAwpD,EAAA,CAAAjF,EAAAkF,EAAA/iD,KACA,IAAA2wC,EAAA,GACA7wC,EAAA,KAEAkjD,EAAA,CAAAjjD,EAAAa,KACA,YAAAA,GAAAb,EAAAujC,QACAtqC,KAAAwhD,kBAAA9hD,KAAAqH,EAAAujC,SACAvjC,EAAAY,OACAM,MAAAlB,EAAAY,OAEAoiD,IACA/pD,KAAAqhD,YAAA4I,4BAAA,GACAjqD,KAAAqhD,YAAA6I,oBAEAH,IAAAlF,EAAAvkD,OACA0G,IAEA8iD,EAAAjF,EAAAkF,EAAA/iD,IAIA,YAAA69C,EAAAkF,GAAAjE,QACAh/C,EAAA,sBACA6wC,EAAAwS,cAAAtF,EAAAkF,GAAAzf,QAEAua,EAAAkF,GAAAK,mBACAzS,EAAArN,QAAAua,EAAAkF,GAAAK,mBAEAzS,EAAA0S,eAAAxF,EAAAkF,GAAAt+C,UAEA,WAAAo5C,EAAAkF,GAAAjE,SACAh/C,EAAA,sBACA6wC,EAAArN,QAAAua,EAAAkF,GAAAzf,SAGAxjC,EAIAjI,MAAAgI,kBAAAC,EAAA6wC,EAAAqS,GAFAA,EAAA,CAAA1f,QAAAua,EAAAkF,GAAAzf,SAAA,YAMAtqC,KAAAqhD,YAAAuD,kBACAkF,EAAAlE,EAAA,EApDA,KACA5lD,KAAA4qB,oBACA5qB,KAAAqhD,YAAAiE,kBACAtlD,KAAA6pD,wBAwDA72B,iBAAA,WACAhzB,KAAAsqD,mBAAA,EAAAtqD,KAAAmmB,KAAAoU,kBACAv6B,KAAAmmB,KAAAtO,GAAA,iBAAAC,IACA9X,KAAAsqD,mBAAA,EAAAxyC,EAAA0jB,eAGAx7B,KAAAqjB,QAOAinC,kBAAA,SAAAz3C,EAAAwoB,GAUA,GATA,UAAAr7B,KAAAyU,SAAAiT,UACA7U,GACA7S,KAAA0hD,WAAAj3B,iBAGAzqB,KAAA0hD,WAAA72B,SAAAwQ,EAAApC,IAAA,+BAIAj5B,KAAAwhD,kBAAAlhD,OAAA,CACA,GAAAN,KAAAmmB,KAAA1R,SAAAshB,WACA,IAAA,IAAA12B,EAAA,EAAAA,EAAAW,KAAAwhD,kBAAAlhD,OAAAjB,IACAW,KAAAmmB,KAAA+P,kBAAAl2B,KAAAwhD,kBAAAniD,IAKAW,KAAAwhD,kBAAA,GAGAxhD,KAAAqjB,KAAAxQ,EAAAwoB,GAEAr7B,KAAAsrB,eAAAtrB,KAAA+lB,UAAA,WACA/lB,KAAA6d,YAAA7d,KAAA+lB,UAAA,UAAA/lB,KAAAuqD,WAAAtiC,KAAAjoB,OACAA,KAAAmmB,KAAAoT,cAAA1hB,GAAA,YAAA7X,KAAAwqD,gBAAAviC,KAAAjoB,QAOAuqD,WAAA,SAAAzyC,GACA,GAAAA,EAAAC,UAAAlW,QAAAi0B,WAAAhe,EAAAI,SAAA,CACA,GAAArZ,MAAAkpC,iBAAA0iB,aACA5rD,MAAAkpC,iBAAA0iB,aAAAC,mBACA,CACA,IAAAv0C,EAAAnW,KAAAmmB,KAAAoT,cAAAoxB,aAAAt0C,KAAA,YAEAF,EAAA7V,QACAN,KAAA4qD,aAAAz0C,GAKA,OADA2B,EAAAM,mBACA,IAQAoyC,gBAAA,SAAA1yC,GACA,IAAA3B,EAAA7X,EAAAwZ,EAAAod,MAAA7e,KAAA,YAEAxX,MAAAkpC,iBAAA0iB,cAAAt0C,EAAA7V,QACAN,KAAA4qD,aAAAz0C,IAQAy0C,aAAA,SAAAz0C,GACA,IAAA1B,EAAA,GAEA0B,EAAApP,KAAA,iBACA0N,EAAAozB,cAAA1xB,EAAApP,KAAA,eACA0N,EAAAqzB,eAAA3xB,EAAApP,KAAA,iBAGA,IAAAlI,MAAAkpC,iBAAA5xB,EAAApP,KAAA,MAAA/G,KAAAmmB,KAAAoT,cAAA9kB,IAMAyuC,aAAA,WACAljD,KAAA6hD,qBAAA,IAMAgB,mBAAA,SAAA1sC,GACA,IACA00C,EACAC,EAEA,OAJA9qD,KAAAosB,uBAAA,SAKA,IAAA,QACAy+B,EAAAvsD,EAAA,+CAAAkQ,SAAA3M,QAAAqR,MACA43C,EAAAxsD,EAAA,4BAAAkQ,SAAAq8C,GACA,IAAA9lB,EAAAzmC,EAAA,yBAAAkQ,SAAAs8C,GACAlqB,EAAAtiC,EAAA,YAAAkQ,SAAAu2B,GAEA5uB,EAAA3H,SAAAoyB,GAGA5gC,KAAA+qD,gBAAA/qD,KAAAmmB,KAAA4e,OAAAxpB,SAAA,SAAAA,SAAA,YAAAA,WAGA,IAFA,IAAAyvC,EAAA70C,EAAAoF,WAEAlc,EAAA,EAAAA,EAAA2rD,EAAA1qD,OAAAjB,IAAA,CAEA,IAAA4rD,EAAA3sD,EAAA0sD,EAAA3rD,IAGA,GAAA4rD,EAAA70C,SAAA,iBACA60C,EAAAtvC,SACAkvC,EAAA/oC,IAAA,UAAAjjB,MAAAma,KAAA,QAFA,CAMA,IAAAkyC,EAAA5sD,EAAA0B,KAAA+qD,gBAAA1rD,IACAu5B,EAAAsyB,EAAAtyB,QAEAsyB,EAAAtyB,MAAAA,GACAqyB,EAAAryB,MAAAA,IAGA,OAAAiyB,EAEA,IAAA,SAMA,OALAA,EAAAvsD,EAAA,2CAAAkQ,SAAA3M,QAAAqR,MACA43C,EAAAxsD,EAAA,4BAAAkQ,SAAAq8C,GAEA10C,EAAA3H,SAAAs8C,GAEAD,EAIA,OAAAvsD,KAMA8kD,oBAAA,SAAA+H,GAGA,GAFAxiC,aAAA3oB,KAAA4hD,gCAEAuJ,EAAA,CACA,IAAArG,EAAAqG,EAAApkD,KAAA,aAEA+9C,GACA9kD,KAAAorD,iBAAAprD,KAAAonD,gBAAAtC,GAEA9kD,KAAAqrD,eAAArrD,KAAAorD,oBAAAprD,KAAAsrD,YAAAtrD,KAAAorD,oBACAprD,KAAA4hD,+BAAAh5B,WAAA5oB,KAAAurD,cAAAtjC,KAAAjoB,MAAA,OAGAA,KAAAorD,iBAAA,KAIAD,GAAAA,EAAA,KAAAnrD,KAAAskB,QAAA,GAEAtkB,KAAAskB,QAAAzN,YAAA,OAEA7W,KAAAskB,QAAAhS,SAAA,QAOAkzC,8BAAA,SAAAgG,GAIA,IAAAC,EAHA9iC,aAAA3oB,KAAA4hD,gCAKA4J,IACAC,EAAAzrD,KAAAonD,gBAAAoE,GAAA55B,QAAA,MAAArW,SAAA,MAGA,IAAA,IAAAlc,EAAAW,KAAA6hD,qBAAAvhD,OAAA,EAAAjB,GAAA,EAAAA,IAAA,CACA,IAAAilB,EAAAtkB,KAAA6hD,qBAAAxiD,QAGA,IAAAosD,GAAA,IAAAA,EAAA7vC,OAAA,cAAA0I,EAAAvd,KAAA,OAAA,MAAAzG,SACAN,KAAA0rD,gBAAApnC,GACAtkB,KAAA6hD,qBAAAryC,OAAAnQ,EAAA,MAKA+nD,gBAAA,SAAAnoD,GACA,OAAAe,KAAAypB,SAAA7N,OAAA,eAAA3c,EAAA,OAGAosD,eAAA,SAAA/mC,GACA,OAAAA,EAAAiQ,SAAA,MAAAle,KAAA,MAAA/V,QAGAgrD,YAAA,SAAAhnC,GACA,OAAAA,EAAAsD,OAAA,MAAAxR,SAAA,aAGAm1C,cAAA,WAEAvrD,KAAAwlD,8BAAAxlD,KAAAorD,iBAAArkD,KAAA,cAEA/G,KAAAorD,iBAAA72B,SAAA,WAAA7c,QAAA,SAGA1X,KAAA6hD,qBAAAniD,KAAAM,KAAAorD,mBAGAM,gBAAA,SAAApnC,GACAA,EAAAsD,SAAAxR,SAAA,aACAkO,EAAAiQ,SAAA,WAAA7c,QAAA,UAIAyqC,yBAAA,SAAA79B,GAEA,GAAAtkB,KAAA0jD,2BAAAp/B,EAAAvd,KAAA,QAAA,CAIA,IAAA4kD,EAAA,CACA,CACAn1C,MAAA3X,MAAAc,EAAA,MAAA,iBACAisD,QAAA,KACA5rD,KAAA6rD,iBAAAvnC,MAMA,UAAAtkB,KAAAyU,SAAAiT,SAAA1nB,KAAAoiD,gBAAA99B,GAAA,IACAqnC,EAAAjsD,KAAA,CACA8W,MAAA3X,MAAAc,EAAA,MAAA,iBACAisD,QAAA,KACA5rD,KAAA8rD,cAAAxnC,MAGAqnC,EAAAjsD,KAAA,CACA8W,MAAA3X,MAAAc,EAAA,MAAA,iBACAisD,QAAA,KACA5rD,KAAA+rD,cAAAznC,OAKA,IAAAziB,QAAAmqD,YAAA1nC,EAAAqnC,EAAA,CAAAM,UAAA,WAGAJ,iBAAA,SAAAK,GACA,IAAAC,EAAA9G,OAAAxmD,MAAAc,EAAA,MAAA,iCAEA,GAAAwsD,EAAA,CACA,IAAArsD,EAAA,CACAqmD,SAAA+F,EAAAnlD,KAAA,aACAqlD,WAAAD,GAGAnsD,KAAA0qB,eAEA7rB,MAAAgI,kBAAA,uBAAA/G,EAAA,CAAAiH,EAAAa,KAGA,GAFA5H,KAAA4qB,oBAEA,YAAAhjB,GAAAb,EAAAW,QAAA,CACA1H,KAAAqsD,0BAAAH,GAEA,IAAAI,EAAAhuD,EACA,oBACA4tD,EAAAnlD,KAAA,OAAA,WAAAA,EAAAwlD,UAAA,KACA1qD,QAAA0Y,QAAA2xC,EAAA,mBAAA,mBAAA,IACA,oBAAAnlD,EAAA+9C,SAAA,KACAjjD,QAAA0Y,QAAA2xC,EAAA,mBAAA,mBAAA,KACArqD,QAAA0Y,QAAA2xC,EAAA,oBAAA,oBAAA,KACArqD,QAAA0Y,QAAA2xC,EAAA,+BAAA,+BAAA,IACA,IACAnlD,EAAAqlD,WARA,aAaA1pC,EAAA4pC,EAAA/wC,SAAA,WACAvb,KAAAwsD,iBAAAN,EAAAI,GACAtsD,KAAAoqB,WAAA1H,GAGA,YAAA9a,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,WAMAokD,cAAA,SAAAU,GACA,GAAAn1C,QAAAzY,MAAAc,EAAA,MAAA,mCAAA,CAAA+sD,OAAApuD,EAAA8C,KAAAqrD,EAAAnpD,WAAA,CACA,IAAAxD,EAAA,CACAglD,SAAA2H,EAAA1lD,KAAA,cAGA/G,KAAA0qB,eAEA7rB,MAAAgI,kBAAA,uBAAA/G,EAAA,CAAAiH,EAAAa,KAGA,GAFA5H,KAAA4qB,oBAEA,YAAAhjB,GAAAb,EAAAW,QAAA,CACA,IAAAwkD,EAAAlsD,KAAAinD,iBAAAwF,GAGAzsD,KAAAorB,aAAAqhC,GAEAA,EAAA7kC,SAAAjM,SACA3b,KAAA2sD,aAAAT,GAGA,YAAAtkD,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,WASAmkD,cAAA,SAAAxnC,GACA,MAAAsoC,EAAAtoC,EAAA/I,SAAA,UACAsxC,EAAAhuD,MAAAuC,KAAAwrD,EAAAtpD,QACAwpD,EAAAzH,OAAAxmD,MAAAc,EAAA,MAAA,iBAAAktD,GAEAC,GAAAA,IAAAD,IAIA7sD,KAAA0qB,eAEA7rB,MAAAiK,kBAAA,OAAA,uBAAA,CACA/B,KAAA,CACA+9C,SAAAxgC,EAAAvd,KAAA,aACA+lD,QAAAA,KAEAtjD,KAAAkB,IACAA,EAAA3D,KAAAW,SACAklD,EAAAtpD,KAAAoH,EAAA3D,KAAA+lD,SAGAxoC,EAAAvd,KAAA,SAAA/G,KAAAskB,QAAAvd,KAAA,SACA/G,KAAAopB,iBAGA,UAAAppB,KAAAyU,SAAAiT,SACA1nB,KAAA4oD,WAAAtkC,KAGA5Z,EAAA3D,KAAAY,OACAM,MAAAyC,EAAA3D,KAAAY,SAEAolD,QAAA,KACA/sD,KAAA4qB,wBAUAyhC,0BAAA,SAAAH,GACAlsD,KAAAqrD,eAAAa,KACAA,EAAAtkC,SAAAtV,SAAA,YAAAO,OAAA,uCACA7S,KAAA8qB,iBAAAohC,KAWAM,iBAAA,SAAAN,EAAAI,GAMA,IALA,IACAU,EADAd,EAAA33B,SAAA,MACAhZ,SAAA,MACA0xC,EAAA3uD,EAAA8C,KAAAkrD,EAAA/wC,SAAA,WAAAjY,QACA4pD,GAAA,EAEA7tD,EAAA,EAAAA,EAAA2tD,EAAA1sD,OAAAjB,IAAA,CACA,IAAA8tD,EAAA7uD,EAAA0uD,EAAA3tD,IAEA,GAAAf,EAAA8C,KAAA+rD,EAAA5xC,SAAA,WAAAjY,QAAA2pD,EAAA,CACAE,EAAAC,OAAAd,GACAY,GAAA,EACA,OAIAA,GACAhB,EAAA33B,SAAA,MAAA1hB,OAAAy5C,IAIAK,aAAA,SAAAT,GACA,OAAAA,GAAA,IAAAA,EAAA33B,SAAA,MAAAhZ,SAAA,MAAAjb,SACAN,KAAAirB,mBAAAihC,GACAA,EAAA33B,SAAA,MAAA5Y,SACAuwC,EAAA33B,SAAA,WAAA5Y,SACAuwC,EAAAtkC,SAAA/Q,YAAA,cAIAqrC,qBAAA,WACAliD,KAAAqhD,cACArhD,KAAAqhD,YAAA,IAAAxiD,MAAA6oD,YAAA1nD,KAAAkkB,OAAA,IAGA,IAAA9Q,EAAA9U,IACAsjB,EAAA,EACA5f,EAAA,EAEA,UAAAhC,KAAAyU,SAAAiT,SACAtU,EAAApT,KAAAqhD,YAAAJ,aAAAnmC,QAAA,YACA8G,EAAA/f,QAAAsf,KAAAS,cAEAxO,EAAApT,KAAAqhD,YAAAJ,aAAAnmC,QAAA,SACA8G,EAAA5hB,KAAAkkB,MAAAtC,aAGA,IACA4+B,EAAA5+B,EADAxO,EAAApR,SAAA82B,IAEAu0B,EAAAxrD,QAAAsf,KAAA8M,SAGAjsB,EADAoR,EAAA6a,SAAAo/B,EACAA,EAAA,EAAA,EAAA7M,EAEAptC,EAAA6a,SAAA,EAAA,EAGA,UAAAjuB,KAAAyU,SAAAiT,UACA1lB,EAAA4f,GAAAxO,EAAA6a,SAAA,EAAA,IAGAjuB,KAAAqhD,YAAAJ,aAAAn/B,IAAA,CACAgX,IAAA92B,KAIAgkD,sBAAA,SAAAnB,EAAAyI,GAqBA,IApBA,IAAAtI,EAAA,GAEAuI,EAAAC,IACA3uD,MAAAgI,kBAAA2mD,EAAA1mD,OAAA0mD,EAAA1tD,OAAA,CAAAiH,EAAAa,KACA5H,KAAAqhD,YAAA4I,4BAAA,GACAjqD,KAAAqhD,YAAA6I,oBAEA,YAAAtiD,IACAo9C,EAAAtlD,KAAAqH,GAGAlI,MAAAkJ,GAAAkb,YAGA+hC,EAAA1kD,QAAAukD,EAAAvkD,QACAgtD,EAAAtI,MAKA3lD,EAAA,EAAAA,EAAAwlD,EAAAvkD,OAAAjB,IACAkuD,EAAA1I,EAAAxlD,OAMAR,MAAAsV,0BAAA,yBAAAtV,MAAA8hD,YCt9CA9hD,MAAA4uD,iBAAA5uD,MAAA48B,uBAAA78B,OAAA,CACAwnD,UAAA,EACAsH,IAAA,KACAC,WAAA,KACAxM,SAAA,KACAE,YAAA,KAEA7jC,KAAA,WACAxd,KAAAqjB,KAAA0iC,MAAA/lD,KAAAi8B,WAEAj8B,KAAAyU,SAAAm5C,WACA5tD,KAAA6tD,kBAGA7tD,KAAA6d,YAAA7d,KAAA47B,mBAAA,UAAA57B,KAAAuqD,WAAAtiC,KAAAjoB,OACAA,KAAAu5B,cAAA1hB,GAAA,YAAA7X,KAAAwqD,gBAAAviC,KAAAjoB,QAOAuqD,WAAA,SAAAzyC,GACA,GAAAA,EAAAC,UAAAlW,QAAAi0B,WAAAhe,EAAAI,SAAA,CACA,GAAArZ,MAAAkpC,iBAAA0iB,aACA5rD,MAAAkpC,iBAAA0iB,aAAAC,mBACA,CACA,IAAAv0C,EAAAnW,KAAAu5B,cAAAoxB,aAEAx0C,EAAA7V,QACAN,KAAA4qD,aAAAz0C,GAMA,OAFA2B,EAAAM,mBAEA,IAQAoyC,gBAAA,SAAA1yC,GACA,IAAA3B,EAAA7X,EAAAwZ,EAAAod,MAEAr2B,MAAAkpC,iBAAA0iB,cAAAt0C,EAAA7V,QACAN,KAAA4qD,aAAAz0C,IAQAy0C,aAAA,SAAAz0C,GACA,IAAA1B,EAAA,GAEA0B,EAAApP,KAAA,iBACA0N,EAAAozB,cAAA1xB,EAAApP,KAAA,eACA0N,EAAAqzB,eAAA3xB,EAAApP,KAAA,iBAGA,IAAAlI,MAAAkpC,iBAAA5xB,EAAApP,KAAA,MAAA/G,KAAAu5B,cAAA9kB,IAMAI,oBAAA,SAAAsB,GACA,OAAAnW,KAAAqjB,KAAAlN,EAAA,CACArW,OAAA,CACAguD,qBAAA9tD,KAAAyU,SAAAq5C,sBAEAzpD,MAAArE,QAOA6tD,gBAAA,WACA7tD,KAAAqhD,YAAA,IAAAxiD,MAAA6oD,YAAAppD,EAAA,sCAAAkQ,SAAAxO,KAAAoT,aAEA,IAAAnM,EAAA,CACA5B,IAAAxG,MAAAuH,aAAA,iBACAwhD,SAAA5nD,KAAAoT,WACA26C,SAAA,CACAxtB,QAAAvgC,KAAAyU,SAAA8rB,UAIAvgC,KAAAyU,SAAAyqB,kBACAj4B,EAAA8mD,SAAA7xC,UAAAlc,KAAAyU,SAAAyqB,iBAGAl/B,KAAAyU,SAAA2T,SAAA7R,SACAtP,EAAA8mD,SAAAx3C,OAAAvW,KAAAyU,SAAA2T,SAAA7R,QAGAvW,KAAA67B,iBACA77B,KAAA2tD,WAAArvD,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,aACAmC,YAAA,SACAra,KAAA,GAAAtD,KAAAyU,SAAAyY,MAAAruB,MAAAc,EAAA,MAAA,iBAAAd,MAAAc,EAAA,MAAA,kBACAk6B,YAAA75B,KAAA67B,gBACA50B,EAAA0gD,UAAArpD,EAAA,WAAA,CACAgD,KAAA,OACAka,MAAA,SACAwyC,SAAA,GAAAhuD,KAAAyU,SAAAyY,QACA2M,YAAA75B,KAAA2tD,YAGA9rD,QAAAsf,KAAAzJ,QAAA,gBAIA,IAAA7Y,MAAA8H,oBAAA,IAAA9H,MAAA+H,iBAEAK,EAAA8mD,SAAAlvD,MAAA8H,eAAA9H,MAAA+H,qBAGA,IAAA5G,KAAAyU,SAAA2T,SAAAggC,OACAnhD,EAAAohD,aAAAroD,KAAAyU,SAAA2T,SAAAggC,MAGAnhD,EAAAgnD,gBAAAjuD,KAAAiuD,gBAAAhmC,KAAAjoB,MAEAiH,EAAA4gD,OAAA,GACA5gD,EAAA4gD,OAAAC,gBAAA9nD,KAAA+nD,eAAA9/B,KAAAjoB,MACAiH,EAAA4gD,OAAAG,sBAAAhoD,KAAAioD,kBAAAhgC,KAAAjoB,MACAiH,EAAA4gD,OAAAK,eAAAloD,KAAAmoD,kBAAAlgC,KAAAjoB,MAEAA,KAAAmhD,SAAA,IAAAtiD,MAAAypD,SAAAtoD,KAAAoT,WAAAnM,GAEAjH,KAAA2tD,YACA3tD,KAAA2tD,WAAA91C,GAAA,QAAAC,IAGA9X,KAAA2tD,WAAA3yC,KAAA,oBAAAtD,QAAA,YAKA4vB,eAAA,SAAAprB,EAAAgyC,GACA,IAAAV,EAAA,CACAtxC,UAAAgyC,EACA33C,OAAAvW,KAAAyU,SAAA2T,SAAA7R,OACAI,KAAA3W,KAAAyU,SAAAyR,UAGArnB,MAAAgI,kBAAA,4BAAA2mD,EAAAzmD,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAAwmD,EAAAnuD,KAAA+lB,UAAAnK,OAAA,aAAAM,EAAA,MACAlc,KAAA89B,cAAAqwB,GACA,IAAA7uB,EAAAzgC,MAAAqX,eAAAnP,EAAArI,MACAsB,KAAAo/B,eAAA,CAAAE,QAKAiI,iBAAA,SAAArrB,GACA,IAAAsxC,EAAA,CACAtxC,UAAAA,EACA3F,OAAAvW,KAAAyU,SAAA2T,SAAA7R,OACAI,KAAA3W,KAAAyU,SAAAyR,UAGArnB,MAAAgI,kBAAA,4BAAA2mD,EAAAzmD,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAAwmD,EAAAnuD,KAAA+lB,UAAAnK,OAAA,aAAAM,EAAA,MACAiyC,EAAA93C,KAAA,iBAAAa,YAAA5Y,EAAAyI,EAAArI,MAAA2X,KAAA,kBACArW,KAAAs5B,YAAAla,KAAA+uC,OAQAC,mBAAA,SAAAt5C,GAEA,GAAA9U,KAAAs9B,qBAAA,CAIA,IAAA+wB,EAAAv5C,EAAAqB,SAGAk4C,EAAA/7C,SAAA,aACA+7C,EAAAzuB,QAAA,8BAAA5/B,KAAAyU,SAAAvP,KAAA,cAAA4P,EAAAwB,GAAA,mCACAzX,MAAAc,EAAA,MAAA,UAAA,UAEA0uD,EAAA7/C,SAAAxO,KAAA47B,oBAEA,IAAA0yB,IAAAD,EAAAx1B,aAAA,IAEA74B,KAAA67B,eAAA/Z,IAAA,UAAAjjB,MAAAma,KAAAs1C,EAAA,MAEA,IAAArwB,EAAA,GACAA,EAAA,UAAAp/B,MAAAma,MAAA,EACAhZ,KAAA67B,eAAA9iB,SAAAklB,EAAA,QAEAj+B,KAAA29B,YAAA0wB,UAEAruD,KAAA4yB,QAMAm1B,eAAA,WACA/nD,KAAAqhD,YAAAJ,aAAAn/B,IAAA,CACAgX,IAAAjoB,KAAAK,MAAAlR,KAAAoT,WAAA2lB,cAAA,GAAA,IAGA/4B,KAAAoT,WAAAd,SAAA,aACAtS,KAAAqhD,YAAAqD,mBACA1kD,KAAAqhD,YAAAuD,mBAMAqD,kBAAA,SAAA9oC,EAAApY,GACA,IAAAsiD,EAAAlnD,SAAA4E,EAAAuiD,OAAAviD,EAAA8tB,MAAA,IAAA,IACA70B,KAAAqhD,YAAAkI,sBAAAF,IAMAlB,kBAAA,SAAAhpC,EAAApY,GACA,GAAAA,EAAAkL,OAAAtK,MACAM,MAAAlB,EAAAkL,OAAAtK,WACA,CACA,IAAA6lD,EAAA,CACAtxC,UAAAnV,EAAAkL,OAAAq4B,QACA/zB,OAAAvW,KAAAyU,SAAA2T,SAAA7R,OACAI,KAAA3W,KAAAyU,SAAAyR,UAGArnB,MAAAgI,kBAAA,4BAAA2mD,EAAAzmD,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAAjJ,EAAAJ,EAAAyI,EAAArI,MACAG,MAAA2T,eAAAzL,EAAAya,UACAxhB,KAAAouD,mBAAAvvD,MAAAqX,eAAAxX,IAIAsB,KAAAmhD,SAAAwI,iBACA3pD,KAAAqhD,YAAAiE,kBACAtlD,KAAAoT,WAAAyD,YAAA,aAEA/K,OAAAqyB,aACAryB,OAAAqyB,YAAAmC,eAKAzhC,MAAAkJ,GAAAkb,aAOAgrC,gBAAA,SAAAM,GACA,OAAAvuD,KAAAyU,SAAAyY,OAAAltB,KAAA+lB,UAAAzlB,OAAAiuD,EAAAvuD,KAAAyU,SAAAyY,SCpRAruB,MAAA2vD,mBAAA3vD,MAAA+V,yBAAAhW,OAAA,CACA6vD,oBAAA,KACAC,mBAAA,KAEAlxC,KAAA,SAAApJ,EAAAK,GACAA,EAAAnW,EAAAM,OAAA,GAAAC,MAAA2vD,mBAAA/wC,SAAAhJ,GAEAzU,KAAAqjB,KAAAjP,EAAAK,GAEAA,EAAAk6C,WAAAruD,QACAN,KAAA4uD,4BAAAn6C,EAAAk6C,aAIAC,4BAAA,SAAAD,GACA,GAAAA,GAAAA,EAAAruD,OAAA,CAIA,IAAAuuD,EAAAvwD,EAAA,2BAAAkQ,SAAAxO,KAAA6gC,iBACA7gC,KAAA0gC,WAAAlyB,SAAAqgD,GAEA7uD,KAAAyuD,oBAAAnwD,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,uBACAlY,KAAAzE,MAAAc,EAAA,MAAA,sBACA6O,SAAAqgD,GAKA,IAHA,IAAAl4B,EAAAr4B,EAAA,+CAAAu7B,YAAA75B,KAAAyuD,qBACAK,EAAAxwD,EAAA,aAAAkQ,SAAAmoB,GAEAt3B,EAAA,EAAAA,EAAAsvD,EAAAruD,OAAAjB,IACAf,EAAA,0BAAAqwD,EAAAtvD,GAAA66B,OAAA,KAAAy0B,EAAAtvD,GAAA6F,KAAA,aAAAsJ,SAAAsgD,GAGA,IAAAC,EAAA,IAAAltD,QAAAqZ,QAAAlb,KAAAyuD,oBAAA,CACAO,eAAAhvD,KAAAivD,kBAAAhnC,KAAAjoB,QAEA+uD,EAAA51C,UAEAnZ,KAAAyuD,oBAAA1nD,KAAA,aAAAgoD,KAGA7kC,kBAAA,SAAApS,GACA,IAAA0iB,EAAAx6B,KAAA0jB,aAAA0L,sBACA8/B,GAAA,EAEA,GAAA10B,EAAAl6B,QAAAN,KAAAyU,SAAAk6C,WAAAruD,OAAA,CACA4uD,GAAA,EAEA,IAAA,IAAA7vD,EAAA,EAAAA,EAAAm7B,EAAAl6B,QACAhC,EAAA,0BAAAk8B,EAAAn7B,IAAAiB,OADAjB,MAOA,IAAA6b,EAAA,KAEAlb,KAAAyuD,sBACAvzC,EAAAlb,KAAAyuD,oBAAA1nD,KAAA,eAGAmoD,GACAh0C,GACAA,EAAA5B,SAGAtZ,KAAAyuD,oBAAA53C,YAAA,aACA7W,KAAAyuD,sBACAvzC,GACAA,EAAA/B,UAGAnZ,KAAAyuD,oBAAAn8C,SAAA,aAGAtS,KAAAqjB,QAGA4rC,kBAAA,SAAA57B,GACA,IAAA87B,EAAA7wD,EAAA+0B,GAAAtsB,KAAA,aACA/G,KAAAovD,0BAAAD,IAGAC,0BAAA,SAAAD,QAEA,IAAAtwD,MAAA2vD,mBAAAa,cAAAF,KACAtwD,MAAA2vD,mBAAAa,cAAAF,GAAA,IAMA,IAHA,IAAA30B,EAAAx6B,KAAA0jB,aAAA0L,sBACAkgC,EAAA,GAEAjwD,EAAA,EAAAA,EAAAm7B,EAAAl6B,OAAAjB,IAAA,CACA,IAAAkwD,EAAAjxD,EAAAk8B,EAAAn7B,IACA6c,EAAArd,MAAAqX,eAAAq5C,GAAAj5C,QAEA,IAAAzX,MAAA2vD,mBAAAa,cAAAF,GAAAjzC,IACAozC,EAAA5vD,KAAAwc,GAIAozC,EAAAhvD,QACAN,KAAAuhC,oBAEAvhC,KAAAwvD,0BAAAF,EAAAH,EAAA,KACAnvD,KAAAwhC,oBACAxhC,KAAAovD,0BAAAD,OAGAnvD,KAAA0uD,mBAAAS,EACAnvD,KAAAo/B,iBACAp/B,KAAA0uD,mBAAA,OAIAc,0BAAA,SAAAF,EAAAH,EAAAnoD,GACA,IAAAkV,EAAAozC,EAAA3mB,MAEA5hC,EAAA,CACAujC,QAAApuB,EACAge,OAAAi1B,GAGAtwD,MAAAgI,kBAAA,4BAAAE,EAAA,CAAA2D,EAAA9C,KACA/I,MAAA2vD,mBAAAa,cAAAF,GAAAjzC,IAAA,EAEA,YAAAtU,GACA8C,EAAArF,MACAxG,MAAA2vD,mBAAAa,cAAAF,GAAAjzC,GAAAxR,EAAArF,KAKAiqD,EAAAhvD,OACAN,KAAAwvD,0BAAAF,EAAAH,EAAAnoD,GAEAA,OAKAkP,eAAA,SAAAskB,GACA,IAAAoH,EAAA5hC,KAAAqjB,KAAAmX,GAEA,GAAAx6B,KAAA0uD,mBACA,IAAA,IAAArvD,EAAA,EAAAA,EAAAuiC,EAAAthC,OAAAjB,IAAA,CACA,IAAA6c,EAAA0lB,EAAAviC,GAAAiX,QAGA,IAAAzX,MAAA2vD,mBAAAa,cAAArvD,KAAA0uD,oBAAAxyC,KACA,IAAArd,MAAA2vD,mBAAAa,cAAArvD,KAAA0uD,oBAAAxyC,KAEA0lB,EAAAviC,GAAAgG,IAAAxG,MAAA2vD,mBAAAa,cAAArvD,KAAA0uD,oBAAAxyC,IAKA,OAAA0lB,GAGA9C,SAAA,SAAAQ,GACAt/B,KAAAyU,SAAAqqB,SAAAQ,EAAAt/B,KAAA0uD,sBAEA,CACAjxC,SAAA,CACAgyC,0BAAA,EACAd,WAAA,IAGAU,cAAA,KAIAxwD,MAAAyV,kCAAA,yBAAAzV,MAAA2vD,oBC/KA3vD,MAAA6wD,YAAA7tD,QAAAoa,KAAArd,OAAA,CACA+wD,qBAAA,KACAC,2BAAA,KACAC,oBAAA,KACAC,+BAAA,KAEAC,2BAAA,EACAC,mBAAA,EAEAC,mBAAA,KACAC,WAAA,KAEAC,mBAAA,KACAC,eAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,gBAAA,KAEAC,wBAAA,EAKAhzC,KAAA,WACAxd,KAAAywD,2BAAA5xD,MAAA8wD,uBAMAe,8BAAA,SAAAhgD,GACA1Q,KAAA4vD,4BACAjnC,aAAA3oB,KAAA4vD,4BAGA5vD,KAAA4vD,2BAAAhnC,WAAA5oB,KAAA2wD,0BAAA1oC,KAAAjoB,MAAA,IAAA0Q,IAMAigD,0BAAA,SAAAC,GACAtyD,EAAAgJ,KAAA,CACAjC,IAAAxG,MAAAuH,aAAA,qBAAAwqD,EAAA,KAAA,uBACAtvD,KAAA,MACAiG,SAAA,OACAsR,SAAA,CAAAxR,EAAAO,KACA,YAAAA,QACA,IAAAP,EAAAwpD,aAAAjqD,qBAAA,IAAA/H,MAAA+H,iBACA/H,MAAA+H,eAAAS,EAAAwpD,aAAAjqD,gBAGA5G,KAAAywD,2BAAAppD,EAAAwpD,aAAAzuB,SACApiC,KAAAwwD,wBAAA,GAEAxwD,KAAAywD,4BAAA,OASAA,2BAAA,SAAAd,GACA3vD,KAAA2vD,qBAAAxtD,SAAAwtD,IAGA,IAAA3vD,KAAA2vD,sBAAA3vD,KAAA2vD,qBAAA9wD,MAAA6wD,YAAAoB,oBAEA9wD,KAAA2vD,sBACA3vD,KAAA+vD,2BAEA/vD,KAAA+wD,yBAIA/wD,KAAA2vD,qBAAA9wD,MAAA6wD,YAAAsB,gBACAhxD,KAAA6vD,qBACAlnC,aAAA3oB,KAAA6vD,qBAGA7vD,KAAA6vD,oBAAAjnC,WAAA5oB,KAAAixD,eAAAhpC,KAAAjoB,MAAA,IAAAA,KAAA2vD,wBAGA3vD,KAAAgwD,kBACAhwD,KAAAwwD,wBACAxwD,KAAAkxD,cAIAlxD,KAAAixD,iBAIAjxD,KAAA0wD,8BAAA7xD,MAAA6wD,YAAAsB,iBAGAhxD,KAAAmxD,yBACAnxD,KAAAoxD,kBAGA,IAAApxD,KAAA2vD,sBAAA3vD,KAAA2vD,qBAAA9wD,MAAA6wD,YAAAoB,mBAAAjyD,MAAA6wD,YAAAsB,cACAhxD,KAAA0wD,8BAAA1wD,KAAA2vD,qBAAA9wD,MAAA6wD,YAAAoB,mBAAA,GAEA9wD,KAAA0wD,8BAAA7xD,MAAA6wD,YAAAsB,iBAQAD,uBAAA,WACA,IAAAM,EAWA,GATArxD,KAAAgwD,mBACAhwD,KAAAoxD,gBAAA,GACAC,GAAA,GAEAA,GAAA,EAGArxD,KAAA+vD,2BAAA,GAEA/vD,KAAAiwD,mBAAA,CACA,IAAA9hD,EAAA7P,EAAA,8DACAoe,EAAApe,EAAA,uBAAAkQ,SAAAL,GACA06B,EAAAvqC,EAAA,gCAAAkQ,SAAAkO,GACA40C,EAAAhzD,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,iBACA6O,SAAAq6B,GACA0oB,EAAAjzD,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,aACAlY,KAAAzE,MAAAc,EAAA,MAAA,uBACA6O,SAAAq6B,GAEA7oC,KAAAmwD,mBAAA7xD,EAAA,QAAAutB,UAAAnP,GAEA1c,KAAAiwD,mBAAA,IAAApuD,QAAA4+B,MAAAtyB,EAAA,CACAqjD,UAAA,EACA9yB,kBAAA,EACA+yB,WAAA,EACAC,kBAAA,EACAC,WAAA,2CACA3wB,SAAA,WACAn/B,QAAA8f,iBAAA,IAEAiH,YAAA,WACA2oC,EAAA75C,QAAA,WACA,QAKA1X,KAAA6d,YAAAyzC,EAAA,WAAA,UACAtxD,KAAA6d,YAAA1P,EAAA,SAAA,gBAGAkjD,EACArxD,KAAAiwD,mBAAAoB,YAEArxD,KAAAiwD,mBAAAj4B,OAGAh4B,KAAA4xD,6BAEA5xD,KAAA8vD,+BAAApW,YAAA15C,KAAA6xD,uBAAA5pC,KAAAjoB,MAAA,MAMA4xD,2BAAA,WACA5xD,KAAAmwD,mBAAA7sD,KAAAzE,MAAAc,EAAA,MAAA,sCAAA,CACAmyD,KAAAjzD,MAAA4R,2BAAAzQ,KAAA2vD,yBAGA3vD,KAAAiwD,mBAAAhjB,yBAGA4kB,uBAAA,WACA7xD,KAAA2vD,qBAAA,IACA3vD,KAAA2vD,uBACA3vD,KAAA4xD,8BAGA,IAAA5xD,KAAA2vD,sBACArV,cAAAt6C,KAAA8vD,iCAOAqB,uBAAA,SAAAY,GACA/xD,KAAA+vD,2BAAA,EAEA/vD,KAAAiwD,qBACA8B,EACA/xD,KAAAiwD,mBAAA+B,YAEAhyD,KAAAiwD,mBAAApoC,OAGA7nB,KAAA8vD,gCACAxV,cAAAt6C,KAAA8vD,kCAQAmB,eAAA,WACA,IAAAI,EAWA,GATArxD,KAAA+vD,2BACA/vD,KAAAmxD,wBAAA,GACAE,GAAA,GAEAA,GAAA,EAGArxD,KAAAgwD,mBAAA,GAEAhwD,KAAAkwD,WAAA,CACA,IAAA/hD,EAAA7P,EAAA,sDACAoe,EAAApe,EAAA,yBAAAO,MAAAc,EAAA,MAAA,2BAAA,WAAAd,MAAAc,EAAA,MAAA,uCAAA,cAAA6O,SAAAL,GACA8jD,EAAA3zD,EAAA,gCAAAkQ,SAAAkO,GACAw1C,EAAA5zD,EAAA,uBAAAkQ,SAAAyjD,GACAE,EAAA7zD,EAAA,4BAAAkQ,SAAA0jD,GACAE,EAAA9zD,EAAA,UAAAkQ,SAAA0jD,GACAG,EAAA/zD,EAAA,kCAAAkQ,SAAA2jD,GAEAnyD,KAAAowD,eAAA9xD,EAAA,uEAAAO,MAAAc,EAAA,MAAA,YAAA,OAAA6O,SAAA6jD,GACAryD,KAAAqwD,iBAAA/xD,EAAA,iCAAAkQ,SAAAyjD,GACAjyD,KAAAswD,UAAAhyD,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,sBACAlY,KAAAzE,MAAAc,EAAA,MAAA,WACA6O,SAAA4jD,GACApyD,KAAAuwD,gBAAAjyD,EAAA,sBAAAkQ,SAAAkO,GAEA1c,KAAAkwD,WAAA,IAAAruD,QAAA4+B,MAAAtyB,EAAA,CACAqjD,UAAA,EACA9yB,kBAAA,EACA+yB,WAAA,EACAC,kBAAA,EACAC,WAAA,mCACA3wB,SAAA,KACAn/B,QAAA8f,iBAAA,IAEAiH,WAAA,KACA5oB,KAAAowD,eAAA14C,QAAA,UACA,MAGAohC,UAAA,KACA94C,KAAAowD,eAAA7rD,IAAA,OAIA,IAAA1F,MAAAyzD,cAAAtyD,KAAAowD,eAAA,CACAmC,cAAAC,IACAxyD,KAAAowD,eAAAoC,KAIAxyD,KAAA6d,YAAA7d,KAAAowD,eAAA,QAAA,oBACApwD,KAAA6d,YAAA1P,EAAA,SAAA,SAGAkjD,EACArxD,KAAAkwD,WAAAmB,YAEArxD,KAAAkwD,WAAAl4B,QAOAo5B,eAAA,SAAAW,GACA/xD,KAAAgwD,mBAAA,EAEAhwD,KAAAkwD,aACA6B,EACA/xD,KAAAkwD,WAAA8B,YAEAhyD,KAAAkwD,WAAAroC,SAKA4qC,OAAA,WACAn0D,EAAAo1B,IAAA,CACAruB,IAAAxG,MAAAuH,aAAA,gBACAmB,SAAA,OACAG,QAAA,KACA7I,MAAAyH,WAAA,QAKAosD,aAAA,SAAA56C,GACAA,GACAA,EAAAK,iBAGAnY,KAAAmxD,yBACAnxD,KAAA2wD,2BAAA,IAGAgC,iBAAA,WACA,OAAA3yD,KAAAowD,eAAA7rD,MAAAjE,QAAA,GACAN,KAAAswD,UAAAz5C,YAAA,aACA,IAEA7W,KAAAswD,UAAAh+C,SAAA,aACA,IAIAsgD,MAAA,SAAA96C,GACAA,GACAA,EAAAK,iBAGAnY,KAAA2yD,qBACA3yD,KAAAqwD,iBAAAx5C,YAAA,UACA7W,KAAA6yD,uBAEA,IAAAh0D,MAAA+H,gBAGA5G,KAAAwwD,wBAAA,EACAxwD,KAAA2wD,6BAEA3wD,KAAAkxD,gBAKAA,YAAA,WACA,IAAAnqD,EAAA,CACA+rD,UAAAj0D,MAAAk0D,SACAC,SAAAhzD,KAAAowD,eAAA7rD,OAGA1F,MAAAgI,kBAAA,cAAAE,EAAA,CAAA2D,EAAA9C,KACA5H,KAAAqwD,iBAAA/9C,SAAA,UAEA,YAAA1K,EACA8C,EAAAhD,SACA1H,KAAAoxD,iBACApxD,KAAA2wD,8BAEA3wD,KAAAizD,eAAAvoD,EAAA/C,OACA9F,QAAAqhB,MAAAljB,KAAAkwD,WAAA98C,YAEAvR,QAAA8f,iBAAA,IACA3hB,KAAAowD,eAAA14C,QAAA,UAIA1X,KAAAizD,oBAKAA,eAAA,SAAAtrD,GACAA,MAAAA,IACAA,EAAA9I,MAAAc,EAAA,MAAA,6BAGAK,KAAAuwD,gBAAAjtD,KAAAqE,GACA3H,KAAAkwD,WAAAjjB,yBAGA4lB,gBAAA,WACA7yD,KAAAizD,eAAA,MAEA,CACAjC,cAAA,GACAF,mBAAA,MCpYAjyD,MAAAq0D,GAAArxD,QAAAoa,KAAArd,OAAA,CACAu0D,YAAA,KAEAC,KAAA,KACAC,eAAA,KACAC,QAAA,KACAC,QAAA,KACAC,uBAAA,KACAtvC,MAAA,KACAuvC,aAAA,KACAC,iBAAA,KACAt3C,QAAA,KACAu3C,aAAA,KACAC,SAAA,KACAC,kBAAA,KACAj3C,SAAA,KACAk3C,kBAAA,KACAC,SAAA,KAEAC,oBAAA,KACAC,YAAA,KACAC,mBAAA,KAEAC,SAAA,KACAC,aAAA,EAEA/2C,WAAA,KAEAg3C,aAAA,EACAC,UAAA,EACAC,QAAA,KACAC,iBAAA,KACAC,0BAAA,EACAC,wBAAA,KACAC,gBAAA,KAEAC,oBAAA,EACAC,8BAAA,EACAC,gCAAA,EACAC,yBAAA,KAEAv3C,KAAA,WAEA,IAAA3e,MAAA8wD,uBACA3vD,KAAAmzD,YAAA,IAAAt0D,MAAA6wD,aAIA1vD,KAAAozD,KAAA90D,EAAA,QACA0B,KAAAqzD,eAAA/0D,EAAA,mBACA0B,KAAAszD,QAAAh1D,EAAA,WACA0B,KAAAuzD,QAAAj1D,EAAA,WACA0B,KAAAwzD,uBAAAl1D,EAAA,kBACA0B,KAAAkkB,MAAA5lB,EAAA,SACA0B,KAAAyzD,aAAAn1D,EAAA,cACA0B,KAAA0zD,iBAAAp1D,EAAA,qBACA0B,KAAAoc,QAAA9d,EAAA,WACA0B,KAAA2zD,aAAAr1D,EAAA,iBACA0B,KAAA4zD,SAAAt1D,EAAA,YACA0B,KAAA6zD,kBAAAv1D,EAAA,sBACA0B,KAAA4c,SAAAte,EAAA,YACA0B,KAAA8zD,kBAAAx1D,EAAA,sBACA0B,KAAAk0D,mBAAA51D,EAAA,qBAEA0B,KAAAm0D,SAAAtyD,QAAA8f,kBAEA3hB,KAAA+vB,yBAGA,IAAAilC,EAAAh1D,KAAA4zD,SAAAv9C,KAAA,kCAEA,IAAA,IAAAhX,EAAA,EAAAA,EAAA21D,EAAA10D,OAAAjB,IAAA,CACA,IAAA41D,EAAAD,EAAAriD,GAAAtT,GACAutD,EAAAqI,EAAA1gC,SAAA,YAAAhZ,SAAA,SACAjd,EAAA,UAAA,CACAkd,MAAA,OACA9c,KAAAu2D,EAAA15C,WAAA7c,SACA8P,SAAAo+C,GACAqI,EAAAt5C,SA6CA,IA1CA3b,KAAAm0D,UAAAn0D,KAAAoc,QAAA9b,SACAN,KAAA6d,YAAAhc,QAAAsf,KAAA,SAAA,qBACAnhB,KAAAk1D,qBAGArzD,QAAAka,KAAAC,MAAA,KAEAhc,KAAA6d,YAAAhc,QAAAsf,KAAA,SAAArJ,IAEAA,EAAA4F,SAAA5R,QACA9L,KAAAm1D,uBAGAn1D,KAAAm1D,qBAGA,IAAAC,EAAAp1D,KAAAwzD,uBAAAj4C,SAAA,UACA85C,EAAAr1D,KAAAwzD,uBAAAj4C,SAAA,gBAEA65C,EAAAE,MAAA,EAAAz2D,MAAAq0D,GAAAqC,sBAAAx8C,SAAA,WACAs8C,EAAAC,MAAAz2D,MAAAq0D,GAAAqC,sBAAAx8C,SAAA,WAIAlX,QAAA0f,sBAAAvhB,KAAAw1D,iBAAAvtC,KAAAjoB,SAIAA,KAAAszD,QAAAhzD,QACAN,KAAAy1D,aAIAz1D,KAAA6d,YAAAvf,EAAA,eAAA,QAAA,aACA0B,KAAA6d,YAAAvf,EAAA,mBAAA,QAAA,iBAGA0B,KAAAyzD,aAAAnzD,SACAN,KAAAyzD,aAAAn1D,EAAA,kCAIA0B,KAAAyzD,aAAAnzD,QAAAuB,QAAA0Y,QAAAva,KAAAyzD,aAAA,qBAAA,CACA,IAAAiC,EAAA,GACA/uC,EAAA3mB,KAAAyzD,aAAA1sD,KAAA,WACA,QAAA,IAAA4f,EACA+uC,EAAAh2D,KAAA,CACA,CACAqY,QAAAlW,QAAA+c,MACAC,MAAA,GACA,CACAtH,SAAAvX,KAAAyzD,aAAA1sD,KAAA,yBACAyQ,aAAA3V,QAAA0Y,QAAAva,KAAAyzD,aAAA,+BAIA,IAAA,IAAAp0D,EAAA,EAAAA,EAAAsnB,EAAArmB,OAAAjB,IAAA,CACA,IAAAyH,EAAA6f,EAAAtnB,GACAyH,EAAA6uD,UAGAD,EAAAh2D,KAAA,CACA,CACAqY,QAAAlW,QAAA+c,MACAC,MAAA,EACA5b,QAAA6D,EAAA7D,OACA,CACA6D,OAAAA,EAAAA,OACAyQ,SAAAzQ,EAAAyQ,SACAD,QAAAxQ,EAAAwQ,QACAxX,OAAAgH,EAAAhH,OACAiH,KAAAD,EAAAC,KACAyQ,aAAA1Q,EAAA0Q,gBAKA,IAAA,IAAAnY,EAAA,EAAAA,EAAAq2D,EAAAp1D,OAAAjB,IACAwC,QAAA6c,gBAAAC,iBAAA+2C,EAAAr2D,GAAA,GAAA,KACAW,KAAA41D,kBAAAF,EAAAr2D,GAAA,MAKAW,KAAA61D,WAGA,IAAAp+C,EAAA5Y,MAAAmW,gBAAA,WAgBA,QAfA,IAAAyC,IACA5Y,MAAAyW,mBAAA,WACAzT,QAAAka,KAAAC,MAAA,KACAna,QAAA0f,sBAAA,KACAzV,OAAAgqD,SAAA,EAAAr+C,QAKAnZ,EAAA+7B,mBACAr6B,KAAAqzD,eAAAx7C,GAAA,QAAA,oCAAA7X,KAAA+1D,kBAAA9tC,KAAAjoB,OACAA,KAAAqzD,eAAAx7C,GAAA,OAAA,oCAAA7X,KAAAg2D,iBAAA/tC,KAAAjoB,QAIAnB,MAAAo3D,cAAA31D,OAAA,CACA,IAAAqa,EAAArc,EAAA,sBAAAuY,YAAA,UACA,MAAAq/C,EAAAr3D,MAAAo3D,cAAAE,KAAAvpD,GAAAA,EAAAwpD,QAIA,IAAA1I,EAHAwI,GACAv7C,EAAArI,SAAA,UAGAtS,KAAA6d,YAAAlD,EAAA,QAAA,KACA,GAAA+yC,EAqCAA,EAAA11B,WArCA,CACA,IAAAq+B,EAAA,GACAx3D,MAAAo3D,cAAAlN,QAAAn8C,IACAypD,GAAA,4BAAAzpD,EAAAwpD,OAAA,SAAA,gFAEAxpD,EAAA8jB,6CACA9jB,EAAA4J,wBAEA5J,EAAA0pD,kBACA1pD,EAAA7B,mBAGA2iD,EAAA,IAAA7rD,QAAA+1B,IAAAjd,EAAA,2BAAA07C,UAAA,CACAr9B,OAAA,KACAre,EAAArI,SAAA,WAEAwgB,OAAA,KACAnY,EAAA9D,YAAA,aAKAvY,EAAA,IAAAovD,EAAAxpC,OAAAnQ,MAAA,WACA/T,KAAAkQ,SAAA5P,QAAAN,KAAAkQ,WAAA1J,SAAA0J,eAAA,IAAA5R,EAAA0B,MAAAoO,KAAA,WACA9P,EAAA0B,MAAAoO,KAAA,MAAA,YAAAA,KAAA,SAAA,aAIA8nD,IACAv7C,EAAA9D,YAAA,UACAhY,MAAAiK,kBAAA,OAAA,mCAAA,CACA/B,KAAA,CACAmrB,IAAArzB,MAAAo3D,cAAA7zD,IAAAwK,GAAAA,EAAA0J,aAWAk/C,iBAAA,WAKA,GAHAx1D,KAAAg0D,oBAAA11D,EAAA,6BACA0B,KAAAi0D,YAAA31D,EAAA,oBAEA0B,KAAAg0D,oBAAA1zD,OAAA,CAOA,IAHA,IACA6N,EAAAuf,EADA6oC,EAAAv2D,KAAAg0D,oBAAA91C,IAAAle,KAAAi0D,aAGA50D,EAAA,EAAAA,EAAAk3D,EAAAj2D,OAAAjB,KACA8O,EAAAooD,EAAA5jD,GAAAtT,IACA0H,KAAA,4BAEA2mB,EADA,mBAAAvf,EAAApH,KAAA,cACAoH,EAAApH,KAAA,aAAAoH,GAEAA,EAAAuT,YAEAvT,EAAApH,KAAA,yBAAA2mB,IAEA1tB,KAAA6d,YAAA1P,EAAA,UAAA,SAAA2J,GAIA,GAHAjW,QAAA0Y,QAAApM,EAAA,wBACAnO,KAAAsrB,eAAAzpB,QAAAsf,KAAA,gBAEAtf,QAAA0Y,QAAApM,EAAA,cAAA,CAEA,IAAAuf,EADA5V,EAAAK,iBAGAuV,EADA,mBAAAvf,EAAApH,KAAA,cACAoH,EAAApH,KAAA,aAAAoH,GAEAA,EAAAuT,YAEA,IAAA3a,EAAAlI,MAAAyN,cAAA6B,EAAApH,KAAA,0BAAA2mB,EAAA7uB,MAAA4N,YACA5N,MAAAqP,WAAAnH,GACAyH,SAAA3M,QAAAqR,MACAsjD,aAKAx2D,KAAA6d,YAAAhc,QAAAsf,KAAA,gBAAA,SAAArJ,GACA,IACA3J,EAAAuf,EADA+oC,GAAA,EAEA,QAAA,IAAA53D,MAAA63D,aAAA73D,MAAA63D,YAAAC,cACAF,GAAA,OAEA,IAAA,IAAAp3D,EAAA,EAAAA,EAAAW,KAAAg0D,oBAAA1zD,OAAAjB,IAOA,GAJAquB,EADA,mBADAvf,EAAAnO,KAAAg0D,oBAAArhD,GAAAtT,IACA0H,KAAA,cACAoH,EAAApH,KAAA,aAAAoH,GAEAA,EAAAuT,YAEAvT,EAAApH,KAAA,4BAAA2mB,EAAA,CACA+oC,GAAA,EACA,MAKA,GAAAA,EAAA,CACA,IAAA52D,EAAAhB,MAAAc,EAAA,MAAA,oDAQA,OANAmY,EACAA,EAAA8+C,cAAAC,YAAAh3D,EAEAiM,OAAAqT,MAAA03C,YAAAh3D,EAGAA,QAKAk2D,kBAAA,WACA/1D,KAAAk1D,qBAGAc,iBAAA,WACAh2D,KAAAk1D,qBAaAU,kBAAA,SAAA3uD,GAEAjH,KAAA0X,QAAA,sBAEA,iBAAAzQ,GAAA3I,EAAA0G,cAAAiC,KACAA,EAAA,IAGAA,EAAAsQ,WACAtQ,EAAAsQ,SAAAvX,KAAAyzD,aAAA1sD,KAAA,0BAGAE,EAAAF,OACAE,EAAAF,KAAA,IAEAE,EAAAF,KAAA+vD,cAAA,EAEAj4D,MAAAwY,WAAArX,KAAAyzD,aAAAxsD,IAGA8oB,uBAAA,WACA,IAAAw/B,EAAAvvD,KAAA4c,SAAAvG,KAAA,eACAu2C,EAAA2C,EAAAh0C,SAAA,UACAjd,EAAA,gCAAAgF,KAAAspD,EAAAtsD,OAAAssD,EAAAtpD,OAAAisD,EAAAjsD,QACAzB,QAAAqR,KAAA2D,YAAA,oBAGAkgD,UAAA,WACAl1D,QAAAqR,KAAA8jD,YAAA,gBAGAC,cAAA,WACAp1D,QAAAqR,KAAA8jD,YAAA,oBAGAnB,SAAA,WACA71D,KAAAqd,aACArd,KAAAqd,WAAAoB,UACAze,KAAAqd,WAAA,MAGA,MAAAgmB,EAAA/kC,EAAA,SACA,GAAA+kC,EAAA/iC,SAIAN,KAAAqd,WAAA,IAAAxe,MAAAoiB,KAAAoiB,GAEArjC,KAAAqd,WAAAxF,GAAA,YAAAC,IACA,MAAArR,EAAAqR,EAAAoJ,KAAA9S,KAAA,QAcA,GAXA,MAAA3H,EAAAkJ,OAAA,IACArR,EAAAmI,GAAAoQ,YAAA,UAIAhV,QAAAsf,KAAAzJ,QAAA,UAGA7V,QAAAka,KAAArE,QAAA,UAGAjR,GAAA,MAAAA,EAAAkJ,OAAA,GAAA,CACA,MAAAunD,EAAA54D,EAAA,gBAAAsV,UAAA7M,KAAA,WACA,GAAAmwD,EACA,IAAA,IAAA73D,EAAA,EAAAA,EAAA63D,EAAAnvC,KAAAG,SAAA5nB,OAAAjB,IAAA,CACA,IAAAuN,EAAAsqD,EAAAnvC,KAAAG,SAAA7oB,GACAuN,EAAAnG,OACAmG,EAAAnG,KAAAmG,EAAAnG,KAAAf,MAAA,UAAA,GAAAe,IAMA,oBAAAomB,SAEAhrB,QAAA0f,sBAAA,KACAsL,QAAAC,kBAAAxkB,OAAAA,EAAA7B,OAKAzG,KAAAqd,WAAAxF,GAAA,cAAAC,IACA,MAAAA,EAAAoJ,KAAA9S,KAAA,QAAAuB,OAAA,IAEArR,EAAAwZ,EAAAoJ,KAAA9S,KAAA,SAAAkE,SAAA,YAIAxG,OAAA63B,eAAA,CACA,MAAAziB,EAAAlhB,KAAAqd,WAAAgmB,MAAAznB,OAAA,WAAA9P,OAAA63B,mBACAziB,EAAA5gB,QACAN,KAAAqd,WAAAomB,UAAAviB,KAQAi2C,qBACA,OAAAn3D,KAAAqd,WAAArd,KAAAqd,WAAAjK,gBAAA9K,GAKA8uD,gBACA,OAAAp3D,KAAAqd,WAAArd,KAAAqd,WAAAhL,SAAA/J,GAKA+6B,YACA,OAAArjC,KAAAqd,WAAArd,KAAAqd,WAAAhL,IAAAgE,KAAA,aAAA/N,GAKAg7B,mBACA,OAAAtjC,KAAAqd,WAAArd,KAAAqd,WAAAimB,kBAAAh7B,GAKA+uD,uBACA,OAAAr3D,KAAAqd,WAAArd,KAAAqd,WAAAgmB,MAAAtkC,MAAAiB,KAAAqd,WAAAimB,mBAAAh7B,GAKAi7B,oBACA,OAAAvjC,KAAAqd,WAAArd,KAAAqd,WAAAkmB,mBAAAj7B,GAMAm7B,UAAA,SAAAS,GACAlkC,KAAAqd,YACArd,KAAAqd,WAAAomB,UAAAS,IAMAE,YAAA,WACApkC,KAAAqd,YACArd,KAAAqd,WAAA+mB,eAIA+wB,mBAAA,WACAn1D,KAAAs3D,0BAGAA,uBAAA,WACA,IAAAt3D,KAAAs3D,uBAAAC,GAAA,EAAAv3D,KAAAs3D,uBAAAC,GAAAv3D,KAAAk0D,mBAAA5zD,OAAAN,KAAAs3D,uBAAAC,KACAv3D,KAAAs3D,uBAAAE,QAAAx3D,KAAAk0D,mBAAAvhD,GAAA3S,KAAAs3D,uBAAAC,IACAv3D,KAAAs3D,uBAAAG,gBAAAz3D,KAAAs3D,uBAAAE,QAAA5vC,SAAAgR,QACA54B,KAAAs3D,uBAAAI,QAAA,EAEA13D,KAAAs3D,uBAAAG,gBAAA,SAEA,IAAAz3D,KAAAs3D,uBAAAE,QAAAzwD,KAAA,sBACA/G,KAAAs3D,uBAAAI,QAAA,GAEA13D,KAAAs3D,uBAAAK,aAAA33D,KAAAs3D,uBAAAE,QAAAphD,SAAA,aAGApW,KAAAs3D,uBAAAG,gBAAAz3D,KAAAs3D,uBAAAE,QAAAzwD,KAAA,sBACA/G,KAAAs3D,uBAAAK,eACA33D,KAAAs3D,uBAAAE,QAAA3gD,YAAA,aACA7W,KAAAs3D,uBAAAI,QAAA,GAEA13D,KAAAs3D,uBAAAK,eACA33D,KAAAs3D,uBAAAI,QAAA,IAKA13D,KAAAs3D,uBAAAI,QACA13D,KAAAs3D,uBAAAE,QAAA5+B,QAAA,GAAA54B,KAAAs3D,uBAAAG,iBACAz3D,KAAAs3D,uBAAAE,QAAAllD,SAAA,aAKAtS,KAAAs3D,uBAAAE,QAAAzwD,KAAA,qBAAA/G,KAAAs3D,uBAAAG,mBAKAvC,kBAAA,WACA,IAAAl1D,KAAAm0D,SAKA,GAAAn0D,KAAAkkB,MAAA5jB,QAAAN,KAAA0zD,iBAAA,GAAAkE,wBAAA9+B,IAAA,GACA,IAAA94B,KAAAo0D,YAAA,CACA,IAAAyD,EAAA73D,KAAA0zD,iBAAAzlC,SAGAjuB,KAAA8zD,kBAAAhyC,IAAA,aAAA,iBAAA+1C,EAAA,GAAA,GAAA,GAAA,OAGA73D,KAAA0zD,iBAAAzlC,OAAA4pC,GACAh2D,QAAAqR,KAAAZ,SAAA,gBAGAtS,KAAA8zD,kBAAA/6B,cACA/4B,KAAA4zD,SAAA76B,cADA,IAEAjX,EAAA,CACAgX,IAAA++B,EAAA,KACAC,aAAA,gBAAAD,EAAA,OAEA73D,KAAA4c,SAAAtK,SAAA,SAAAwP,IAAAA,GACA9hB,KAAA4zD,SAAAthD,SAAA,SAAAwP,IAAAA,GACA9hB,KAAAo0D,aAAA,QAEAp0D,KAAAo0D,cACAp0D,KAAA0zD,iBAAAzlC,OAAA,QACApsB,QAAAqR,KAAA2D,YAAA,gBACA7W,KAAA8zD,kBAAAhyC,IAAA,aAAA,IACA9hB,KAAA4c,SAAA/F,YAAA,SAAAiL,IAAA,CACAgX,IAAA,GACAg/B,aAAA,KAEA93D,KAAA4zD,SAAA/8C,YAAA,SAAAiL,IAAA,CACAgX,IAAA,GACAg/B,aAAA,KAEA93D,KAAAo0D,aAAA,IAUA2D,oBAAA,SAAAz2D,EAAAzB,GACA,IAAA01D,EAAA12D,MAAAq0D,GAAAqC,qBAEA,CAAA,WAAA,SAAAjmD,SAAAhO,IACAi0D,GAAA,EACA7kC,KAAA,QACAla,MAAA3X,MAAAc,EAAA,MAAA,WAEA+wB,KAAA,OACAla,MAAA3X,MAAAc,EAAA,MAAA,WAGA,IAAAq4D,EAAA15D,EAAA,0CACAgD,EAAA3C,QAAA,MAAA,2CACA+xB,qBAAAla,mCACA3W,uCAGA2O,SAAAxO,KAAAwzD,wBAEAyE,GAAAD,EAAAn/B,aAAA,EAAA,KAEAm/B,EACAnwC,OACA/F,IAAA,CAAAoc,QAAA,EAAAg6B,cAAAD,EAAAE,eAAAF,IACAl/C,SAAA,CAAAmlB,QAAA,EAAAg6B,cAAA,MAAAC,eAAA,OAAA,CAAAC,QAAA,eAAAz/C,SAAA,SACA28C,MAAAC,GACAx8C,SAAA,CAAAmlB,QAAA,EAAAg6B,cAAAD,EAAAE,eAAAF,GAAA,CACAp/C,SAAA,WACAm/C,EAAAr8C,YAIA3b,KAAA0X,QAAA,sBAAA,CACA2gD,iBAAA/2D,EACAzB,QAAAA,KASAijB,cAAA,SAAAjjB,GACAG,KAAA+3D,oBAAA,SAAAl4D,IAQAmI,aAAA,SAAAnI,GACAA,IACAA,EAAAhB,MAAAc,EAAA,MAAA,6BAGAK,KAAA+3D,oBAAA,QAAAl4D,IAGAy4D,YAAA,WACA,IAAAvxD,EAAA,CACAlC,KAAAhG,MAAAgG,MAGAhG,MAAAwJ,mBAAA,oBAAAtB,EAAA/G,KAAAu4D,cAAAtwC,KAAAjoB,QAGAu4D,cAAA,SAAAC,GAGA,GAFAx4D,KAAAszD,QAAA33C,SAEA9Z,QAAA3C,QAAAs5D,IAAAA,EAAAl4D,OAAA,CACAN,KAAAszD,QAAAh1D,EAAA,qBAAAutB,UAAAvtB,EAAA,oBAEA,IAAA,IAAAe,EAAA,EAAAA,EAAAm5D,EAAAl4D,OAAAjB,IACAf,EAAA,2CAAAO,MAAAc,EAAA,MAAA,qBAAA64D,EAAAn5D,WAAAmP,SAAAxO,KAAAszD,SAGA,IAAArlC,EAAAjuB,KAAAszD,QAAAv6B,cACA/4B,KAAAszD,QAAAxxC,IAAA,cAAAmM,GAAAlV,SAAA,CAAA0/C,aAAA,GAAA,QAEAz4D,KAAAy1D,eAIAA,WAAA,WAIA,IAFA,IAAAiD,EAAA14D,KAAAszD,QAAAj9C,KAAA,qBAEAhX,EAAA,EAAAA,EAAAq5D,EAAAp4D,OAAAjB,IACAW,KAAA6d,YAAA66C,EAAAr5D,GAAA,QAAAyY,IACAA,EAAAK,iBAEA,IAAAwgD,EAAAr6D,EAAAwZ,EAAA8C,eAEA7T,EAAA,CACAlH,QAAA84D,EAAAv+B,KAAA,aAAA14B,OAAA,IAGA7C,MAAAwJ,mBAAA,oBAAAtB,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,IACA8C,EAAAhD,QACAixD,EAAA/wC,SAAAjM,SAEA3b,KAAAgI,aAAA0C,EAAA/C,aAQAixD,gBAAA,SAAAC,EAAAC,EAAA9xD,GASA,GAPA,mBAAA8xD,IACA9xD,EAAA8xD,EACAA,GAAA,GAKA94D,KAAA40D,sBACA,IAAAiE,IAAA74D,KAAA60D,+BACA,IAAAiE,IAAA94D,KAAA80D,gCACA,CACA,IAAAiE,EAAA/xD,EACAA,EAAA,KACAhH,KAAA44D,gBAAAC,EAAAC,EAAAC,IAKA,mBAAA/xD,IACAnF,QAAA3C,QAAAc,KAAA+0D,4BACA/0D,KAAA+0D,yBAAA,IAGA/0D,KAAA+0D,yBAAAr1D,KAAAsH,IAGAhH,KAAA40D,qBACA50D,KAAA40D,oBAAA,EACA50D,KAAA60D,8BAAA,IAAAgE,EACA74D,KAAA80D,gCAAA,IAAAgE,EAEA94D,KAAAg5D,iBAAAH,EAAAC,GACAtvD,KAAAo4B,IAIA,GAHA5hC,KAAAi5D,uBACAj5D,KAAA40D,oBAAA,EAEA/yD,QAAA3C,QAAAc,KAAA+0D,0BAAA,CACA,IAAAmE,EAAAl5D,KAAA+0D,yBACA/0D,KAAA+0D,yBAAA,KAEA,IAAA,IAAA11D,EAAA,EAAAA,EAAA65D,EAAA54D,OAAAjB,IACA65D,EAAA75D,GAAAuiC,GAIA5hC,KAAA0X,QAAA,kBAAA,CACAyhD,WAAAv3B,QAMAo3B,iBAAA,SAAAH,EAAAC,GACA,OAAA,IAAA9vD,QAAA,CAAAC,EAAAC,KACA2vD,EAaA74D,KAAAo5D,YAAAN,GACAtvD,KAAAo4B,IACA34B,EAAA24B,KAdA5hC,KAAAq5D,uBAAAP,GACAtvD,KAAAo4B,KACA,IAAAA,EAAA03B,QACArwD,EAAA24B,GAGA5hC,KAAAo5D,YAAAN,GACAtvD,KAAAo4B,IACA34B,EAAA24B,UAYAy3B,uBAAA,SAAAP,GACA,OAAA,IAAA9vD,SAAA,SAAAC,EAAAC,GACA,IAAAnC,EAAA,CACAwyD,cAAA,EACAT,eAAAA,GAEAj6D,MAAAgI,kBAAA,wBAAAE,GAAA,SAAA66B,EAAAh6B,GAEAqB,EADA,YAAArB,EACAg6B,EAEA,CAAA03B,QAAA,WAMAF,YAAA,SAAAN,GACA,OAAA,IAAA9vD,QAAA,CAAAC,EAAAC,KACArK,MAAA6K,eAAA,MAAA,WACAF,KAAAgwD,IACAx5D,KAAAy5D,cAAAD,EAAAV,GAAAtvD,KAAAP,KAEAQ,MAAAkB,IACA3K,KAAAy5D,cAAA,IAAAjwD,KAAAP,QAKAwwD,cAAA,SAAAD,EAAAV,GACA,OAAA,IAAA9vD,SAAA,SAAAC,EAAAC,GACArK,MAAAgI,kBAAA,oBAAA,CACA2yD,QAAAA,EACAV,eAAAA,IACA,SAAAl3B,EAAAh6B,GACA,YAAAA,EACAqB,EAAA24B,GAEA14B,MAEA,CACAhC,YAAA,aAKA+xD,qBAAA,WACA,IAAAS,EAAAp7D,EAAA,kBAAA+X,KAAA,iBAGAqjD,EAAAp5D,QAIAzB,MAAAwJ,mBAAA,gCAAAqC,IAEA,IAAAyrB,EAAAujC,EAAAn+C,SAAA,UAEA7Q,EAAAivD,YACAxjC,EAAA71B,SACA61B,EAAA73B,EAAA,yBAAAkQ,SAAAkrD,IAEAvjC,EAAA7yB,KAAAoH,EAAAivD,aACAxjC,EAAA71B,QACA61B,EAAAxa,YAKAsH,SAAA,WACAjjB,KAAAq0D,cAIAx1D,MAAA+6D,sBACA/6D,MAAAwJ,mBAAA,YAAA,CAAAqC,EAAA9C,KACA,YAAAA,GACA5H,KAAA65D,kBAAA,GAAA,KAIA75D,KAAA65D,kBAAA,GAAA,KAIAA,iBAAA,SAAAvE,EAAAlkC,GAOA,GANAA,GAAApxB,KAAA00D,0BACA/rC,aAAA3oB,KAAA00D,yBACA10D,KAAA00D,wBAAA,OAIA10D,KAAA00D,yBAAA10D,KAAAq0D,YAIA,IAAA,IAAAiB,EAAA,CAEA,IAAAlzB,EAAAvxB,KAAAmkB,IAAA,IAAA,IAAAh1B,KAAAy0D,2BACAz0D,KAAA00D,wBAAA9rC,WAAA5oB,KAAA85D,0BAAA7xC,KAAAjoB,MAAAoiC,QAEApiC,KAAA85D,6BAIAA,0BAAA,WACAj7D,MAAAwJ,mBAAA,kDAAA,CAAAqC,EAAA9C,KACA,YAAAA,IACA5H,KAAA00D,wBAAA,KACA10D,KAAAs0D,UAAA5pD,EAAAmqB,MACA70B,KAAA+5D,WAAArvD,EAAAsvD,MAEAh6D,KAAAu0D,QAAAj0D,QAEAN,KAAA65D,kBAAA,OAMAE,WAAA,SAAAxF,GACA,GAAAv0D,KAAAq0D,YAAA,CAIAr0D,KAAAu0D,QAAAA,EAGA,IAAA0F,EAAAj6D,KAAAw0D,iBACAx0D,KAAAw0D,iBAAAx0D,KAAAk6D,sBAIAD,GACAj6D,KAAAw0D,kBACAyF,EAAA3jD,KAAAtW,KAAAw0D,iBAAAl+C,IACA2jD,EAAA5Q,WAAArpD,KAAAw0D,iBAAAnL,UACA4Q,EAAAE,gBAAAn6D,KAAAw0D,iBAAA2F,eACAF,EAAA7uD,SAAApL,KAAAw0D,iBAAAppD,OAEApL,KAAAy0D,4BAGAz0D,KAAAy0D,0BAAA,EAGAz0D,KAAAo6D,gBAGAp6D,KAAA0X,QAAA,gBAMAwiD,oBAAA,WACA,IAAAl6D,KAAAq0D,YACA,OAAA,KAUA,IANA,IAAAgG,EAAA,CACAx7D,MAAAq0D,GAAAoH,oBACAz7D,MAAAq0D,GAAAqH,kBACA17D,MAAAq0D,GAAAsH,oBAGAn7D,EAAA,EAAAA,EAAAg7D,EAAA/5D,OAAAjB,IACA,IAAA,IAAAo7D,EAAA,EAAAA,EAAAz6D,KAAAu0D,QAAAj0D,OAAAm6D,IACA,GACAz6D,KAAAu0D,QAAAkG,GAAArvD,SAAAivD,EAAAh7D,KACAg7D,EAAAh7D,KAAAR,MAAAq0D,GAAAsH,qBAAAx6D,KAAAu0D,QAAAkG,GAAAnF,OAEA,OAAAt1D,KAAAu0D,QAAAkG,GAKA,OAAA,MAGAL,cAAA,WACAp6D,KAAAq0D,aAAAr0D,KAAAozD,KAAA9yD,SAIAN,KAAAw0D,kBACAx0D,KAAA20D,kBACA30D,KAAA20D,gBAAA,IAAA+F,GAGA16D,KAAAw0D,iBAAAppD,SAAAvM,MAAAq0D,GAAAoH,qBAAAt6D,KAAAw0D,iBAAAppD,SAAAvM,MAAAq0D,GAAAsH,oBACAx6D,KAAA20D,gBAAAgG,eACA36D,KAAA20D,gBAAAiG,eAAA56D,KAAAw0D,iBAAAqG,YAAA76D,KAAAw0D,iBAAA2F,eACAn6D,KAAA20D,gBAAAmG,YAAA96D,KAAAw0D,iBAAAnL,WACArpD,KAAAw0D,iBAAAppD,SAAAvM,MAAAq0D,GAAAqH,mBACAv6D,KAAA20D,gBAAAoG,aAAAl8D,MAAAc,EAAA,MAAA,YAGAK,KAAA20D,kBACA30D,KAAA20D,gBAAAgG,eACA36D,KAAA20D,gBAAA97C,kBACA7Y,KAAA20D,mBAUApsC,UAAA,WAEA,IAAAhS,EAAA1X,MAAAmW,gBAAA,2BACA,YAAA,IAAAuB,GACA1X,MAAAyW,mBAAA,2BACAtV,KAAA8zB,UAAAvd,GACAA,GAEA1X,MAAA2W,UAAA,WAOAse,UAAA,SAAAvd,GACA1X,MAAA6W,UAAA,SAAAa,EAAA,CACAV,OAAA,YAGA,CAEA0/C,qBAAA,IAEAiF,mBAAA,EACAF,oBAAA,EACAU,gBAAA,EACAT,kBAAA,IAGA14D,QAAAisB,iBAAAjsB,QAAAsf,KACAtiB,MAAAkJ,GAAA,IAAAlJ,MAAAq0D,GAKA,IAAAwH,EAAA74D,QAAAoa,KAAArd,OAAA,CACA2T,IAAA,KACAmQ,GAAA,KACAkqC,OAAA,KACAqO,eAAA,KAEA5R,SAAA,KACA6R,UAAA,EAEAC,WAAA,KACAC,eAAA,KACAC,cAAA,KACAC,aAAA,KAEAC,WAAA,KACAC,UAAA,KACAC,YAAA,KACAC,QAAA,KACAC,WAAA,KACAC,WAAA,KAEAC,aAAA,EACAC,WAAA,EACAC,kBAAA,KACAC,gBAAA,KACAC,SAAA,KACAC,gBAAA,KACAC,oBAAA,KAEAC,aAAA,KAEA5+C,KAAA,WACAxd,KAAAuS,IAAAjU,EAAA,SAAAkQ,SAAA3P,MAAAkJ,GAAAqrD,KAAA73C,SAAA,OACAvb,KAAA0iB,GAAApkB,EAAA,OAAA,CACAgY,GAAA,WACA7P,KAAA5H,MAAAw9D,sBAAAx9D,MAAA+F,OAAA,2BAAA,OACA4J,SAAAxO,KAAAuS,KACAvS,KAAAs8D,iBAAAh+D,EAAA,wBAAAkQ,SAAAxO,KAAA0iB,IACA,IAAA65C,EAAAj+D,EAAA,yBAAAkQ,SAAAxO,KAAA0iB,IACA1iB,KAAA4sD,OAAAtuD,EAAA,WAAAkQ,SAAA+tD,GACAv8D,KAAAi7D,eAAA38D,EAAA,kCAAAkQ,SAAA+tD,GAAA10C,OAEA,IAAA9Z,EAAAjC,OAAA8gC,iBAAA,EAAA,EAAA,EACA5sC,KAAAy7D,YAAA,GAAA1tD,EACA/N,KAAA07D,QAAA17D,KAAAy7D,YAAA,EACAz7D,KAAA27D,WAAA,EAAA5tD,EACA/N,KAAA47D,WAAA,EAAA7tD,EAEA/N,KAAAm7D,WAAAn7D,KAAAw8D,cAAA,KAAA,WACAx8D,KAAAo7D,eAAAp7D,KAAAw8D,cAAA,SAAA,WACAx8D,KAAAq7D,cAAAr7D,KAAAw8D,cAAA,QAAA,QACAx8D,KAAAs7D,aAAAt7D,KAAAw8D,cAAA,OAAA,WAAA30C,OAEA7nB,KAAAu7D,WAAAv7D,KAAAo7D,eAAA,GAAA7hB,WAAA,MACAv5C,KAAAw7D,UAAAx7D,KAAAq7D,cAAA,GAAA9hB,WAAA,MAEAv5C,KAAAy8D,SAAAz8D,KAAAm7D,WAAA,GAAA5hB,WAAA,MAAA,EAAA,GACAv5C,KAAAy8D,SAAAz8D,KAAAs7D,aAAA,GAAA/hB,WAAA,MAAA,EAAA,IAGAqhB,eAAA,SAAAC,EAAAV,GACAn6D,KAAA0iB,GAAAtU,KAAA,QAAAysD,GACA76D,KAAA4sD,OAAAtpD,KAAAu3D,GACAV,EACAn6D,KAAAi7D,eAAA33D,KAAA62D,GAAAniC,OAEAh4B,KAAAi7D,eAAApzC,QAIAizC,YAAA,SAAAzR,GACA,GAAAA,GACArpD,KAAAo7D,eAAAvzC,OACA7nB,KAAAq7D,cAAAxzC,SAEA7nB,KAAAo7D,eAAApjC,OACAh4B,KAAAq7D,cAAArjC,OACAh4B,KAAAqpD,UAAAA,EAAArpD,KAAAqpD,SACArpD,KAAA08D,YAAA,EAAArT,EAAA,KAEArpD,KAAA28D,QAAA,EAAAtT,EAAA,MAIArpD,KAAAqpD,SAAAA,GAGAxwC,SAAA,WACA7Y,KAAA08D,YAAA,EAAA,EAAA,KACA18D,KAAAm7D,WAAApiD,SAAA,WAEA/Y,KAAA08D,YAAA,EAAA,EAAA,KACA18D,KAAA0iB,GAAA/G,SACA3b,KAAAye,eAKAs8C,aAAA,SAAAl7D,GACAG,KAAAk7D,WAIAl7D,KAAAk7D,UAAA,EACAl7D,KAAAqpD,SAAA,KAEArpD,KAAAm7D,WAAAtzC,OACA7nB,KAAAo7D,eAAAvzC,OACA7nB,KAAAq7D,cAAAxzC,OACA7nB,KAAAs7D,aAAAtjC,OAEAh4B,KAAA46D,eAAA/6D,KAGA86D,aAAA,WACA36D,KAAAk7D,WAIAl7D,KAAAk7D,UAAA,EAEAl7D,KAAAm7D,WAAAnjC,OACAh4B,KAAAo7D,eAAApjC,OACAh4B,KAAAq7D,cAAArjC,OACAh4B,KAAAs7D,aAAAzzC,SAGA20C,cAAA,SAAAlmD,EAAAsmD,GACA,IAAAC,EAAAv+D,EAAA,wBAAAgY,EAAA,YAAAtW,KAAAy7D,YAAA,aAAAz7D,KAAAy7D,YAAA,OAAAjtD,SAAAxO,KAAAs8D,kBACAQ,EAAAD,EAAA,GAAAtjB,WAAA,MAKA,OAHAujB,EAAA1iB,YAAAwiB,EACAE,EAAA3iB,UAAAn6C,KAAA47D,WACAkB,EAAAC,QAAA,QACAF,GAGAF,QAAA,SAAAK,EAAAC,GACAj9D,KAAA67D,aAAAmB,EACAh9D,KAAA87D,WAAAmB,EAEAj9D,KAAAy8D,SAAAz8D,KAAAu7D,WAAAyB,EAAAC,GACAj9D,KAAAy8D,SAAAz8D,KAAAw7D,UAAAwB,EAAAC,IAGAR,SAAA,SAAAK,EAAAE,EAAAC,GACAH,EAAAjjB,UAAA,EAAA,EAAA75C,KAAAy7D,YAAAz7D,KAAAy7D,aACAqB,EAAA9iB,YACA8iB,EAAAI,IAAAl9D,KAAA07D,QAAA17D,KAAA07D,QAAA17D,KAAA27D,YAAA,IAAA,EAAAqB,GAAAnsD,KAAAyjC,IAAA,IAAA,EAAA2oB,GAAApsD,KAAAyjC,IACAwoB,EAAA9rB,SACA8rB,EAAAK,aAGAT,YAAA,SAAAU,EAAAC,EAAAr2D,GACAhH,KAAAk8D,iBACAvzC,aAAA3oB,KAAAk8D,iBAGAl8D,KAAAi8D,SAAA,EACAj8D,KAAA+7D,mBAAAqB,EAAAp9D,KAAA67D,cAAA,GACA77D,KAAAg8D,iBAAAqB,EAAAr9D,KAAA87D,YAAA,GACA97D,KAAAm8D,oBAAAn1D,EACAhH,KAAAs9D,oBAGAA,iBAAA,WACAt9D,KAAA28D,QAAA38D,KAAA67D,aAAA77D,KAAA+7D,kBAAA/7D,KAAA87D,WAAA97D,KAAAg8D,iBAEAh8D,KAAAi8D,WAEAj8D,KAAAi8D,SAAA,GACAj8D,KAAAk8D,gBAAAtzC,WAAA5oB,KAAAs9D,iBAAAr1C,KAAAjoB,MAAA,IACAA,KAAAm8D,qBACAn8D,KAAAm8D,yBC9pCAt9D,MAAA0+D,cAAA1+D,MAAA6V,iBAAA9V,OAAA,CACA4+D,eAAA,KACAC,qBAAA,KACAC,gBAAA,KAEAlgD,KAAA,SAAApJ,EAAAhB,EAAAqB,GACAzU,KAAA6X,GAAA,eAAA7X,KAAA29D,aAAA11C,KAAAjoB,OACAA,KAAA6X,GAAA,aAAA7X,KAAA29D,aAAA11C,KAAAjoB,OACAA,KAAAqjB,KAAAjP,EAAAhB,EAAAqB,IAGAuU,UAAA,WAEAhpB,KAAAw9D,eAAA,GAEA,IAAA,IAAAn+D,EAAA,EAAAA,EAAAR,MAAA++D,uBAAAt9D,OAAAjB,IAAA,CACA,IAAAC,EAAAT,MAAA++D,uBAAAv+D,GAEAW,KAAAsqB,eAAA,SAAAhrB,EAAAu+D,MACA79D,KAAAw9D,eAAA99D,KAAAJ,GAIAU,KAAAqjB,QAGAgH,oBAAA,WAEA,GAAA,UAAArqB,KAAAyU,SAAAiT,SAAA,oBAAAo2C,mBACA,IAAA,IAAAz+D,EAAA,EAAAA,EAAAW,KAAAypB,SAAAnpB,OAAAjB,IAAA,CACA,IAAAilB,EAAAhmB,EAAA0B,KAAAypB,SAAApqB,IAEA,GAAAilB,EAAAvd,KAAA,YAAA+2D,mBACA,OAAAx5C,EAAAvd,KAAA,OAKA,OAAA/G,KAAAqjB,QAGAs6C,aAAA,WACA,GAAA39D,KAAAskB,QAAA,CAKA,IAEAjlB,EAAAoH,EAAA+P,EAFAunD,EAAA/9D,KAAAskB,QAAAvd,KAAA,UAOA,GAAA/G,KAAAw9D,eAAAl9D,OAAA,CAOA,IAAA09D,EAYA56B,EAVA,GAPApjC,KAAAy9D,sBACAz9D,KAAAy9D,qBAAA9hD,SAMAoiD,EACA,IAAA1+D,EAAA,EAAAA,EAAAW,KAAAw9D,eAAAl9D,OAAAjB,IACA,GAAAW,KAAAw9D,eAAAn+D,GAAA66B,SAAA6jC,EAAA,CACAC,EAAAh+D,KAAAw9D,eAAAn+D,GACA,MAmCA,GA9BAW,KAAAy9D,qBAAAn/D,EAAA,kCAKA0/D,GACAv3D,EAAAzG,KAAAi+D,qBAAAD,GACAxnD,EAAA,UAAAxW,KAAAyU,SAAAiT,QAAA7oB,MAAAc,EAAA,MAAA,gBAAAd,MAAAc,EAAA,MAAA,uBAAA,CAAAL,MAAA0+D,EAAA94D,OACAlF,KAAA09D,gBAAAp/D,EAAA,kCAAAmI,EAAA,IAAA5H,MAAAuE,WAAAoT,GAAA,QAAAhI,SAAAxO,KAAAy9D,sBAEA,UAAAz9D,KAAAyU,SAAAiT,SACA1nB,KAAA6d,YAAA7d,KAAA09D,gBAAA,SAAA,SAAA5lD,GACA9X,KAAAk+D,yBAAApmD,EAAA8C,cAAAujD,aAAA,eAIAn+D,KAAAw9D,eAAAl9D,OAAA,IACA8iC,EAAA9kC,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,uBACAhN,SAAAxO,KAAAy9D,wBAGAz9D,KAAA09D,gBAAAt6B,EAAA9kC,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,8BACAlY,KAAAzE,MAAAc,EAAA,MAAA,kBACA6O,SAAAxO,KAAAy9D,sBAGAr6B,EAAA,CACA,IAAAg7B,EAAA,yBAEA,IAAA/+D,EAAA,EAAAA,EAAAW,KAAAw9D,eAAAl9D,OAAAjB,IAAA,CACA,IAAAC,EAAAU,KAAAw9D,eAAAn+D,GAEA,UAAAW,KAAAyU,SAAAiT,SAAApoB,IAAA0+D,IACAv3D,EAAAzG,KAAAi+D,qBAAA3+D,GACAkX,EAAA,UAAAxW,KAAAyU,SAAAiT,QAAApoB,EAAA4F,KAAArG,MAAAc,EAAA,MAAA,uBAAA,CAAAL,MAAAA,EAAA4F,OACAk5D,GAAA,UAAA33D,EAAA,IAAA5H,MAAAuE,WAAAoT,GAAA,aAMAlY,EAFA8/D,GAAA,eAEA5vD,SAAAxO,KAAAy9D,sBACA,IAAAvG,EAAA,IAAAr1D,QAAAqZ,QAAAkoB,GAEA,UAAApjC,KAAAyU,SAAAiT,SACAwvC,EAAAr/C,GAAA,eAAAC,IACA9X,KAAAk+D,yBAAApmD,EAAAub,OAAA8qC,aAAA,cAKAn+D,KAAAsyB,UAAAtyB,KAAAy9D,sBAMA,GAAA,UAAAz9D,KAAAyU,SAAAiT,SAAA,oBAAAmF,QAAA,CACA,IAAAljB,EAAA,aAEAo0D,IACAp0D,GAAA,IAAAo0D,GAGAlxC,QAAAC,aAAA,GAAA,GAAAjuB,MAAA+F,OAAA+E,OAIAs0D,qBAAA,SAAA3+D,GACA,GAAA,UAAAU,KAAAyU,SAAAiT,QAAA,CACA,MAAA/d,EAAA,cAAArK,EAAA46B,aACAmkC,EAAAr+D,KAAA2pB,UACA7pB,EAAAu+D,EAAA,CAAAA,KAAAA,EAAAnkC,aAAA5xB,EACA,MAAA,SAAAzJ,MAAA+F,OAAA+E,EAAA7J,MAGA,MAAA,YAAAR,EAAAgX,OAGA4nD,yBAAA,SAAAI,GACA,IAAAt+D,KAAA09D,gBAAAtnD,SAAA,WAAA,CAOA,IAFA,IAAA9W,EAEAD,EAAA,EAAAA,EAAAW,KAAAw9D,eAAAl9D,OAAAjB,IACA,GAAAW,KAAAw9D,eAAAn+D,GAAAiX,IAAAgoD,EAAA,CACAh/D,EAAAU,KAAAw9D,eAAAn+D,GACA,MAIA,GAAAC,EAAA,CAIAU,KAAA09D,gBAAAprD,SAAA,YACA,IAAAisD,EAAAv+D,KAAA09D,gBAAAp6D,OACAtD,KAAA09D,gBAAAp6D,KAAAzE,MAAAc,EAAA,MAAA,uBAAA,CAAAL,MAAAA,EAAA4F,QAEArG,MAAAgW,oBAAA7U,KAAAoU,YAAA,CACAoqD,WAAAx+D,KAAAy9D,qBACAlnD,OAAAvW,KAAAuW,OACAiJ,WAAA,CACA8+C,QAAAA,GAEAl7C,UAAA,KACApjB,KAAA09D,gBAAA7mD,YAAA,YAAAvT,KAAAi7D,IAEAv7C,cAAAtY,IAEA,IAAA+zD,EAAA,SAAAn/D,EAAAu+D,IAEA79D,KAAAokB,YAAAq6C,GACAz+D,KAAA+wB,kBAAA0tC,GAGAz+D,KAAAqyB,yBAAA3nB,EAAA4L,IACAtW,KAAAopB,yBAOAvqB,MAAAsV,0BAAA,4BAAAtV,MAAA0+D,eC3MA1+D,MAAA6/D,oBAAA7/D,MAAA48B,uBAAA78B,OAAA,CACAyb,YAAA,WACAra,KAAAqjB,KAAA0iC,MAAA/lD,KAAAi8B,WACAj8B,KAAAyU,SAAA0nB,UAAA,GAGAsC,iBAAA,WACA,IAAAhqB,EAAAzU,KAAAqjB,OAEA,OADA5O,EAAAktB,cAAA,EACAltB,GAGAioB,YAAA,WACA,OAAA18B,KAAA47B,mBAAAvlB,KAAA,aAGA0oB,cAAA,SAAA3nB,GAEApX,KAAA4yB,MAAAzZ,UACAnZ,KAAA4yB,MAAA0O,mBACAthC,KAAA4yB,MAAAwO,mBACAphC,KAAA4yB,MAAA2O,oBAKA,IAFA,IAAAo9B,EAAA3+D,KAAAsuB,wBAEAjvB,EAAA,EAAAA,EAAA+X,EAAA9W,OAAAjB,IACAs/D,EAAAj/D,KAAA0X,EAAA/X,GAAAiX,IAGA,IAAAvP,EAAA,CACA63D,YAAAD,EACApoD,OAAAa,EAAA,GAAAb,OACAD,GAAAtW,KAAAyU,SAAA6B,GACApR,KAAAlF,KAAAyU,SAAAvP,KACA25D,YAAA7+D,KAAAyU,SAAAoqD,YACAC,eAAA9+D,KAAAyU,SAAAqqD,gBAGAjgE,MAAAgI,kBAAA,qCAAAE,EAAA,CAAA2D,EAAA9C,KAMA,GALA5H,KAAA4yB,MAAAtZ,SACAtZ,KAAA4yB,MAAAyO,kBACArhC,KAAA4yB,MAAAuO,kBACAnhC,KAAA4yB,MAAA4O,oBAEA,YAAA55B,EAAA,CACA,IACAm3D,EADAzgE,EAAAoM,EAAAhM,MACA6c,SAAA,aAEAvb,KAAA47B,mBAAA1kB,YAAA6nD,GACA/+D,KAAA47B,mBAAAmjC,EACA/+D,KAAAy8B,gBAIA,IAFA,IAAAuiC,EAAA,GAEA3/D,EAAA,EAAAA,EAAA+X,EAAA9W,OAAAjB,IAAA,CACA,IAAAyV,EAAAsC,EAAA/X,GACA8W,EAAAnW,KAAAgyB,eAAAld,EAAAwB,IAEAH,IACAnW,KAAAy/B,wBAAA3qB,EAAAqB,SAAAA,GACA6oD,EAAAt/D,KAAAoV,IAIA9U,KAAAq/B,gCACAr/B,KAAA4yB,MAAA/K,OACA7nB,KAAA0/B,iBAAAs/B,OAKAlhC,cAAA,SAAA3nB,GAEA,IAAA8oD,EAAA9oD,EAAA+H,IAAA/H,EAAAyR,SAAA2M,SAAA,MAAAle,KAAA,aAGArW,KAAA09B,eAAAuhC,GAGA,IAAA,IAAA5/D,EAAA,EAAAA,EAAA4/D,EAAA3+D,OAAAjB,IACAW,KAAAk/D,qBAAAD,EAAA5/D,IAIA6/D,qBAAA,SAAAD,EAAA5/D,GACA,IAAA2H,EAGA3H,IAAA4/D,EAAA3+D,OAAA,IACA0G,EAAA,KACA,IAAAuL,EAAA0sD,EAAA1mD,QAAAqP,SAAAA,SACAvV,EAAAE,EAAAqV,SAEAvV,EAAA,KAAArS,KAAA47B,mBAAA,IAAArpB,EAAAgiB,WAAAj0B,OACAiS,EAAAoJ,SAEAtJ,EAAAsJ,WAKA,IAAAtH,EAAA,KACArU,KAAAg+B,mBAAAihC,EAAAtsD,GAAAtT,GAAA2H,IAGA,IAAA3H,EACAgV,IAEAuU,WAAAvU,EAAA,IAAAhV,MC5GAR,MAAAsgE,OAAA,GAOAtgE,MAAAsgE,OAAAC,UAAAv9D,QAAAoa,KAAArd,OAAA,CACAygE,QAAA,KACAC,KAAA,KAEA9hD,KAAA,SAAAzW,GACA,IAAAs4D,EAAAt4D,EAAAs4D,QACAC,EAAAv4D,EAAAu4D,KAEAA,EAAAvW,QAAAjN,IACAx9C,EAAAyV,KAAA+nC,GAAA,SAAAyjB,GACA,IAEAC,EAEA,OAJAH,EAAAE,GAIAj+D,MACA,IAAA,OACAk+D,EAAA58D,GAAA68D,UAAA,YACA3jB,EAAAyjB,GAAAC,EAAA1jB,EAAAyjB,IACA,MAEA,IAAA,WACAC,EAAA58D,GAAA68D,UAAA,qBACA3jB,EAAAyjB,GAAAC,EAAA1jB,EAAAyjB,IACA,MAEA,IAAA,UACAzjB,EAAAyjB,GAAAzjB,EAAAyjB,GAAA,IACA,MAEA,IAAA,SACAzjB,EAAAyjB,IAAAzjB,EAAAyjB,SASAv/D,KAAAq/D,QAAAA,EACAr/D,KAAAs/D,KAAAA,KAUAzgE,MAAAsgE,OAAAO,IAAA79D,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACAilB,KAAA,KAEA7a,KAAA,SAAApK,GACApT,KAAAoT,WAAAA,EAEApT,KAAAq4B,KAAA/5B,EAAA,+BAAAkQ,SAAAxO,KAAAoT,YAEApT,KAAA6nB,QAGA83C,WAAA,SAAAjhE,GACAsB,KAAAq4B,KAAA35B,KAAAA,IAGAkhE,YAAA,SAAAz/B,GACAngC,KAAAq4B,KAAAvW,IAAA,OAAAqe,EAAAnnB,KAAA,MACAhZ,KAAAq4B,KAAAvW,IAAA,MAAAqe,EAAArH,IAAA,OAGAd,KAAA,WACAh4B,KAAAq4B,KAAAvW,IAAA,UAAA,UAGA+F,KAAA,WACA7nB,KAAAq4B,KAAAvW,IAAA,UAAA,WASAjjB,MAAAsgE,OAAAU,UAAAh+D,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACA0sD,OAAA,KAEAC,eAAA,WACAC,UAAA,KAEAn9D,aAAA,KACAo9D,iBAAA,KACAnnD,YAAA,KAEAonD,IAAA,KACAtnC,MAAA,KACA3K,OAAA,KAEAzQ,KAAA,SAAA5F,EAAAnD,GACAzU,KAAAoT,WAAAwE,EAEA5X,KAAAqa,YAAAxb,MAAAsgE,OAAAU,UAAApiD,UACAzd,KAAAqa,YAAA5F,GAEA,IAAA0rD,EAAA,CACAC,QAAAt0D,OAAAu0D,UACAC,uBAAAx0D,OAAAhJ,yBACAy9D,2BAAAz0D,OAAA00D,8BAGAxgE,KAAAqa,YAAA8lD,GAEAv9D,GAAAjB,OAAAmK,QAAA+L,GAAA,SAAA,KACA7X,KAAAygE,YAIApmD,YAAA,SAAA5F,EAAAgJ,GACA,IAAAijD,OAAA,IAAA1gE,KAAAyU,SAAA,GAAAzU,KAAAyU,SACAzU,KAAAyU,SAAAnW,EAAAM,QAAA,EAAA,GAAA8hE,EAAAjjD,EAAAhJ,IAGAksD,KAAA,SAAAX,EAAAvrD,GAGAzU,KAAAqa,YAAA5F,GAEAzU,KAAAggE,UAAAA,EACAhgE,KAAA6C,aAAAD,GAAAC,aAAA7C,KAAAyU,SAAA6rD,wBACAtgE,KAAAigE,iBAAAr9D,GAAAq9D,iBAAAjgE,KAAAyU,SAAA8rD,4BACAvgE,KAAA8Y,YAAA9Y,KAAAyU,SAAAqE,YAIA9Y,KAAA8/D,QACA9/D,KAAA8/D,OAAAnkD,SAGA,IAAA6U,EAAAxwB,KAAA+/D,eAEA//D,KAAAyU,SAAAmsD,aACApwC,GAAA,IAAAxwB,KAAAyU,SAAAmsD,YAGA5gE,KAAA8/D,OAAAxhE,EAAA,eAAAkyB,SAAAhiB,SAAAxO,KAAAoT,aAGAqtD,OAAA,WACAzgE,KAAA2gE,KAAA3gE,KAAAggE,UAAAhgE,KAAAyU,WAGAosD,iBAAA,WAEAviE,EAAA,QAAA0B,KAAA8/D,QAAA/rD,MAAA,SAAA+sD,EAAAC,GACA,IAAAC,EAAA1iE,EAAA,OAAAyiE,GAEAC,EAAArhC,QACAnxB,SAAAuyD,GAEAC,EAAA5yD,KAAA,SAAA,WACA4yD,EAAA5yD,KAAA,eAAA,QAGA,CACAqP,SAAA,CACA6iD,uBAAA,KACAC,2BAAA,KACAH,QAAA,CACAa,aAAA,OACAC,cAAA,OACAC,eAAA,QACAC,iBAAA,CACAC,IAAA,UACAC,MAAA,SACAC,KAAA,OAGAjT,OAAA,CAAAx1B,IAAA,EAAA7f,MAAA,EAAAuoD,OAAA,EAAAxoD,KAAA,GACA4nD,WAAA,KACAa,OAAA,CAAA,UAAA,UAAA,UAAA,UAAA,cASA5iE,MAAAsgE,OAAAuC,KAAA7iE,MAAAsgE,OAAAU,UAAAjhE,OAAA,CACA+iE,IAAA,KACAC,YAAA,KAEApkD,KAAA,SAAA5F,EAAAnD,GACAzU,KAAAqjB,KAAAzL,EAAA/Y,MAAAsgE,OAAAuC,KAAAjkD,UAEAzd,KAAAqa,YAAA5F,IAGAksD,KAAA,SAAAX,EAAAvrD,GACAzU,KAAAqjB,KAAA28C,EAAAvrD,GAEAzU,KAAA2hE,MACA3hE,KAAA2hE,IAAA,MAGA,IAAArT,EAAAtuD,KAAA6hE,iBAEA7hE,KAAA44B,MAAA54B,KAAA8/D,OAAAlnC,QAAA01B,EAAAt1C,KAAAs1C,EAAAr1C,MACAjZ,KAAAiuB,OAAAjuB,KAAA8/D,OAAA7xC,SAAAqgC,EAAAx1B,IAAAw1B,EAAAkT,OAIA,IAAAtB,EAAA,CACAtnC,MAAA54B,KAAA44B,OAAA01B,EAAAt1C,KAAAs1C,EAAAr1C,OACAgV,OAAAjuB,KAAAiuB,QAAAqgC,EAAAx1B,IAAAw1B,EAAAkT,QACAM,WAAA,QAAA9hE,KAAA8Y,YAAAw1C,EAAAt1C,KAAAs1C,EAAAr1C,MACA8oD,WAAAzT,EAAAx1B,KAGA94B,KAAAkgE,IAAAt9D,GAAAjB,OAAA3B,KAAA8/D,OAAApsC,IAAA,IAAA7gB,OAAA,OACAzE,KAAA,QAAA8xD,EAAAtnC,OACAxqB,KAAA,SAAA8xD,EAAAjyC,QAEAjuB,KAAA4hE,YAAA5hE,KAAAkgE,IAAArtD,OAAA,KACAzE,KAAA,YAAA,aAAA8xD,EAAA4B,cAAA5B,EAAA6B,eAIA/hE,KAAAgiE,YACAhiE,KAAAiiE,WACAjiE,KAAAkiE,YACAliE,KAAAmiE,mBAGAH,UAAA,WAGA,IAAA/1B,EAAAjsC,KAAAoiE,MAAA,GAEAC,EAAAz/D,GAAA0/D,WAAAr2B,GACAs2B,WAAAviE,KAAAwiE,iBACAC,MAHA,GAKAziE,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,gBACAA,KAAA,YAAA,gBAAApO,KAAAiuB,WACAzL,KAAA6/C,GAIA,IAEAK,EAFAx2B,EAAAlsC,KAAA2iE,OAIA,QAAA3iE,KAAA8Y,aACA4pD,EAAA9/D,GAAAggE,SAAA12B,GACAq2B,WAAAviE,KAAA6iE,iBACAC,WAAA9iE,KAAA+iE,kBACAN,MAPA,GASAziE,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,gBACAoU,KAAAkgD,KAEAA,EAAA9/D,GAAAogE,UAAA92B,GACAq2B,WAAAviE,KAAA6iE,iBACAC,WAAA9iE,KAAA+iE,kBACAN,MAhBA,GAkBAziE,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,gBACAA,KAAA,YAAA,aAAApO,KAAA44B,YACApW,KAAAkgD,IAKA1iE,KAAA6gE,oBAGAoB,SAAA,WACA,GAAAjiE,KAAAyU,SAAA4tD,MAAAY,SAAA,CACA,IAAAh3B,EAAAjsC,KAAAoiE,OACAC,EAAAz/D,GAAA0/D,WAAAr2B,GAAAw2B,MAAA,GAAAS,cAAA,GACAljE,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,UACAA,KAAA,YAAA,gBAAApO,KAAAiuB,WACAzL,KAAA6/C,GAGA,GAAAriE,KAAAyU,SAAAiuD,MAAAO,SAAA,CACA,IAEAP,EAFAx2B,EAAAlsC,KAAA2iE,OAIA,QAAA3iE,KAAA8Y,aACA4pD,EAAA9/D,GAAAggE,SAAA12B,GAAAu2B,MAAA,GACAziE,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,UACAA,KAAA,YAAA,aAAApO,KAAA44B,MAPA,SAQApW,KAAAkgD,KAEAA,EAAA9/D,GAAAogE,UAAA92B,GAAAu2B,MAAA,GACAziE,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,UACAA,KAAA,YAAA,mBACAoU,KAAAkgD,MAKAR,UAAA,WACA,IAAAj2B,EAAAjsC,KAAAoiE,MAAA,GACAl2B,EAAAlsC,KAAA2iE,OAIA,GAAA3iE,KAAAyU,SAAA4tD,MAAAc,UAAA,CACA,IAAAC,EAAAxgE,GAAA0/D,WAAAr2B,GAEAjsC,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,eACAA,KAAA,YAAA,eAAApO,KAAAiuB,WACAzL,KAAA4gD,EACAC,UAAArjE,KAAAiuB,OAAA,EAAA,GACAs0C,WAAA,KAMA,GAAAviE,KAAAyU,SAAAiuD,MAAAS,UAAA,CACA,IAAAG,EAAA1gE,GAAAggE,SAAA12B,GAEAlsC,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,eACAA,KAAA,YAAA,oBACAoU,KAAA8gD,EACAD,UAAArjE,KAAA44B,MAAA,GACA2pC,WAAA,IACAO,WAAA9iE,KAAA+iE,kBACAN,MAZA,IAkBA,IAAAc,EAAA3gE,GAAA2gE,OACAt3B,GAAA,SAAA6P,GACA,OAAA7P,EAAA6P,EAAA,OAEA5P,GAAA,SAAA4P,GACA,OAAA5P,EAAA4P,EAAA,OAGA97C,KAAA4hE,YACA/uD,OAAA,KACAzE,KAAA,QAAA,cACAyE,OAAA,QACA2wD,MAAAxjE,KAAAggE,UAAAV,MACA/X,MAAA,OAAA,QACAA,MAAA,SAAAvnD,KAAAyU,SAAAgtD,OAAA,IACAla,MAAA,eAAA,OACAn5C,KAAA,IAAAm1D,GAIA,IAAAE,EAAA7gE,GAAA6gE,OACAx3B,GAAA,SAAA6P,GACA,OAAA7P,EAAA6P,EAAA,OAEA4nB,GAAA1jE,KAAAiuB,QACA01C,IAAA,SAAA7nB,GACA,OAAA5P,EAAA4P,EAAA,OAGA97C,KAAA4hE,YACA/uD,OAAA,KACAzE,KAAA,QAAA,cACAyE,OAAA,QACA2wD,MAAAxjE,KAAAggE,UAAAV,MACA/X,MAAA,OAAAvnD,KAAAyU,SAAAgtD,OAAA,IACAla,MAAA,eAAA,OACAn5C,KAAA,IAAAq1D,GAIAzjE,KAAAyU,SAAAmvD,OACA5jE,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,SACAssB,UAAA,UACA3zB,KAAA/G,KAAAggE,UAAAV,MACAuE,QACAhxD,OAAA,UACA00C,MAAA,OAAAvnD,KAAAyU,SAAAgtD,OAAA,IACArzD,KAAA,QAAA,CAAA0tC,EAAA/8C,IAAA,aAAAA,GACAqP,KAAA,IAAA,GACAA,KAAA,KAAA0tC,GAAA7P,EAAA6P,EAAA,KACA1tC,KAAA,KAAA0tC,GAAA5P,EAAA4P,EAAA,MAIAqmB,gBAAA,WACA,GAAAniE,KAAAyU,SAAAqvD,KAAA,CACA9jE,KAAA2hE,MACA3hE,KAAA2hE,IAAA,IAAA9iE,MAAAsgE,OAAAO,IAAA1/D,KAAA8/D,SAKA,IAAAiE,EAAA/jE,KAAA6hE,iBAGAmC,GADAhkE,KAAA4hE,YAAAjgE,OAAA,kBAAAsiE,OAAAC,iBAAAH,EAAA/qD,KAAA+qD,EAAA9qD,MAAAiqD,KACAljE,KAAAggE,UAAAV,KAAAh/D,OAAA,GAIA6jE,EAAAtzD,KAAA8b,IAAA,EAAAq3C,GAIA/3B,EAAAjsC,KAAAoiE,MAAA,GACAl2B,EAAAlsC,KAAA2iE,OAEA3iE,KAAA4hE,YAAA/uD,OAAA,KACAzE,KAAA,QAAA,gBACAssB,UAAA,QACA3zB,KAAA/G,KAAAggE,UAAAV,MACAuE,QAAAhxD,OAAA,QACAzE,KAAA,QAAA,eACAm5C,MAAA,OAAA,eACAA,MAAA,eAAA,KACAn5C,KAAA,QAAA+1D,GACA/1D,KAAA,SAAApO,KAAAiuB,QACA7f,KAAA,IAAA0tC,GAAA7P,EAAA6P,EAAA,IAAAqoB,EAAA,GACAtsD,GAAA,YAAA,CAAAikC,EAAA/8C,KAGAiB,KAAA4hE,YAAAjgE,OAAA,SAAA5C,GAAAqP,KAAA,IAAA,GAIA,IAAAg2D,EAAA9lE,EAAA,WACA+lE,EAAA/lE,EAAA,2BAAAkQ,SAAA41D,GACAE,EAAAhmE,EAAA,2BAAAkQ,SAAA41D,GAEAC,EAAA3lE,KAAAsB,KAAAwiE,eAAAxiE,CAAA87C,EAAA,KACAwoB,EAAA5lE,KAAAsB,KAAA6iE,eAAA7iE,CAAA87C,EAAA,KAEA,IAAAyoB,EAAAH,EAAA1wC,IAAA,GAEA1zB,KAAA2hE,IAAAhC,WAAA4E,GAIA,IAIAvrD,EAJAs1C,EAAAtuD,KAAA6hE,iBAGA/oC,EAAAoT,EAAA4P,EAAA,IADA,GAIA,QAAA97C,KAAA8Y,aACAE,EAAAizB,EAAA6P,EAAA,IAAAwS,EAAAt1C,KALA,GAOAhZ,KAAA8/D,OAAA99D,SAAAgX,KAAAA,EAAAhZ,KAAA2hE,IAAAtpC,KAAAO,QACA54B,KAAA8/D,OAAA99D,SAAAgX,KAAAhZ,KAAA8/D,OAAAlnC,QARA,KAWA5f,EAAAizB,EAAA6P,EAAA,KAAA97C,KAAA2hE,IAAAtpC,KAAAO,QAXA,MAcA5f,EAAAizB,EAAA6P,EAAA,KAAA97C,KAAA2hE,IAAAtpC,KAAAO,QAAA01B,EAAAt1C,KAdA,IAiBAA,EAAA,IACAA,EAAAizB,EAAA6P,EAAA,IAAAwS,EAAAt1C,KAlBA,IAqBA,IAAAmnB,EAAA,CACArH,IAAAA,EACA9f,KAAAA,GAGAhZ,KAAA2hE,IAAA/B,YAAAz/B,GAIAngC,KAAA2hE,IAAA3pC,SAEAngB,GAAA,WAAA,CAAAikC,EAAA/8C,KAEAiB,KAAA4hE,YAAAjgE,OAAA,SAAA5C,GAAAqP,KAAA,IAAA,GAGApO,KAAA2hE,IAAA95C,WAKAg6C,eAAA,WACA,IAAAvT,EAAAtuD,KAAAyU,SAAA65C,OAIA//C,EAAAvO,KAAA+iE,iBACAyB,EAAA,EAmBA,OAjBAlmE,EAAAyV,KAAAxF,EAAA,CAAAtP,EAAAkG,KACA,IAKAs/D,EALA,EAEAzkE,KAAA6iE,eAEA9/D,CAAAoC,GACA7E,OAEAmkE,EAAAD,IACAA,EAAAC,KAIAD,GAAA,GAEAlW,EAAAt1C,KAAAwrD,EAEAlW,GAGA8T,KAAA,SAAAsC,GACA,IAAAC,EAAA/hE,GAAAoyB,IAAAh1B,KAAAggE,UAAAV,MAAA,SAAAxjB,GACA,OAAAA,EAAA,MAGA8oB,EAAAhiE,GAAA+pB,IAAA3sB,KAAAggE,UAAAV,MAAA,SAAAxjB,GACA,OAAAA,EAAA,MAGA+oB,EAAA,CAAAF,EAAAC,GAEA,QAAA5kE,KAAA8Y,cACA+rD,EAAA,CAAAD,EAAAD,IAGA,IAAA3rD,EAAA,EACAC,EAAA,EAEAyrD,IACA1rD,EAAA,EACAC,EAAA,GAGA,IAAAgzB,EAAArpC,GAAAkiE,YAAAC,MAAA,CAAA/rD,EAAAhZ,KAAA44B,MAAA3f,IAIA,OAFAgzB,EAAAr2B,OAAAivD,GAEA54B,GAGA02B,KAAA,WACA,IAAAqC,EAAA,CAAA,EAAAhlE,KAAAilE,gBAEA/4B,EAAAtpC,GAAAsiE,cAAAH,MAAA,CAAA/kE,KAAAiuB,OAAA,IAIA,OAFAie,EAAAt2B,OAAAovD,GAEA94B,GAGAs2B,cAAA,WASA,OANAxiE,KAAAyU,SAAA4tD,MAAAt/D,YAAAzE,EAAAqlB,KACA3jB,KAAAyU,SAAA4tD,MAAAt/D,UAAA/C,MAEAnB,MAAAsgE,OAAAgG,MAAAC,iBAAAplE,KAAAigE,iBAAAjgE,KAAAyU,WAMAouD,cAAA,WASA,OANA7iE,KAAAyU,SAAAiuD,MAAA3/D,YAAAzE,EAAAqlB,KACA3jB,KAAAyU,SAAAiuD,MAAA3/D,UAAA/C,MAEAnB,MAAAsgE,OAAAgG,MAAAE,mBAAArlE,KAAA6C,aAAA7C,KAAAggE,UAAAX,QAAA,GAAA/9D,KAAAtB,KAAAyU,WAMAwwD,aAAA,WACA,OAAAriE,GAAA+pB,IAAA3sB,KAAAggE,UAAAV,MAAA,SAAAxjB,GACA,OAAAA,EAAA,OAIAinB,eAAA,WACA,IAAAuC,EAAAtlE,KAAAilE,eAEA,OAAAK,EAAA,EACA,CAAAA,EAAA,EAAAA,GAEA,CAAA,EAAAA,KAGA,CACA7nD,SAAA,CACAmjD,WAAA,OACAtS,OAAA,CAAAx1B,IAAA,GAAA7f,MAAA,EAAAuoD,OAAA,GAAAxoD,KAAA,GACA4qD,OAAA,EACAE,MAAA,EACAzB,MAAA,CACAc,WAAA,EACAF,UAAA,EACAlgE,UAAAzE,EAAAqlB,MAEA++C,MAAA,CACAS,WAAA,EACAF,UAAA,EACAlgE,UAAAzE,EAAAqlB,SAUA9kB,MAAAsgE,OAAAgG,MAAA,CACAI,YAAA,SAAA70D,GACA,IAAA80D,EAAArjE,SAAAuO,EAAA,IAEAiI,EAAA,CACA1H,MAAAJ,KAAAC,MAAA00D,EAAA,MACAx0D,QAAAH,KAAAC,OAAA00D,EAAA,KAAA7sD,EAAA1H,OAAA,IACAP,QAAA80D,EAAA,KAAA7sD,EAAA1H,MAAA,GAAA0H,EAAA3H,SAeA,OAZA2H,EAAA1H,MAAA,KACA0H,EAAA1H,MAAA,IAAA0H,EAAA1H,OAGA0H,EAAA3H,QAAA,KACA2H,EAAA3H,QAAA,IAAA2H,EAAA3H,SAGA2H,EAAAjI,QAAA,KACAiI,EAAAjI,QAAA,IAAAiI,EAAAjI,SAGA,GAAAiI,EAAA1H,SAAA0H,EAAA3H,WAAA2H,EAAAjI,WAGA00D,iBAAA,SAAAnF,EAAAwF,GACA,OAAAA,EAAAC,WACA,IAAA,OACA,OAAAzF,EAAA1+D,OAAA,MAEA,IAAA,QACA,OAAA0+D,EAAA1+D,OAAAkkE,EAAArF,QAAAgB,iBAAAE,OAEA,IAAA,OACA,OAAArB,EAAA1+D,OAAAkkE,EAAArF,QAAAgB,iBAAAC,IAAA,aAEA,QACA,OAAApB,EAAA1+D,OAAAkkE,EAAArF,QAAAgB,iBAAAC,OAIAgE,mBAAA,SAAAxiE,EAAAvB,EAAAmkE,GACA,OAAAnkE,GACA,IAAA,WACA,OAAAuB,EAAAtB,OAAAkkE,EAAArF,QAAAe,gBAEA,IAAA,UACA,OAAAt+D,EAAAtB,OAAAkkE,EAAArF,QAAAc,eAEA,IAAA,OACA,OAAAriE,MAAAsgE,OAAAgG,MAAAI,YAEA,IAAA,SACA,OAAA1iE,EAAAtB,OAAAkkE,EAAArF,QAAAa,iBCrrBApiE,MAAA8mE,WAAA9jE,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACA9O,OAAA,KACAshE,gBAAA,KACAC,cAAA,KACAC,YAAA,KAEAtoD,KAAA,SAAA5F,GACA5X,KAAAoT,WAAA9U,EAAAsZ,GACA5X,KAAAsE,OAAAtE,KAAAoT,WAAAiD,KAAA,gBACArW,KAAA4lE,gBAAA5lE,KAAAoT,WAAAmI,SAAA,UACAvb,KAAA6lE,cAAA7lE,KAAA4lE,gBAAArqD,SAAA,kBAEAvb,KAAA+lE,mBACA/lE,KAAAgmE,mBAEAhmE,KAAA6d,YAAA7d,KAAAsE,OAAA,QAAA,qBAGAyhE,iBAAA,WACA,IAAA1hE,EAAAkC,SAAAsF,cAAA,SACAxH,EAAA4hE,aAAA,OAAA,SAEA,UAAA5hE,EAAA/C,OAKAtB,KAAA4lE,gBAAA/uD,YAAA,UACA7W,KAAA8lE,YAAAxnE,EAAA+F,GACAiO,SAAA,uBACAlE,KAAA,CACA83D,gBAAAlmE,KAAAsE,OAAA8J,KAAA,MACAsN,aAAA7c,MAAAc,EAAA,MAAA,kBAEA6O,SAAAxO,KAAA6lE,eAEA7lE,KAAA6d,YAAA7d,KAAA8lE,YAAA,SAAA,SAAAhuD,GACAA,EAAAM,qBAGApY,KAAA6d,YAAA7d,KAAA4lE,gBAAA,SAAA,WACA5lE,KAAA8lE,YAAApuD,QAAA,YAGA1X,KAAA6d,YAAA7d,KAAA8lE,YAAA,QAAA,iBAGAK,YAAA,WACAnmE,KAAAsE,OAAAC,IAAAvE,KAAA8lE,YAAAvhE,OACAvE,KAAAgmE,oBAGAA,iBAAA,WACA,IAAAzhE,EAAAvE,KAAAsE,OAAAC,MAEAA,KAAAA,EAAA1F,MAAAuC,KAAAmD,KACAvE,KAAAsE,OAAAC,IAAAA,GAIAA,EAAAjE,QAAA,MAAAiE,EAAA,KACAA,EAAAA,EAAA7C,OAAA,GACA1B,KAAAsE,OAAAC,IAAAA,IAIAA,EAAAjE,QAMA,IAAAiE,EAAAjE,SACAiE,EAAAA,EAAA,GAAA6hE,OAAA,GAAA7hE,EAAA,GAAA6hE,OAAA,GAAA7hE,EAAA,GAAA6hE,OAAA,IAGA7hE,EAAAmB,MAAA,mBACA1F,KAAA6lE,cAAA/jD,IAAA,mBAAA,IAAAvd,GACAvE,KAAA8lE,aACA9lE,KAAA8lE,YAAAvhE,IAAA,IAAAA,IAGAvE,KAAA6lE,cAAA/jD,IAAA,mBAAA,KAfA9hB,KAAA6lE,cAAA/jD,IAAA,mBAAA,MAkBA,CACAukD,4BAAA,KAEAC,8BAAA,WAIA,OAHAznE,MAAA8mE,WAAAU,4BAGAxnE,MAAA8mE,WAAAU,+BC7FAxnE,MAAAg0B,sBAAAhxB,QAAA4+B,MAAA7hC,OAAA,CACA8kB,aAAA,KACA6iD,8BAAA,KAEA3pD,SAAA,KACA4pD,kBAAA,KACAC,yBAAA,KACAC,eAAA,KACAC,cAAA,KACA9pD,QAAA,KACA+pD,oBAAA,KACA1pD,SAAA,KACAD,WAAA,KACAE,aAAA,KACA0pD,gBAAA,KAEAC,WAAA,KACAnoC,QAAA,KACAnT,eAAA,KACAu7C,qBAAA,EAEAC,gBAAA,KACAC,yBAAA,KAEAC,qBAAA,KACAC,mBAAA,KAEA3pD,KAAA,SAAAkG,EAAAjP,GACAzU,KAAAqjB,OAEArjB,KAAAqa,YAAA5F,EAAA,CACAutB,WAAA,IAGAhiC,KAAA0jB,aAAAA,EACA1jB,KAAAumE,8BAAAvmE,KAAA0jB,aAAA9G,SAAArB,SAAA,OAAAA,SAAA,MAEA,MAAAnI,EAAA9U,EAAA,iDAAAkQ,SAAA3M,QAAAqR,MAEAlT,KAAA4c,SAAAte,EAAA,yCAAAkQ,SAAA4E,GACApT,KAAAwmE,kBAAAloE,EAAA,yBAAAkQ,SAAAxO,KAAA4c,UACA5c,KAAAymE,yBAAAnoE,EAAA,iCAAAkQ,SAAA4E,GAEApT,KAAA6c,QAAAve,EAAA,yBAAAkQ,SAAA4E,GACApT,KAAA4mE,oBAAAtoE,EAAA,gCAAAkQ,SAAAxO,KAAA6c,SACA7c,KAAAid,WAAA3e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAA4mE,qBACA5mE,KAAAkd,SAAA5e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,sBACAlY,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAAxO,KAAA4mE,qBACA5mE,KAAAmd,aAAA7e,EAAA,iCAAAkQ,SAAAxO,KAAA4mE,qBAEA5mE,KAAA6mE,gBAAAvoE,EAAA,0BAAAkQ,SAAA4E,GAEApT,KAAAonE,aAAAh0D,GACApT,KAAAg4B,OAEAn5B,MAAAiK,kBAAA,OAAA,0DAAA,CACA/B,KAAA,CACAqN,YAAApU,KAAA0jB,aAAAtP,eAEA5K,KAAAkB,IACA1K,KAAAkd,SAAArG,YAAA,YACA7W,KAAAqnE,WAAA38D,EAAA3D,QACAgmD,QAAA,KACA/sD,KAAA6mE,gBAAAlrD,WAGA3b,KAAA6d,YAAA7d,KAAAid,WAAA,QAAA,QACAjd,KAAA6d,YAAA7d,KAAAkd,SAAA,QAAA,QACAld,KAAA6d,YAAA7d,KAAAoT,WAAA,SAAA,SAGAi0D,WAAA,SAAA38D,GACA1K,KAAAinE,yBAAAv8D,EAAAu8D,yBACAjnE,KAAAgnE,gBAAAt8D,EAAAs8D,gBACAhnE,KAAAknE,qBAAAx8D,EAAAw8D,qBACAlnE,KAAAmnE,mBAAAz8D,EAAAy8D,mBAEAz8D,EAAA8W,UACA3iB,MAAA2T,eAAA9H,EAAA8W,UAEA9W,EAAA+tB,UACA55B,MAAAiU,eAAApI,EAAA+tB,UAIAz4B,KAAA8mE,WAAA,IAAAjlE,QAAA86B,SAAA,CACAzC,OAAA,QACA6C,KAAA,IACAK,aAAA,KACAp9B,KAAA+mE,qBAAA,KAKA/mE,KAAA2+B,QAAA,GAEA,IAAA,IAAAt/B,EAAA,EAAAA,EAAAqL,EAAAi0B,QAAAr+B,OAAAjB,IACAW,KAAA2+B,QAAAj/B,KAAAM,KAAAsnE,UAAA58D,EAAAi0B,QAAAt/B,KAGAW,KAAAwrB,qBAAA,IAAAxrB,KAAA2+B,QAAA,IACA3+B,KAAA2+B,QAAA,GAAAh9B,SAGA,MAAA4lE,EAAAjpE,EAAA,+BAAAkQ,SAAAxO,KAAA6c,SACAumB,EAAA9kC,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,uBACAE,aAAA7c,MAAAc,EAAA,MAAA,QACA8b,MAAA5c,MAAAc,EAAA,MAAA,UACA6O,SAAA+4D,GAEA5wC,EAAAr4B,EAAA,SAAA,CACAkd,MAAA,SACAhN,SAAA+4D,GACAl1D,EAAA/T,EAAA,SAAAuU,OACAvU,EAAA,SAAAuU,OACAvU,EAAA,OAAA,CACAgF,KAAAzE,MAAAc,EAAA,MAAA,eACA6nE,YAAA,cAGAh5D,SAAAmoB,GAEAjsB,EAAAw8D,sBACA5oE,EAAA,SAAAuU,OACAvU,EAAA,OAAA,CACAgF,KAAAzE,MAAAc,EAAA,MAAA,qBACA6nE,YAAA,YAEAh5D,SAAA6D,GAGA,IAAAxQ,QAAAqZ,QAAAkoB,EAAA,CACA4rB,eAAA37B,IACA,MAAAo0C,EAAA,CACAnmE,KAAAhD,EAAA+0B,GAAAtsB,KAAA,SAEA,WAAA0gE,EAAAnmE,OACAmmE,EAAAxoE,IAAA,UAAAJ,MAAA6S,OACA+1D,EAAAC,gBAAA,GACAD,EAAAR,yBAAA,IAEA,MAAAlnD,EAAA/f,KAAAsnE,UAAAG,GACA5lE,QAAA8lE,yBAAA3nE,KAAA4c,SAAAmD,EAAAwvC,OACAxvC,EAAApe,SACA3B,KAAA+mE,qBAAA,MAKAO,UAAA,SAAAG,GACA,MAAAlY,EAAAjxD,EAAA,yCAAAkQ,SAAAxO,KAAAwmE,mBACAoB,EAAAtpE,EAAA,wBAAAkQ,SAAA+gD,GACAsY,EAAAvpE,EAAA,0BAAAkQ,SAAA+gD,GAGA,IAAAxvC,EAuBA,OAzBAzhB,EAAA,+BAAAO,MAAAc,EAAA,MAAA,WAAA,wBAAA6O,SAAA+gD,GAIA,YAAAkY,EAAAnmE,MACAiuD,EAAAj9C,SAAA,WACAu1D,EAAAz5D,KAAA,OAAA,0BACA2R,EAAA,IAAAlhB,MAAAg0B,sBAAAi1C,QAAA9nE,KAAAuvD,EAAAqY,EAAAC,EAAAJ,GACA1nD,EAAAgoD,gBAAAN,EAAAnR,WAEAuR,EAAAz5D,KAAA,OAAA,sBAAA7J,IAAAkjE,EAAAxoE,KAEA8gB,EADA,WAAA0nD,EAAAnmE,KACA,IAAAzC,MAAAg0B,sBAAAm1C,OAAAhoE,KAAAuvD,EAAAqY,EAAAC,EAAAJ,GAEA,IAAA5oE,MAAAg0B,sBAAAo1C,aAAAjoE,KAAAuvD,EAAAqY,EAAAC,EAAAJ,GAEA1nD,EAAAgoD,gBAAAN,EAAAjxD,QAGAxW,KAAA0jB,aAAAU,UAAA,KAAA1iB,OAAA,EAAA+lE,EAAAxoE,IAAAqB,OAAA,KAAAmnE,EAAAxoE,IAAA,KACA8gB,EAAApe,UAIA3B,KAAA8mE,WAAAj8C,SAAA0kC,GACAxvC,GAGA65B,KAAA,SAAA9hC,GACAA,GACAA,EAAAK,kBAGAnY,KAAAkd,SAAA9G,SAAA,aAAApW,KAAAmd,aAAA/G,SAAA,YAIApW,KAAAmd,aAAAtG,YAAA,UAEAhY,MAAAiK,kBAAA,OAAA,+DAAA,CACA/B,KAAA/G,KAAAoT,WAAAsO,YAAA,gBAAA1hB,KAAA0jB,aAAAtP,cACA5K,KAAA,KAEA,GAAAxJ,KAAA+mE,qBACA/mE,KAAAumE,8BAAAjmE,OAAA,CACA,IACA4nE,EADAC,EAAA,KAGA,IAAA,IAAA9oE,EAAA,EAAAA,EAAAW,KAAA8mE,WAAAp9C,OAAAppB,OAAAjB,IAAA,CACA,MACA0gB,EADA/f,KAAA8mE,WAAAp9C,OAAA/W,GAAAtT,GACA0H,KAAA,UACAqhE,EAAAroD,EAAAsoD,qBAEA,IAAAD,EACA,SAGA,GAAAroD,EAAAuoD,YAAA,CACAJ,EAAAE,EACA,SAGAF,IACAloE,KAAAuoE,sBAAAL,EAAAC,GACAA,EAAAD,EACAA,EAAA,MAGA,MAAAM,GAAAJ,EAAAxgD,SAAAtnB,OACAN,KAAAuoE,sBAAAH,EAAAD,GACAK,GACAxoE,KAAA0jB,aAAA0G,WAAAg+C,EAAA7sD,SAAA,MAEA4sD,EAAAC,EAIA,GAAAD,EAAA,CACA,MAAAM,EAAAN,EAAAO,UACA1oE,KAAA0jB,aAAAO,aAAAoH,YAAAo9C,GACAA,EAAA9sD,UAMA3b,KAAAwrB,gBAAAxrB,KAAAwrB,eAAAi8C,WAAAxoE,MACAe,KAAA0jB,aAAAqN,kBAAA/wB,KAAAwrB,eAAAi8C,WAAAxoE,KACAe,KAAA0jB,aAAA0F,kBAGAvqB,MAAAkJ,GAAA+a,cAAAjkB,MAAAc,EAAA,MAAA,0BACAK,KAAA6nB,SACApe,MAAA,KACA5K,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,+BACAotD,QAAA,KACA/sD,KAAAmd,aAAA7K,SAAA,cAIAi2D,sBAAA,SAAAI,EAAAR,GACAA,EAGAQ,EAAA9uC,YAAAsuC,GAFAQ,EAAA98C,UAAA7rB,KAAAumE,gCAMA9nD,QAAA,WACA,IAAA,IAAApf,EAAA,EAAAA,EAAAW,KAAA2+B,QAAAr+B,OAAAjB,IACAW,KAAA2+B,QAAAt/B,GAAAof,iBAGAze,KAAA2+B,QACA3+B,KAAAqjB,UAIAxkB,MAAAg0B,sBAAA+1C,WAAA/mE,QAAAoa,KAAArd,OAAA,CACAg0B,MAAA,KAEA28B,MAAA,KACAqY,WAAA,KACAC,WAAA,KACAgB,mBAAA,KAEApB,WAAA,KAEAjqD,KAAA,SAAAoV,EAAA28B,EAAAqY,EAAAC,EAAAJ,GACAznE,KAAA4yB,MAAAA,EACA5yB,KAAAuvD,MAAAA,EACAvvD,KAAA4nE,WAAAA,EACA5nE,KAAA6nE,WAAAA,EACA7nE,KAAAynE,WAAAA,EAEAznE,KAAAuvD,MAAAxoD,KAAA,SAAA/G,MAEAA,KAAA6d,YAAA7d,KAAAuvD,MAAA,QAAA,WAGA+Y,UAAA,WACA,OAAA,GAGAQ,WAAA,WACA,OAAA9oE,KAAA4yB,MAAApH,iBAAAxrB,MAGA2B,OAAA,WACA3B,KAAA8oE,eAIA9oE,KAAA4yB,MAAApH,gBACAxrB,KAAA4yB,MAAApH,eAAAu9C,WAGA/oE,KAAAuvD,MAAAj9C,SAAA,OACAtS,KAAA4yB,MAAApH,eAAAxrB,KAEAA,KAAA6oE,mBAIA7oE,KAAA6oE,mBAAAhyD,YAAA,WAHA7W,KAAA6oE,mBAAAvqE,EAAA,UAAAkQ,SAAAxO,KAAA4yB,MAAA6zC,0BACAzmE,KAAAgpE,eAAAhpE,KAAA6oE,qBAKA7oE,KAAA4yB,MAAA6zC,yBAAA7kD,UAAA,KAGAonD,eAAA,aAGAX,mBAAA,aAGAU,SAAA,WACA/oE,KAAAuvD,MAAA14C,YAAA,OACA7W,KAAA4yB,MAAApH,eAAA,KACAxrB,KAAA6oE,mBAAAv2D,SAAA,WAGAy1D,gBAAA,SAAAxjE,GACAA,EACAvE,KAAA4nE,WAAAtkE,KAAAiB,GAEAvE,KAAA4nE,WAAAlpE,KAAA,WAIA+f,QAAA,WACAze,KAAA4yB,MAAAk0C,WAAAz7C,YAAArrB,KAAAuvD,OACAvvD,KAAA4yB,MAAA+L,QAAAnvB,OAAAlR,EAAA6O,QAAAnN,KAAAA,KAAA4yB,MAAA+L,SAAA,GACA3+B,KAAA4yB,MAAAm0C,qBAAA,EAEA/mE,KAAA8oE,eACA9oE,KAAA+oE,WAEA/oE,KAAA4yB,MAAA+L,QAAAr+B,QACAN,KAAA4yB,MAAA+L,QAAA,GAAAh9B,UAIA3B,KAAAuvD,MAAAxoD,KAAA,SAAA,MACA/G,KAAAuvD,MAAA5zC,SAEA3b,KAAA6oE,oBACA7oE,KAAA6oE,mBAAAltD,SAGA3b,KAAAqjB,UAIAxkB,MAAAg0B,sBAAAm1C,OAAAnpE,MAAAg0B,sBAAA+1C,WAAAhqE,OAAA,CACAoqE,eAAA,SAAA51D,GACApT,KAAAipE,2BAAA71D,IAGA61D,2BAAA,SAAA71D,GACA,IAAApT,KAAAynE,WAAAC,gBAAApnE,SAAAN,KAAA4yB,MAAAq0C,yBAAA3mE,OACA,OAGA,MAAA4oE,EAAA5qE,EAAA,UACA6qE,EAAA,GAEA7qE,EAAA,sCAAA0B,KAAAynE,WAAAxoE,uCAAAuP,SAAA06D,GAGA,IAAA,IAAA7pE,EAAA,EAAAA,EAAAW,KAAAynE,WAAAC,gBAAApnE,OAAAjB,IAAA,CACA,IAAAJ,EAAAuX,GAAAxW,KAAAynE,WAAAC,gBAAAroE,GACA6pE,EAAAr2D,OAAA7S,KAAAopE,wBAAAnqE,EAAAuX,GAAA,IACA2yD,EAAAzpE,KAAAT,GAIA,MAAAgoE,EAAAjnE,KAAA4yB,MAAAq0C,yBAAAlmE,MAAA,GACAkmE,EAAAvnE,QAAAM,KAAAynE,WAAAR,0BAEA,IAAA,IAAA5nE,EAAA,EAAAA,EAAA4nE,EAAA3mE,OAAAjB,IAAA,CACA,MAAAJ,EAAAuX,GAAAywD,EAAA5nE,GACAR,MAAAsO,QAAAlO,EAAAkqE,IACAD,EAAAr2D,OAAA7S,KAAAopE,wBAAAnqE,EAAAuX,GAAA,IAIA,IAAA3U,QAAA86B,SAAAusC,EAAA3tD,WAAA,CACA2e,OAAA,QACA6C,KAAA,MAGAl+B,MAAAs4B,GAAAkyC,YAAAH,EAAA,CACA1yD,MAAA3X,MAAAc,EAAA,MAAA,iBACA2pE,aAAAzqE,MAAAc,EAAA,MAAA,uFACA6O,SAAA4E,IAGAg2D,wBAAA,SAAAnqE,EAAAuX,EAAA0yC,GACA,OAAA5qD,EAAA,iDACAuU,OAAA,4BACAA,OACAhU,MAAAs4B,GAAAoyC,eAAA,CACA/yD,MAAA3X,MAAAuE,WAAAoT,GACAtR,KAAA,WAAAlF,KAAAynE,WAAAxoE,IAAA,uBACAkG,MAAAlG,EACAiqD,QAAAA,MAKAmf,mBAAA,WACA,MAAA/jD,EAAAtkB,KAAA4yB,MAAAlP,aAAA4G,eAAAtqB,KAAAynE,WAAAxoE,KAEA,GAAAqlB,EACA,OAAAA,EAAAxJ,QAAA,SAKAjc,MAAAg0B,sBAAAo1C,aAAAppE,MAAAg0B,sBAAAm1C,OAAAppE,OAAA,CACA4qE,YAAA,KAEAR,eAAA,SAAA51D,GACA,MAAAq2D,EAAA5qE,MAAAs4B,GAAAM,gBAAA,CACAjhB,MAAA3X,MAAAc,EAAA,MAAA,SACAuF,KAAA,WAAAlF,KAAAynE,WAAAxoE,cACAkG,MAAAnF,KAAAynE,WAAAjxD,QACAhI,SAAA4E,GACApT,KAAAwpE,YAAAC,EAAApzD,KAAA,SACA,MAAAqzD,EAAA,YAAA74D,KAAAC,MAAA,IAAAD,KAAAqB,UAEAy3D,EAAAtmE,GAAAA,EACA1E,QAAA,UAAA+qE,GACA/qE,QAAA,uBAAAE,MAAA4F,cAAAzE,KAAAynE,WAAAxoE,MACAN,QAAA,kBAAAqB,KAAAynE,WAAAxoE,KAEAioE,EAAAlnE,KAAAynE,WAAAP,sBACAyC,EAAA3pE,KAAA4yB,MAAAs0C,sBACAC,EAAAnnE,KAAAynE,WAAAN,oBACAwC,EAAA3pE,KAAA4yB,MAAAu0C,oBAEAtoE,MAAAs4B,GAAAkyC,YAAA/qE,EAAA,UAAAuU,OAAAq0D,GAAA,CACA5wD,GAAA,WACAE,MAAA3X,MAAAc,EAAA,MAAA,kBAAA,CACA2B,KAAAtB,KAAA4yB,MAAAo0C,oBAEAx4D,SAAA4E,GACAvU,MAAAiU,eAAAq0D,GAEAnnE,KAAAipE,2BAAA71D,GAEAA,EAAAP,OAAA,SAEA7S,KAAA4lC,WAAAtnC,EAAA,6BAAAgF,KAAAzE,MAAAc,EAAA,MAAA,yBACA6O,SAAA4E,GAEApT,KAAA6d,YAAA7d,KAAAwpE,YAAA,QAAA,0BACAxpE,KAAA6d,YAAA7d,KAAA4lC,WAAA,QAAA,YAGAjkC,OAAA,WACA3B,KAAAqjB,OACArjB,KAAAwpE,YAAAlxD,SAGAsxD,uBAAA,WACA5pE,KAAA+nE,gBAAA/nE,KAAAwpE,YAAAjlE,OACAvE,KAAA4yB,MAAAm0C,qBAAA,GAGAsB,mBAAA,WACA,IAAA/jD,EAAAtkB,KAAAqjB,OACA,OAAAiB,IAAAtkB,KAAA6oE,oBACA7oE,KAAA6oE,oBACAvkD,EAAAjO,KAAA,UAAA/S,KAAAtD,KAAAwpE,YAAAjlE,OAEA+f,GAEAhmB,EAAA,SAAAuU,OACAvU,EAAA,OAAA,CACAurE,WAAA7pE,KAAAynE,WAAAxoE,MACA4T,OACAvU,EAAA,UAAA,CACAkd,MAAA,QACAlY,KAAAtD,KAAAwpE,YAAAjlE,aAOA1F,MAAAg0B,sBAAAi1C,QAAAjpE,MAAAg0B,sBAAA+1C,WAAAhqE,OAAA,CACA4qE,YAAA,KACA5jC,WAAA,KAEA0iC,UAAA,WACA,OAAA,GAGA3mE,OAAA,WACA3B,KAAAqjB,OACArjB,KAAAwpE,YAAAlxD,SAGA0wD,eAAA,SAAA51D,GACA,MAAAq2D,EAAA5qE,MAAAs4B,GAAAM,gBAAA,CACAjhB,MAAA3X,MAAAc,EAAA,MAAA,WACA2pE,aAAAzqE,MAAAc,EAAA,MAAA,mEACAwF,MAAAnF,KAAAynE,WAAAnR,SAAA,KACA9nD,SAAA4E,GACApT,KAAAwpE,YAAAC,EAAApzD,KAAA,SAEAjD,EAAAP,OAAA,SAEA7S,KAAA4lC,WAAAtnC,EAAA,6BAAAgF,KAAAzE,MAAAc,EAAA,MAAA,mBACA6O,SAAA4E,GAEApT,KAAA6d,YAAA7d,KAAAwpE,YAAA,QAAA,0BACAxpE,KAAA6d,YAAA7d,KAAA4lC,WAAA,QAAA,YAGAgkC,uBAAA,WACA5pE,KAAA+nE,gBAAA/nE,KAAAwpE,YAAAjlE,OACAvE,KAAA4yB,MAAAm0C,qBAAA,GAGAgB,gBAAA,SAAAxjE,GACAvE,KAAA4nE,WAAAlpE,MAAA6F,EAAA1F,MAAAuE,WAAAmB,GAAA,qBAAA1F,MAAAc,EAAA,MAAA,WAAA,SAAA,UACAK,KAAA6nE,WAAAtjE,IAAAA,IAGA8jE,mBAAA,WACA,MAAA7xD,GAAAxW,KAAAwpE,YAAAxpE,KAAAwpE,YAAAjlE,MAAA,OAAAvE,KAAAynE,WAAAnR,SAAA,GACA,OAAAh4D,EAAA,yBAAAuU,OAAAvU,EAAA,WAAAgF,KAAAkT,OC5iBA3X,MAAAwmC,gBAAAxjC,QAAA86B,SAAA/9B,OAAA,CACAmmC,OAAA,KAEAvnB,KAAA,SAAAssD,EAAAr1D,GACAzU,KAAA+kC,OAAAzmC,EAAAwrE,GACA,IAAAC,EAAA/pE,KAAA+kC,OAAAxpB,SAAA,SAAAA,SAAA,kBAEA9G,EAAAnW,EAAAM,OAAA,GAAAC,MAAAwmC,gBAAA5nB,SAAAhJ,IAEAmD,UAAA5X,KAAA+kC,OAAAxpB,SAAA,SACA9G,EAAAkuC,OAAA3iD,KAAAgqE,UAAA/hD,KAAAjoB,MACAyU,EAAAw1D,QAAA,QACAx1D,EAAAsoB,KAAAl7B,QAAAqoE,OACAz1D,EAAAyoB,eAAA,EACAzoB,EAAA0oB,cAAA,IAEAn9B,KAAAqjB,KAAA0mD,EAAAt1D,IAGAu1D,UAAA,SAAAG,GACA,IAAAjqC,EAAA5hC,EAAA,eAAA0B,KAAAyU,SAAA21D,YAAA,OAAA57D,SAAA3M,QAAAqR,MACA6xB,EAAAzmC,EAAA,YAAAkQ,SAAA0xB,GACAU,EAAAtiC,EAAA,YAAAkQ,SAAAu2B,GAEAolC,EAAA37D,SAAAoyB,GAGAmE,EAAAnM,MAAA54B,KAAA+kC,OAAAnM,SACAmM,EAAA3K,KAAA,YAAAp6B,KAAA+kC,OAAA3K,KAAA,cAOA,IAJA,IACAiwC,EADArqE,KAAA+kC,OAAA1uB,KAAA,YACAkF,WACAyvC,EAAAmf,EAAA5uD,WAEAlc,EAAA,EAAAA,EAAA2rD,EAAA1qD,OAAAjB,IACAf,EAAA0sD,EAAA3rD,IAAAu5B,MAAAt6B,EAAA+rE,EAAAhrE,IAAAu5B,SAGA,OAAAsH,IAEA,CACAziB,SAAA,CACAyc,OAAA,QACAkwC,YAAA,yBC5CAvrE,MAAAyrE,gBAAAzoE,QAAA4+B,MAAA7hC,OAAA,CACA0X,GAAA,KACAi0D,OAAA,KAEAC,oBAAA,KACAC,eAAA,KAEAC,WAAA,KACAC,WAAA,EAEAntD,KAAA,SAAA+sD,EAAA91D,GACAzU,KAAAsW,GAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,UACAlS,KAAAuqE,OAAAA,EACA91D,EAAAnW,EAAAM,OAAAC,MAAAyrE,gBAAA7sD,SAAAhJ,GAEA,IAAAtG,EAAA7P,EACA,mFACAO,MAAA6H,eACA,kEACA7E,QAAA3C,QAAAc,KAAAuqE,QAAA,GAAA,6CAAAvqE,KAAAuqE,OAAA,QACA91D,EAAA8C,SAAA,+CAAA9C,EAAA8C,SAAA,MAAA,IACA,WACA/I,SAAA3M,QAAAqR,MACAwJ,EAAApe,EACA,qDAEAO,MAAAc,EAAA,MAAA,8CAFA,8HAMAd,MAAAc,EAAA,MAAA,mBANA,kCAOAK,KAAAsW,GAPA,yGASAzX,MAAAc,EAAA,MAAA,iBATA,4GAaAd,MAAAc,EAAA,MAAA,wBAbA,wBAgBA6O,SAAAL,GACA06B,EAAAvqC,EAAA,gCAAAkQ,SAAAkO,GACAO,EAAA3e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAq6B,GAEA,GAAAp0B,EAAAm2D,eAAAtqE,OACA,IAAA,IAAAjB,EAAA,EAAAA,EAAAoV,EAAAm2D,eAAAtqE,OAAAjB,IACAqd,EAAArG,KAAA,MAAAxD,OAAAvU,EAAA,QAAA,CAAAgF,KAAAmR,EAAAm2D,eAAAvrE,WAGAqd,EAAArG,KAAA,MAAAsF,SAWA,IAAAkvD,EAEA,GAVA7qE,KAAAwqE,oBAAA9tD,EAAArG,KAAA,qBACArW,KAAA8qE,iBAAAxsE,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,sBACAlY,KAAAtD,KAAA+qE,iBAAA,KACAv8D,SAAAq6B,GACA7oC,KAAAyqE,eAAAnsE,EAAA,iCAAAkQ,SAAAq6B,GAIAhnC,QAAA3C,QAAAc,KAAAuqE,QAAA,CACAM,EAAA,CAAA,OAEA,IAAA,IAAAxrE,EAAA,EAAAA,EAAAW,KAAAuqE,OAAAjqE,OAAAjB,IACAwrE,EAAAnrE,KAAA,OAAAM,KAAAuqE,OAAAlrE,SAGAwrE,EAAA,OAAA7qE,KAAAuqE,OAGAvqE,KAAA0qE,WAAA,IAAA7rE,MAAA48B,uBAAA,CACAnlB,GAAA,iBAAAtW,KAAAsW,GACApR,KAAA,oBACAkP,YAAA,wBACAgU,SAAA,CACA9R,GAAAu0D,GAEA39C,MAAA,EACA8R,cAAA,CACAN,kBAAA,GAEAgB,iBAAA,KACA1/B,KAAAitC,wBAEAjtC,KAAAwqE,oBAAAjyD,QAAA6hB,KAAA,WAGAp6B,KAAAgrE,uBAFAhrE,KAAAwqE,oBAAAjyD,QAAAb,QAAA,UAKAqmB,iBAAA/9B,KAAAgrE,qBAAA/iD,KAAAjoB,MACA+1B,YAAA,EACA6H,UAAA,IAGA59B,KAAA6d,YAAAZ,EAAA,QAAA,QAEAjd,KAAA6d,YAAA7d,KAAAwqE,oBAAA,SAAA,wBACAxqE,KAAA6d,YAAA1P,EAAA,SAAA,gBAEAnO,KAAAqjB,KAAAlV,EAAAsG,IAGAs2D,gBAAA,SAAAE,GACA,IAAAprE,EAAAorE,EACA,0DACA,8CAEA,OAAApsE,MAAAc,EAAA,MAAAE,EAAA,CACAqrE,IAAArpE,QAAA3C,QAAAc,KAAAuqE,QAAAvqE,KAAAuqE,OAAAjqE,OAAA,KAIA0qE,qBAAA,WACA,IAAAG,GAAA,EAoBA,OAlBAnrE,KAAAwqE,oBAAA73D,GAAA,GAAAynB,KAAA,YACA+wC,GAAA,EACAnrE,KAAA8qE,iBAAAxnE,KAAAtD,KAAA+qE,iBAAA,MAEA/qE,KAAA8qE,iBAAAxnE,KAAAtD,KAAA+qE,iBAAA,IACA/qE,KAAAwqE,oBAAA73D,GAAA,GAAAynB,KAAA,aACA+wC,IAAAnrE,KAAA0qE,WAAAv7C,gBAIAnvB,KAAAitC,wBAEAk+B,EACAnrE,KAAA8qE,iBAAAj0D,YAAA,YAEA7W,KAAA8qE,iBAAAx4D,SAAA,YAGA64D,GAGAC,aAAA,SAAAtzD,GACA,IAAA9X,KAAA2qE,WAAA3qE,KAAAgrE,uBAAA,CAKAhrE,KAAA8qE,iBAAAx4D,SAAA,UACAtS,KAAAyqE,eAAA5zD,YAAA,UACA7W,KAAAmZ,UACAnZ,KAAA0qE,WAAAvxD,UACAnZ,KAAA2qE,WAAA,EAGA,KACA,IAAA3qE,KAAAyU,SAAA42D,YACAvzD,EAAAK,iBAEA,MAAAxN,GAGA,MAFAmN,EAAAK,iBACAnY,KAAAyqE,eAAAn4D,SAAA,UACA3H,QAlBAmN,EAAAK,kBAsBA6oB,SAAA,WAEAn/B,QAAA8f,iBAAA,IACA3hB,KAAAwqE,oBAAAjyD,QAAAb,QAAA,SAGA1X,KAAAqjB,SAEA,CACA5F,SAAA,CACAmtD,eAAA,GACAS,SAAA/sE,EAAAqlB,KACApM,SAAA,QCnLA1Y,MAAAysE,YAAAzpE,QAAAoa,KAAArd,OAAA,CACA2sE,aAAA,KACAC,eAAA,KACA7zC,SAAA,KACA8zC,uBAAA,KACAC,YAAA,KAEAC,aAAA,KACAC,QAAA,KACAC,eAAA,KACAC,aAAA,KAEAC,gBAAA,KACAC,mBAAA,KACAC,mBAAA,KACAC,eAAA,KAEAC,QAAA,KACAC,WAAA,KAEAC,eAAA,KACAC,oBAAA,KACAC,qBAAA,EACAC,WAAA,EACApqC,QAAA,KACAqqC,QAAA,EACA7iE,YAAA,KACA2T,qBAAA,EACAmvD,MAAA,KACAC,gBAAA,EAEAC,mBAAA,KACAx6D,OAAA,KACAy6D,WAAA,KACAC,UAAA,KAEAC,gBAAA,EACAC,QAAA,KACAC,aAAA,KACAx1D,QAAA,KACAy1D,yBAAA,EAEAjuB,GAAA,KAEAzhC,KAAA,SAAA/I,GAqBA,GApBAzU,KAAAqa,YAAA5F,EAAA5V,MAAAysE,YAAA7tD,UAEAzd,KAAA0sE,MAAA,GACA1sE,KAAA4sE,mBAAA,GACA5sE,KAAAqsE,eAAAxtE,MAAAsuE,eAEAntE,KAAAmsE,QAAA1jE,OAAAC,KAAA1I,KAAAyU,SAAA24D,cAAAhrE,IAAAmU,GACApU,SAAAoU,IAGAvW,KAAAurE,aAAAjtE,EAAA,gBACA0B,KAAAwrE,eAAAltE,EAAA,mBACA0B,KAAA23B,SAAAr5B,EAAA,qBACA0B,KAAAyrE,uBAAAntE,EAAA,sBACA0B,KAAA0rE,YAAAptE,EAAA,oBAEA0B,KAAAyU,SAAA44D,sBACArtE,KAAA6d,YAAA7d,KAAAyrE,uBAAA,QAAA,sBAGAzrE,KAAAyU,SAAA64D,eAAAhtE,OAAA,CACAN,KAAAyU,SAAA84D,eACAvtE,KAAA6d,YAAAvf,EAAA,gBAAA,QAAA,eAGA,MAAAkvE,EAAAlvE,EAAA,cAEA,IAAA0B,KAAAyU,SAAA64D,eAAAhtE,OACAN,KAAA6d,YAAA2vD,EAAA,SAAA,WACAxtE,KAAAytE,cAAAztE,KAAAyU,SAAA64D,eAAA,GAAAjoE,QAGArF,KAAA0tE,gBAAAF,GAKAxtE,KAAAyU,SAAAk5D,aAKA9uE,MAAAkJ,GAAA0rD,aAAA1sD,KAAA,aAAA,IAAA/G,KAAA4tE,eAAA,IAEA5tE,KAAA6d,YAAAhf,MAAAkJ,GAAA0rD,aAAA,SAAA,oBAEAzzD,KAAAyU,SAAAo5D,mBACA7tE,KAAA8tE,0BACA9tE,KAAAyU,SAAAs5D,UAAA/tE,KAAAyU,SAAAu5D,mBACAhuE,KAAAiuE,eACAjuE,KAAAyU,SAAAy5D,iBAEAluE,KAAA6d,YAAAhf,MAAAkJ,GAAA0rD,aAAA,sBAAA37C,IACAA,EAAAg/C,eACAh/C,EAAAK,iBACAnY,KAAAmuE,cACAnuE,KAAAsrB,eAAAzsB,MAAAkJ,GAAA0rD,aAAA,0BAKAzzD,KAAAouE,mBAEApuE,KAAA6d,YAAA7d,KAAA0rE,YAAA,QAAA,KACA1rE,KAAAquE,cAAAruE,KAAA0rE,eAGA4C,mBAAAtuE,KAAAyU,SAAAk5D,aACA3tE,KAAAi/C,GAAA,IAAAqvB,iBAAA,eACAtuE,KAAAi/C,GAAAsvB,UAAAz2D,IAEA,cAAAA,EAAA/Q,KAAAoY,OACArH,EAAA/Q,KAAAynE,cAAAxuE,KAAAyU,SAAAg6D,WAEA32D,EAAA/Q,KAAAgnE,UAAA/tE,KAAAyU,SAAAs5D,SACAj2D,EAAA/Q,KAAA8mE,qBAAA7tE,KAAAyU,SAAAs5D,UAGAjiE,OAAAtF,SAAAkoE,aAMAN,iBAAA,WACApuE,KAAAusE,qBAAAvsE,KAAAwsE,WAAA,IAAAxsE,KAAAqsE,iBAAArsE,KAAAyU,SAAAk6D,kBAIA3uE,KAAAusE,qBAAA,EAEAvsE,KAAA6d,YAAAhc,QAAAqR,KAAA,4DAAA,SAAA4E,GACAxZ,EAAAwZ,EAAA4F,QAAAqW,GAAA/zB,KAAA4uE,iBAGAjmD,aAAA3oB,KAAAoiC,SAEA,CAAA,WAAA,QAAA,UAAA9yB,SAAAwI,EAAAxW,MACAtB,KAAAoiC,QAAAxZ,WAAA5oB,KAAAsgC,UAAArY,KAAAjoB,MAAA,KAEAA,KAAAsgC,kBAKAuuC,wBAAA,WACA7uE,KAAAusE,sBAIAvsE,KAAAsrB,eAAAzpB,QAAAqR,KAAA,4DACAyV,aAAA3oB,KAAAoiC,SACApiC,KAAAusE,qBAAA,IAGAnuC,MAAA,WACAp+B,KAAAwsE,aACAxsE,KAAA6uE,2BAGAvwC,OAAA,WACA,GAAA,IAAAt+B,KAAAwsE,WACA,KAAA,mEAKAxsE,KAAAwsE,aACA,IAAAxsE,KAAAwsE,YACAxsE,KAAAqsE,iBACArsE,KAAAsgC,YACAtgC,KAAAouE,qBAKAN,wBAAA,WACA,IAAAv7C,EAAAj0B,EAAA,oBACAi0B,EAAAjyB,SACAiyB,EAAAvyB,KAAAurE,aAAAxkE,KAAA,WAAA/G,KAAAurE,aAAAxkE,KAAA,WAAAghB,KAAA3U,WAAAiD,KAAA,oBAAA,MAEAkc,GAAAA,EAAAjyB,QACAN,KAAA6d,YAAA0U,EAAA,QAAA,KACAjb,QAAAzY,MAAAc,EAAA,MAAA,oDACAd,MAAAwY,WAAAxY,MAAAkJ,GAAA0rD,aAAA,CACA3sD,OAAA9G,KAAAyU,SAAAq6D,kBACAv3D,SAAAvX,KAAAyU,SAAAs6D,gBACAjvE,OAAA,CACAiuE,QAAA/tE,KAAAyU,SAAAs5D,QACAiB,YAAAhvE,KAAAyU,SAAAo5D,yBAQAI,aAAA,WAEAjuE,KAAAivE,oBAEAjvE,KAAAyU,SAAAy5D,iBACArsE,QAAA6c,gBAAAC,iBAAA,CACA5G,QAAAlW,QAAA+c,MACAC,MAAA,EACA3b,KAAA,GACA,KACArE,MAAAwY,WAAAxY,MAAAkJ,GAAA0rD,aAAA,CACA3sD,OAAA9G,KAAAyU,SAAAy6D,mBACA33D,SAAAvX,KAAAyU,SAAAs6D,mBAEA,IAIAI,mBAAA,WACAnvE,KAAAsrB,eAAAtrB,KAAAyrE,uBAAA,SACAzrE,KAAAyrE,uBAAA1yD,SAAA,CAAAmlB,QAAA,GAAA,OAAA,KACAl+B,KAAAyrE,uBAAA9vD,WAGA,MAAAyzD,EAAA9wE,EAAA,mBAAA0B,KAAAyU,SAAA8B,gBAIA,GAHAvW,KAAA+rE,gBAAAqD,EAAAxnD,SAGA5nB,KAAAyU,SAAAk5D,WAEA,YADA3tE,KAAAqvE,0BAAAtmB,QAAAn/B,GAAA5pB,KAAAsvE,uBAAA1lD,IAIAwlD,EAAA98D,SAAA,UACA,MAAAi9D,EAAA1wE,MAAAs4B,GAAAq4C,uBAAA,CACAl5D,GAAA,UACAE,MAAA3X,MAAAc,EAAA,MAAA,WACAuF,KAAA,YACAsiD,aAAA4nB,GACAG,EAAAl5D,KAAA,SAAAyL,IAAA,cAAA,QACA9hB,KAAAgsE,mBAAAuD,EAAAl5D,KAAA,gBAEArW,KAAAyU,SAAAk5D,YACA3tE,KAAAyvE,WAAAF,GAIA,MAAAG,EAAAjnE,OAAA8F,OAAAvO,KAAAyU,SAAA24D,cACAuC,EAAAD,EAAApgE,UAAA,GACAsgE,EAAAF,EAAApgE,UAAA,GACAugE,EAAAF,GAAAC,EAAA,IAAAD,EAAA,IAAA,GACAG,EAAApsE,mBAAA,kBAAA1D,KAAAyU,SAAA8B,WACA,KAAAvW,KAAAyU,SAAAs7D,eAAA,IAAA,IAEA/vE,KAAAisE,mBAAAmD,EAAA/4D,KAAA,gBACAwB,GAAA,SAAA7X,KAAAgwE,oBAAA/nD,KAAAjoB,OAEAA,KAAAqvE,0BAAAtmB,QAAAn/B,GAAA5pB,KAAAsvE,uBAAA1lD,IAEA,IAAAqmD,EAAA,WAAAJ,EACA,IAAA,IAAAxwE,EAAA,EAAAA,EAAAW,KAAAisE,mBAAA3rE,OAAAjB,IAAA,CACA,MAAAiF,EAAAtE,KAAAisE,mBAAAt5D,GAAAtT,GAAA0H,KAAA,eAAAzC,OACA2rE,GAAA,IAAAvsE,mBAAAY,EAAA8J,KAAA,SAAA,IAAA9J,EAAAC,MAGA1F,MAAAkJ,GAAA0rD,aAAA1sD,KAAA,yBACAlI,MAAAkJ,GAAA0rD,aAAA1sD,KAAA,0BAAApI,QAAAmxE,EAAAG,IAEAjwE,KAAAssE,sBACAtsE,KAAAssE,oBAAAtsE,KAAAssE,oBAAA3tE,QAAAmxE,EAAAG,IAIAjwE,KAAAyU,SAAAy7D,WAAAlwE,KAAAyU,SAAAy7D,UAAA5vE,QACAN,KAAAmwE,uBAGAnwE,KAAAgsE,mBAAAn0D,GAAA,SAAA7X,KAAAowE,oBAAAnoD,KAAAjoB,OACAA,KAAAgwE,uBAMAX,wBAAA,WACA,OAAAxwE,MAAAgiB,MAAAjF,OAAAgO,GAAAA,EAAAtT,IAAAtW,KAAAyU,SAAA8B,QAAAvW,KAAAmsE,QAAA78D,SAAAsa,EAAAtT,MAGAm5D,WAAA,SAAAY,GACA,MAAApiD,EAAAoiD,EAAApiD,SACAoiD,EACAvuD,IAAA,WAAA,UACAmM,OAAA,GACAlV,SAAA,CAAAkV,OAAAA,GAAA,OAAA,KACAoiD,EAAAvuD,IAAA,CACAwuD,SAAA,GACAriD,OAAA,QAKAsiD,aAAA,SAAAF,GACAA,EAAApiD,SACAoiD,EACAvuD,IAAA,WAAA,UACA/I,SAAA,CAAAkV,OAAA,GAAA,OAAA,KACAoiD,EAAA10D,YAIAq0D,oBAAA,WACA,IAAAQ,GAAA,EAAAC,GAAA,EACAzwE,KAAAisE,mBAAAl4D,MAAA,WAOA,GANAzV,EAAA0B,MAAA+G,KAAA,eAAA8Q,GAEA44D,GAAA,EAEAD,GAAA,GAEAA,IAAAC,EACA,OAAA,KAGAD,EACAxwE,KAAAgsE,mBAAAjlE,KAAA,eAAA2pE,QAAA,GACAD,EACAzwE,KAAAgsE,mBAAAjlE,KAAA,eAAA4pE,SAAA,GAEA3wE,KAAAgsE,mBAAAjlE,KAAA,eAAA6pE,mBAAA,IAIAR,oBAAA,WACA,MAAAS,EAAA7wE,KAAAgsE,mBAAAjlE,KAAA,eAAA8Q,GACA7X,KAAAisE,mBAAAl4D,MAAA,WACA88D,EACAvyE,EAAA0B,MAAA+G,KAAA,eAAA2pE,QAAA,GAEApyE,EAAA0B,MAAA+G,KAAA,eAAA4pE,SAAA,OAKArB,uBAAA,SAAAjR,EAAAjzD,GACA,MAAAilE,EAAAxxE,MAAAs4B,GAAAq4C,uBAAA,CACAl5D,GAAA,kBAAA+nD,EAAA/nD,GACAE,MAAA3X,MAAAc,EAAA,MAAA,qBAAA,CAAA0+D,KAAAA,EAAAn5D,OACAA,KAAA,kBAAAm5D,EAAA/nD,MACAuB,QAAA,IAAAzM,EACAA,GACApL,KAAAyU,SAAA24D,aAAA3tE,eAAA4+D,EAAA/nD,KAAAtW,KAAAyU,SAAA24D,aAAA/O,EAAA/nD,IACAw6D,WAAA9wE,KAAAyU,SAAAk5D,aASA,GANA3tE,KAAAksE,eACAmE,EAAA7oB,aAAAxnD,KAAAksE,gBAEAmE,EAAA7hE,SAAAxO,KAAA+rE,kBAGA/rE,KAAAyU,SAAAk5D,WAAA,CACA0C,EAAA/9D,SAAA,UACA,MAAAy+D,EAAAV,EAAAh6D,KAAA,gBACAwB,GAAA,SAAA7X,KAAAgwE,oBAAA/nD,KAAAjoB,OACAA,KAAAisE,mBAAAjsE,KAAAisE,mBAAA/tD,IAAA6yD,GAKA,OAFA/wE,KAAAyvE,WAAAY,GAEAA,GAGAF,qBAAA,WACA,MAAAD,EAAArxE,MAAAgiB,MAAAjF,OAAAyiD,IACAr+D,KAAAmsE,QAAA78D,SAAA+uD,EAAA/nD,KAAAtW,KAAAyU,SAAAy7D,UAAA/Z,KAAAvsC,GAAAA,EAAArT,QAAA8nD,EAAA/nD,KAGA,IAAA45D,EAAA5vE,OACA,OAGA,MAAA0wE,EAAAnyE,MAAAs4B,GAAA85C,aAAA,CACAhqE,QAAA,CACA,CAAAuP,MAAA3X,MAAAc,EAAA,MAAA,mBACAuwE,EAAA9tE,IAAAwnB,IACA,CAAApT,MAAAoT,EAAA1kB,KAAAC,MAAAykB,EAAAtT,SAGAhE,SAAA,aAEAtS,KAAAksE,eAAArtE,MAAAs4B,GAAAkyC,YAAA2H,EAAA,IACA1+D,SAAA,cACA9D,SAAAxO,KAAA+rE,iBAEA,MAAAmF,EAAAF,EAAA36D,KAAA,UAEA66D,EAAAr5D,GAAA,SAAA,KACA,MAAAtB,EAAApU,SAAA+uE,EAAA3sE,OACA85D,EAAAx/D,MAAAgiB,MAAAxK,KAAAuT,GAAAA,EAAAtT,KAAAC,GAEA,IAAA8nD,EACA,OAGA,MAAA8S,EAAAnxE,KAAAyU,SAAAy7D,UAAA75D,KAAAuT,GAAAA,EAAArT,QAAA8nD,EAAA/nD,IACAtW,KAAAsvE,uBAAAjR,EAAA8S,EAAAC,kBACApxE,KAAAgwE,sBAEAkB,EACA3sE,IAAA,IACA8R,KAAA,iBAAAE,OAAAoF,SAEA,OAAA3b,KAAAosE,aACApsE,KAAAosE,WAAA,IAGApsE,KAAAmsE,QAAAzsE,KAAA6W,GACAvW,KAAAosE,WAAA1sE,KAAA6W,GAGA,IAAA26D,EAAA76D,KAAA,UAAA/V,QACAN,KAAAuwE,aAAAvwE,KAAAksE,kBAIAlsE,KAAAyvE,WAAAzvE,KAAAksE,iBAGAmC,cAAA,SAAA3wD,GACA,IAAA+a,EAEA,OAAAz4B,KAAAoS,OACAqmB,EAAA,MAAAz4B,KAAAqxE,6BAEA54C,EAAA,4BAAAz4B,KAAAsxE,kCAEAtxE,KAAAoS,OAAA9R,SACAm4B,GAAA,sBACAz4B,KAAAoS,OAAAhQ,IAAAuI,GAAA,OAAA9L,MAAAuE,WAAAuH,WAAAlK,KAAA,IACA,SAGAT,KAAA8sE,YACAr0C,GAAA,8BAAA55B,MAAAuE,WAAApD,KAAA8sE,kBAGA,MAAA9sE,KAAA6sE,aACAp0C,GAAA,mCAAA55B,MAAAc,EAAA,MAAA,wBAIA,MAAA+tD,EAAA,IAAA7rD,QAAA+1B,IAAAla,EAAA+a,EAAA,CACAL,SAAA,0BACAtF,OAAA,WACA46B,EAAAjvC,aAIAivC,EAAA2F,eAAAh9C,KAAA,gBAAAwB,GAAA,QAAA,KACA/L,OAAAtF,SAAAkoE,YAOA2C,oBAAA,WACA,OAAArxE,KAAAyU,SAAAo5D,oBAAA7tE,KAAAyU,SAAAu5D,mBACAnvE,MAAAc,EAAA,MAAA,kCACAd,MAAAc,EAAA,MAAA,8BAMA2xE,iBAAA,WACA,OAAAtxE,KAAAyU,SAAAo5D,oBAAA7tE,KAAAyU,SAAAu5D,mBACAnvE,MAAAc,EAAA,MAAA,qCACAd,MAAAc,EAAA,MAAA,kCAGA4xE,SAAA,WACA,OAAAvxE,KAAAgtE,QACAhtE,KAAA23B,SAAAzZ,IAAAle,KAAAgtE,QAAAr1C,UACA33B,KAAA23B,UAGAi3C,YAAA,WACA,OAAA5uE,KAAAgtE,QACAhtE,KAAA0rE,YAAAxtD,IAAAle,KAAAgtE,QAAAtB,aACA1rE,KAAA0rE,aAGAuD,kBAAA,WACAjvE,KAAA2rE,aAAArtE,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,gBACAC,MAAA5c,MAAAc,EAAA,MAAA,yBACA6O,SAAAlQ,EAAA,sBACA0B,KAAA6d,YAAA7d,KAAA2rE,aAAA,QAAA,gBAGA+B,gBAAA,SAAAF,GACAA,EAAAl7D,SAAA,WAEA,MAAAqkB,EAAAr4B,EAAA,SAAA,CAAAkd,MAAA,SAAAqe,YAAA2zC,GACAn7D,EAAA/T,EAAA,SAAAkQ,SAAAmoB,GAEA32B,KAAAyU,SAAA64D,eAAAvkB,QAAArrC,IACA,MAAAnL,EAAAjU,EAAA,SAAAkQ,SAAA6D,GACAqQ,EAAApkB,EAAA,OAAA,CACAgF,KAAAoa,EAAAlH,QACAhI,SAAA+D,GACAvS,KAAA6d,YAAA6E,EAAA,QAAA,KACA1iB,KAAAytE,cAAA/vD,EAAArY,UAKAmsE,gBAAA,WACA,OAAA,IAAAxoE,QAAA,CAAAC,EAAAC,KACAlJ,KAAAitE,aACAhkE,EAAAjJ,KAAAitE,cAIApuE,MAAAiK,kBAAA,OAAA,uBAAA,CACA/B,KAAA,CACAqN,YAAApU,KAAAyU,SAAAL,YACAq6D,SAAAzuE,KAAAyU,SAAAg6D,SACAl4D,OAAAvW,KAAAyU,SAAA8B,OACAw3D,QAAA/tE,KAAAyU,SAAAs5D,QACAJ,WAAA3tE,KAAAyU,SAAAk5D,WACAqB,YAAAhvE,KAAAyU,SAAAo5D,sBAEArkE,KAAAkB,IACA1K,KAAAitE,aAAAviE,EAAA3D,KAAAxG,MACA0I,EAAAjJ,KAAAitE,gBACAxjE,MAAAP,MAIAuoE,uBAAA,SAAApsE,EAAAqsE,GACA,OAAA,IAAA1oE,QAAA,CAAAC,EAAAC,KACA,MAAApJ,EAAA,IAEA4xE,GAAA1xE,KAAAyU,SAAAk9D,SAEA7xE,EAAA4xE,GAAA,mBAAA7yE,MAAAmT,aAAA,KAGAhS,KAAAyU,SAAAm9D,YACA9xE,EAAAjB,MAAA+yE,WAAA5xE,KAAAyU,SAAAm9D,WAIA5xE,KAAAyU,SAAAk9D,OACA1oE,EAAApK,MAAA+F,OAAAS,EAAAvF,IAIAE,KAAAwxE,kBAAAhoE,MAAA,SAAAjJ,GACAT,EAAAjB,MAAAgzE,YAAAtxE,EACA0I,EAAApK,MAAA+F,OAAAS,EAAAvF,OACA2J,MAAAP,MAIAukE,cAAA,SAAApoE,GACArF,KAAAyxE,uBAAApsE,GAAAmE,MAAA,SAAAnE,GACAyG,OAAA9K,KAAAqE,OAIAysE,WAAA,WA0BA,OAzBA9xE,KAAAgtE,UACAhtE,KAAAgtE,QAAA,IAAAnuE,MAAAkzE,QAAA/xE,MACAA,KAAAqsE,iBACArsE,KAAAgtE,QAAAn1D,GAAA,OAAA,KACA7X,KAAAqsE,gBAAA,EACArsE,KAAAouE,qBAEApuE,KAAAgtE,QAAAn1D,GAAA,QAAA,KACA7X,KAAAqsE,gBAAA,EACArsE,KAAA6uE,0BAGA,MAAAmD,EAAAhyE,KAAA4uE,cACAoD,EAAA57D,SAAA,mBACA47D,EAAA1/D,SAAA,aAIAtS,KAAAgtE,QAAAn1D,GAAA,QAAA,KACA7X,KAAAyX,UACA3L,OAAAgqD,SAAA,EAAA91D,KAAAyX,SACAzX,KAAAyX,QAAA,SAIAzX,KAAAgtE,SAGAiF,YAAA,WACA,OAAA,IAAAjpE,QAAA,CAAAC,EAAAC,KACAlJ,KAAA+sE,gBAAA,EACA/sE,KAAAkyE,yBAAA,GACA1oE,KAAA,KACAxJ,KAAAyX,QAAA3L,OAAA2L,QACAzX,KAAA8xE,aAAA9wE,OACAhB,KAAA+sE,gBAAA,EACA9jE,MAEAQ,MAAAP,MAIAgpE,wBAAA,SAAAC,GACA,OAAA,IAAAnpE,QAAA,CAAAC,EAAAC,KACA,GAAAlJ,KAAAyU,SAAAs5D,SAAA/tE,KAAAyU,SAAAk5D,WAaA1kE,QAbA,CACA,GACAkpE,GACAnyE,KAAA4tE,eAAA,KAAA/uE,MAAAkJ,GAAA0rD,aAAA1sD,KAAA,0BAGA,YADAkC,IAIAjJ,KAAAmuE,cACA3kE,KAAAP,GACAQ,MAAAP,OAOA0kE,cAAA,SAAAwE,GACA,IAAArrE,EAAAlI,MAAAkJ,GAAA0rD,aAAA/xC,YAaA,OAXA1hB,KAAAqyE,oBAEAtrE,EAAAA,EAAApI,QAAA,uBAAAqB,KAAAgtE,QAAAsF,QAAA5wD,cAGA0wD,IAAApyE,KAAAyU,SAAAu5D,qBAEAjnE,EAAAA,EAAApI,QAAA,gBAAA,IACAoI,EAAAA,EAAApI,QAAA,kBAAA,KAGAoI,GAGAu5B,UAAA,SAAAlP,GAEA,GAAApxB,KAAAyU,SAAAk5D,YAAA3tE,KAAAwsE,WAAA,IAAAxsE,KAAAqsE,iBAAArsE,KAAAyU,SAAAk6D,gBACA,OAGAhmD,aAAA3oB,KAAAoiC,SACApiC,KAAAoiC,QAAA,KAGA,MAAAr7B,EAAA/G,KAAA4tE,eAAA,GACA,GAAAx8C,GAAArqB,KAAA/G,KAAAssE,qBAAAztE,MAAAkJ,GAAA0rD,aAAA1sD,KAAA,2BAAA,CACA,MAAAioE,IAAAhvE,KAAAyU,SAAAs5D,SAAA/tE,KAAAyU,SAAAo5D,sBAAA7tE,KAAAyU,SAAAk5D,WACA3tE,KAAAuyE,UAAAxrE,EAAAioE,GACAvlE,MAAAkB,IACA6nE,QAAAC,KAAA,uBAAA9nE,OAKA0nE,gBAAA,WACA,OAAAryE,KAAAgtE,SAAAhtE,KAAAgtE,QAAA0F,UAGAvE,YAAA,WACA,OAAA,IAAAnlE,QAAA,CAAAC,EAAAC,KACAlJ,KAAAuyE,UAAAvyE,KAAA4tE,eAAA,IACApkE,KAAAP,GACAQ,MAAAP,MAQAqpE,UAAA,SAAAxrE,GACA,OAAA,IAAAiC,QAAA,CAAAC,EAAAC,KAEA,GAAAlJ,KAAA2sE,eAEA,YADAzjE,EAAA,iCAIA,GAAAlJ,KAAAysE,OAIA,YAHAzsE,KAAA0sE,MAAAhtE,KAAA,KACAM,KAAAsgC,cAKAtgC,KAAAssE,oBAAAvlE,EACA/G,KAAAysE,QAAA,EACAzsE,KAAAoS,OAAA,KACApS,KAAA6sE,WAAA,KACA7sE,KAAA8sE,UAAA,KACA9sE,KAAA4J,YAAAN,MAAAwW,YAAAC,SACA/f,KAAAuxE,WAAA16D,YAAA,UAEA7W,KAAA4uE,cACA71D,SAAA,QACA+I,IAAA,UAAA,IACAjL,YAAA,gDACAvE,SAAA,UAEAtS,KAAA8rE,cACA9rE,KAAA8rE,aAAAx5D,SAAA,UAIA,IAAAqgE,EAAA,GACAC,EAAA5yE,KAAA6yE,YAAA9rE,EAAA/G,KAAAyU,SAAAu5D,wBAIA1lE,EAJA,CAAAwqE,EAAAhzE,KACAA,EAAAQ,QACAqyE,EAAAjzE,KAAAgO,mBAAA5N,EAAA,GAAAoB,MAAA,KAAA,QAKAlB,KAAAyU,SAAAo5D,oBAAA7tE,KAAAyU,SAAAs5D,UACA6E,GAAA,kBAGA/zE,MAAAiK,kBAAA,OAAA9I,KAAAyU,SAAAk6D,gBAAA,CACA/kE,YAAA5J,KAAA4J,YAAArJ,MACAiH,QAAA,CACAurE,eAAA,qCAEAhsE,KAAA6rE,IACAppE,KAAAkB,IACA1K,KAAAgzE,oBAEAtoE,EAAA3D,KAAAqL,SACApS,KAAAoS,OAAA1H,EAAA3D,KAAAqL,OACApS,KAAAizE,kBACA/pE,EAAAwB,EAAA3D,KAAAqL,SAGA,MAAA86D,GAAAltE,KAAAyU,SAAAs5D,QAEAb,IACAltE,KAAAyU,SAAAo5D,oBAAA,EACA7tE,KAAAktE,yBAAA,GAGAxiE,EAAA3D,KAAA0U,OACAnd,EAAA,cAAAgF,KAAAoH,EAAA3D,KAAA0U,OAGA/Q,EAAA3D,KAAAmsE,WACA3sE,SAAAkV,MAAA/Q,EAAA3D,KAAAmsE,UAGAlzE,KAAAyU,SAAAo5D,mBACAX,GACAltE,KAAAwrE,eAAA34D,OACAvU,EAAA,UAAA,CACAgF,KAAA,MAAAzE,MAAAc,EAAA,MAAA,cAKAK,KAAAwrE,eAAAloE,KAAAoH,EAAA3D,KAAAosE,WACAnzE,KAAAyU,SAAA0+D,UAAAzoE,EAAA3D,KAAAosE,WAGA,IAAAC,EAAApzE,KAAAurE,aAAAxkE,KAAA,WAAA/G,KAAAurE,aAAAxkE,KAAA,WAAAghB,KAAA,KAqBA,GAlBA/nB,KAAAosE,aAEAgH,IACApzE,KAAAurE,aAAA10D,YAAA,YAAAvE,SAAA,WACA,IAAAzQ,QAAAqZ,QAAAlb,KAAAurE,cACA6H,EAAApzE,KAAAurE,aAAAxkE,KAAA,WAAAghB,KACAqrD,EAAAhgE,WAAAyD,YAAA,WAEA7W,KAAAosE,WAAArjB,QAAAxyC,IACA,MAAAwK,EAAAqyD,EAAAlrD,SAAAtM,OAAA,iBAAArF,MACAwK,EAAA1K,KAAA,WAAAQ,YAAA,YAAAvE,SAAA,WACAyO,EAAA6G,SAAA/Q,YAAA,UACAiE,QAAA,eAAAjE,YAAA,YAEAu8D,EAAAhgE,WAAAiD,KAAA,gBAAAQ,YAAA,UACA7W,KAAAosE,WAAA,MAGApsE,KAAAyU,SAAAo5D,oBACA,GAAAX,EAAA,CAEA5uE,EAAA,WAAA8P,KAAA,QAAApO,KAAAyU,SAAAy6D,oBAGAlvE,KAAAyU,SAAAs5D,QAAArjE,EAAA3D,KAAAgnE,QACA/tE,KAAAyU,SAAAk9D,QAAA,EACA3xE,KAAAitE,aAAA,KAEAmG,GAEAA,EAAAhgE,WAAAiD,KAAA,qBAAAxD,OACAvU,EAAA,SAAA,CACAkd,MAAA,gBACA3I,OACAvU,EAAA,OAAA,CACAgF,KAAAzE,MAAAc,EAAA,MAAA,oCAEAkT,OACAvU,EAAA,YAAA,CACAgY,GAAA,kBACAkF,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,uBAMAK,KAAA8tE,gCAEAsF,IACAA,EAAAlrD,SAAAtM,OAAA,QAAAvF,KAAA,eAAA/S,KAAAoH,EAAA3D,KAAAosE,WACAC,EAAAlrD,SAAAtM,OAAA,QAAAvF,KAAA,eAAA/S,KAAAoH,EAAA3D,KAAAssE,QACAx0E,MAAAc,EAAA,MAAA,iCAAA,CACA2zE,UAAA5oE,EAAA3D,KAAAusE,UACAD,QAAA3oE,EAAA3D,KAAAssE,UAEAx0E,MAAAc,EAAA,MAAA,oBAAA,CACA2zE,UAAA5oE,EAAA3D,KAAAusE,cAOA5oE,EAAA3D,KAAAumE,gBACAnmE,KAAAC,UAAAsD,EAAA3D,KAAAumE,kBAAAnmE,KAAAC,UAAApH,KAAAyU,SAAA64D,iBAEAttE,KAAAuzE,qBAAA7oE,EAAA3D,KAAAumE,gBAGAJ,GACAltE,KAAA0X,QAAA,0BAGA1X,KAAA6rE,gBACA7rE,KAAAwzE,kBAGA,IAAA,MAAAC,KAAA/oE,EAAA3D,KAAA6lE,mBACA6G,GAAAzzE,KAAAyU,SAAAg6D,UAAA/jE,EAAA3D,KAAA6lE,mBAAAntE,eAAAg0E,KACAzzE,KAAA4sE,mBAAA6G,GAAA/oE,EAAA3D,KAAA6lE,mBAAA6G,IAKA,MAAAC,EAAAhpE,EAAA3D,KAAA4sE,mBAAAvxE,IAAAgM,GAAA,UAAAA,eAAAA,QACAf,OAAAslE,EAAAvwE,IAAA8C,GAAA,UAAAA,QAEA0uE,EAAAt1E,EAAAo1E,EAAAjzE,KAAA,MAAAmxB,UAAAhW,OAAA,qCACA,IAAA,IAAAvc,EAAA,EAAAA,EAAAu0E,EAAAtzE,OAAAjB,IACAu0E,EAAAjhE,GAAAtT,GAAAugC,QACAthC,EAAA,SAAA,CACAkd,MAAA,wBACAC,MAAA5c,MAAAc,EAAA,MAAA,iCACA+b,aAAA7c,MAAAc,EAAA,MAAA,oCAKAK,KAAA6zE,YAAA9sE,GAEA/G,KAAAi/C,IACAj/C,KAAAi/C,GAAA60B,YAAA,CACA30D,MAAA,YACAqvD,YAAAxuE,KAAAyU,SAAAg6D,SACAV,QAAA/tE,KAAAyU,SAAAs5D,QACAF,mBAAA7tE,KAAAyU,SAAAo5D,qBAIA5kE,MACAQ,MAAAkB,IACA3K,KAAAgzE,oBAEAhzE,KAAAud,sBACAvd,KAAAoS,OAAA,GACAzH,GAAAA,EAAAD,WACA1K,KAAA6sE,WAAAliE,EAAAD,SAAAU,OACApL,KAAA8sE,UAAAniE,EAAAD,SAAA3D,KAAA4D,EAAAD,SAAA3D,KAAAY,MAAA,MAEA3H,KAAAizE,kBACA/pE,EAAAyB,IAGA3K,KAAAud,qBAAA,OAKAy1D,kBAAA,WACAhzE,KAAAuxE,WAAAj/D,SAAA,UACAtS,KAAA8rE,cACA9rE,KAAA8rE,aAAAj1D,YAAA,UAEA7W,KAAAysE,QAAA,GAGAwG,gBAAA,WACAjzE,KAAA4uE,cACA71D,SAAA,QACA+I,IAAA,UAAA,IACAjL,YAAA,yBACAvE,SAAA,cACAlE,KAAA,QAAApO,KAAAsxE,qBAQAuB,YAAA,SAAA9rE,EAAAgtE,GAmBA,OAjBAhtE,EAAAlI,MAAAyN,cAAAzN,MAAAkJ,GAAA0rD,aAAA1sD,KAAA,0BAAAA,EAAAlI,MAAA4N,WAAAsnE,GAGAhtE,EAAA/G,KAAAg0E,yBAAAjtE,GAGA/G,KAAAyU,SAAAs5D,UACAhnE,GAAA,YAAA/G,KAAAyU,SAAAs5D,QACA/tE,KAAAyU,SAAAo5D,qBACA9mE,GAAA,mBAIA,OAAA/G,KAAAyU,SAAA0+D,YACApsE,GAAA,cAAA/G,KAAAyU,SAAA0+D,WAGApsE,GAOAitE,yBAAA,SAAAjtE,GACA,MAAAktE,EAAAxrE,OAAAC,KAAA1I,KAAA4sE,oBAAAnsE,KAAA,KACA,GAAA,KAAAwzE,EACA,OAAAltE,EAEA,MAAA62C,EAAAl6C,mBAAA,KACAm6C,EAAAn6C,mBAAA,KAEA,KACAqD,KACAA,EAAAA,EAEApI,QAAA,IAAAwF,OAAA,WAAAy5C,SAAAC,IAAAD,MAAAq2B,MAAAp2B,KAAA,KAAA,CAAA9vC,EAAAmmE,EAAA59D,EAAA69D,IACAD,EAAAl0E,KAAA4sE,mBAAAt2D,GAAA69D,GAGAx1E,QAAA,IAAAwF,OAAA,WAAAy5C,YAAAq2B,QAAA,KAAA,CAAAlmE,EAAAmmE,EAAA59D,IACA49D,EAAAl0E,KAAA4sE,mBAAAt2D,OAMA,OAAAvP,GAGAwsE,qBAAA,SAAAjG,GACAA,EAAAvkB,QAAAqrB,IACA,MAAAx5D,EAAA5a,KAAAyU,SAAA64D,eAAAj3D,KAAA1W,GAAAA,EAAA6W,QAAA49D,EAAA59D,OACAoE,IACAA,EAAAvV,IAAA+uE,EAAA/uE,QAKAwuE,YAAA,SAAA9sE,GACAlI,MAAAkJ,GAAA0rD,aAAA1sD,KAAA,yBAAAA,GACAlI,MAAA6N,mBAAA,GAEA,MAAAslE,EAAAhyE,KAAA4uE,cACA71D,SAAA,QACA+I,IAAA,UAAA,IACAjL,YAAA,UACAvE,SAAA,kBACAlE,KAAA,QAAApO,KAAAqxE,uBAEAxyE,MAAAsuE,gBAEA6E,EACAj5D,SAAA,QACAA,SAAA,CACAmlB,QAAA,GACA,CACAo3B,MAAA,IACAz8C,SAAA,KACAm5D,EAAA1/D,SAAA,aAKAtS,KAAA0X,QAAA,UAEA1X,KAAAq0E,eAGAA,YAAA,WACAr0E,KAAA0sE,MAAApsE,QACAN,KAAA0sE,MAAAzpE,OAAAjD,IAIAs0E,YAAA,WACAt0E,KAAA4rE,QAIA5rE,KAAA4rE,QAAA5zC,QAHAh4B,KAAAu0E,gBACAv0E,KAAAw0E,iBAKA3yE,QAAA8f,iBAAA,IACA3hB,KAAA6rE,eAAAn0D,QAAA,UAIA68D,cAAA,WACA,MAAAE,EAAAn2E,EAAA,UAGAo2E,EAAAp2E,EAAA,mEAAAO,MAAAc,EAAA,MAAA,cAAA,wBAAA6O,SAAAimE,GACAE,EAAAr2E,EAAA,wBAAAkQ,SAAAkmE,GACA10E,KAAA6rE,eAAAvtE,EAAA,+DAAAkQ,SAAAmmE,GAAApwE,IAAAvE,KAAAyU,SAAA0+D,WAGA,MAAAt2D,EAAAve,EAAA,8CAAAkQ,SAAAimE,GAEAn2E,EAAA,iCAAAkQ,SAAAqO,GACA7c,KAAA8rE,aAAAxtE,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,sBACAlY,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAAqO,GAEA7c,KAAA4rE,QAAA,IAAA/pE,QAAA+1B,IAAA53B,KAAA2rE,aAAA8I,EAAA,CACApJ,SAAArrE,KAAA40E,SAAA3sD,KAAAjoB,QAGAA,KAAA6d,YAAA7d,KAAA6rE,eAAA,QAAA,mBAEA7rE,KAAA4rE,QAAA/zD,GAAA,OAAA7X,KAAAw0E,cAAAvsD,KAAAjoB,OACAA,KAAA4rE,QAAA/zD,GAAA,OAAA7X,KAAA60E,cAAA5sD,KAAAjoB,OACAA,KAAA4rE,QAAA/zD,GAAA,SAAA7X,KAAA80E,gBAAA7sD,KAAAjoB,QAGAw0E,cAAA,WACAx0E,KAAA2rE,aAAAr5D,SAAA,WAGAuiE,cAAA,WACA70E,KAAA2rE,aAAA90D,YAAA,WAGAi+D,gBAAA,WACA90E,KAAA6rE,eAAAtnE,IAAAvE,KAAAyU,SAAA0+D,YAGAK,gBAAA,WACA,OACAxzE,KAAA6rE,eAAAtnE,OACAvE,KAAA6rE,eAAAtnE,QAAAvE,KAAAyU,SAAA0+D,WAEAnzE,KAAA8rE,aAAAj1D,YAAA,aACA,IAGA7W,KAAA8rE,aAAAx5D,SAAA,aACA,IAGAyiE,aAAA,WACAlzE,QAAAqhB,MAAAljB,KAAA4rE,QAAArzC,OAGAq8C,SAAA,WACA50E,KAAAwzE,mBAKAxzE,KAAAyU,SAAA0+D,UAAAnzE,KAAA6rE,eAAAtnE,MAEAvE,KAAA4rE,QAAA/jD,OACA7nB,KAAAsgC,WAAA,IAPAtgC,KAAA+0E,gBAUAC,iBAAA,SAAAl9D,GAIA,GAHAA,EAAAK,iBAGAnY,KAAA2sE,eACA,OAKA,GACA3sE,KAAAyU,SAAAs5D,UACA/tE,KAAAyU,SAAAu5D,qBACAhuE,KAAAyU,SAAAo5D,0BACA,IAAA/1D,EAAAm9D,UAAAn9D,EAAAm9D,YACAn9D,EAAAg/C,cAAAh/C,EAAAiD,eAAAjD,EAAAiD,cAAAhU,KAAA,YAAA/G,KAAAyU,SAAAk6D,iBAGA,YADA3uE,KAAAsgC,WAAA,GAKAzhC,MAAAkJ,GAAAisD,oBAAAn1D,MAAAkJ,GAAAisD,oBAAAr/B,IAAA91B,MAAAkJ,GAAA0rD,cAGAzzD,KAAA4J,cACA5J,KAAAud,qBAAA,EACAvd,KAAA4J,YAAAiW,UAIA,MAAA9Y,EAAA/G,KAAA6yE,YAAA7yE,KAAA4tE,eAAA,IACAz/D,EAAAtP,MAAAqP,WAAAnH,GAEAoH,EAAAK,SAAA3M,QAAAqR,MACA/E,EAAAqoD,SACAx2D,KAAA2sE,gBAAA,IAEA,CACAlvD,SAAA,CACArJ,YAAA,KACAq6D,SAAA,KACAl4D,OAAA,KACAy3D,oBAAA,EACA6C,SAAA,EACAd,gBAAA,EACA4B,QAAA,EACA9D,oBAAA,EACAT,aAAA,KACA8C,UAAA,GACAvtD,UAAA,KACAorD,QAAA,KACAJ,WAAA,KACAwF,UAAA,KACA9F,sBAAA,EACAa,iBAAA,EACAS,gBAAA,KACAG,kBAAA,KACAI,mBAAA,KACAH,gBAAA,KACAmG,4BAAA,KACA3H,eAAA,EACAD,eAAA,GACAsE,UAAA,QC1pCA/yE,MAAAs2E,iBAAAt2E,MAAAqjC,mBAAAtjC,OAAA,CACAoI,SAAA1I,EAAAqlB,KAEAnG,KAAA,SAAAuC,EAAArC,EAAA1W,GACAhH,KAAAgH,SAAAA,EACAhH,KAAAqjB,KAAAtD,EAAArC,IAGAqlB,oBAAA,SAAAF,GACA,OAAA7iC,KAAAgH,SAAA67B,MCTAhkC,MAAAu2E,cAAAvzE,QAAAoa,KAAArd,OAAA,CACAglB,aAAA,EAEAtN,GAAA,KACA++D,SAAA,KACAhW,QAAA,KACAx6B,OAAA,KACAywC,WAAA,EAEAvwC,OAAA,KACAnE,OAAA,KACA20C,WAAA,KAEAC,SAAA,EACAC,YAAA,EACAC,YAAA,EAEAC,gBAAA,KAEAn4D,KAAA,SAAAlH,EAAA++D,EAAAhW,EAAA5qD,GA+BA,GA9BAzU,KAAAsW,GAAAA,EACAtW,KAAAq1E,SAAAA,EACAr1E,KAAAq/D,QAAAA,EACAr/D,KAAAqa,YAAA5F,EAAA5V,MAAAu2E,cAAA33D,UACAzd,KAAA21E,gBAAA,GAEA31E,KAAA+kC,OAAAzmC,EAAA,IAAAgY,GACAtW,KAAA4gC,OAAA5gC,KAAA+kC,OAAAxpB,SAAA,SACAvb,KAAAw1E,SAAAx1E,KAAA4gC,OAAAvqB,KAAA,MAAA/V,OAGAN,KAAA+kC,OAAAh+B,KAAA,oBACAlF,QAAA2hC,IAAA,wDACAxjC,KAAA+kC,OAAAh+B,KAAA,kBAAA0X,WAGAze,KAAA+kC,OAAAh+B,KAAA,iBAAA/G,MAEAA,KAAA6kC,OAAA,IAAAhmC,MAAAwmC,gBAAArlC,KAAA+kC,OAAA,CACAqlC,YAAA,0BACAwL,gCAAA,IAGA51E,KAAA61E,YACA71E,KAAA81E,aAGAltD,WAAA5oB,KAAA+1E,oBAAA9tD,KAAAjoB,MAAA,KAGAA,KAAAyU,SAAAuhE,SAAAh2E,KAAAw1E,SAAAx1E,KAAAyU,SAAAuhE,QACA,IAAA,IAAA32E,EAAAW,KAAAw1E,SAAAn2E,EAAAW,KAAAyU,SAAAuhE,QAAA32E,IACAW,KAAAwlC,UAKAqwC,UAAA,WACA,OAAA71E,KAAA+kC,OAAAnd,SAAAqG,SAAA,GAGA6nD,WAAA,WACA,GAAA91E,KAAA4jB,YACA,OAAA,EAGA5jB,KAAA4jB,aAAA,EACA5jB,KAAAsrB,eAAAzpB,QAAAsf,KAAA,UAIA,IAFA,IAAA4oD,EAAA/pE,KAAA4gC,OAAArlB,WAEAlc,EAAA,EAAAA,EAAA0qE,EAAAzpE,OAAAjB,IACAW,KAAAi2E,aAAAlM,EAAA1qE,IAMA,OAHAW,KAAAu1E,WAAAv1E,KAAA+kC,OAAA/pB,KAAA,QACAhb,KAAAk2E,qBACAl2E,KAAA6d,YAAA7d,KAAAu1E,WAAA,WAAA,WACA,GAEAQ,oBAAA,WACA/1E,KAAAsrB,eAAAzpB,QAAAsf,KAAA,UAEAnhB,KAAA61E,YACA71E,KAAA81E,aAEA91E,KAAA6d,YAAAhc,QAAAsf,KAAA,SAAA,wBAGA+0D,mBAAA,WACAl2E,KAAAm2E,aAIAn2E,KAAAu1E,WAAAzzD,IAAA,UAAA,KACA9hB,KAAAu1E,WAAAzzD,IAAA,iBAAA,UAJA9hB,KAAAu1E,WAAAzzD,IAAA,UAAA,OACA9hB,KAAAu1E,WAAAzzD,IAAA,iBAAA,UAMAs0D,aAAA,WACA,OAAAp2E,KAAAw1E,SAAAx1E,KAAAyU,SAAAuhE,SAEAK,UAAA,SAAA5wC,GACAzlC,KAAAo2E,iBAIAp2E,KAAA6kC,OAAAxZ,YAAAoa,EAAA6wC,KACA7wC,EAAA6wC,IAAA36D,SAEA3b,KAAAw1E,WAEAx1E,KAAAk2E,qBACA,IAAAl2E,KAAAw1E,UACAx1E,KAAA+kC,OAAAzyB,SAAA,UAIAtS,KAAAyU,SAAA8hE,YAAA9wC,EAAA6wC,KAEA7wC,EAAAhnB,YAEA03D,UAAA,WACA,OAAAn2E,KAAAyU,SAAA+hE,cAIAx2E,KAAAyU,SAAAgiE,SACAz2E,KAAAw1E,SAAAx1E,KAAAyU,SAAAgiE,UAKAjxC,OAAA,SAAAltB,EAAAsnB,GACA,GAAA5/B,KAAAm2E,YAAA,CAIA,IAAAO,EAAA12E,KAAAyU,SAAAkiE,aAAA32E,KAAAs1E,UAAA,GACAgB,EAAAt2E,KAAA42E,UAAAF,EAAA12E,KAAAq/D,QAAAr/D,KAAAq1E,SAAA/2E,EAAAM,OAAA,GAAAoB,KAAAyU,SAAAoiE,gBAEAj3C,EACA02C,EAAAzqD,UAAA7rB,KAAA4gC,QAEA01C,EAAA9nE,SAAAxO,KAAA4gC,QAGA,IAAA6E,EAAAzlC,KAAAi2E,aAAAK,GAeA,OAdAt2E,KAAA6kC,OAAAha,SAAAyrD,IAGA,IAAAh+D,GACAg+D,EAAAjgE,KAAA,iDAAAkC,QAAAb,QAAA,SAGA1X,KAAAw1E,WACAx1E,KAAAk2E,qBACAl2E,KAAA+kC,OAAAluB,YAAA,UAGA7W,KAAAyU,SAAAqiE,SAAAR,GAEA7wC,IAGAmxC,UAAA,SAAAF,EAAArX,EAAAgW,EAAA9mE,GACA,OAAA1P,MAAAu2E,cAAAwB,UAAAF,EAAArX,EAAAgW,EAAA9mE,IAGA0nE,aAAA,SAAAK,GACA,OAAA,IAAAz3E,MAAAu2E,cAAA2B,IAAA/2E,KAAAs2E,IAGAU,eAAA,SAAAV,EAAAW,EAAAC,GACA,IACAC,EADAC,EAAAd,EAAAliD,KAAA,MAUA,IANA+iD,EADAC,EAAA92E,OACA82E,EAAArwE,KAAA,sBAEA/G,KAAAwlC,QAAA,GAAA,KAQA2xC,EAAAE,KAAAJ,GAIA,GAAA34E,EAAA64E,EAAAE,KAAAJ,IAAA7gE,SAAA,YACAghE,GACAp3E,KAAAg3E,eAAAI,EAAAH,EAAAC,OAFA,CAOA,IAAA5yE,EAAAhG,EAAA,sBAAA64E,EAAAE,KAAAJ,IACA3yE,EAAAhE,SACAhC,EAAA44E,GAAAx/D,QAAA,QACApT,EAAAoT,QAAA,YAIA4/D,eAAA,SAAAhB,EAAAW,EAAAC,GACA,IACAK,EADAC,EAAAlB,EAAAt7D,KAAA,MAUA,IANAu8D,EADAC,EAAAl3E,OACAk3E,EAAAzwE,KAAA,sBAEA/G,KAAAwlC,QAAA,KAQA+xC,EAAAF,KAAAJ,GAIA,GAAA34E,EAAAi5E,EAAAF,KAAAJ,IAAA7gE,SAAA,YACAohE,GACAx3E,KAAAs3E,eAAAE,EAAAP,EAAAC,OAFA,CAOA,IAAA5yE,EAAAhG,EAAA,sBAAAi5E,EAAAF,KAAAJ,IACA3yE,EAAAhE,SACAhC,EAAA44E,GAAAx/D,QAAA,QACApT,EAAAoT,QAAA,YAIA+/D,WAAA,SAAA1wE,EAAA0+B,EAAAwxC,GACA,IAAAS,EAAA3wE,EAAA7F,MAAA,YACA,IAAA,IAAA7B,EAAA,EAAAA,EAAAq4E,EAAAp3E,OAAAjB,IAAA,CACA,IAAAkP,EAAAmpE,EAAAr4E,GAAA6B,MAAA,MACA,IAAA,IAAAu5D,EAAA,EAAAA,EAAAlsD,EAAAjO,OAAAm6D,IAAA,CACA,IAAAt1D,EAAAoJ,EAAAksD,GACAh1B,EAAA4xC,KAAA1kE,GAAAskE,EAAAxc,GAAApkD,KAAA,gCACA9R,IAAAY,GACAuS,QAAA,SAIA,IAAA8/D,EAAA/xC,EAAA6wC,IAAAt7D,KAAA,MAEAyqB,EADA+xC,EAAAl3E,OACAk3E,EAAAzwE,KAAA,sBAEA/G,KAAAwlC,QAAA,MAIA,CACAmyC,gBAAA,CAAA,QAAA,OAAA,QAAA,YAAA,SAAA,aAAA,WAAA,OAAA,OACAl6D,SAAA,CACAk5D,YAAA,GACAE,cAAA,GACAL,YAAA,EACAR,QAAA,KACAS,QAAA,KACAK,SAAAx4E,EAAAqlB,KACA4yD,YAAAj4E,EAAAqlB,MAGAizD,UAAA,SAAAF,EAAArX,EAAAgW,EAAA9mE,GACA,IAAA+nE,EAAAh4E,EAAA,QAAA,CACAs5E,UAAAlB,IAGA,IAAA,IAAAmB,KAAAxY,EACA,GAAAA,EAAA5/D,eAAAo4E,GAAA,CAIA,IAEAC,EAFAC,EAAA1Y,EAAAwY,GACA1yE,OAAA,IAAAoJ,EAAAspE,GAAAtpE,EAAAspE,GAAA,GAGA,GAAA,YAAAE,EAAAz2E,KACAw2E,EAAAx5E,EAAA,QAAA,CACA05E,MAAA,MACAx8D,MAAAu8D,EAAA,MACAr5E,KAAAyG,QAEA,CACA,IAAAD,EAAAmwE,EAAA,IAAAqB,EAAA,KAAAmB,EAAA,IAeA,OAbAC,EAAAx5E,EAAA,QAAA,CACAkd,MAAA,GAAAu8D,EAAAv8D,SAAAu8D,EAAAz2E,YACAs3B,MAAAm/C,EAAAn/C,QAGA/5B,MAAAsO,QAAA4qE,EAAAz2E,KAAAzC,MAAAu2E,cAAAuC,kBACAG,EAAAxlE,SAAA,WAGAylE,EAAAE,MACAH,EAAAxlE,SAAA,QAGAylE,EAAAz2E,MACA,IAAA,WACAhD,EAAA,mCACAuU,OAAAhU,MAAAs4B,GAAAoyC,eAAA,CACArkE,KAAAA,EACAC,MAAA4yE,EAAA5yE,OAAA,IACA+jD,UAAA/jD,KAGAqJ,SAAAspE,GACA,MAEA,IAAA,QACAj5E,MAAAs4B,GAAA4uC,iBAAA,CACA7gE,KAAAA,EACAC,MAAAA,EACA+yE,OAAA,IACA1pE,SAAAspE,GACA,MAEA,IAAA,OACAj5E,MAAAs4B,GAAAghD,gBAAA,CACAjzE,KAAAA,EACAC,MAAAA,IACAqJ,SAAAspE,GACA,MAEA,IAAA,cACAj5E,MAAAs4B,GAAAihD,kBAAA,CACAlzE,KAAAA,EACAC,MAAA4yE,EAAA5yE,OAAA,IACA0S,KAAA1S,EACA+yE,OAAA,IACA1pE,SAAAspE,GACA,MAEA,IAAA,SACAj5E,MAAAs4B,GAAA85C,aAAA,CACA/rE,KAAAA,EACA+B,QAAA8wE,EAAA9wE,QACA9B,MAAAA,GAAA,WACA,IAAA,IAAAlG,KAAA84E,EAAA9wE,QACA,GAAA8wE,EAAA9wE,QAAAxH,eAAAR,IAAA84E,EAAA9wE,QAAAhI,GAAAo5E,QACA,YAAA,IAAAN,EAAA9wE,QAAAhI,GAAAkG,MAAA4yE,EAAA9wE,QAAAhI,GAAAkG,MAAAlG,EAGA,OAAA,KANA,GAQAuc,MAAA,UACAhN,SAAAspE,GACA,MAEA,IAAA,OACAj5E,MAAAs4B,GAAAmhD,gBAAA,CACApzE,KAAAA,EACAC,MAAAA,IACAqJ,SAAAspE,GACA,MAEA,IAAA,QACA,IAAA,MACAj5E,MAAAs4B,GAAAohD,gBAAA,CACArzE,KAAAA,EACAC,MAAAA,EACA7D,KAAAy2E,EAAAz2E,KACAo2B,YAAAqgD,EAAArgD,aAAA,OACAlpB,SAAAspE,GACA,MAEA,QACAx5E,EAAA,cAAA,CACA4G,KAAAA,EACAo6D,KAAAyY,EAAAzY,MAAA,EACA/6D,IAAAY,EACAuyB,YAAAqgD,EAAArgD,cACAlpB,SAAAspE,IAIAA,EAAAtpE,SAAA8nE,GAqBA,OAlBAh4E,EAAA,QAAA,CACAkd,MAAA,gBACA3I,OACAvU,EAAA,OAAA,CACAkd,MAAA,YACAC,MAAA5c,MAAAc,EAAA,MAAA,cAEA6O,SAAA8nE,GAEAh4E,EAAA,QAAA,CACAkd,MAAA,gBACA3I,OACAvU,EAAA,OAAA,CACAkd,MAAA,cACAC,MAAA5c,MAAAc,EAAA,MAAA,aAEA6O,SAAA8nE,GAEAA,KAOAz3E,MAAAu2E,cAAA2B,IAAAl1E,QAAAoa,KAAArd,OAAA,CACAkrE,MAAA,KACAxzD,GAAA,KACAkiE,UAAA,KAEAlC,IAAA,KACAe,KAAA,KACAoB,IAAA,KACAC,WAAA,KACA9yC,WAAA,KAEApoB,KAAA,SAAAssD,EAAA6O,GACA34E,KAAA8pE,MAAAA,EACA9pE,KAAAs2E,IAAAh4E,EAAAq6E,GACA34E,KAAAq3E,KAAAr3E,KAAAs2E,IAAA/6D,WACAvb,KAAAy4E,IAAA,GACAz4E,KAAAsW,GAAAtW,KAAAs2E,IAAAloE,KAAA,WAEApO,KAAAs2E,IAAAvvE,KAAA,qBAAA/G,MAGA,IAAAsW,EAAAnU,SAAAnC,KAAAsW,GAAA5U,OAAA1B,KAAA8pE,MAAAr1D,SAAAkiE,YAAAr2E,SAEAgW,EAAAtW,KAAA8pE,MAAAwL,YACAt1E,KAAA8pE,MAAAwL,UAAAh/D,GAGAtW,KAAA04E,WAAAp6E,IACA0B,KAAAw4E,UAAA,GACA,IAGAX,EAAAE,EAAAa,EAAAC,EAAAC,EAHAC,EAAA,GAEA15E,EAAA,EAGA,IAAAw4E,KAAA73E,KAAA8pE,MAAAzK,QACAr/D,KAAA8pE,MAAAzK,QAAA5/D,eAAAo4E,KAIAE,EAAA/3E,KAAA8pE,MAAAzK,QAAAwY,GACAe,EAAA54E,KAAAy4E,IAAAZ,GAAA73E,KAAAq3E,KAAAh4E,GAEAR,MAAAsO,QAAA4qE,EAAAz2E,KAAAzC,MAAAu2E,cAAAuC,kBACAkB,EAAAv6E,EAAA,WAAAs6E,GACA54E,KAAA04E,WAAA14E,KAAA04E,WAAAx6D,IAAA26D,GAEA74E,KAAA6d,YAAAg7D,EAAA,QAAA,mBACA74E,KAAA6d,YAAAg7D,EAAA,YAAA,2BAEA74E,KAAAw4E,UAAA94E,KAAA,IAAAmC,QAAA6Y,SAAAm+D,EAAA,CACAG,eAAAh5E,KAAAi5E,uBAAAhxD,KAAAjoB,SAGAA,KAAA6d,YAAAg7D,EAAA,WAAA,CAAA5B,QAAA53E,EAAAiC,KAAAy2E,EAAAz2E,MAAA,kBACAtB,KAAA6d,YAAAg7D,EAAA,QAAA,CAAAv3E,KAAAy2E,EAAAz2E,MAAA,iBACAu3E,EAAAnhE,QAAA,SAEA,cAAAqgE,EAAAz2E,MACAtB,KAAA6d,YAAAg7D,EAAA,QAAA,CAAA5B,QAAA53E,EAAAiC,KAAAy2E,EAAAz2E,MAAA,eAGAy3E,EAAAlB,GAAAgB,GACA,aAAAd,EAAAz2E,OACAw3E,EAAAx6E,EAAA,yBAAAs6E,GAEAb,EAAAmB,iBACA,IAAAl5E,KAAA8pE,MAAA6L,gBAAAkC,KACA73E,KAAA8pE,MAAA6L,gBAAAkC,GAAA,IAEA73E,KAAA8pE,MAAA6L,gBAAAkC,GAAAn4E,KAAAo5E,EAAA,IACA94E,KAAA6d,YAAAi7D,EAAA,SAAA,CAAAjB,MAAAA,GAAA,0BAGAE,EAAAoB,QACAn5E,KAAA6d,YAAAi7D,EAAA,SAAA,CAAAjB,MAAAA,IAAA,SAAA//D,GACA9X,KAAAo5E,oBAAAthE,EAAA/Q,KAAA8wE,WAKAv5E,EAAAs6E,GAAAxiE,SAAA,aACApW,KAAA6d,YAAA+6D,EAAA,QAAA,CAAAA,GAAAA,IAAA,SAAA9gE,GACAA,EAAA4F,SAAA5F,EAAA/Q,KAAA6xE,IACAt6E,EAAAwZ,EAAA/Q,KAAA6xE,IAAAviE,KAAA,sCAAAiC,WAKAjZ,KAOA,IAAAw4E,KAHA73E,KAAAi5E,yBAGAj5E,KAAA8pE,MAAAzK,QACAr/D,KAAA8pE,MAAAzK,QAAA5/D,eAAAo4E,IAIA,cADAE,EAAA/3E,KAAA8pE,MAAAzK,QAAAwY,IACAv2E,MAAAy2E,EAAAoB,QACAn5E,KAAAo5E,oBAAAvB,GAKA,IAAAA,KAAA73E,KAAA8pE,MAAAzK,QACAr/D,KAAA8pE,MAAAzK,QAAA5/D,eAAAo4E,KAIAE,EAAA/3E,KAAA8pE,MAAAzK,QAAAwY,IAEAwB,mBAAA,IAAAN,EAAAhB,EAAAsB,gBAAAN,EAAAlB,GAAAtzE,OACA,IAAA1F,MAAAy6E,gBAAAP,EAAAlB,GAAAkB,EAAAhB,EAAAsB,cAAA,CACAE,oBAAA,IAKA,IAAA3zC,EAAA5lC,KAAAs2E,IAAA/6D,WAAAlD,OAAAhC,KAAA,WACArW,KAAA6d,YAAA+nB,EAAA,QAAA,aAEA,IAAAxqB,EAAApb,KAAAs2E,IAAAjgE,KAAA,sCACArW,KAAA6d,YAAAzC,EAAA,SAAA,SAAAtD,GACAxZ,EAAAwZ,EAAA8C,eAAAE,QAAA,qBAAAxI,SAAA,YAEAtS,KAAA6d,YAAAzC,EAAA,QAAA,SAAAtD,GACAxZ,EAAAwZ,EAAA8C,eAAAE,QAAA,MAAAjE,YAAA,aAIA2iE,gBAAA,SAAA1hE,GACA9X,KAAAi5E,yBAEA,IAAAJ,EAAAv6E,EAAAwZ,EAAA8C,eAEAi+D,EAAA9xE,KAAA,mBACA8xE,EAAA9xE,KAAA,mBAAA,GAIA6hB,YAAA,WACA/pB,MAAAuF,gBAAAy0E,KACA,IAGAY,sBAAA,SAAA3hE,GACA,GAAAA,EAAA8C,cAAAsuC,QACA,IAAA,IAAA7pD,EAAA,EAAAA,EAAAW,KAAA8pE,MAAA6L,gBAAA79D,EAAA/Q,KAAA8wE,OAAAv3E,OAAAjB,IAAA,CACA,IAAAq6E,EAAA15E,KAAA8pE,MAAA6L,gBAAA79D,EAAA/Q,KAAA8wE,OAAAx4E,GACAq6E,EAAAxwB,QAAAwwB,IAAA5hE,EAAA8C,gBAKAw+D,oBAAA,SAAAO,GAIA,IAHA,IAEA9B,EAAA+B,EAFAC,EAAA75E,KAAA8pE,MAAAzK,QAAAsa,GACAzwB,EAAA5qD,EAAA,yBAAA0B,KAAAy4E,IAAAkB,IAAAv/C,KAAA,WAEA/6B,EAAA,EAAAA,EAAAw6E,EAAAV,OAAA74E,OAAAjB,IACAw4E,EAAAgC,EAAAV,OAAA95E,GACAW,KAAA8pE,MAAAgQ,OACAF,EAAA,MAAA/B,EAAA,MAEAA,EAAAA,EAAAn2E,OAAA,IAEAwnD,IAAA0wB,IAAA1wB,GAAA0wB,EACAt7E,EAAA0B,KAAAy4E,IAAAZ,IACAhhE,YAAA,YACAR,KAAA,mBAAA+jB,KAAA,YAAA,GAEA97B,EAAA0B,KAAAy4E,IAAAZ,IACAvlE,SAAA,YACA+D,KAAA,mBAAA+jB,KAAA,YAAA,IAKA2/C,wBAAA,SAAAjiE,GACAxZ,EAAAyI,KAAA+Q,EAAA8C,cAAA,mBAAA,IAGAo/D,eAAA,SAAAliE,GACA,IAAAC,EAAAD,EAAAC,QAAAD,EAAAC,QAAAD,EAAAmiE,SACAp7D,EAAAhd,QAAAq4E,iBAAApiE,GAGA,GAAAC,IAAAlW,QAAAinB,aAAA,cAAAhR,EAAA/Q,KAAAzF,MAAAud,GAOA,OANA/G,EAAAK,sBACAL,EAAAI,SACAlY,KAAA8pE,MAAAkN,eAAAh3E,KAAAs2E,IAAAx+D,EAAA/Q,KAAAkwE,QAAAn/D,EAAA8C,eAEA5a,KAAA8pE,MAAAwN,eAAAt3E,KAAAs2E,IAAAx+D,EAAA/Q,KAAAkwE,QAAAn/D,EAAA8C,gBAMA,WAAA9C,EAAA/Q,KAAAzF,MAAAud,GAAAhgB,MAAAsO,QAAA4K,EAAAlZ,MAAAu2E,cAAA2B,IAAAoD,kBACAriE,EAAAK,kBAIAiiE,YAAA,SAAAtiE,GACA,IAAA/Q,EAAAlI,MAAAuC,KAAA0W,EAAA8+C,cAAAyjB,cAAAC,QAAA,QAAA,SACAvzE,EAAArB,MAAA,cAGAoS,EAAAK,iBACAnY,KAAA8pE,MAAA2N,WAAA1wE,EAAA/G,KAAA8X,EAAA/Q,KAAAkwE,WAGAsD,cAAA,SAAAziE,GACA,GAAA,cAAAA,EAAA/Q,KAAAzF,KAAA,CAIA,IAAAk5E,EAEA,GAAA,WAAA1iE,EAAA/Q,KAAAzF,KAAA,CAEA,IAAAoE,EAAAoS,EAAA8C,cAAAzV,MAAAO,MAAA,oBAGA80E,EADA,OAAA90E,EACAA,EAAA,GAEA,QAIA80E,EAAA1iE,EAAA8C,cAAAzV,MAAAxG,QAAA,UAAA,IAGA67E,IAAA1iE,EAAA8C,cAAAzV,QACA2S,EAAA8C,cAAAzV,MAAAq1E,KAIAvB,uBAAA,WAIA,IAFA,IAAAwB,GAAA,EAEAp7E,EAAA,EAAAA,EAAAW,KAAAw4E,UAAAl4E,OAAAjB,IACAW,KAAAw4E,UAAAn5E,GAAA4uB,OAAAwsD,IACAA,EAAAz6E,KAAAw4E,UAAAn5E,GAAA4uB,QAIAjuB,KAAA04E,WAAA52D,IAAA,aAAA24D,GAGA,IAAAC,EAAA16E,KAAA04E,WAAA98D,OAAA,YAAArD,QAAAqP,SAAAqG,SAEAysD,EAAAD,GACAz6E,KAAA04E,WAAA52D,IAAA,aAAA44D,IAIArE,UAAA,WACAr2E,KAAA8pE,MAAAuM,UAAAr2E,QAEA,CACAm6E,gBAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MCpqBAt7E,MAAA87E,qBAAA94E,QAAAoa,KAAArd,OAAA,CACAg8E,UAAA,KACAC,YAAA,KACAC,SAAA,KACA7nD,eAAA,KACA8nD,gBAAA,EAEAv9D,KAAA,SAAA/I,GACAzU,KAAAqa,YAAA5F,EAAA5V,MAAA87E,qBAAAl9D,UAEAzd,KAAA86E,SAAAx8E,EAAA,IAAAmW,EAAAnT,KAAA3C,QAAA,aAAA,KAAA,kBAGAqB,KAAAyU,SAAAumE,WAEAh7E,KAAA86E,SAAA/zE,KAAA,kBAAA,GAGA,SAAA/G,KAAA86E,SAAA1gD,KAAA,YACAp6B,KAAA6d,YAAA7d,KAAA86E,SAAA,SAAA,2BAEA96E,KAAA6d,YAAA7d,KAAA86E,SAAA,QAAA,4BAIA96E,KAAAi7E,gBACAp8E,MAAA6kB,aAAA7L,GAAA,kBAAA7X,KAAAi7E,cAAAhzD,KAAAjoB,QAGAi7E,cAAA,WAEA,IAAAp8E,MAAA6kB,aAAA0L,sBAAA9uB,SAIAN,KAAAk7E,oBACAl7E,KAAAm7E,gBAEAn7E,KAAAo7E,mBASAF,kBAAA,WACA,IAAAG,GAAA,EASA,OARAr7E,KAAAizB,eAAAp0B,MAAA6kB,aAAA0L,uBAEApvB,KAAAyU,SAAA6mE,OAAAt7E,KAAAizB,eAAA3yB,OAAA,EACA+6E,GAAA,EACA,mBAAAr7E,KAAAyU,SAAAymE,oBACAG,EAAAr7E,KAAAyU,SAAAymE,kBAAAl7E,KAAAizB,iBAGAooD,GAGAF,cAAA,WACAn7E,KAAA+6E,iBAIA/6E,KAAA86E,SAAAjkE,YAAA,YACA7W,KAAA+6E,gBAAA,IAGAK,eAAA,WACAp7E,KAAA+6E,iBAIA/6E,KAAA86E,SAAAxoE,SAAA,YACAtS,KAAA+6E,gBAAA,IAGAQ,wBAAA,SAAAzjE,GACAA,EAAAK,iBACAL,EAAAM,kBAEApY,KAAA+6E,gBACA/6E,KAAAyU,SAAAumE,SAAAh7E,KAAAizB,kBAGA,CACAxV,SAAA,CACAnc,KAAA,KACAg6E,OAAA,EACAJ,kBAAA,KACAF,SAAA,QC3FAn8E,MAAAyiB,mBAAAzf,QAAAoa,KAAArd,OAAA,CACA8tE,MAAA,KACA8O,QAAA,GAEAh+D,KAAA,WACAxd,KAAA0sE,MAAA,GAEA,IAAA,IAAArtE,EAAA,EAAAA,EAAA,EAAAA,IACAW,KAAAw7E,QAAA97E,KAAA,IAAAb,MAAAyiB,mBAAAm6D,OAAAz7E,QAIAof,KAAA,SAAA2G,GAEA,IAAA21D,EAAA31D,EAAA1P,KAAA,iBACA,IAAA,IAAAhX,EAAA,EAAAA,EAAAq8E,EAAAp7E,OAAAjB,IAAA,CACA,IAAAs8E,EAAAD,EAAA/oE,GAAAtT,GACAu8E,EAAAD,EAAAE,eAIA,GAHAD,EAAA,KAAAr1E,SAAAwE,OACA6wE,EAAA/5E,QAAAka,MAEA/b,KAAA61E,UAAA8F,EAAAC,GACA57E,KAAA87E,WAAAH,EAAA,QACA,CACA,IAAA18E,EAAA,QAAA4R,KAAAC,MAAA,IAAAD,KAAAqB,UACArT,MAAAyiB,mBAAAy6D,gBAAA98E,GAAA,CAAAe,KAAA27E,EAAAC,GACAA,EAAA/jE,GAAA,UAAA5Y,EAAA,CACA08E,OAAAA,EACAC,cAAAA,EACA38E,IAAAA,GACA6Y,IACA9X,KAAA61E,UAAA/9D,EAAA/Q,KAAA40E,OAAA7jE,EAAA/Q,KAAA60E,wBACA/8E,MAAAyiB,mBAAAy6D,gBAAAjkE,EAAA/Q,KAAA9H,KACA28E,EAAA/5D,IAAA,UAAA/J,EAAA/Q,KAAA9H,KACAe,KAAA87E,WAAAhkE,EAAA/Q,KAAA40E,OAAA,UAOAG,WAAA,SAAAE,GACAh8E,KAAA0sE,MAAAhtE,KAAAs8E,GAGA,IAAA,IAAA38E,EAAA,EAAAA,EAAAW,KAAAw7E,QAAAl7E,OAAAjB,IACAW,KAAAw7E,QAAAn8E,GAAA48E,QACAj8E,KAAAw7E,QAAAn8E,GAAA68E,YAKArG,UAAA,SAAA8F,EAAAC,GACA,IACAO,EAAAC,EADAC,EAAAV,EAAA35E,SAAA82B,IASA,OAPA8iD,EAAA,KAAAr1E,UACA41E,EAAAP,EAAAh6D,YACAw6D,EAAAv6E,QAAAsf,KAAA8M,WAEAkuD,EAAAP,EAAA55E,SAAA82B,IACAsjD,EAAAR,EAAA3tD,UAEAouD,EAAAF,GAAAE,EAAAF,EAAAC,EAAA,KAGA39D,QAAA,WACA,IAAA,IAAApf,EAAA,EAAAA,EAAAW,KAAAw7E,QAAAl7E,OAAAjB,IACAW,KAAAw7E,QAAAn8E,GAAAof,UAGAze,KAAAqjB,SAEA,CACA04D,gBAAA,GACAO,SAAA,WACA,IAAA,IAAAr9E,KAAAJ,MAAAyiB,mBAAAy6D,gBAAA,CACA,IAAArP,EAAAiP,EAAAC,GAAA/8E,MAAAyiB,mBAAAy6D,gBAAA98E,UACAJ,MAAAyiB,mBAAAy6D,gBAAA98E,GACA28E,EAAA/5D,IAAA,UAAA5iB,GACAytE,EAAAttD,KAAAu8D,EAAA/zD,cAKA/oB,MAAAyiB,mBAAAm6D,OAAA55E,QAAAoa,KAAArd,OAAA,CACA29E,OAAA,KACAN,QAAA,EAEAz+D,KAAA,SAAA++D,GACAv8E,KAAAu8E,OAAAA,GAGAL,SAAA,WACA,IAAAtkE,EAAA5X,KAAAu8E,OAAA7P,MAAAzpE,QACA,QAAA,IAAA2U,EAAA,CAKA5X,KAAAi8E,QAAA,EACA,IAAA7oE,EAAA9U,EAAAsZ,GACA,GAAAxE,EAAAiD,KAAA,OAAA/V,OACAN,KAAAk8E,eADA,CAIA,IAAAM,EAAAl+E,EAAA,SAAA,CACA0Y,MAAA5D,EAAAhF,KAAA,cACA6I,OAAA7D,EAAAhF,KAAA,eACAlL,IAAA,KAEAlD,KAAA6d,YAAA2+D,EAAA,aAAA,YACAA,EAAAhuE,SAAA4E,GACA+D,YAAA,CACAC,SAAA,CAAAolE,EAAA,YAlBAx8E,KAAAi8E,QAAA,KC/FAp9E,MAAA49E,oBAAA56E,QAAAoa,KAAArd,OAAA,CACAuP,MAAA,KACAuuE,OAAA,KAEAl/D,KAAA,SAAAm/D,EAAAD,GAIA,GAHA18E,KAAAmO,MAAA7P,EAAAq+E,QAGA,IAAAD,EAAA,CACA18E,KAAA08E,OAAA,GACAA,EAAAp+E,EAAA6zB,UAAAuqD,GAEA,IAAA,IAAAr9E,EAAA,EAAAA,EAAAq9E,EAAAp8E,OAAAjB,IAGA,IAFA,IAAA+b,EAAA9c,EAAAo+E,EAAAr9E,IAEAo7D,EAAA,EAAAA,EAAAr/C,EAAA9a,OAAAm6D,IAAA,CACA,IAAAn2D,EAAA8W,EAAAzI,GAAA8nD,GAEAz6D,KAAA08E,OAAAh9E,KAAA,CACA2E,MAAAC,EACAC,IAAA1C,QAAA+6E,gBAAAt4E,MAMAtE,KAAA6d,YAAA7d,KAAAmO,MAAA,SAAA,qBAGA6mE,iBAAA,SAAAl9D,GAEA,GAAAjZ,MAAAg+E,uBAAAC,gBAGA,OAFAhlE,EAAAK,sBACAL,EAAAilE,2BAKA,GAAA/8E,KAAA08E,OAAA,CAIA,IAHA,IACAp4E,EADA04E,GAAA,EAGA39E,EAAA,EAAAA,EAAAW,KAAA08E,OAAAp8E,OAAAjB,IAQA,IAPAiF,EAAAtE,KAAA08E,OAAAr9E,GAAAgF,OAEA0C,KAAA,mBACAzC,EAAAA,EAAAyC,KAAA,iBAAAk2E,eAIAp7E,QAAA+6E,gBAAAt4E,KAAAtE,KAAA08E,OAAAr9E,GAAAkF,IAAA,CACAy4E,GAAA,EACA,MAIA,IAAAA,EAEA,OAKAllE,EAAAK,iBACAL,EAAAilE,2BACAl+E,MAAAg+E,uBAAAK,uBAAAl9E,KAAAqX,WAAA4Q,KAAAjoB,QAGAqX,WAAA,WAEArX,KAAAmZ,UACAnZ,KAAAmO,MAAAuJ,QAAA,UACA1X,KAAAsZ,YCxEAza,MAAAs+E,uBAAAt7E,QAAAoa,KAAArd,OAAA,CACAk+E,iBAAA,EAEAM,cAAA,KACAhtB,eAAA,KACAC,iBAAA,KACAgtB,WAAA,KACAC,WAAA,KAEAt2E,SAAA,KAOAk2E,uBAAA,SAAAl2E,GACAhH,KAAAgH,SAAAA,EAGAhH,KAAA88E,iBAAA,EAEAj+E,MAAAgI,kBAAA,qCAAA,CAAA6D,EAAA9C,KACA5H,KAAA88E,iBAAA,EAEA,YAAAl1E,KAEA,IAAA8C,EAAA03B,SAAA13B,EAAA03B,SAAAvjC,MAAAs+E,uBAAAI,8BACAv9E,KAAAgH,WAGAhH,KAAAw9E,wBAMAA,kBAAA,WACA,GAAAx9E,KAAAo9E,cAqCAp9E,KAAAo9E,cAAAplD,WArCA,CACA,IAAAylD,EAAAn/E,EAAA,iEACAoe,EAAApe,EAAA,wBAAAO,MAAAc,EAAA,MAAA,oCAAA,cAAA6O,SAAAivE,GACAxrB,EAAA3zD,EAAA,gCAAAkQ,SAAAkO,GACAw1C,EAAA5zD,EAAA,uBAAAkQ,SAAAyjD,GACAE,EAAA7zD,EAAA,4BAAAkQ,SAAA0jD,GACAE,EAAA9zD,EAAA,SAAAkQ,SAAA0jD,GACAG,EAAA/zD,EAAA,kCAAAkQ,SAAA2jD,GAEAnyD,KAAAowD,eAAA9xD,EAAA,uEAAAO,MAAAc,EAAA,MAAA,YAAA,uCAAA6O,SAAA6jD,GACAryD,KAAAqwD,iBAAA/xD,EAAA,iCAAAkQ,SAAAyjD,GACAjyD,KAAAq9E,WAAA/+E,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,sBACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAA4jD,GACApyD,KAAAs9E,WAAAh/E,EAAA,sBAAAkQ,SAAAkO,GAEA1c,KAAAo9E,cAAA,IAAAv7E,QAAA4+B,MAAAg9C,EAAA,CACA/+C,kBAAA,EACAsC,SAAA,KACApY,WAAA5oB,KAAA09E,mBAAAz1D,KAAAjoB,MAAA,MAEA84C,UAAA,KACA94C,KAAAowD,eAAA7rD,IAAA,OAIA,IAAA1F,MAAAyzD,cAAAtyD,KAAAowD,eAAA,CACAmC,cAAAC,IACAxyD,KAAAowD,eAAAoC,KAIAxyD,KAAA6d,YAAA7d,KAAAowD,eAAA,QAAA,oBACApwD,KAAA6d,YAAA4/D,EAAA,SAAA,oBAMAC,mBAAA,WACA77E,QAAA8f,iBAAA,IACA3hB,KAAAowD,eAAA14C,QAAA,UAIAi7C,iBAAA,WACA,OAAA3yD,KAAAowD,eAAA7rD,MAAAjE,QAAA,GACAN,KAAAq9E,WAAAxmE,YAAA,aACA,IAEA7W,KAAAq9E,WAAA/qE,SAAA,aACA,IAIAqrE,eAAA,SAAA7lE,GAKA,GAJAA,GACAA,EAAAK,iBAGAnY,KAAA2yD,mBAAA,CAIA3yD,KAAAqwD,iBAAAx5C,YAAA,UACA7W,KAAA6yD,kBAEA,IAAA9rD,EAAA,CACA62E,gBAAA59E,KAAAowD,eAAA7rD,OAGA1F,MAAAgI,kBAAA,+BAAAE,EAAA,CAAA2D,EAAA9C,KACA5H,KAAAqwD,iBAAA/9C,SAAA,UAEA,YAAA1K,EACA8C,EAAAhD,SACA1H,KAAAo9E,cAAAv1D,OACA7nB,KAAAgH,aAEAhH,KAAA69E,kBAAAnzE,EAAA7K,SAAAhB,MAAAc,EAAA,MAAA,wBACAkC,QAAAqhB,MAAAljB,KAAAo9E,cAAAhqE,YACApT,KAAA09E,sBAGA19E,KAAA69E,wBAKAA,kBAAA,SAAAl2E,GACAA,MAAAA,IACAA,EAAA9I,MAAAc,EAAA,MAAA,6BAGAK,KAAAs9E,WAAAh6E,KAAAqE,GACA3H,KAAAo9E,cAAAnwC,yBAGA4lB,gBAAA,WACA7yD,KAAA69E,kBAAA,MAEA,CACAN,8BAAA,IAIA1+E,MAAAg+E,uBAAA,IAAAh+E,MAAAs+E,uBClJAt+E,MAAAi/E,WAAAj/E,MAAA6V,iBAAA9V,OAAA,CACAm/E,oBAAA,KACAC,kBAAA,KACAC,aAAA,KAEAzgE,KAAA,SAAApJ,EAAAhB,EAAAqB,GACAzU,KAAA6X,GAAA,eAAA7X,KAAA29D,aAAA11C,KAAAjoB,OACAA,KAAA6X,GAAA,aAAA7X,KAAA29D,aAAA11C,KAAAjoB,OACAA,KAAAqjB,KAAAjP,EAAAhB,EAAAqB,IAGAuU,UAAA,WAEAhpB,KAAA+9E,oBAAA,GAEA,IAAA,IAAA1+E,EAAA,EAAAA,EAAAR,MAAAk/E,oBAAAz9E,OAAAjB,IAAA,CACA,IAAA6+E,EAAAr/E,MAAAk/E,oBAAA1+E,GAEAW,KAAAsqB,eAAA,WAAA4zD,EAAArgB,MACA79D,KAAA+9E,oBAAAr+E,KAAAw+E,GAIAl+E,KAAAqjB,QAGAgH,oBAAA,WAEA,GAAA,UAAArqB,KAAAyU,SAAAiT,SAAA,oBAAAy2D,qBAAA,CACA,GAAA,YAAAA,qBACA,MAAA,UAEA,IAAA,IAAA9+E,EAAA,EAAAA,EAAAW,KAAAypB,SAAAnpB,OAAAjB,IAAA,CACA,IAAAilB,EAAAhmB,EAAA0B,KAAAypB,SAAApqB,IAEA,GAAAilB,EAAAvd,KAAA,YAAAo3E,qBACA,OAAA75D,EAAAvd,KAAA,QAMA,OAAA/G,KAAAqjB,QAGAs6C,aAAA,WACA,GAAA39D,KAAAskB,QAAA,CAIA,IAAA4V,EAYA76B,EAAAoH,EAAA+P,EAEA,GAVA0jB,EADA,YAAAl6B,KAAAskB,QAAAvd,KAAA,OACA,UAEA/G,KAAAskB,QAAAvd,KAAA,UAQA/G,KAAA+9E,oBAAAz9E,OAAA,CAOA,IAAA89E,EAYAh7C,EAVA,GAPApjC,KAAAg+E,mBACAh+E,KAAAg+E,kBAAAriE,SAMAue,EACA,IAAA76B,EAAA,EAAAA,EAAAW,KAAA+9E,oBAAAz9E,OAAAjB,IACA,GAAAW,KAAA+9E,oBAAA1+E,GAAA66B,SAAAA,EAAA,CACAkkD,EAAAp+E,KAAA+9E,oBAAA1+E,GACA,MAmCA,GA9BAW,KAAAg+E,kBAAA1/E,EAAA,kCAKA8/E,GACA33E,EAAAzG,KAAAq+E,uBAAAD,GACA5nE,EAAA,UAAAxW,KAAAyU,SAAAiT,QAAA7oB,MAAAc,EAAA,MAAA,aAAAd,MAAAc,EAAA,MAAA,sBAAA,CAAAu+E,QAAAE,EAAAl5E,OACAlF,KAAAi+E,aAAA3/E,EAAA,kCAAAmI,EAAA,+BAAA5H,MAAAuE,WAAAoT,GAAA,QAAAhI,SAAAxO,KAAAg+E,mBAEA,UAAAh+E,KAAAyU,SAAAiT,SACA1nB,KAAA6d,YAAA7d,KAAAi+E,aAAA,SAAA,SAAAnmE,GACA9X,KAAAs+E,sBAAAxmE,EAAA8C,cAAAujD,aAAA,eAIAn+D,KAAA+9E,oBAAAz9E,OAAA,IACA8iC,EAAA9kC,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,uBACAhN,SAAAxO,KAAAg+E,qBAGAh+E,KAAAi+E,aAAA76C,EAAA9kC,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,8BACAlY,KAAAzE,MAAAc,EAAA,MAAA,eACA6O,SAAAxO,KAAAg+E,mBAGA56C,EAAA,CACA,IAAAg7B,EAAA,yBAEA,IAAA/+D,EAAA,EAAAA,EAAAW,KAAA+9E,oBAAAz9E,OAAAjB,IAAA,CACA,IAAA6+E,EAAAl+E,KAAA+9E,oBAAA1+E,IAGA,UAAAW,KAAAyU,SAAAiT,UAAA,IAAAppB,EAAA6O,QAAAnN,KAAAuW,OAAA2nE,EAAAr9D,QACA,UAAA7gB,KAAAyU,SAAAiT,SAAAw2D,IAAAE,KAEA33E,EAAAzG,KAAAq+E,uBAAAH,GACA1nE,EAAA,UAAAxW,KAAAyU,SAAAiT,QAAAw2D,EAAAh5E,KAAArG,MAAAc,EAAA,MAAA,sBAAA,CAAAu+E,QAAAA,EAAAh5E,OACAk5D,GAAA,UAAA33D,EAAA,IAAA5H,MAAAuE,WAAAoT,GAAA,aAMAlY,EAFA8/D,GAAA,eAEA5vD,SAAAxO,KAAAg+E,mBACA,IAAA9mB,EAAA,IAAAr1D,QAAAqZ,QAAAkoB,GAEA,UAAApjC,KAAAyU,SAAAiT,SACAwvC,EAAAr/C,GAAA,eAAAC,IACA9X,KAAAs+E,sBAAAxmE,EAAAub,OAAA8qC,aAAA,cAKAn+D,KAAAsyB,UAAAtyB,KAAAg+E,mBAMA,GAAA,UAAAh+E,KAAAyU,SAAAiT,SAAA,oBAAAmF,QAAA,CACA,IAAAljB,EAAA,UAEAuwB,IACAvwB,GAAA,IAAAuwB,GAGArN,QAAAC,aAAA,GAAA,GAAAjuB,MAAA+F,OAAA+E,OAIA00E,uBAAA,SAAAH,GACA,GAAA,UAAAl+E,KAAAyU,SAAAiT,QAAA,CACA,MAAA/d,EAAA,WAAAu0E,EAAAhkD,aACAmkC,EAAAr+D,KAAA2pB,UACA7pB,EAAAu+D,EAAA,CAAAA,KAAAA,EAAAnkC,aAAA5xB,EACA,MAAA,SAAAzJ,MAAA+F,OAAA+E,EAAA7J,MAGA,MAAA,YAAAo+E,EAAA5nE,OAGAgoE,sBAAA,SAAAC,GACA,IAAAv+E,KAAAi+E,aAAA7nE,SAAA,WAAA,CAOA,IAFA,IAAA8nE,EAEA7+E,EAAA,EAAAA,EAAAW,KAAA+9E,oBAAAz9E,OAAAjB,IACA,GAAAW,KAAA+9E,oBAAA1+E,GAAAiX,IAAAioE,EAAA,CACAL,EAAAl+E,KAAA+9E,oBAAA1+E,GACA,MAIA,GAAA6+E,EAAA,CAIAl+E,KAAAi+E,aAAA3rE,SAAA,YACA,IAAAksE,EAAAx+E,KAAAi+E,aAAA36E,OACAtD,KAAAi+E,aAAA36E,KAAAzE,MAAAc,EAAA,MAAA,sBAAA,CAAAu+E,QAAAA,EAAAh5E,QAEArG,MAAAgW,oBAAA7U,KAAAoU,YAAA,CACAoqD,WAAAx+D,KAAAg+E,kBACAznE,OAAAvW,KAAAuW,OACAiJ,WAAA,CACA++D,UAAAA,EACAE,OAAAP,EAAAQ,WAAA,GAAApoE,GACAu6D,QAAAqN,EAAAS,WAAA,EAAA,GAEAv7D,UAAA,KACApjB,KAAAi+E,aAAApnE,YAAA,YAAAvT,KAAAk7E,IAEAx7D,cAAAtY,IAEA,IAAAk0E,EAAA,WAAAV,EAAArgB,IAEA79D,KAAAokB,YAAAw6D,GACA5+E,KAAA+wB,kBAAA6tD,GAGA5+E,KAAAqyB,yBAAA3nB,EAAA4L,IACAtW,KAAAopB,yBAOAvqB,MAAAsV,0BAAA,yBAAAtV,MAAAi/E,YC7NAj/E,MAAAggF,oBAAAh9E,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACAkJ,cAAA,KACAwiE,WAAA,KACAliE,SAAA,KACAmiE,eAAA,KACAC,iBAAA,KACAC,cAAA,KACAC,WAAA,KACAC,mBAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,aAAA,KACA1L,QAAA,KAEA2L,QAAA,KACAC,YAAA,KAEAhiE,KAAA,SAAA5F,EAAAnD,GACAzU,KAAAoT,WAAA9U,EAAAsZ,GACA5X,KAAAqa,YAAA5F,EAAA5V,MAAAggF,oBAAAphE,UAEA,IAAAgiE,EAAAz/E,KAAAoT,WAAAmI,SAAA,kBACAvb,KAAAsc,cAAAmjE,EAAAlkE,SAAA,aACAvb,KAAA8+E,WAAAW,EAAAlkE,SAAA,oBACAvb,KAAA4c,SAAA5c,KAAAoT,WAAAmI,SAAA,gBAEAvb,KAAAi/E,cAAAj/E,KAAAg/E,iBAAAh/E,KAAA4c,SAAArB,SAAA,sBACA,IAAAmkE,EAAA1/E,KAAAi/E,cAAA1jE,SAAA,WACAvb,KAAAo/E,aAAAM,EAAAnkE,SAAA,SACAvb,KAAAq/E,qBAAAK,EAAAnkE,SAAA,UACAvb,KAAAs/E,aAAAt/E,KAAA4c,SAAAvG,KAAA,oBACArW,KAAA4zE,QAAA5zE,KAAAs/E,aAAA/jE,SAAA,gBACAvb,KAAAk/E,WAAAl/E,KAAA4c,SAAArB,SAAA,mBACAvb,KAAAm/E,mBAAAn/E,KAAAk/E,WAAA3jE,WAGAvb,KAAAu/E,QAAA,IAAA1gF,MAAAkb,KAAA/Z,KAAAsc,cAAA,CACA/C,aAAA,WACAG,YAAA,IACAE,SAAA,OACAE,WAAA,KAGA,IAAAupB,EAAArjC,KAAAsc,cAAAf,WACA,IAAA,IAAAlc,EAAA,EAAAA,EAAAgkC,EAAA/iC,OAAAjB,IACAW,KAAA2/E,QAAArhF,EAAA+kC,EAAAhkC,KAmBA,GAfAf,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAlF,KAAAyU,SAAAmrE,0BAAAjhF,QAAA,mBAAA,IACAwG,MAAA,KACAqiD,aAAAxnD,KAAAoT,YAEApT,KAAAw/E,YAAA,IAAA3gF,MAAAggF,oBAAAgB,YAAA7/E,MAEAA,KAAAyU,SAAAqrE,mBACA9/E,KAAA+/E,QAAA,IAAAlhF,MAAAggF,oBAAAmB,QAAAhgF,MAEAA,KAAA6d,YAAA7d,KAAA8+E,WAAA,WAAA,WAIA9+E,KAAAyU,SAAAwrE,eAAA,CACA,IAAAC,EAAAlgF,KAAA4c,SAAArB,SAAA,aACA,IAAA1c,MAAAshF,QAAAD,EAAA,CACAjuC,SAAAmuC,IACApgF,KAAAg/E,iBAAA1sE,SAAA,UACAtS,KAAAg/E,iBAAAh/E,KAAA,IAAAogF,EAAAr5E,KAAA,qBACA8P,YAAA,aAKA7W,KAAA6d,YAAA7d,KAAAo/E,aAAA,QAAA,KACA,IAAA76E,EAAAvE,KAAAo/E,aAAA76E,MAAAuL,cAAAnR,QAAA,QAAA,IACA,IAAA4F,EAGA,OAFAvE,KAAAi/E,cAAA5oE,KAAA,aAAAQ,YAAA,iBACA7W,KAAAq/E,qBAAA/sE,SAAA,UAIAtS,KAAAq/E,qBAAAxoE,YAAA,UACA,IAAAwpE,EAAArgF,KAAA4zE,QAAAh4D,OAAA,oBAAArX,OACA2Z,IAAAle,KAAAs/E,aAAA1jE,OAAA,gBAAArX,OAAAgX,SAAA,iBACA1E,YAAA,YACA7W,KAAA4zE,QAAAj/C,IAAA0rD,GAAA/tE,SAAA,YAGA,IAAA,IAAAjT,EAAA,EAAAA,EAAAW,KAAAs/E,aAAAh/E,OAAAjB,IAAA,CACA,IAAAihF,EAAAtgF,KAAAs/E,aAAA3sE,GAAAtT,GACAihF,EAAAjqE,KAAA,4CAAA/V,OACAggF,EAAAzpE,YAAA,YAEAypE,EAAAhuE,SAAA,eAKAtS,KAAA6d,YAAA7d,KAAAo/E,aAAA,UAAAtnE,IACAA,EAAAC,UAAAlW,QAAAkd,SACA/e,KAAAo/E,aAAA76E,IAAA,IAAAmT,QAAA,WAKA1X,KAAA6d,YAAA7d,KAAAq/E,qBAAA,QAAA,KACAr/E,KAAAo/E,aAAA76E,IAAA,IAAAmT,QAAA,YAIAioE,QAAA,SAAAz+D,GACA,GAAAlhB,KAAAyU,SAAAqrE,iBAAA,CACA,IAAAS,EAAAr/D,EAAA7K,KAAA,mBACA/X,EAAA,2CACAu7B,YAAA0mD,GACA1tE,OACAvU,EAAA,SACAuU,OAAAvU,EAAA,SACAuU,OAAAvU,EAAA,OAAA,CACAkiF,cAAA,SACAl9E,KAAAzE,MAAAc,EAAA,MAAA,cAEAkT,OAAAvU,EAAA,SACAuU,OAAAvU,EAAA,OAAA,CACAkiF,cAAA,SACAl9E,KAAAzE,MAAAc,EAAA,MAAA,eAGAkT,OAAAvU,EAAA,UACAuU,OACAvU,EAAA,SACAuU,OAAAvU,EAAA,SACAuU,OAAAvU,EAAA,OAAA,CACAkiF,cAAA,WACAl9E,KAAAzE,MAAAc,EAAA,MAAA,wBAEAkT,OAAAvU,EAAA,SACAuU,OAAAvU,EAAA,OAAA,CACAkiF,cAAA,YACAl9E,KAAAzE,MAAAc,EAAA,MAAA,0BAIA,IAAAu3D,EAAA,IAAAr1D,QAAAqZ,QAAAqlE,EAAA,CACAvxB,eAAAhvD,KAAAygF,kBAAAx4D,KAAAjoB,QAEAk3D,EAAAnvC,KAAAlQ,GAAA,OAAA,KACAqJ,EAAAkT,KAAA,YAAA9zB,OACA42D,EAAAnvC,KAAA3U,WAAAiD,KAAA,0BAAAQ,YAAA,YAEAqgD,EAAAnvC,KAAA3U,WAAAiD,KAAA,0BAAA/D,SAAA,YAGA4O,EAAAlG,KAAA,YAAA1a,OACA42D,EAAAnvC,KAAA3U,WAAAiD,KAAA,2BAAAQ,YAAA,YAEAqgD,EAAAnvC,KAAA3U,WAAAiD,KAAA,2BAAA/D,SAAA,cAMA,IAAAyT,EAAA7E,EAAA3F,SAAA,mBAAAA,WAEA,IAAA,IAAAlc,EAAA,EAAAA,EAAA0mB,EAAAzlB,OAAAjB,IACAW,KAAA0gF,YAAApiF,EAAAynB,EAAA1mB,MAIAqhF,YAAA,SAAAvqE,GACA,IAAAtX,MAAAggF,oBAAA8B,QAAA3gF,KAAAmW,IAGAsqE,kBAAA,SAAAptD,GACA,IAAArzB,KAAAyU,SAAAqrE,iBACA,OAGA,IAAA/+D,EAAAziB,EAAA+0B,GACAnS,EAAAH,EAAAha,KAAA,QAAA8T,QAAA+M,SAAAA,SAAAA,SAGA,OAFA7G,EAAAha,KAAA,WAGA,IAAA,SACA/G,KAAA4gF,UAAA1/D,GACA,MACA,IAAA,SACAlhB,KAAA6gF,UAAA3/D,GACA,MACA,IAAA,WACA,IAAA4/D,EAAA5/D,EAAAkT,KAAA,YACA0sD,EAAAxgF,QACA4gB,EAAAsmC,aAAAs5B,GAEA,MACA,IAAA,YACA,IAAAC,EAAA7/D,EAAAlG,KAAA,YACA+lE,EAAAzgF,QACA4gB,EAAA2Y,YAAAknD,KAMAH,UAAA,SAAA1/D,GACA,IAAAlhB,KAAAyU,SAAAqrE,iBACA,OAGA,MAAAkB,EAAA9/D,EAAA7K,KAAA,mBACAw2C,EAAAm0B,EAAA19E,OACAwpD,EAAA9sD,KAAAihF,iBAAAp0B,GAEAC,GAAAA,IAAAD,IACAm0B,EAAA19E,KAAAwpD,GACA5rC,EAAA7K,KAAA,oBAAAjI,KAAA,OAAApO,KAAAkhF,6BAAAp0B,MAIAm0B,iBAAA,SAAAp0B,GACA,OAAAhuD,MAAAuE,WAAAiiD,OAAAxmD,MAAAc,EAAA,MAAA,yBAAAktD,KAGAg0B,UAAA,SAAA3/D,GACA,IAAAlhB,KAAAyU,SAAAqrE,iBACA,OAIA,IAAAlM,EAAA1yD,EAAA7K,KAAA,gBAEA,IAAA,IAAAhX,EAAA,EAAAA,EAAAu0E,EAAAtzE,OAAAjB,IAAA,CACA,IAAAowB,EAAAnxB,EAAAs1E,EAAAv0E,IAAA+O,KAAA,kBACApO,KAAAmhF,oBAAA1xD,GAGAzvB,KAAAu/E,QAAAl0D,YAAAnK,GACAlhB,KAAA+/E,QAAA10D,YAAAnK,GAEAA,EAAAvF,UAGAylE,YAAA,SAAA/Q,GACA,IAAA5gD,EAAA4gD,EAAAjiE,KAAA,kBAEAiiE,EAAA10D,SAEA3b,KAAAmhF,oBAAA1xD,GACAzvB,KAAAu/E,QAAA8B,aAAA,IAGAF,oBAAA,SAAA1xD,GACAzvB,KAAA4zE,QAAAh4D,OAAA,oBAAA6T,aACA5Y,YAAA,UACAiE,QAAA,oBAAAjE,YAAA,WAGAyqE,OAAA,WACA,IAAAthF,KAAAyU,SAAAqrE,iBACA,OAGA,MAAA56E,EAAAlF,KAAAihF,mBACA,IAAA/7E,EACA,OAGA,MAAAgc,EAAA5iB,EAAA,mGAIA4G,mDACArG,MAAAc,EAAA,MAAA,yFAMA6O,SAAAxO,KAAAsc,eAEAtc,KAAAu/E,QAAA10D,SAAA3J,GACAlhB,KAAA+/E,QAAAl1D,SAAA3J,GAEAlhB,KAAA2/E,QAAAz+D,IAGAggE,6BAAA,SAAAK,GACA,OAAAvhF,KAAAyU,SAAAmrE,0BAAAjhF,QAAA,gBAAAE,MAAA4E,mBAAA89E,MAEA,CACA9jE,SAAA,CACAqiE,kBAAA,EACAG,gBAAA,EACAL,0BAAA,oCACA4B,uBAAA,qCAIA3iF,MAAAggF,oBAAA8B,QAAA9+E,QAAAoa,KAAArd,OAAA,CACA6iF,SAAA,KACAruE,WAAA,KACAsuE,gBAAA,KACAC,aAAA,KACA9Y,mBAAA,KACA0X,SAAA,KAEAqB,OAAA,KACAC,SAAA,EACApyD,UAAA,KACAqyD,YAAA,EACA7iF,IAAA,KACA8iF,gBAAA,EACAC,aAAA,EACAt0B,IAAA,KAEAlwC,KAAA,SAAAikE,EAAAruE,GACApT,KAAAyhF,SAAAA,EACAzhF,KAAAoT,WAAAA,EACApT,KAAAoT,WAAArM,KAAA,cAAA/G,MAEAA,KAAA4hF,OAAA5hF,KAAAoT,WAAArM,KAAA,UACAzI,EAAA0G,cAAAhF,KAAA4hF,UACA5hF,KAAA4hF,OAAA,IAEA5hF,KAAA4hF,OAAAtgF,KAAAtB,KAAAoT,WAAArM,KAAA,QAEA/G,KAAA6hF,QAAA7hF,KAAAoT,WAAAgD,SAAA,aACApW,KAAA8hF,WAAA9hF,KAAA6hF,SAAAhgF,QAAA0Y,QAAAva,KAAAoT,WAAA,mBACApT,KAAAf,IAAAJ,MAAAmT,aAAA,IAEAhS,KAAA6hF,UACA7hF,KAAAyvB,UAAAzvB,KAAAoT,WAAArM,KAAA,cAGA,IAAAk7E,EAAAjiF,KAAAoT,WAAArM,KAAA,iBACAm7E,EAAAliF,KAAA8hF,YAAA9hF,KAAAoT,WAAAgD,SAAA,gBACApW,KAAA+hF,eAAA/hF,KAAAyhF,SAAAhtE,SAAAwrE,gBAAAp+E,QAAA0Y,QAAAva,KAAAoT,WAAA,yBACApT,KAAAgiF,YAAAC,GAAAjiF,KAAA8hF,WAEA9hF,KAAAgiF,cAEAC,EAAAA,EAAAA,EAAAtjF,QAAA,uBAAAqB,KAAAf,KAAA,GAGAe,KAAA6oE,mBAAAvqE,EAAA,SAAA,CACAkd,MAAA,WAIAxb,KAAAugF,SAAAjiF,EAAA,OAAA,CACAm3B,KAAA,SACAC,SAAA,EACAla,MAAA,gBACAC,MAAA5c,MAAAc,EAAA,MAAA,UAGAK,KAAAugF,SAAA1oE,GAAA,QAAA,KACA7X,KAAA0tD,KAGA1tD,KAAA0tD,IAAA11B,OACAh4B,KAAA0tD,IAAAzgB,uBAAA,IAHAjtC,KAAAmiF,kBAAAF,EAAAC,MAQAliF,KAAAoiF,SAGApiF,KAAAoT,WAAAhF,KAAA,cAAA,MACApO,KAAAoT,WAAAhF,KAAA,gBAAA,MACApO,KAAAoT,WAAAhF,KAAA,qBAAA,OAGAg0E,OAAA,WAeA,GAdApiF,KAAA0hF,gBAAApjF,EAAA,WAAA,CACAkd,MAAA,kBACAla,KAAA,SACA4D,KAAA,GACAC,MAAAnF,KAAAf,MACAuP,SAAAxO,KAAAoT,YACApT,KAAAqiF,uBAEAriF,KAAA2hF,aAAArjF,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAlF,KAAAyhF,SAAAhtE,SAAA+sE,uBAAA7iF,QAAA,uBAAAqB,KAAAf,OACAuP,SAAAxO,KAAAoT,YACApT,KAAAsiF,oBAEAtiF,KAAA+hF,eAAA,CACA,IAAAljF,MAAA0jF,YAAAviF,KAAA4hF,OAAAhpD,OAAA,IAAA,CACA5D,IAAA,GACArI,IAAA,IACA61D,KAAA,GACAC,WAAA7pD,GACA/5B,MAAAc,EAAA,MAAA,cAAA,CAAA+iF,IAAA9pD,EAAA,MAEAqZ,SAAArZ,IACA54B,KAAA4hF,OAAAhpD,MAAAA,EACA54B,KAAAsiF,uBAGAlvE,WAAA5E,SAAAxO,KAAAoT,YAGApT,KAAAgiF,aACAhiF,KAAAugF,SAAA/xE,SAAAxO,KAAAoT,aAIA+uE,kBAAA,SAAAF,EAAAC,GACA,IAAAzpD,EAAA,2CAEAwpD,kHAGApjF,MAAAc,EAAA,MAAA,8FAqBA,GAfAK,KAAA0tD,IAAA,IAAA7rD,QAAA+1B,IAAA53B,KAAAoT,WAAAqlB,EAAA,CACAO,OAAAruB,IAEA9I,QAAA0f,sBAAA,KAEAvhB,KAAA0tD,IAAAxpC,MAAA7N,KAAA,eAAAqB,QAAA,YAGA2zD,SAAA,KACArrE,KAAA2iF,sBAIA9jF,MAAAsU,eAAAnT,KAAA0tD,IAAAxpC,OAEAlkB,KAAA8hF,WAAA,CACAjjF,MAAAs4B,GAAAq4C,uBAAA,CACAh5D,MAAA3X,MAAAc,EAAA,MAAA,YACA2W,GAAAtW,KAAAf,IAAA,YACAiG,KAAA,WACA2S,GAAAqqE,IACAr2D,UAAA7rB,KAAA0tD,IAAAxpC,OAGAlkB,KAAA0X,QAAA,sBAGAirE,iBAAA,WACA3iF,KAAA0tD,IAAAhxC,MAAAkmE,iBAAA75B,QAAA,EAAA7jD,KAAAA,EAAAC,MAAAA,MACAnF,KAAA4hF,OAAA18E,GAAAC,IAEAnF,KAAAsiF,oBAGA,IAAA3qD,EAAA33B,KAAA0tD,IAAAhxC,MAAArG,KAAA,YAAAQ,YAAA,UAEAhY,MAAAiK,kBAAA,OAAA,wCAAA,CACA/B,KAAA,CACA66E,OAAA5hF,KAAA4hF,UAEAp4E,KAAAkB,IACAitB,EAAArlB,SAAA,UACAtS,KAAAugF,SAAAv0D,SACAhsB,KAAAoT,WAAA1U,KAAAJ,EAAAoM,EAAA3D,KAAArI,MAAAA,QACAsB,KAAAoiF,SACApiF,KAAA6iF,sBACA7iF,KAAA0tD,IAAA7lC,SACApe,MAAAkB,IAEA6nE,QAAA7qE,MAAAgD,GACAgtB,EAAArlB,SAAA,UACAtS,KAAA6iF,sBACA7iF,KAAA0tD,IAAA7lC,UAIAw6D,qBAAA,WACA,IAAAnhE,EAAAlhB,KAAAoT,WAAA0H,QAAA,YAAAzE,KAAA,aACA,IAAA6K,EAAA5gB,OACA,OAEA,IAAAoE,EAAA1E,KAAAyhF,SAAAP,6BAAAhgE,EAAA5d,QACAtD,KAAA0hF,gBAAAtzE,KAAA,OAAA1J,IAGA49E,kBAAA,WACAtiF,KAAA2hF,aAAAp9E,IAAA4C,KAAAC,UAAApH,KAAA4hF,UAGAiB,oBAAA,WACA7iF,KAAA8hF,aAIA9hF,KAAA4hF,OAAAkB,SACA9iF,KAAAoT,WAAAd,SAAA,gBAEAtS,KAAAoT,WAAAyD,YAAA,oBAKAhY,MAAAggF,oBAAAkE,SAAAlhF,QAAAmhF,KAAApkF,OAAA,CACA6iF,SAAA,KACAwB,WAAA,KACAC,kBAAA,EACAC,SAAA,KAKA3lE,KAAA,SAAAikE,EAAAhtE,GACAzU,KAAAyhF,SAAAA,EACAzhF,KAAAqjB,KAAArjB,KAAAojF,YAAA3uE,IAMAwuC,YAAA,WACAjjD,KAAAqjB,OAGArjB,KAAAijF,WAAAjjF,KAAAqjF,kBAGArjF,KAAAmjF,SAAAnjF,KAAAsjF,gBACAtjF,KAAA0pB,OAAAprB,IAAA4f,IAAAle,KAAA0pB,OAAAxL,IAAAle,KAAAmjF,WAEAthF,QAAAqR,KAAAZ,SAAA,aAGAixE,cAAA,WACAvjF,KAAA0pB,OAAA1pB,KAAA0pB,OAAAiL,IAAA30B,KAAAmjF,UACAnjF,KAAAmjF,SAAAxnE,UAGA6nE,yBAAA,WACAxjF,KAAAijF,WAAAz7B,aAAAxnD,KAAA+iD,UACA/iD,KAAA+iD,SAAA/2B,SACAhsB,KAAA0pB,OAAAprB,IAAA4f,IAAAle,KAAA0pB,OAAAiL,IAAA30B,KAAA+iD,UAAA7kC,IAAAle,KAAAijF,aACAjjF,KAAAkjF,kBAAA,GAGAO,yBAAA,WACAzjF,KAAAijF,WAAA/rE,YAAAlX,KAAA+iD,UACA/iD,KAAA0pB,OAAAprB,IAAA4f,IAAAle,KAAA0pB,OAAAiL,IAAA30B,KAAAijF,YAAA/kE,IAAAle,KAAA+iD,WACA/iD,KAAAkjF,kBAAA,GAMAQ,aAAA,WACA,IAAA,IAAArkF,EAAA,EAAAA,EAAAW,KAAA0pB,OAAAppB,OAAAjB,IAAA,CACA,IAAAkwD,EAAAjxD,EAAA0B,KAAA0pB,OAAArqB,IACA2C,EAAAutD,EAAAvtD,SAGAutD,EAAAn5C,SAAA,WAIAm5C,EAAAxoD,KAAA,WAAA,CACAiS,KAAAhX,EAAAgX,KAAAu2C,EAAA12B,aAAA,EACAC,IAAA92B,EAAA82B,IAAAy2B,EAAAx2B,cAAA,MAQA4qD,eAAA,WAIA,IAHA3jF,KAAA2jF,eAAAC,aAAA,KACA5jF,KAAA2jF,eAAAE,sBAAA,KAEA7jF,KAAA2jF,eAAApsB,GAAA,EAAAv3D,KAAA2jF,eAAApsB,GAAAv3D,KAAA0pB,OAAAppB,OAAAN,KAAA2jF,eAAApsB,KACAv3D,KAAA2jF,eAAAG,OAAAxlF,EAAA0B,KAAA0pB,OAAA1pB,KAAA2jF,eAAApsB,KAEAv3D,KAAA2jF,eAAAI,UAAA/jF,KAAA2jF,eAAAG,OAAA/8E,KAAA,YACA/G,KAAA2jF,eAAAI,YAIA/jF,KAAA2jF,eAAAK,WAAAniF,QAAAoiF,QAAAjkF,KAAA2jF,eAAAI,UAAA/qE,KAAAhZ,KAAA2jF,eAAAI,UAAAjrD,IAAA94B,KAAA09C,OAAA19C,KAAA29C,SAEA,OAAA39C,KAAA2jF,eAAAC,cAAA5jF,KAAA2jF,eAAAK,WAAAhkF,KAAA2jF,eAAAE,yBACA7jF,KAAA2jF,eAAAC,aAAA5jF,KAAA2jF,eAAAG,OAAA,GACA9jF,KAAA2jF,eAAAE,sBAAA7jF,KAAA2jF,eAAAK,aAIA,OAAAhkF,KAAA2jF,eAAAC,cAGAM,uBAAA,WAEAlkF,KAAAkkF,uBAAAN,aAAA5jF,KAAA2jF,iBAEA3jF,KAAAkkF,uBAAAN,eAAA5jF,KAAAijF,WAAA,KAIAjjF,KAAAkjF,kBACA5kF,EAAA6O,QAAAnN,KAAAijF,WAAA,GAAAjjF,KAAA0pB,QAAAprB,EAAA6O,QAAAnN,KAAAkkF,uBAAAN,aAAA5jF,KAAA0pB,UACA,IAAAprB,EAAA6O,QAAAnN,KAAAkkF,uBAAAN,aAAA5jF,KAAAmjF,UAEAnjF,KAAAijF,WAAAppD,YAAA75B,KAAAkkF,uBAAAN,cAEA5jF,KAAAijF,WAAAz7B,aAAAxnD,KAAAkkF,uBAAAN,cAGA5jF,KAAA0pB,OAAAprB,IAAA4f,IAAAle,KAAA0pB,OAAAxL,IAAAle,KAAAijF,aACAjjF,KAAAkjF,kBAAA,EACAljF,KAAAyhF,SAAAlC,QAAA8B,aAAA,GACArhF,KAAA0jF,iBAMArgC,WAAA,WACArjD,KAAAkjF,kBACAljF,KAAAyjF,2BAGAzjF,KAAAujF,gBAEAvjF,KAAAyhF,SAAAlC,QAAA8B,aAAA,GAGA,IAAAr/E,EAAAhC,KAAA+iD,SAAA/gD,UACAA,GAAA,IAAAA,EAAA82B,KAAA,IAAA92B,EAAAgX,MACAhZ,KAAA+iD,SACAjhC,IAAA,CACAs2C,QAAAp4D,KAAAmkF,eACAC,WAAA,UACAlmD,QAAA,IAEAnlB,SAAA,CAAAmlB,QAAA,GAAAr8B,QAAAwiF,aACArkF,KAAAskF,QAAA,GACAvrE,SAAA,CAAAmlB,QAAA,GAAAr8B,QAAAwiF,YAAA,KACArkF,KAAAukF,kBAGAvkF,KAAAimD,0BAGAjmD,KAAAqjB,OAEAxhB,QAAAqR,KAAA2D,YAAA,eAIAhY,MAAAggF,oBAAAmB,QAAAnhF,MAAAggF,oBAAAkE,SAAAnkF,OAAA,CAIA4e,KAAA,SAAAikE,GAKAzhF,KAAAqjB,KAAAo+D,EAJA,CACAvnD,OAAA,UAMAkpD,UAAA,WACA,OAAApjF,KAAAyhF,SAAAnlE,cAAAjG,KAAA,kBAMA4sC,YAAA,WACAjjD,KAAAqjB,OACArjB,KAAAwjF,2BACAxjF,KAAA0jF,gBAGAF,yBAAA,WACAxjF,KAAAqjB,OACArjB,KAAAyhF,SAAAlC,QAAAl0D,YAAArrB,KAAA+iD,UACA/iD,KAAAyhF,SAAAlC,QAAA10D,SAAA7qB,KAAAijF,aAGAQ,yBAAA,WACAzjF,KAAAqjB,OACArjB,KAAAyhF,SAAAlC,QAAAl0D,YAAArrB,KAAAijF,YACAjjF,KAAAyhF,SAAAlC,QAAA10D,SAAA7qB,KAAA+iD,WAMAyhC,OAAA,WACAxkF,KAAAkkF,yBACAlkF,KAAAqjB,QAMAggC,WAAA,WACArjD,KAAAqjB,OAGArjB,KAAA+iD,SAAAjhC,IAAA,CACAs2C,QAAAp4D,KAAAmkF,eACAC,WAAA,YAOAd,cAAA,WACA,IAAAH,EAAA7kF,EAAA,0CAAAkQ,SAAAxO,KAAAyhF,SAAAnlE,eAEA,OADAtc,KAAAyhF,SAAAlC,QAAA10D,SAAAs4D,GACAA,GAMAI,cAAA,WACAvjF,KAAAqjB,OACArjB,KAAAyhF,SAAAlC,QAAAl0D,YAAArrB,KAAAmjF,WAMAE,gBAAA,WACA,IAAAniE,EAAAlhB,KAAA+iD,SAAA1sC,KAAA,QAEA,OAAA/X,EAAA,uDACA0B,KAAA+iD,SAAA90B,mFACA/M,EAAA0X,sBAAA1X,EAAA+M,2EACAjuB,KAAA+iD,SAAA1sC,KAAA,mBAAA4X,oCAMApvB,MAAAggF,oBAAAgB,YAAAhhF,MAAAggF,oBAAAkE,SAAAnkF,OAAA,CACA6lF,wBAAA,EACAC,eAAA,EAKAzhC,YAAA,WACAjjD,KAAAqjB,OAGArjB,KAAAykF,uBAAAzkF,KAAA+iD,SAAA3sC,SAAA,UAGApW,KAAA0kF,cAAA1kF,KAAA+iD,SAAA3sC,SAAA,aAGApW,KAAAykF,yBAAAzkF,KAAA0kF,eACA1kF,KAAA+iD,SAAAjhC,IAAA,CACAs2C,QAAAp4D,KAAAmkF,eACAC,WAAA,YAKApkF,KAAAykF,wBACAzkF,KAAAwjF,2BAGAxjF,KAAA0jF,gBAMAc,OAAA,WACAxkF,KAAA2kF,sBAAA3kF,KAAA4kF,oBACA5kF,KAAAkkF,yBACAlkF,KAAAkjF,mBACAljF,KAAAijF,WAAAtnE,SACA3b,KAAA0pB,OAAAprB,IAAA4f,IAAAle,KAAA0pB,OAAAiL,IAAA30B,KAAAijF,aACAjjF,KAAAkjF,kBAAA,EACAljF,KAAAyhF,SAAAlC,QAAA8B,aAAA,GACArhF,KAAA0jF,gBAGA1jF,KAAAqjB,QAGAshE,mBAAA,WACA,OAAA9iF,QAAA0Y,QAAAva,KAAA+iD,SAAA,mBAGA6hC,kBAAA,WACA,IAAA,IAAAvlF,EAAA,EAAAA,EAAAW,KAAAyhF,SAAAlC,QAAA71D,OAAAppB,OAAAjB,IACA,GAAAwC,QAAAgjF,QAAA7kF,KAAA09C,OAAA19C,KAAA29C,OAAA39C,KAAAyhF,SAAAlC,QAAA71D,OAAA/W,GAAAtT,IACA,OAAA,EAIA,OAAA,GAGA+jF,UAAA,WAEA,OAAApjF,KAAAyhF,SAAAnlE,cAAAjG,KAAA,gBACA6H,IAAAle,KAAAyhF,SAAA7kE,SAAAvG,KAAA,kBAMAitE,cAAA,WACA,IAAAH,EAAA7kF,IACAwmF,EAAA9kF,KAAAyhF,SAAAnlE,cAAAjG,KAAA,gCAEA,IAAA,IAAAhX,EAAA,EAAAA,EAAAylF,EAAAxkF,OAAAjB,IACA8jF,EAAAA,EAAAjlE,IAAA5f,EAAA,UAAAkQ,SAAAs2E,EAAAzlF,KAGA,OAAA8jF,GAMAE,gBAAA,WACA,OAAA/kF,EAAA,yDAAA0B,KAAA+iD,SAAAhqB,wBAMAsqB,WAAA,WACA,IAAA6/B,EAAAljF,KAAAkjF,iBACA,GAAAA,GACA,GAAAljF,KAAAykF,uBAAA,CAEA,IAAAtuE,EAAAnW,KAAA+iD,SAAApjB,QAAA9oB,YAAA,UACA7W,KAAAyhF,SAAAf,YAAAvqE,GAEAnW,KAAA0kF,gBAEA1kF,KAAA+iD,SAAAjhC,IAAA,CAAAsiE,WAAA,UAAAhsB,QAAA,UAAA9lD,SAAA,UAGA,IAAAtS,KAAA+iD,SAAAxuB,SAAA,2BAAAj0B,QACAN,KAAA+iD,SAAAjoC,QAAA,oBAAAxI,SAAA,WAKAtS,KAAA+iD,SAAA5sC,EAGAnW,KAAA6qB,SAAA1U,SAEA,IAAAnW,KAAAykF,uBAAA,CACA,IAAAM,EAAA/kF,KAAA0kF,cACA1kF,KAAAyhF,SAAA7N,QAAAh4D,OAAA,oBAAA5b,KAAA+iD,SAAAh8C,KAAA,wBACA/G,KAAAyhF,SAAAtC,mBAAAvjE,OAAA,eAAA5b,KAAA+iD,SAAAh8C,KAAA,QAAApI,QAAA,MAAA,mBAEAqB,KAAA0kF,gBAEAK,EAAAluE,YAAA,UACAkuE,EAAAjqE,QAAA,oBAAAjE,YAAA,WAIA7W,KAAAqrB,YAAArrB,KAAA+iD,UAGA/iD,KAAA+iD,SAAAgiC,EAGA/kF,KAAAqjB,OAEArjB,KAAA+iD,SAAAjhC,IAAA,CACAs2C,QAAAp4D,KAAAmkF,eACAC,WAAApkF,KAAA0kF,eAAAxB,EAAA,SAAA,YAGAA,GACAljF,KAAA+iD,SAAAh8C,KAAA,eAAAs7E,0BC13BAxjF,MAAAqb,YAAArY,QAAAoa,KAAArd,OAAA,CACAssB,QAAA,KACA85D,aAAA,KACAC,eAAA,KACAC,sBAAA,KAEAC,SAAA,KACAC,gBAAA,KACA9jF,KAAA,KAEAkc,KAAA,SAAA27D,GAsBA,OArBAn5E,KAAAkrB,QAAA5sB,EAAA66E,GAGAn5E,KAAAkrB,QAAAnkB,KAAA,iBACAlF,QAAA2hC,IAAA,qDACAxjC,KAAAkrB,QAAAnkB,KAAA,eAAA0X,WAGAze,KAAAkrB,QAAAnkB,KAAA,cAAA/G,MAEAA,KAAAsB,KAAAtB,KAAAqlF,UAEA,WAAArlF,KAAAsB,MAAA,aAAAtB,KAAAsB,KACAtB,KAAAglF,aAAAhlF,KAAAkrB,QAAA9c,KAAA,uBAAA,IAEApO,KAAAilF,eAAAjlF,KAAAslF,wBAAAtlF,KAAAkrB,QAAAnkB,KAAA,WACA/G,KAAAklF,sBAAAllF,KAAAslF,wBAAAtlF,KAAAkrB,QAAAnkB,KAAA,oBAGA/G,KAAAulF,cAEAvlF,KAAAsB,MACA,IAAA,OACAtB,KAAA6d,YAAA7d,KAAAkrB,QAAA,QAAA,kBACA,MACA,IAAA,WACAlrB,KAAA6d,YAAA7d,KAAAkrB,QAAA7U,KAAA,SAAA,SAAA,kBACA,MACA,QACArW,KAAA6d,YAAA7d,KAAAkrB,QAAA,SAAA,kBACAlrB,KAAAwlF,mBAIAF,wBAAA,SAAAxjF,GAKA,OAJAA,IAAAA,EAAA4D,MAAA,YACA5D,EAAA,IAAAA,GAGAA,GAGAujF,QAAA,WACA,IAAAI,EAAAzlF,KAAAkrB,QAAAkP,KAAA,YACA,GACA,UAAAqrD,GAAA,aAAAzlF,KAAAkrB,QAAA9c,KAAA,SACA,aAAApO,KAAAkrB,QAAA9c,KAAA,SACA,WAAApO,KAAAkrB,QAAA9c,KAAA,QAEA,MAAA,WAGA,OAAAq3E,GACA,IAAA,SACA,MAAA,SACA,IAAA,IACA,MAAA,OACA,IAAA,WACA,MAAA,WAGAjT,QAAAC,KAAA,2BAAAzyE,KAAAkrB,QAAA,KAGAq6D,YAAA,WACA,GAAA,WAAAvlF,KAAAsB,MAAA,aAAAtB,KAAAsB,KAAA,CACAtB,KAAA0lF,eACA1lF,KAAAmlF,SAAA7mF,EAAA0B,KAAAslF,wBAAAtlF,KAAAglF,aAAAhlF,KAAA0lF,sBAEA1lF,KAAAilF,iBACAjlF,KAAAmlF,SAAA7mF,EAAA0B,KAAAilF,iBAGAjlF,KAAAklF,wBACAllF,KAAAolF,gBAAA9mF,EAAA0B,KAAAklF,yBAKAQ,aAAA,WACA,GAAA,aAAA1lF,KAAAsB,KACA,YAAA,IAAAtB,KAAAkrB,QAAAkP,KAAA,WACAp6B,KAAAkrB,QAAAkP,KAAA,WAEA,SAAAp6B,KAAAkrB,QAAA9c,KAAA,gBAGA,IAAAu3E,EAQA,OANAA,EADA,aAAA3lF,KAAAsB,KACAtB,KAAAkrB,QAAA7U,KAAA,uBAAA9R,MAEA1C,QAAA+6E,gBAAA58E,KAAAkrB,SAIA,MAAAy6D,EAAA,KAAAA,EAAAhnF,QAAA,UAAA,MAGA6mF,eAAA,WACA,WAAAxlF,KAAAsB,MAAA,aAAAtB,KAAAsB,MACAtB,KAAA4lF,WAAA5lF,KAAAmlF,UACAnlF,KAAAulF,cACAvlF,KAAA6lF,WAAA7lF,KAAAmlF,YAEAnlF,KAAAulF,cAEA,SAAAvlF,KAAAsB,KACAtB,KAAAwlF,eAAAM,MAAA9lF,KAAAkrB,QAAA9U,SAAA,eAAApW,KAAAkrB,QAAA9U,SAAA,YAEApW,KAAAwlF,eAAAM,QAAA9lF,KAAA0lF,eAGA1lF,KAAAwlF,eAAAM,OACA9lF,KAAA6lF,WAAA7lF,KAAAmlF,UACAnlF,KAAA4lF,WAAA5lF,KAAAolF,mBAEAplF,KAAA4lF,WAAA5lF,KAAAmlF,UACAnlF,KAAA6lF,WAAA7lF,KAAAolF,yBAGAplF,KAAAwlF,eAAAM,QAIAD,WAAA,SAAA3mE,GACA,GAAAA,GAAAA,EAAA5e,OAAA,CAKA,GAJAN,KAAA6lF,WAAAE,eAAA7mE,EAAA+O,SAEA/O,EAAArI,YAAA,UAEA,WAAA7W,KAAAsB,MAAA,aAAAtB,KAAAsB,KAAA,CACA,SAAAtB,KAAAsB,OACAtB,KAAAkrB,QAAArU,YAAA,aACA7W,KAAAkrB,QAAA5Y,SAAA,aAGA,IAAA,IAAAjT,EAAA,EAAAA,EAAA6f,EAAA5e,OAAAjB,IACA,CAAA2mF,IACA,SAAAA,EAAA5rD,KAAA,cACA4rD,EAAA/3D,OAAA,QACAjuB,KAAA6lF,WAAAI,cAAAD,EAAA/3D,SACA+3D,EAAAlkE,IAAA,CACAmM,OAAAjuB,KAAA6lF,WAAAE,eACAzV,SAAA,WAGA0V,EAAAjtE,SAAA,QAEAitE,EAAAjtE,SAAA,CAAAkV,OAAAjuB,KAAA6lF,WAAAI,eAAA,QAAA,WACAD,EAAAlkE,IAAA,CACAmM,OAAA,GACAqiD,SAAA,UAdA,CAkBApxD,EAAAvM,GAAAtT,WAGAW,KAAA6lF,WAAAI,qBAGAjmF,KAAA6lF,WAAAE,eAGAlkF,QAAAsf,KAAAzJ,QAAA,YAIAkuE,WAAA,SAAA1mE,GACA,GAAAA,GAAAA,EAAA5e,OACA,GAAA,WAAAN,KAAAsB,MAAA,aAAAtB,KAAAsB,KACA4d,EAAA5M,SAAA,cACA,CACA,SAAAtS,KAAAsB,OACAtB,KAAAkrB,QAAArU,YAAA,YACA7W,KAAAkrB,QAAA5Y,SAAA,cAGA,IAAA,IAAAjT,EAAA,EAAAA,EAAA6f,EAAA5e,OAAAjB,IACA,CAAA2mF,IACAA,EAAA5vE,SAAA,YAGA,SAAA4vE,EAAA5rD,KAAA,YACA4rD,EAAA1zE,SAAA,WAEA0zE,EAAAlkE,IAAA,WAAA,UACAkkE,EAAAjtE,SAAA,QACAitE,EAAAjtE,SAAA,CAAAkV,OAAA,GAAA,QAAA,WACA+3D,EAAA1zE,SAAA,gBAVA,CAaA4M,EAAAvM,GAAAtT,QC9MAR,MAAAkb,KAAAlY,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KAEAsW,OAAA,KACAyL,MAAA,KACA+wD,UAAA,KACAC,cAAA,KACAC,YAAA,KAEAC,qBAAA,KACAC,+BAAA,KAEAC,cAAA,KACAC,uBAAA,KAEAC,QAAA,KACAC,OAAA,KACAC,YAAA,KACAC,YAAA,KAEAC,iBAAA,EACAC,0BAAA,EACAC,+BAAA,EAEAvpE,KAAA,SAAA5F,EAAAnD,GACAzU,KAAAoT,WAAA9U,EAAAsZ,GAGA5X,KAAAoT,WAAArM,KAAA,UACAlF,QAAA2hC,IAAA,6CACAxjC,KAAAoT,WAAArM,KAAA,QAAA0X,WAGAze,KAAAoT,WAAArM,KAAA,OAAA/G,MAEAA,KAAAqa,YAAA5F,EAAA5V,MAAAkb,KAAA0D,UAGAzd,KAAAgnF,2BAAA,KACAhnF,KAAAqhF,aAAA,GAAA,IAGArhF,KAAA0pB,OAAA1pB,KAAAoT,WAAAmI,SAAAvb,KAAAyU,SAAA8E,cACAvZ,KAAAinF,WACAjnF,KAAAqhF,aAAA,GAAA,GAEAx/E,QAAAka,KAAAC,MAAA,KACAhc,KAAAqhF,aAAA,GAAA,MAIAx2D,SAAA,SAAAsK,GACAn1B,KAAA0pB,OAAAprB,IAAA4f,IAAAle,KAAA0pB,OAAAxL,IAAAiX,IACAn1B,KAAAinF,WACAjnF,KAAAqhF,aAAA,GAAA,IAGAh2D,YAAA,SAAA8J,GACAn1B,KAAA0pB,OAAAprB,IAAA4f,IAAAle,KAAA0pB,OAAAiL,IAAAQ,IACAn1B,KAAAinF,WACAjnF,KAAAqhF,aAAA,GAAA,IAGAhkD,eAAA,WACAr9B,KAAA0pB,OAAAprB,IAAA4f,IAAAle,KAAA0pB,QACA1pB,KAAAinF,WACAjnF,KAAAqhF,aAAA,GAAA,IAGA4F,SAAA,WAKA,IAJAjnF,KAAAinF,SAAA11C,EAAA,GAEAvxC,KAAAm1B,MAAA,GAEAn1B,KAAAinF,SAAA11C,EAAAlyC,EAAA,EAAAW,KAAAinF,SAAA11C,EAAAlyC,EAAAW,KAAA0pB,OAAAppB,OAAAN,KAAAinF,SAAA11C,EAAAlyC,IACAW,KAAAm1B,MAAAz1B,KAAApB,EAAA0B,KAAA0pB,OAAA1pB,KAAAinF,SAAA11C,EAAAlyC,YAGAW,KAAAinF,SAAA11C,GAGA8vC,YAAA,SAAAjwD,GACA,GAAApxB,KAAA6mF,gBAKA,OAJA7mF,KAAA8mF,0BAAA,OACA11D,IACApxB,KAAA+mF,+BAAA,IAOA,GAFA/mF,KAAA6mF,iBAAA,EAEA7mF,KAAAm1B,MAAA70B,OAaA,GARAN,KAAAqhF,YAAA9vC,EAAA,GAGAvxC,KAAAqhF,YAAA9vC,EAAA21C,UAAAlnF,KAAAoT,WAAA,GAAAm0C,MAAAt5B,OACAjuB,KAAAoT,WAAA,GAAAm0C,MAAAt5B,OAAA,EACAjuB,KAAAqhF,YAAA9vC,EAAA41C,aAAAnnF,KAAAoT,WAAA,GAAA+zE,aACAnnF,KAAAoT,WAAA,GAAAm0C,MAAAt5B,OAAAjuB,KAAAqhF,YAAA9vC,EAAA21C,UAEA,IAAAlnF,KAAAqhF,YAAA9vC,EAAA41C,aAyBA,GApBAnnF,KAAAyU,SAAA+E,KACAxZ,KAAAqhF,YAAA9vC,EAAA20C,UAAAlmF,KAAAyU,SAAA+E,MAEAxZ,KAAAqhF,YAAA9vC,EAAA20C,UAAAr1E,KAAAC,MAAA9Q,KAAAoT,WAAAwlB,QAAA54B,KAAAyU,SAAAiF,aAGA,OAAA1Z,KAAAkmF,WAAAlmF,KAAAqhF,YAAA9vC,EAAA20C,UAAAlmF,KAAAkmF,YACAlmF,KAAAqhF,YAAA9vC,EAAA20C,UAAAr1E,KAAAC,OAAA9Q,KAAAoT,WAAAwlB,QAAA,IAAA54B,KAAAyU,SAAAiF,cAGA1Z,KAAAyU,SAAAgF,SAAAzZ,KAAAqhF,YAAA9vC,EAAA20C,UAAAlmF,KAAAyU,SAAAgF,UACAzZ,KAAAqhF,YAAA9vC,EAAA20C,UAAAlmF,KAAAyU,SAAAgF,UAIA,IAAAzZ,KAAAqhF,YAAA9vC,EAAA20C,YACAlmF,KAAAqhF,YAAA9vC,EAAA20C,UAAA,IAIA,IAAA90D,GAAApxB,KAAAkmF,YAAAlmF,KAAAqhF,YAAA9vC,EAAA20C,UAAA,CAWA,GANAlmF,KAAAkmF,UAAAlmF,KAAAqhF,YAAA9vC,EAAA20C,UACAlmF,KAAAmmF,cAAAnmF,KAAAyU,SAAA2yE,QAAApnF,KAAAkmF,UAAA,GAAAlmF,KAAAkmF,UAGAlmF,KAAAsrB,eAAAtrB,KAAAoT,WAAA,UAEA,SAAApT,KAAAyU,SAAAmF,SAGA,IAFA5Z,KAAAqhF,YAAA9vC,EAAA81C,UAAA,EAEArnF,KAAAqhF,YAAA9vC,EAAA81C,UAAArnF,KAAAm1B,MAAA70B,QAAA,CAKA,IAHAN,KAAAqhF,YAAA9vC,EAAA+1C,mBAAA,EACAtnF,KAAAqhF,YAAA9vC,EAAAg2C,SAAA,EAEAvnF,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAqhF,YAAA9vC,EAAA81C,UAAArnF,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAqhF,YAAA9vC,EAAA81C,UAAArnF,KAAAkmF,WAAAlmF,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAm1B,MAAA70B,OAAAN,KAAAqhF,YAAA9vC,EAAAlyC,IACAW,KAAAqhF,YAAA9vC,EAAAi2C,WAAAxnF,KAAAm1B,MAAAn1B,KAAAqhF,YAAA9vC,EAAAlyC,GAAA4uB,OAAA,QAAAA,SAEAjuB,KAAAqhF,YAAA9vC,EAAAi2C,WAAAxnF,KAAAqhF,YAAA9vC,EAAA+1C,oBACAtnF,KAAAqhF,YAAA9vC,EAAA+1C,kBAAAtnF,KAAAqhF,YAAA9vC,EAAAi2C,YAGAxnF,KAAAqhF,YAAA9vC,EAAAg2C,WAYA,IATAvnF,KAAAyU,SAAAqF,aACA9Z,KAAAqhF,YAAA9vC,EAAAk2C,UAAAznF,KAAAqhF,YAAA9vC,EAAA+1C,kBAAAtnF,KAAAyU,SAAAqF,WAEA9Z,KAAAqhF,YAAA9vC,EAAAk2C,YACAznF,KAAAqhF,YAAA9vC,EAAA+1C,mBAAAtnF,KAAAyU,SAAAqF,WAAA9Z,KAAAqhF,YAAA9vC,EAAAk2C,YAKAznF,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAqhF,YAAA9vC,EAAA81C,UAAArnF,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAqhF,YAAA9vC,EAAA81C,UAAArnF,KAAAkmF,WAAAlmF,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAm1B,MAAA70B,OAAAN,KAAAqhF,YAAA9vC,EAAAlyC,IACAW,KAAAm1B,MAAAn1B,KAAAqhF,YAAA9vC,EAAAlyC,GAAA4uB,OAAAjuB,KAAAqhF,YAAA9vC,EAAA+1C,mBAIAtnF,KAAAqhF,YAAA9vC,EAAA81C,WAAArnF,KAAAkmF,eAMA,GAHAlmF,KAAAsrB,eAAAtrB,KAAA0pB,OAAA,UAGA,IAAA1pB,KAAAkmF,UACAlmF,KAAAoT,WAAA6a,OAAA,QACAjuB,KAAA0pB,OACAsO,OACAlW,IAAA,CACAqe,SAAA,WACAvH,MAAA,OACAE,IAAA,IAEAhX,IAAAjjB,MAAAma,KAAA,OACA,CAkBA,IAjBAhZ,KAAA0pB,OAAA5H,IAAA,WAAA,YACA9hB,KAAAomF,YAAA,IAAApmF,KAAAkmF,UAIAlmF,KAAAymF,QAAA,GAEAzmF,KAAAumF,cAAA,GACAvmF,KAAAwmF,uBAAA,GAKAxmF,KAAAqmF,qBAAA,GACArmF,KAAAsmF,+BAAA,GACAtmF,KAAA0nF,qBAAA,GAEA1nF,KAAAqhF,YAAA9vC,EAAArc,KAAA,EAAAl1B,KAAAqhF,YAAA9vC,EAAArc,KAAAl1B,KAAAm1B,MAAA70B,OAAAN,KAAAqhF,YAAA9vC,EAAArc,OAkBA,IAjBAl1B,KAAAqmF,qBAAArmF,KAAAqhF,YAAA9vC,EAAArc,MAAA,GACAl1B,KAAAsmF,+BAAAtmF,KAAAqhF,YAAA9vC,EAAArc,MAAA,GACAl1B,KAAA0nF,qBAAA1nF,KAAAqhF,YAAA9vC,EAAArc,MAAA,GAEAl1B,KAAAqhF,YAAA9vC,EAAAge,MAAAvvD,KAAAm1B,MAAAn1B,KAAAqhF,YAAA9vC,EAAArc,MAAA8C,OACAh4B,KAAAqhF,YAAA9vC,EAAAo2C,cAAA,UAAA3nF,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,YACA/G,KAAAqhF,YAAA9vC,EAAAq2C,aAAA,SAAA5nF,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,YACA/G,KAAAqhF,YAAA9vC,EAAAs2C,WAAA7nF,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,WAAA/G,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,WAAA/G,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,eAAA/G,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,eAAA,EACA/G,KAAAqhF,YAAA9vC,EAAAu2C,WAAA9nF,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,WAAA/G,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,WAAA/G,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,eAAA/G,KAAAqhF,YAAA9vC,EAAAge,MAAAxoD,KAAA,eAAA/G,KAAAkmF,UAEAlmF,KAAAqhF,YAAA9vC,EAAAs2C,WAAA7nF,KAAAkmF,YACAlmF,KAAAqhF,YAAA9vC,EAAAs2C,WAAA7nF,KAAAkmF,WAEAlmF,KAAAqhF,YAAA9vC,EAAAu2C,WAAA9nF,KAAAkmF,YACAlmF,KAAAqhF,YAAA9vC,EAAAu2C,WAAA9nF,KAAAkmF,WAGAlmF,KAAAqhF,YAAA9vC,EAAAw2C,QAAA/nF,KAAAqhF,YAAA9vC,EAAAs2C,WAAA7nF,KAAAqhF,YAAA9vC,EAAAw2C,SAAA/nF,KAAAqhF,YAAA9vC,EAAAu2C,WAAA9nF,KAAAqhF,YAAA9vC,EAAAw2C,UAmBA,IAjBA/nF,KAAAqhF,YAAA9vC,EAAAge,MAAAztC,IAAA,QAAA9hB,KAAAgoF,gBAAAhoF,KAAAqhF,YAAA9vC,EAAAw2C,UACA/nF,KAAA0nF,qBAAA1nF,KAAAqhF,YAAA9vC,EAAArc,MAAAl1B,KAAAqhF,YAAA9vC,EAAAw2C,SAAA/nF,KAAAqhF,YAAA9vC,EAAAge,MAAAx2B,cAEA/4B,KAAAqmF,qBAAArmF,KAAAqhF,YAAA9vC,EAAArc,MAAAx1B,KAAAM,KAAAqhF,YAAA9vC,EAAAw2C,SACA/nF,KAAAsmF,+BAAAtmF,KAAAqhF,YAAA9vC,EAAArc,MAAAl1B,KAAAqhF,YAAA9vC,EAAAw2C,SAAA,GAEA/nF,KAAAqhF,YAAA9vC,EAAAq2C,cACA5nF,KAAAqhF,YAAA9vC,EAAA02C,YAAA,EACAjoF,KAAAqhF,YAAA9vC,EAAA22C,YAAA,GACAloF,KAAAqhF,YAAA9vC,EAAAo2C,eACA3nF,KAAAqhF,YAAA9vC,EAAA02C,YAAAjoF,KAAAkmF,UAAAlmF,KAAAqhF,YAAA9vC,EAAAw2C,QACA/nF,KAAAqhF,YAAA9vC,EAAA22C,YAAAloF,KAAAqhF,YAAA9vC,EAAA02C,cAEAjoF,KAAAqhF,YAAA9vC,EAAA02C,YAAA,EACAjoF,KAAAqhF,YAAA9vC,EAAA22C,YAAAloF,KAAAkmF,UAAAlmF,KAAAqhF,YAAA9vC,EAAAw2C,SAGA/nF,KAAAqhF,YAAA9vC,EAAApR,SAAAngC,KAAAqhF,YAAA9vC,EAAA02C,YAAAjoF,KAAAqhF,YAAA9vC,EAAApR,UAAAngC,KAAAqhF,YAAA9vC,EAAA22C,YAAAloF,KAAAqhF,YAAA9vC,EAAApR,WACAngC,KAAAsmF,+BAAAtmF,KAAAqhF,YAAA9vC,EAAArc,MAAAl1B,KAAAqhF,YAAA9vC,EAAAw2C,SAAAroF,KAAAM,KAAAqhF,YAAA9vC,EAAApR,UASA,IAFAngC,KAAAqhF,YAAA9vC,EAAA42C,WAAA,GAEAnoF,KAAAqhF,YAAA9vC,EAAAlyC,EAAA,EAAAW,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAkmF,UAAAlmF,KAAAqhF,YAAA9vC,EAAAlyC,IACAW,KAAAqhF,YAAA9vC,EAAA42C,WAAAzoF,KAAA,GAUA,IAPAM,KAAAooF,cAAA,EAAA,GAAA,GAAApoF,KAAAqhF,YAAA9vC,EAAA42C,WAAA,GAKAnoF,KAAAqhF,YAAA9vC,EAAA82C,gBAAA,GAEAroF,KAAAqhF,YAAA9vC,EAAAlyC,EAAA,EAAAW,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAymF,QAAAnmF,OAAAN,KAAAqhF,YAAA9vC,EAAAlyC,IAGA,IAFAW,KAAAqhF,YAAA9vC,EAAA82C,gBAAAroF,KAAAqhF,YAAA9vC,EAAAlyC,GAAA,EAEAW,KAAAqhF,YAAA9vC,EAAAkpB,EAAA,EAAAz6D,KAAAqhF,YAAA9vC,EAAAkpB,EAAAz6D,KAAAkmF,UAAAlmF,KAAAqhF,YAAA9vC,EAAAkpB,IACAz6D,KAAAymF,QAAAzmF,KAAAqhF,YAAA9vC,EAAAlyC,GAAA8oF,WAAAnoF,KAAAqhF,YAAA9vC,EAAAkpB,IACAz6D,KAAAqhF,YAAA9vC,EAAA82C,gBAAAroF,KAAAqhF,YAAA9vC,EAAAlyC,KAQA,IAHAW,KAAAqhF,YAAA9vC,EAAA+2C,iBAAAz3E,KAAA8b,IAAAo5B,MAAA,KAAA/lD,KAAAqhF,YAAA9vC,EAAA82C,iBAGAroF,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAymF,QAAAnmF,OAAA,EAAAN,KAAAqhF,YAAA9vC,EAAAlyC,GAAA,EAAAW,KAAAqhF,YAAA9vC,EAAAlyC,IACAW,KAAAqhF,YAAA9vC,EAAA82C,gBAAAroF,KAAAqhF,YAAA9vC,EAAAlyC,KAAAW,KAAAqhF,YAAA9vC,EAAA+2C,kBACAtoF,KAAAymF,QAAAj3E,OAAAxP,KAAAqhF,YAAA9vC,EAAAlyC,EAAA,GAOA,IAFAW,KAAAqhF,YAAA9vC,EAAAg3C,cAAA,GAEAvoF,KAAAqhF,YAAA9vC,EAAAlyC,EAAA,EAAAW,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAymF,QAAAnmF,OAAAN,KAAAqhF,YAAA9vC,EAAAlyC,IACAW,KAAAqhF,YAAA9vC,EAAAg3C,cAAA7oF,KAAAmR,KAAA8b,IAAAo5B,MAAA,KAAA/lD,KAAAymF,QAAAzmF,KAAAqhF,YAAA9vC,EAAAlyC,GAAA8oF,aAOA,IAJAnoF,KAAAqhF,YAAA9vC,EAAAi3C,eAAA33E,KAAAmkB,IAAA+wB,MAAA,KAAA/lD,KAAAqhF,YAAA9vC,EAAAg3C,eACAvoF,KAAAqhF,YAAA9vC,EAAAk3C,gBAAA,GACAzoF,KAAAqhF,YAAA9vC,EAAAm3C,YAAA,GAEA1oF,KAAAqhF,YAAA9vC,EAAAlyC,EAAA,EAAAW,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAqhF,YAAA9vC,EAAAg3C,cAAAjoF,OAAAN,KAAAqhF,YAAA9vC,EAAAlyC,IACA,GAAAW,KAAAqhF,YAAA9vC,EAAAg3C,cAAAvoF,KAAAqhF,YAAA9vC,EAAAlyC,KAAAW,KAAAqhF,YAAA9vC,EAAAi3C,eAAA,CAMA,IALAxoF,KAAAqhF,YAAA9vC,EAAAk3C,gBAAA/oF,KAAAM,KAAAymF,QAAAzmF,KAAAqhF,YAAA9vC,EAAAlyC,IAGAW,KAAAqhF,YAAA9vC,EAAAo3C,WAAA3oF,KAAAymF,QAAAzmF,KAAAqhF,YAAA9vC,EAAAlyC,GAAAspF,WAEA3oF,KAAAqhF,YAAA9vC,EAAAkpB,EAAA,EAAAz6D,KAAAqhF,YAAA9vC,EAAAkpB,EAAAz6D,KAAAkmF,UAAAlmF,KAAAqhF,YAAA9vC,EAAAkpB,IACAz6D,KAAAqhF,YAAA9vC,EAAAo3C,YAAA3oF,KAAAqhF,YAAA9vC,EAAAi3C,eAAAxoF,KAAAymF,QAAAzmF,KAAAqhF,YAAA9vC,EAAAlyC,GAAA8oF,WAAAnoF,KAAAqhF,YAAA9vC,EAAAkpB,GAGAz6D,KAAAqhF,YAAA9vC,EAAAm3C,YAAAhpF,KAAAM,KAAAqhF,YAAA9vC,EAAAo3C,YAQA,IAHA3oF,KAAA0mF,OAAA1mF,KAAAqhF,YAAA9vC,EAAAk3C,gBAAAnqF,EAAA6O,QAAA0D,KAAAmkB,IAAA+wB,MAAA,KAAA/lD,KAAAqhF,YAAA9vC,EAAAm3C,aAAA1oF,KAAAqhF,YAAA9vC,EAAAm3C,cAGA1oF,KAAAqhF,YAAA9vC,EAAAlyC,EAAA,EAAAW,KAAAqhF,YAAA9vC,EAAAlyC,EAAAW,KAAAm1B,MAAA70B,OAAAN,KAAAqhF,YAAA9vC,EAAAlyC,IACAW,KAAAqhF,YAAA9vC,EAAAzvB,IAAA,CACA8W,MAAA54B,KAAAgoF,gBAAAhoF,KAAA0mF,OAAAkC,SAAA5oF,KAAAqhF,YAAA9vC,EAAAlyC,KAEAW,KAAAqhF,YAAA9vC,EAAAzvB,IAAAjjB,MAAAma,MAAAhZ,KAAA6oF,kBAAA7oF,KAAA0mF,OAAAoC,UAAA9oF,KAAAqhF,YAAA9vC,EAAAlyC,IACAW,KAAAm1B,MAAAn1B,KAAAqhF,YAAA9vC,EAAAlyC,GAAAyiB,IAAA9hB,KAAAqhF,YAAA9vC,EAAAzvB,KAIA9hB,KAAA+oF,kBACA/oF,KAAAoT,WAAA6a,OAAA,QACAjuB,KAAA0pB,OAAA5H,IAAA,CACAqe,SAAA,WACArH,IAAA,EACAkwD,gBAAAhpF,KAAAyU,SAAA2yE,OAAA,SAGApnF,KAAA0pB,OAAA5H,IAAA,WAAA,YAGA9hB,KAAAipF,gBAGAjpF,KAAA6d,YAAA7d,KAAA0pB,OAAA,SAAA,iBAKA1pB,KAAAkpF,sBAGAlpF,KAAA6d,YAAA7d,KAAAoT,WAAA,SAAApT,KAAAgnF,4BAEAhnF,KAAAmpF,qBAxNAnpF,KAAAkpF,2BAzBAlpF,KAAAkpF,2BAbAlpF,KAAAkpF,uBAiQAA,oBAAA,WAQA,QANA,IAAAlpF,KAAAqhF,YAAA9vC,UACAvxC,KAAAqhF,YAAA9vC,EAGAvxC,KAAA6mF,iBAAA,EAEA7mF,KAAA8mF,yBAAA,CACA,IAAA11D,EAAApxB,KAAA+mF,8BACA/mF,KAAA8mF,0BAAA,EACA9mF,KAAA+mF,+BAAA,EAEAllF,QAAA0f,sBAAA,KACAvhB,KAAAqhF,YAAAjwD,OAKAg4D,aAAA,SAAArB,GACA,OAAA/nF,KAAAomF,YAAA2B,GAGAC,gBAAA,SAAAD,GACA,MAAA,QAAA/nF,KAAAopF,aAAArB,GAAA,OAAA/nF,KAAAmmF,cAAA,OAGAkD,iBAAA,SAAAtB,GACA,OAAA/nF,KAAAopF,aAAArB,GAAA,IAAA/nF,KAAAoT,WAAAwlB,QAAA54B,KAAAmmF,eAGA0C,kBAAA,SAAA1oD,GACA,MAAA,SAAAngC,KAAAopF,aAAA,GAAA,QAAAppF,KAAAyU,SAAA2yE,OAAApnF,KAAAmmF,eAAA,SAAAhmD,EAAA,KAGAmpD,mBAAA,SAAAnpD,GACA,OAAAngC,KAAAopF,aAAA,GAAA,IAAAppF,KAAAoT,WAAAwlB,SAAA54B,KAAAyU,SAAA2yE,OAAApnF,KAAAmmF,gBAAAhmD,GAGAioD,cAAA,SAAAlzD,EAAAq0D,EAAAC,EAAAC,EAAAC,GACA,IAAA7qF,MAAAkb,KAAA4vE,gBAAA3pF,MAAAooF,cAAAlzD,EAAAq0D,EAAAC,EAAAC,EAAAC,IAGAX,eAAA,WAGA,IAFA/oF,KAAA+oF,eAAAx3C,EAAA,GAEAvxC,KAAA+oF,eAAAx3C,EAAAlyC,EAAA,EAAAW,KAAA+oF,eAAAx3C,EAAAlyC,EAAAW,KAAA0mF,OAAAoC,UAAAxoF,OAAAN,KAAA+oF,eAAAx3C,EAAAlyC,IACA,GAAA,IAAAW,KAAA0mF,OAAAoC,UAAA9oF,KAAA+oF,eAAAx3C,EAAAlyC,GAEA,cADAW,KAAA+oF,eAAAx3C,GACA,EAKA,cADAvxC,KAAA+oF,eAAAx3C,GACA,GAGA03C,cAAA,WAKA,IAJAjpF,KAAAipF,cAAA13C,EAAA,GAEAvxC,KAAAipF,cAAA13C,EAAA42C,WAAA,GAEAnoF,KAAAipF,cAAA13C,EAAAlyC,EAAA,EAAAW,KAAAipF,cAAA13C,EAAAlyC,EAAAW,KAAAkmF,UAAAlmF,KAAAipF,cAAA13C,EAAAlyC,IACAW,KAAAipF,cAAA13C,EAAA42C,WAAAzoF,KAAA,GAGA,IAAAM,KAAAipF,cAAA13C,EAAAlyC,EAAA,EAAAW,KAAAipF,cAAA13C,EAAAlyC,EAAAW,KAAAm1B,MAAA70B,OAAAN,KAAAipF,cAAA13C,EAAAlyC,IAAA,CAIA,IAHAW,KAAAipF,cAAA13C,EAAAq4C,UAAA5pF,KAAA0mF,OAAAoC,UAAA9oF,KAAAipF,cAAA13C,EAAAlyC,GAAAW,KAAA0mF,OAAAkC,SAAA5oF,KAAAipF,cAAA13C,EAAAlyC,GAAA,EACAW,KAAAipF,cAAA13C,EAAAs4C,mBAAA,GAEA7pF,KAAAipF,cAAA13C,EAAAwmC,IAAA/3E,KAAA0mF,OAAAoC,UAAA9oF,KAAAipF,cAAA13C,EAAAlyC,GAAAW,KAAAipF,cAAA13C,EAAAwmC,KAAA/3E,KAAAipF,cAAA13C,EAAAq4C,UAAA5pF,KAAAipF,cAAA13C,EAAAwmC,MACA/3E,KAAAipF,cAAA13C,EAAAs4C,mBAAAnqF,KAAAM,KAAAipF,cAAA13C,EAAA42C,WAAAnoF,KAAAipF,cAAA13C,EAAAwmC,MAWA,IARA/3E,KAAAipF,cAAA13C,EAAAzY,IAAAjoB,KAAA8b,IAAAo5B,MAAA,KAAA/lD,KAAAipF,cAAA13C,EAAAs4C,oBACA7pF,KAAAipF,cAAA13C,EAAAzY,IAAA,IACA94B,KAAAipF,cAAA13C,EAAAzY,KAAA94B,KAAAyU,SAAA2yE,QAGApnF,KAAAm1B,MAAAn1B,KAAAipF,cAAA13C,EAAAlyC,GAAAyiB,IAAA,MAAA9hB,KAAAipF,cAAA13C,EAAAzY,KAGA94B,KAAAipF,cAAA13C,EAAAwmC,IAAA/3E,KAAA0mF,OAAAoC,UAAA9oF,KAAAipF,cAAA13C,EAAAlyC,GAAAW,KAAAipF,cAAA13C,EAAAwmC,KAAA/3E,KAAAipF,cAAA13C,EAAAq4C,UAAA5pF,KAAAipF,cAAA13C,EAAAwmC,MACA/3E,KAAAipF,cAAA13C,EAAA42C,WAAAnoF,KAAAipF,cAAA13C,EAAAwmC,KAAA/3E,KAAAipF,cAAA13C,EAAAzY,IAAA94B,KAAA0nF,qBAAA1nF,KAAAipF,cAAA13C,EAAAlyC,GAAAW,KAAA0mF,OAAAkC,SAAA5oF,KAAAipF,cAAA13C,EAAAlyC,IAKAW,KAAAoT,WAAA6a,OAAApd,KAAA8b,IAAAo5B,MAAA,KAAA/lD,KAAAipF,cAAA13C,EAAA42C,oBAEAnoF,KAAAipF,cAAA13C,GAGAu4C,aAAA,SAAAhyE,GACA9X,KAAA8pF,aAAAv4C,EAAA,GAGAz5B,EAAAM,kBAEApY,KAAA8pF,aAAAv4C,EAAArc,KAAA52B,EAAA6O,QAAA2K,EAAA8C,cAAA5a,KAAA0pB,SAEA,IAAA1pB,KAAA8pF,aAAAv4C,EAAArc,OAEAl1B,KAAA8pF,aAAAv4C,EAAAw4C,UAAA/pF,KAAAm1B,MAAAn1B,KAAA8pF,aAAAv4C,EAAArc,MAAA6D,cAEA/4B,KAAA8pF,aAAAv4C,EAAAw4C,YAAA/pF,KAAA0nF,qBAAA1nF,KAAA8pF,aAAAv4C,EAAArc,MAAAl1B,KAAA0mF,OAAAkC,SAAA5oF,KAAA8pF,aAAAv4C,EAAArc,SACAl1B,KAAA0nF,qBAAA1nF,KAAA8pF,aAAAv4C,EAAArc,MAAAl1B,KAAA0mF,OAAAkC,SAAA5oF,KAAA8pF,aAAAv4C,EAAArc,OAAAl1B,KAAA8pF,aAAAv4C,EAAAw4C,UACA/pF,KAAAipF,eAAA,YAIAjpF,KAAA8pF,aAAAv4C,GAGA43C,cAAA,WACAnpF,KAAA0X,QAAA,eACA1X,KAAAyU,SAAA00E,kBAEA,CACA1rE,SAAA,CACAlE,aAAA,QACAC,KAAA,KACAC,QAAA,KACAC,YAAA,IACA0tE,OAAA,GACAxtE,SAAA,MACAC,SAAA,MACAC,WAAA,KAEAqvE,cAAA7qF,EAAAqlB,QAIA9kB,MAAAkb,KAAA4vE,gBAAA9nF,QAAAoa,KAAArd,OAAA,CACAyU,KAAA,KACAk+B,EAAA,KAEA/zB,KAAA,SAAAnK,GACArT,KAAAqT,KAAAA,GAGA+0E,cAAA,SAAAlzD,EAAAq0D,EAAAC,EAAAC,EAAAC,GAIA,IAHA1pF,KAAAuxC,EAAA,GAGAvxC,KAAAuxC,EAAA3vC,EAAA,EAAA5B,KAAAuxC,EAAA3vC,EAAA5B,KAAAqT,KAAAgzE,qBAAAnxD,GAAA50B,OAAAN,KAAAuxC,EAAA3vC,IAAA,CAQA,IAPA5B,KAAAuxC,EAAAw2C,QAAA/nF,KAAAqT,KAAAgzE,qBAAAnxD,GAAAl1B,KAAAuxC,EAAA3vC,GAKA5B,KAAAuxC,EAAAy4C,4BAAA,GAEAhqF,KAAAuxC,EAAAlvC,EAAA,EAAArC,KAAAuxC,EAAAlvC,EAAArC,KAAAqT,KAAAizE,+BAAApxD,GAAAl1B,KAAAuxC,EAAAw2C,SAAAznF,OAAAN,KAAAuxC,EAAAlvC,IAAA,CAMA,IALArC,KAAAuxC,EAAApR,SAAAngC,KAAAqT,KAAAizE,+BAAApxD,GAAAl1B,KAAAuxC,EAAAw2C,SAAA/nF,KAAAuxC,EAAAlvC,GAEArC,KAAAuxC,EAAA04C,sBAAA,GACAjqF,KAAAuxC,EAAAq4C,UAAA5pF,KAAAuxC,EAAApR,SAAAngC,KAAAuxC,EAAAw2C,QAAA,EAEA/nF,KAAAuxC,EAAAwmC,IAAA/3E,KAAAuxC,EAAApR,SAAAngC,KAAAuxC,EAAAwmC,KAAA/3E,KAAAuxC,EAAAq4C,UAAA5pF,KAAAuxC,EAAAwmC,MACA/3E,KAAAuxC,EAAA04C,sBAAAvqF,KAAA+pF,EAAAzpF,KAAAuxC,EAAAwmC,MAGA/3E,KAAAuxC,EAAAy4C,4BAAAhqF,KAAAuxC,EAAAlvC,GAAAwO,KAAA8b,IAAAo5B,MAAA,KAAA/lD,KAAAuxC,EAAA04C,uBAoBA,IAhBAjqF,KAAAuxC,EAAAlvC,EAAA/D,EAAA6O,QAAA0D,KAAAmkB,IAAA+wB,MAAA,KAAA/lD,KAAAuxC,EAAAy4C,6BAAAhqF,KAAAuxC,EAAAy4C,6BACAhqF,KAAAuxC,EAAApR,SAAAngC,KAAAqT,KAAAizE,+BAAApxD,GAAAl1B,KAAAuxC,EAAAw2C,SAAA/nF,KAAAuxC,EAAAlvC,GAGArC,KAAAuxC,EAAAu3C,UAAAS,EAAAxoF,MAAA,GACAf,KAAAuxC,EAAAq3C,SAAAY,EAAAzoF,MAAA,GACAf,KAAAuxC,EAAA42C,WAAAsB,EAAA1oF,MAAA,GACAf,KAAAuxC,EAAAo3C,WAAAe,EAEA1pF,KAAAuxC,EAAAu3C,UAAAppF,KAAAM,KAAAuxC,EAAApR,UACAngC,KAAAuxC,EAAAq3C,SAAAlpF,KAAAM,KAAAuxC,EAAAw2C,SAGA/nF,KAAAuxC,EAAA24C,iBAAAlqF,KAAAuxC,EAAAy4C,4BAAAhqF,KAAAuxC,EAAAlvC,GACArC,KAAAuxC,EAAAq4C,UAAA5pF,KAAAuxC,EAAApR,SAAAngC,KAAAuxC,EAAAw2C,QAAA,EAEA/nF,KAAAuxC,EAAAwmC,IAAA/3E,KAAAuxC,EAAApR,SAAAngC,KAAAuxC,EAAAwmC,KAAA/3E,KAAAuxC,EAAAq4C,UAAA5pF,KAAAuxC,EAAAwmC,MACA/3E,KAAAuxC,EAAAo3C,YAAA3oF,KAAAuxC,EAAA24C,iBAAAlqF,KAAAuxC,EAAA42C,WAAAnoF,KAAAuxC,EAAAwmC,KACA/3E,KAAAuxC,EAAA42C,WAAAnoF,KAAAuxC,EAAAwmC,KAAA/3E,KAAAuxC,EAAA24C,iBAAAlqF,KAAAqT,KAAAq0E,qBAAAxyD,GAAAl1B,KAAAuxC,EAAAw2C,SAIA7yD,IAAAl1B,KAAAqT,KAAA8hB,MAAA70B,OAAA,EACAN,KAAAqT,KAAAozE,QAAA/mF,KAAA,CACAopF,UAAA9oF,KAAAuxC,EAAAu3C,UACAF,SAAA5oF,KAAAuxC,EAAAq3C,SACAT,WAAAnoF,KAAAuxC,EAAA42C,WACAQ,WAAA3oF,KAAAuxC,EAAAo3C,aAIA3oF,KAAAqT,KAAA+0E,cAAAlzD,EAAA,EAAAl1B,KAAAuxC,EAAAu3C,UAAA9oF,KAAAuxC,EAAAq3C,SAAA5oF,KAAAuxC,EAAA42C,WAAAnoF,KAAAuxC,EAAAo3C,mBAIA3oF,KAAAuxC,KCriBA1yC,MAAAy6E,gBAAAz6E,MAAAqjC,mBAAAtjC,OAAA,CACAmkC,oBAAA,SAAAF,GAEA,IAAA3I,EAAA2I,EAAAlkC,QAAA,aAAA,IAMAu7B,GAHAA,EAAAA,EAAAv7B,QAAA,yBAAA,KAGAmR,cAGAoqB,EAAAr7B,MAAAuS,YAAA8oB,GAEAl6B,KAAAyU,SAAA8kE,qBAEAr/C,EAAAA,EAAAv7B,QAAA,WAAA,KAIA,IAAAwrF,EAAAtrF,MAAAsQ,YAAA+qB,EAAAh5B,MAAA,eAGA,GAFAg5B,EAAA,GAEA,UAAAr7B,MAAAurF,aACA,OAAAD,EAAA1pF,KAAA,KAIA,IAAA,IAAApB,EAAA,EAAAA,EAAA8qF,EAAA7pF,OAAAjB,IACA,WAAAR,MAAAurF,cAAA,IAAA/qF,EACA66B,GAAAiwD,EAAA9qF,GAEA66B,GAAAiwD,EAAA9qF,GAAAsQ,OAAA,GAAAC,cAAAu6E,EAAA9qF,GAAAqC,OAAA,GAIA,OAAAw4B,KCnCAr7B,MAAAwrF,YAAAxoF,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACAiuC,YAAA,KACAF,SAAA,KAEA3jC,KAAA,SAAA/I,GACAzU,KAAAqa,YAAA5F,EAAA5V,MAAAwrF,YAAA5sE,UACAzd,KAAAsqF,mBAGAA,gBAAA,WACAtqF,KAAAoT,WAAA9U,EAAA0B,KAAAyU,SAAA81E,mBACAvqF,KAAAqhD,YAAA,IAAAxiD,MAAA6oD,YAAAppD,EAAA,sCAAAkQ,SAAAxO,KAAAoT,aAEA,IAAAnM,EAAA,CACA5B,IAAAxG,MAAAuH,aAAApG,KAAAyU,SAAA+1E,cACAz8B,SAAA/tD,KAAAyU,SAAAg2E,eACA9iC,UAAA3nD,KAAAoT,WAAAiD,KAAArW,KAAAyU,SAAAi2E,mBACA98E,UAAA5N,KAAAyU,SAAAk2E,sBAIA,IAAA9rF,MAAA8H,oBAAA,IAAA9H,MAAA+H,iBAEAK,EAAA8mD,SAAAlvD,MAAA8H,eAAA9H,MAAA+H,gBAGAK,EAAA4gD,OAAA,GACA5gD,EAAA4gD,OAAAC,gBAAA9nD,KAAA+nD,eAAA9/B,KAAAjoB,MACAiH,EAAA4gD,OAAAG,sBAAAhoD,KAAAioD,kBAAAhgC,KAAAjoB,MACAiH,EAAA4gD,OAAAK,eAAAloD,KAAAmoD,kBAAAlgC,KAAAjoB,MACAiH,EAAA4gD,OAAA+iC,eAAA5qF,KAAA6qF,eAAA5iE,KAAAjoB,MAEAA,KAAAmhD,SAAA,IAAAtiD,MAAAypD,SAAAtoD,KAAAoT,WAAAnM,GAEAjH,KAAA8qF,eAGAA,YAAA,WACA9qF,KAAAoT,WAAAiD,KAAArW,KAAAyU,SAAAs2E,sBAAAlzE,GAAA,QAAAC,IACA9X,KAAAoT,WAAAiD,KAAArW,KAAAyU,SAAAi2E,mBAAAhzE,QAAA,WAGA1X,KAAAoT,WAAAiD,KAAArW,KAAAyU,SAAAu2E,sBAAAnzE,GAAA,QAAAC,IACAR,QAAAzY,MAAAc,EAAA,MAAA,kDACArB,EAAAwZ,EAAA8C,eAAAgN,SAAA/U,OAAA,sCACAhU,MAAAgI,kBAAA7G,KAAAyU,SAAA+xB,aAAAxmC,KAAAyU,SAAAg2E,eAAA,CAAA//E,EAAA9C,KACA,YAAAA,GACA5H,KAAAirF,aAAAvgF,SAOAugF,aAAA,SAAAvgF,GACApM,EAAA0B,KAAAyU,SAAA81E,mBAAArzE,YAAAxM,EAAAhM,MACAsB,KAAAyU,SAAAy2E,oBAAAxgF,GACA1K,KAAAsqF,mBAMAviC,eAAA,SAAA5oC,GACAnf,KAAAqhD,YAAAJ,aAAAn/B,IAAA,CACAgX,IAAAjoB,KAAAK,MAAAlR,KAAAoT,WAAA2lB,cAAA,GAAA,IAGA/4B,KAAAoT,WAAAd,SAAA,aACAtS,KAAAqhD,YAAAqD,mBACA1kD,KAAAqhD,YAAAuD,mBAMAqD,kBAAA,SAAA9oC,EAAApY,GACA,IAAAsiD,EAAAlnD,SAAA4E,EAAAuiD,OAAAviD,EAAA8tB,MAAA,IAAA,IACA70B,KAAAqhD,YAAAkI,sBAAAF,IAMAlB,kBAAA,SAAAhpC,EAAApY,GACA,GAAAA,EAAAkL,OAAAtK,MACAM,MAAAlB,EAAAkL,OAAAtK,WACA,CACArJ,EAAAyI,EAAAkL,OAAAvT,MACAsB,KAAAirF,aAAAlkF,EAAAkL,QAIAjS,KAAAmhD,SAAAwI,iBACA3pD,KAAAqhD,YAAAiE,kBACAtlD,KAAAoT,WAAAyD,YAAA,eAOAg0E,eAAA,SAAA1rE,EAAApY,GACAA,EAAAM,MAAAwpD,aAAAlpD,QACAM,MAAAlB,EAAAM,MAAAwpD,aAAAlpD,OACA3H,KAAAoT,WAAAyD,YAAA,aACA7W,KAAAqhD,YAAAiE,kBACAtlD,KAAAqhD,YAAAqD,sBAGA,CACAjnC,SAAA,CACAgtE,eAAA,GACAD,aAAA,GACAhkD,aAAA,GACAkkD,kBAAA,GAEAQ,oBAAA5sF,EAAAqlB,KACA4mE,kBAAA,KAEAQ,qBAAA,KACAC,qBAAA,KAEAL,gBAAA,WC7HA9rF,MAAAmb,SAAAnY,QAAAoa,KAAArd,OAAA,CACAusF,MAAA,KACA5mB,QAAA,KACA7W,IAAA,KAEAlwC,KAAA,SAAAkT,GAoBA,GAnBA1wB,KAAAmrF,MAAA7sF,EAAAoyB,GAEA1wB,KAAAmrF,MAAApkF,KAAA,aACAlF,QAAA2hC,IAAA,mDACAxjC,KAAAukE,QAAAvkE,KAAAmrF,MAAApkF,KAAA,YAAAw9D,QACAvkE,KAAAmrF,MAAApkF,KAAA,YAAA0X,YAEAze,KAAAukE,QAAAvkE,KAAAmrF,MAAAzsF,OACAsB,KAAAmrF,MACAzsF,KAAA,IACA0P,KAAA,CACAsnB,SAAA,EACAD,KAAA,SACA/Z,aAAA7c,MAAAc,EAAA,MAAA,kBAIAK,KAAAmrF,MAAApkF,KAAA,WAAA/G,MAEAA,KAAAmrF,MAAA,GAAAC,iBAAAprF,KAAAmrF,MAAA,GAAAC,gBAAAC,WAAAC,KAAAC,UAAA,CAGA,IADAvrF,KAAAmrF,MAAAvjE,SACAxR,SAAA,UAAA,CAEA,MAAArI,EAAA/N,KAAAmrF,MAAA,GAAAC,gBAAAI,UAAA9lF,MAAA,gBACAqI,IACA/N,KAAAmrF,MAAA,GAAAC,gBAAAI,UAAAxrF,KAAAmrF,MAAA,GAAAC,gBAAAI,UAAA9pF,OAAA,EAAAqM,EAAAhP,OACAT,EAAA,UAAA,CACAkd,MAAA,SACA9c,KAAAqP,EAAA,GAAApP,QAAA,OAAA,IAAA,MAEAk7B,YAAA75B,KAAAmrF,MAAA,GAAAC,iBACAv4E,OAAA7S,KAAAmrF,SAKAnrF,KAAA6d,YAAA7d,KAAAmrF,MAAA,QAAArzE,IACAA,EAAAK,iBACAL,EAAAM,kBACApY,KAAAyrF,YAGAzrF,KAAA6d,YAAA7d,KAAAmrF,MAAA,UAAArzE,IACA9X,KAAA0tD,KAAA1tD,KAAA0tD,IAAAg+B,UAAA,CAAA7pF,QAAAi0B,UAAAj0B,QAAAinB,YAAAxZ,SAAAwI,EAAAC,WACAD,EAAAK,iBACAL,EAAAM,kBACApY,KAAAyrF,cAKAA,QAAA,SAAA3zE,GACA9X,KAAA0tD,IAYA1tD,KAAA0tD,IAAA11B,QAXAh4B,KAAA0tD,IAAA,IAAA7rD,QAAA+1B,IAAA53B,KAAAmrF,MAAAnrF,KAAAukE,QAAA,CACAnsC,SAAA,eACAuzD,gBAAA,EACA3yD,OAAA,KACAn3B,QAAA6c,gBAAAC,iBAAA9c,QAAAi0B,UAAA,KACA91B,KAAA0tD,IAAA7lC,YAIAhpB,MAAAsU,eAAAnT,KAAA0tD,IAAAhxC,WCrEA7d,MAAA4b,YAAA5Y,QAAAoa,KAAArd,OAAA,CACA6V,SAAA,KACAo2C,gBAAA,KACAC,gBAAA,KACAxmD,OAAA,KACA4zE,OAAA,EACArgE,IAAA,EACA+zE,eAAA,EACAC,QAAA,KAEAC,gBAAA,KAEAtuE,KAAA,SAAAuuE,EAAAt3E,GAmBA,GAlBAzU,KAAA6qD,gBAAAvsD,EAAAytF,GAGA/rF,KAAA6qD,gBAAA9jD,KAAA,iBACAlF,QAAA2hC,IAAA,oDACAxjC,KAAA6qD,gBAAA9jD,KAAA,eAAA0X,WAGAze,KAAA6qD,gBAAA9jD,KAAA,cAAA/G,MAEAA,KAAAk4E,MAAAl4E,KAAA6qD,gBAAAz0C,SAAA,SAEApW,KAAAqa,YAAA5F,EAAA5V,MAAA4b,YAAAgD,UAEAzd,KAAA8qD,gBAAA9qD,KAAA6qD,gBAAAx0C,KAAA,gCACArW,KAAAsE,OAAAtE,KAAA6qD,gBAAAx0C,KAAA,eAGArW,KAAAsE,OAAA81B,KAAA,YACA,OAGAp6B,KAAA6X,GAAA7X,KAAA6qD,gBAAAz0C,SAAA,MACApW,KAAA4rF,cAAA5rF,KAAA6qD,gBAAAz0C,SAAA,iBAEApW,KAAA6d,YAAA7d,KAAA6qD,gBAAA,YAAA,gBACA7qD,KAAA6d,YAAA7d,KAAA6qD,gBAAA,UAAA,cAEA7qD,KAAA6rF,QAAA,IAAAhqF,QAAAkhF,SAAA/iF,KAAA6qD,gBAAA,CACA9tB,KAAAl7B,QAAAmqF,OACAlvD,qBAAA,KACAmmB,YAAAjjD,KAAAkjD,aAAAj7B,KAAAjoB,MACAwkF,OAAAxkF,KAAAisF,QAAAhkE,KAAAjoB,MACAqjD,WAAArjD,KAAAksF,YAAAjkE,KAAAjoB,QAIA,IAAAmb,EAAAnb,KAAA6qD,gBAAAjjC,OAAA,gCACAzM,EAAA7a,SACAN,KAAA6d,YAAA1C,EAAAI,SAAA,2BAAA,QAAAvb,KAAA2wE,SACA3wE,KAAA6d,YAAA1C,EAAAI,SAAA,0BAAA,QAAAvb,KAAA0wE,UAIAA,OAAA,SAAAyb,GACA,IAAAC,GAAApsF,KAAA6X,GAEA7X,KAAA6X,IAAA,EACA7X,KAAA4rF,eAAA,EAEA5rF,KAAA6qD,gBAAAv4C,SAAA,YACA,IAAA2rB,EAAA,GACAA,EAAA,UAAAp/B,MAAAma,MAAA,EACAhZ,KAAA8qD,gBAAA/xC,SAAA,QAAAA,SAAAklB,EAAAp/B,MAAA4b,YAAAs6B,kBAAA/0C,KAAAqsF,UAAApkE,KAAAjoB,OAEAA,KAAAsE,OAAAC,IAAAvE,KAAAyU,SAAAtP,OACAnF,KAAA6qD,gBAAAv4C,SAAA,MACAtS,KAAA6qD,gBAAAh0C,YAAA,iBACA7W,KAAA6qD,gBAAAz8C,KAAA,eAAA,QAEAg+E,IAAA,IAAAD,GACAnsF,KAAAiyC,YAIA0+B,QAAA,SAAAwb,GACA,IAAAC,EAAApsF,KAAA6X,IAAA7X,KAAA4rF,cAEA5rF,KAAA6X,IAAA,EACA7X,KAAA4rF,eAAA,EAEA5rF,KAAA6qD,gBAAAv4C,SAAA,YACA,IAAA2rB,EAAA,GACAA,EAAA,UAAAp/B,MAAAma,MAAAhZ,KAAAssF,gBACAtsF,KAAA8qD,gBAAA/xC,SAAA,QAAAA,SAAAklB,EAAAp/B,MAAA4b,YAAAs6B,kBAAA/0C,KAAAqsF,UAAApkE,KAAAjoB,OAEAA,KAAAsE,OAAAC,IAAA,IACAvE,KAAA6qD,gBAAAh0C,YAAA,MACA7W,KAAA6qD,gBAAAh0C,YAAA,iBACA7W,KAAA6qD,gBAAAz8C,KAAA,eAAA,SAEAg+E,IAAA,IAAAD,GACAnsF,KAAAiyC,YAIA2+B,kBAAA,SAAAub,GACA,IAAAC,GAAApsF,KAAA4rF,cAEA5rF,KAAA6X,IAAA,EACA7X,KAAA4rF,eAAA,EAEA5rF,KAAA6qD,gBAAAv4C,SAAA,YACA,IAAA2rB,EAAA,GACAA,EAAA,UAAAp/B,MAAAma,MAAAhZ,KAAAssF,gBAAA,EACAtsF,KAAA8qD,gBAAA/xC,SAAA,QAAAA,SAAAklB,EAAAp/B,MAAA4b,YAAAs6B,kBAAA/0C,KAAAqsF,UAAApkE,KAAAjoB,OAEAA,KAAAsE,OAAAC,IAAAvE,KAAAyU,SAAA+F,oBACAxa,KAAA6qD,gBAAAh0C,YAAA,MACA7W,KAAA6qD,gBAAAv4C,SAAA,iBACAtS,KAAA6qD,gBAAAz8C,KAAA,eAAA,SAEAg+E,IAAA,IAAAD,GACAnsF,KAAAiyC,YAIAknC,OAAA,WACAn5E,KAAA4rF,gBAAA5rF,KAAA6X,GACA7X,KAAA0wE,SAEA1wE,KAAA2wE,WAIA1+B,SAAA,WACAjyC,KAAA0X,QAAA,UACA1X,KAAAyU,SAAAw9B,SAAAjyC,KAAA6X,IACA7X,KAAA6qD,gBAAAnzC,QAAA,WAGA60E,aAAA,WACAvsF,KAAA6d,YAAAhc,QAAAka,KAAA,UAAA,eAGAywE,WAAA,WACAxsF,KAAAsrB,eAAAzpB,QAAAka,KAAA,WAGA/b,KAAA6rF,QAAAY,UACAzsF,KAAAm5E,UAIA5uB,WAAA,SAAAprC,GACA,OAAAA,EAAApH,SACA,KAAAlW,QAAAi0B,UACA91B,KAAAm5E,SACAh6D,EAAAhH,iBACA,MAEA,KAAAtW,QAAAiiC,UACA,QAAAjlC,MAAAia,YACA9Y,KAAA0wE,SAEA1wE,KAAA2wE,UAGAxxD,EAAAhH,iBACA,MAEA,KAAAtW,QAAAgiC,SACA,QAAAhlC,MAAAia,YACA9Y,KAAA2wE,UAEA3wE,KAAA0wE,SAGAvxD,EAAAhH,mBAMAu0E,WAAA,WACA,OAAAvqF,SAAAnC,KAAA8qD,gBAAAhpC,IAAA,UAAAjjB,MAAAma,QAGAkqC,aAAA,WACAljD,KAAA6qD,gBAAAv4C,SAAA,YACAtS,KAAA8rF,gBAAA9rF,KAAA0sF,cAGAT,QAAA,WACA,IAAA39B,GAGAA,EADA,QAAAzvD,MAAAia,YACA9Y,KAAA8rF,gBAAA9rF,KAAA6rF,QAAAc,WAEA3sF,KAAA8rF,gBAAA9rF,KAAA6rF,QAAAc,YAGA3sF,KAAAssF,gBACAh+B,EAAAtuD,KAAAssF,gBACAh+B,EAAA,IACAA,EAAA,GAGAtuD,KAAA8qD,gBAAAhpC,IAAA,UAAAjjB,MAAAma,KAAAs1C,IAGA49B,YAAA,WACA,IAAA59B,EAAAtuD,KAAA0sF,aACAla,QAAAhvC,IAAA8qB,GAEAA,EAAAtuD,KAAAssF,gBAAA,EACAtsF,KAAA0wE,SAEA1wE,KAAA2wE,WAIA0b,UAAA,WACArsF,KAAA6qD,gBAAAh0C,YAAA,aAGA4H,QAAA,WACAze,KAAAqjB,OACArjB,KAAA6rF,QAAAptE,WAGA6tE,cAAA,WACA,OAAAtsF,KAAAk4E,OAAA,IAAA,KAEA,CACAnjC,kBAAA,IACAt3B,SAAA,CACAtY,MAAA,IACAqV,mBAAA,IACAy3B,SAAA3zC,EAAAqlB,QCxOA9kB,MAAAshF,QAAAt+E,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACA8U,SAAA,KACAk4D,gBAAA,KACAwM,oBAAA,KAEApvE,KAAA,SAAA5F,EAAAnD,GACAzU,KAAAoT,WAAA9U,EAAAsZ,GACA5X,KAAAqa,YAAA5F,EAAA5V,MAAAshF,QAAA1iE,UAGAzd,KAAAoT,WAAArM,KAAA,aACAlF,QAAA2hC,IAAA,gDACAxjC,KAAAoT,WAAArM,KAAA,WAAA0X,WAGAze,KAAAoT,WAAArM,KAAA,UAAA/G,MACAA,KAAAkoB,SAAAloB,KAAAoT,WAAAiD,KAAA,iBAGArW,KAAAogF,gBAAApgF,KAAAkoB,SAAAtM,OAAA,wBACA5b,KAAAogF,gBAAA9/E,OACAN,KAAA4sF,oBAAA5sF,KAAAkoB,SAAAnpB,MAAAiB,KAAAogF,iBAEApgF,KAAAogF,gBAAA,KAGApgF,KAAA6d,YAAA7d,KAAAoT,WAAA,UAAA0E,IACA,OAAAA,EAAAC,SACA,KAAAlW,QAAAgrF,OACA7sF,KAAA8sF,aACAh1E,EAAAK,iBACA,MACA,KAAAtW,QAAAkrF,SACA/sF,KAAAgtF,aACAl1E,EAAAK,iBACA,MACA,KAAAtW,QAAAgiC,SACA,QAAAhlC,MAAAia,YACA9Y,KAAA8sF,aAEA9sF,KAAAgtF,aAEAl1E,EAAAK,iBACA,MACA,KAAAtW,QAAAiiC,UACA,QAAAjlC,MAAAia,YACA9Y,KAAAgtF,aAEAhtF,KAAA8sF,aAEAh1E,EAAAK,oBAKAnY,KAAA6d,YAAA7d,KAAAkoB,SAAA,QAAApQ,IACA9X,KAAA2B,OAAA3B,KAAAkoB,SAAAnpB,MAAAT,EAAAwZ,EAAA8C,iBACA9C,EAAAK,oBAIAxW,OAAA,SAAA5C,GACAA,EAAA,GAAAA,GAAAiB,KAAAkoB,SAAA5nB,QAAAvB,IAAAiB,KAAA4sF,sBAIA5sF,KAAAogF,gBACAvpE,YAAA7W,KAAAyU,SAAAw4E,eACA7+E,KAAA,gBAAA,SAEApO,KAAAogF,gBAAApgF,KAAAkoB,SAAAvV,GAAA5T,GACAuT,SAAAtS,KAAAyU,SAAAw4E,eACA7+E,KAAA,gBAAA,QAEApO,KAAA4sF,oBAAA7tF,EAEAiB,KAAAyU,SAAAw9B,SAAAjyC,KAAAogF,gBAAArhF,GACAiB,KAAA0X,QAAA,SAAA,CACA0oE,gBAAApgF,KAAAogF,gBACAwM,oBAAA7tF,MAIA+tF,WAAA,WACA,OAAA9sF,KAAA4sF,oBACA5sF,KAAA2B,OAAA,GAEA3B,KAAA2B,OAAA3B,KAAA4sF,oBAAA,IAIAI,WAAA,WACA,OAAAhtF,KAAA4sF,oBACA5sF,KAAA2B,OAAA,GAEA3B,KAAA2B,OAAA3B,KAAA4sF,oBAAA,KAGA,CACAnvE,SAAA,CACAwvE,cAAA,SACAC,WAAA,QACAj7C,SAAA3zC,EAAAqlB,QCvGA9kB,MAAAsuF,YAAAtrF,QAAAoa,KAAArd,OAAA,CACAwuF,aAAA,KACAtS,SAAA,KACA77D,OAAA,KACA8pB,iBAAA,KACAupC,QAAA,KACA+a,YAAA,KACAC,kBAAA,KACAC,iBAAA,KACAC,QAAA,KACAC,kBAAA,KAEAC,WAAA,KACAntF,MAAA,KACAotF,aAAA,KACAh3B,eAAA,EACAi3B,OAAA,KACAC,aAAA,KACAC,qBAAA,KACA31D,SAAA,EACA41D,YAAA,EAEAlC,QAAA,KACAmC,qBAAA,KAEAC,sBAAA,EACAC,wBAAA,KAEAC,SAAA,KACAC,SAAA,KAEAC,aAAA,KACAC,iBAAA,KAEA9wE,KAAA,SAAA/I,GACAzU,KAAAqa,YAAA5F,EAAA5V,MAAAsuF,YAAA1vE,UAKAzd,KAAAyU,SAAAi5E,WACA1tF,KAAA0tF,WAAA1tF,KAAAyU,SAAAi5E,WAEA1tF,KAAA0tF,WAAA7uF,MAAAsH,YAAAxH,QAAA,OAAA,IAAA,IAIA,WAAA4H,SAAAC,SAAA+nF,WACAvuF,KAAA0tF,WAAA1tF,KAAA0tF,WAAA/uF,QAAA,SAAA,WAIAqB,KAAA2tF,aAAArvF,EAAAM,OAAA,GAAAoB,KAAAyU,SAAA+5E,eAEAxuF,KAAAkuF,wBAAAluF,KAAAyuF,kBAAAxmE,KAAAjoB,MAGAA,KAAAotF,aAAA9uF,EAAA0B,KAAAyU,SAAAi6E,aACA1uF,KAAA86E,SAAAx8E,EAAA0B,KAAAyU,SAAAiD,SACA1X,KAAAytF,kBAAAnvF,EAAA,UAGA0B,KAAA+qC,YAAAlsC,MAAAmW,gBAAA,0BAAAnW,MAAAsuF,YAAAwB,oBAGA3uF,KAAA6d,YAAA7d,KAAA86E,SAAA,WAAA,UAEAj8E,MAAAkJ,GAAA8P,GAAA,qBAAA,KACA7X,KAAA22D,eACA32D,KAAA4uF,oBAKA7jD,kBACA,OAAA/qC,KAAAquF,cAGAQ,sBACA,OAAA7uF,KAAAsuF,kBAGAvjD,gBAAAnS,GACA,IAAAk2D,EAGAl2D,GAAA,GACAk2D,EAAAl2D,EACAA,GAAA/2B,QAAAsf,KAAAyX,SAEAk2D,EAAAj+E,KAAAK,MAAA0nB,EAAA/2B,QAAAsf,KAAAyX,SAIAk2D,EAAAjwF,MAAAsuF,YAAA4B,qBAEAn2D,GADAk2D,EAAAjwF,MAAAsuF,YAAA4B,oBACAltF,QAAAsf,KAAAyX,SAGA54B,KAAAquF,aAAAz1D,EACA54B,KAAAsuF,iBAAAQ,GAGA3V,OAAA,WACAn5E,KAAA22D,cACA32D,KAAAgvF,OAEAhvF,KAAA6jE,SAIAA,MAAA,WACA,IAAA7jE,KAAA22D,cAIA,GAAA32D,KAAAO,MAAA,CASA,GAJAP,KAAA0X,QAAA,eAEApZ,EAAAiI,SAAA0R,eAAAP,QAAA,SAEA1X,KAAAsyE,QAAA,CACAtyE,KAAAif,OAAA3gB,EAAA,SAAA,CAAAkd,MAAA,qBAAAhN,SAAA3M,QAAAqR,MACAlT,KAAAstF,kBAAAhvF,EAAA,SAAA,CAAAkd,MAAA,yBAAAhN,SAAA3M,QAAAqR,MACAlT,KAAAutF,iBAAAjvF,EAAA,SAAA,CAAAkd,MAAA,wBAAAhN,SAAAxO,KAAAstF,mBACAttF,KAAA+oC,iBAAAzqC,EAAA,SAAA,CAAAkd,MAAA,wBAAAhN,SAAA3M,QAAAqR,MAEA,IAAA+7E,EAAA3wF,EAAA,YAAA,CAAAkd,MAAA,SAAAhN,SAAAxO,KAAA+oC,kBACA/oC,KAAAsyE,QAAAh0E,EAAA,UAAA,CAAAkd,MAAA,cAAAhN,SAAAxO,KAAA+oC,kBACA/oC,KAAAqtF,YAAA/uF,EAAA,SAAA,CAAAkd,MAAA,kBAAAhN,SAAAxO,KAAA+oC,kBACA,IAAAmmD,EAAA5wF,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,mBACA6O,SAAAygF,GACA3wF,EAAA,SAAA,CAAAkd,MAAA,cAAAhN,SAAAygF,GACA,IAAA/xE,EAAA5e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,aACAlY,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAAygF,GAEAjvF,KAAA6rF,QAAA,IAAAhqF,QAAAkhF,SAAA/iF,KAAAqtF,YAAA,CACAtwD,KAAAl7B,QAAAmqF,OACA/oC,YAAAjjD,KAAAkjD,aAAAj7B,KAAAjoB,MACAwkF,OAAAxkF,KAAAisF,QAAAhkE,KAAAjoB,MACAqjD,WAAArjD,KAAAksF,YAAAjkE,KAAAjoB,QAGAA,KAAA6d,YAAAqxE,EAAA,QAAA,QACAlvF,KAAA6d,YAAAX,EAAA,QAAA,QAIAld,KAAAm1D,qBACAn1D,KAAA6d,YAAAhc,QAAAsf,KAAA,SAAA,sBAEAnhB,KAAA+oC,iBAAAjnB,IAAAjjB,MAAAma,MAAAhZ,KAAA6uF,gBAAA,MACA7uF,KAAAstF,kBAAAxrE,IAAAjjB,MAAAoa,OAAAjZ,KAAAmvF,kBAIAnvF,KAAA4tF,OAAA,GAGA,IAFA,IAAAha,EAAAt1E,EAAA0B,KAAAyU,SAAAm5E,QAEAvuF,EAAA,EAAAA,EAAAu0E,EAAAtzE,OAAAjB,IAAA,CACA,IAAAgxE,EAAA/xE,EAAAs1E,EAAAv0E,IACA+vF,EAAApvF,KAAAqvF,UAAAhf,GAIArwE,KAAAytF,kBAAA5zD,YAAAw2C,GACAA,EAAArkD,SACAhsB,KAAAytF,kBAAAv2E,YAAAk4E,GACA/e,EAAA7hE,SAAAxO,KAAAsyE,SAEAtyE,KAAA4tF,OAAAluF,KAAA,CACA2wE,OAAAA,EACA+e,OAAAA,IAIApvF,KAAAsvF,eACAtvF,KAAAiuF,sBAAA,EAEAjuF,KAAAuvF,UAGA1tF,QAAAgW,GAAAhZ,MAAAkW,kBAAA,cAAA/U,KAAAkuF,yBACArsF,QAAAgW,GAAAhZ,MAAA6oC,iBAAA,OAAA1nC,KAAAkuF,yBAEArvF,MAAAyiB,mBAAAg7D,WAEAt8E,KAAA22D,eAAA,EACA32D,KAAA0X,QAAA,cAjFA1X,KAAAwvF,eAoFAA,YAAA,WACA3wF,MAAAgI,kBAAA,4BAAA,CACA4oF,cAAAzvF,KAAAyU,SAAAg7E,eACA,CAAA/kF,EAAA9C,KACA,YAAAA,IACA5H,KAAAO,MAAAmK,EAAAnK,MACAP,KAAA6jE,YAKAjqB,KAAA,WACA/6C,MAAAkJ,GAAA6tD,qBAGAT,mBAAA,WAEAn1D,KAAA+qC,YAAA/qC,KAAA+qC,YAGA/qC,KAAA0vF,gBAGAH,QAAA,WACAjxF,EAAA,QAAAgU,SAAA,YACAtS,KAAAif,OAAAlG,SAAA,UAEA/Y,KAAA+oC,iBAAA/Q,OAAAjf,SAAA,QAAAL,YAAA,EAAA,OAAA,KACA1Y,KAAA0X,QAAA,WACA7V,QAAAsf,KAAAzJ,QAAA,YAGA1X,KAAAstF,kBAAAt1D,OAAAjf,SAAA,QAAAG,aAAA,EAAA,OAAA,KACAlZ,KAAA8tF,qBAAAp0C,YAAA15C,KAAAsvF,aAAArnE,KAAAjoB,MAAA,KAEAA,KAAA6d,YAAAhc,QAAAqR,KAAA,SAAA,SAAA4E,GACAA,EAAAC,UAAAlW,QAAAkd,SACA/e,KAAAgvF,aAMAA,KAAA,WACAhvF,KAAA22D,gBAIA32D,KAAA0X,QAAA,cAEApZ,EAAA,QAAAuY,YAAA,YAEA7W,KAAAsrB,eAAAzpB,QAAAsf,KAAA,UACAnhB,KAAAsrB,eAAAzpB,QAAAqR,KAAA,SAEAlT,KAAA8tF,sBACAxzC,cAAAt6C,KAAA8tF,sBAGA9tF,KAAA4uF,iBAEA5uF,KAAAif,OAAAq2C,MAAA,KAAAv8C,SAAA,WAEA/Y,KAAA+oC,iBAAAhwB,SAAA,QAAAL,aAAA1Y,KAAA6uF,gBAAA,OAAA,KACA,IAAA,IAAAxvF,EAAA,EAAAA,EAAAW,KAAA4tF,OAAAttF,OAAAjB,IACAW,KAAA4tF,OAAAvuF,GAAAswF,UAAAh0E,SAEA3b,KAAA+oC,iBAAAlhB,OACA7nB,KAAA0X,QAAA,cAGA1X,KAAAstF,kBAAAv0E,SAAA,QAAAG,cAAAlZ,KAAAmvF,iBAAA,OAAA,KACAnvF,KAAAstF,kBAAAzlE,SAGAhmB,QAAAggB,IAAAhjB,MAAAkW,kBAAA,cAAA/U,KAAAkuF,yBAEArvF,MAAAyiB,mBAAAg7D,WAEAt8E,KAAA22D,eAAA,EACA32D,KAAA0X,QAAA,UAGAk3E,eAAA,WACA,IAAA,IAAAvvF,EAAA,EAAAA,EAAAW,KAAA4tF,OAAAttF,OAAAjB,IAAA,CACA,IAAAuwF,EAAA5vF,KAAA4tF,OAAAvuF,GACAuwF,EAAAD,UAAA3vF,KAAAqvF,UAAAO,EAAAvf,QAIArwE,KAAAytF,kBAAA5zD,YAAA+1D,EAAAvf,QACAuf,EAAAvf,OAAArkD,SACAhsB,KAAAytF,kBAAAv2E,YAAA04E,EAAAD,WACAC,EAAAR,OAAAl4E,YAAA04E,EAAAvf,QAGAxuE,QAAAsf,KAAAzJ,QAAA,WAGAy3E,eAAA,WACA,OAAAttF,QAAAsf,KAAAyX,QAAA54B,KAAA6uF,iBAGAa,aAAA,WACA1vF,KAAA+oC,iBAAAjnB,IAAA,QAAA9hB,KAAA6uF,gBAAA,MACA7uF,KAAAstF,kBAAA10D,MAAA54B,KAAAmvF,mBAGAG,aAAA,SAAAl+D,GAKA,GAJAA,IACApxB,KAAA6tF,aAAA,OAGA7tF,KAAA22D,cACA,OAAA,EAGA,GAAA32D,KAAAm4B,QAEA,OADAn4B,KAAA+tF,YAAA,GACA,EAIA,IAAAp2C,EAAAr5C,EAAAM,OAAAiD,QAAAsxB,YAAAnzB,KAAAsyE,SAAAzwE,QAAAsxB,YAAAnzB,KAAAotF,eAEA,GAAAptF,KAAA6tF,cAAAhvF,MAAA4P,QAAAkpC,EAAA33C,KAAA6tF,cAAA,GA0BA,OAAA,EAzBA7tF,KAAA6tF,aAAAl2C,EACA33C,KAAAm4B,SAAA,EAEA,IAAApc,EAAA/b,KAAAwtF,QAAAlvF,EAAA0B,KAAAwtF,QAAA,GAAAqC,cAAAtpF,UAAA,KAoBA,OAlBAvG,KAAAmuF,SAAApyE,EAAAA,EAAAsoB,aAAA,EACArkC,KAAAouF,SAAAryE,EAAAA,EAAA6F,YAAA,EAEAtjB,EAAAgJ,KAAA,CACAjC,IAAArF,KAAA0tF,aAAA,IAAA1tF,KAAA0tF,WAAA5sF,QAAA,KAAA,IAAA,KAAAjC,MAAAgzE,WAAA,IAAA7xE,KAAAO,MACAwI,OAAA,OACAhC,KAAAzI,EAAAM,OAAA,GAAA+4C,EAAA33C,KAAA2tF,cACAnmF,QAAA,CACAsoF,gBAAA9vF,KAAAO,OAEAwvF,UAAA,CACAC,iBAAA,GAEAC,aAAA,EACAvoF,QAAA1H,KAAAkwF,cAAAjoE,KAAAjoB,MACA2H,MAAA3H,KAAAmwF,YAAAloE,KAAAjoB,SAGA,GAMAyuF,kBAAA,WACA,OAAAzuF,KAAAsvF,cAAA,IAGAY,cAAA,SAAAnpF,GACA,IAAArI,EAAAqI,EACA,kDAAA/G,KAAAmuF,SAAA,KAAAnuF,KAAAouF,SAAA,eAGAZ,EAAAlvF,EAAA,gDACA0B,KAAAwtF,QACAA,EAAAhmC,aAAAxnD,KAAAwtF,SAEAA,EAAAh/E,SAAAxO,KAAAutF,kBAGAvtF,KAAA6d,YAAA2vE,EAAA,QAAA,WACAxtF,KAAAwtF,SACAxtF,KAAAwtF,QAAA7xE,SAEA3b,KAAAwtF,QAAAA,EAEAxtF,KAAAiuF,uBACAjuF,KAAAuvF,UACAvvF,KAAAiuF,sBAAA,GAGAjuF,KAAAsrB,eAAAkiE,EAAA,WAGA3rF,QAAA0f,sBAAA,KACAisE,EAAA,GAAAqC,cAAAtpF,SAAAvF,OACAwsF,EAAA,GAAAqC,cAAAtpF,SAAA6pF,MAAA1xF,GACA8uF,EAAA,GAAAqC,cAAAtpF,SAAAtF,QACAjB,KAAAqwF,gBAIAF,YAAA,WACAnwF,KAAAqwF,cAGAA,WAAA,WACArwF,KAAAm4B,SAAA,EAEAn4B,KAAA+tF,aACA/tF,KAAA+tF,YAAA,EACA/tF,KAAAsvF,iBAIAD,UAAA,SAAAhf,GACA,IAAA+e,EAAA/e,EAAA1wC,QASA,OANA99B,QAAAyuF,gBAAAjgB,EAAA+e,GAGAA,EAAAhhF,KAAA,KAAA,IACAghF,EAAA/4E,KAAA,QAAAjI,KAAA,KAAA,IAEAghF,GAGAlsC,aAAA,WACAljD,KAAAguF,qBAAAhuF,KAAA6uF,gBACA7uF,KAAAstF,kBAAAh7E,SAAA,aAGA25E,QAAA,WACA,QAAAptF,MAAAia,YACA9Y,KAAA+qC,YAAA/qC,KAAAguF,qBAAAhuF,KAAA6rF,QAAAc,WAEA3sF,KAAA+qC,YAAA/qC,KAAAguF,qBAAAhuF,KAAA6rF,QAAAc,WAGA3sF,KAAA0vF,gBAGAxD,YAAA,WACAlsF,KAAAstF,kBAAAz2E,YAAA,YACAhY,MAAAwW,gBAAA,0BAAArV,KAAA+qC,eAEA,CACA4jD,mBAAA,IACAI,mBAAA,IAEAtxE,SAAA,CACA/F,QAAA,kBACAk2E,OAAA,KACAc,YAAA,KACAhB,WAAA,KACA+B,cAAA,KACAjB,cAAA,MAIA3vF,MAAAsuF,YAAA3vE,KAAA,SAAA/I,GACA5V,MAAA63D,YAAA,IAAA73D,MAAAsuF,YAAA14E,ICtcA5V,MAAAyzD,cAAAzwD,QAAAoa,KAAArd,OAAA,CACAyzD,iBAAA,KACAjC,eAAA,KACAmgC,WAAA,KACAtT,cAAA,KAEAuT,oBAAA,KACAC,gBAAA,KAEAjzE,KAAA,SAAAkzE,EAAAj8E,GACAzU,KAAAowD,eAAA9xD,EAAAoyF,GACA1wF,KAAAqyD,iBAAAryD,KAAAowD,eAAAxoC,OAAA,oBACA5nB,KAAAyU,SAAAnW,EAAAM,OAAA,GAAAC,MAAAyzD,cAAA70C,SAAAhJ,GAGAzU,KAAAowD,eAAArpD,KAAA,mBACAlF,QAAA2hC,IAAA,uDACAxjC,KAAAowD,eAAArpD,KAAA,iBAAA0X,WAGAze,KAAAowD,eAAArpD,KAAA,gBAAA/G,MAEAA,KAAAwwF,oBAAAlyF,EAAA,8CACA0B,KAAAwwF,oBAAAl+E,SAAA,mBACAtS,KAAAwwF,oBAAA32D,YAAA75B,KAAAowD,gBAEApwD,KAAA2wF,qBAAA3wF,KAAAowD,gBACApwD,KAAA6d,YAAA7d,KAAAwwF,oBAAA,QAAA,WACAxwF,KAAA4wF,eAEA5wF,KAAA6d,YAAA7d,KAAAqyD,iBAAAv3C,QAAA,QAAA,SAAA,iBAGA+1E,gBAAA,SAAAvsF,GACAtE,KAAAi9E,gBAEA34E,EAAAu1B,YAAA75B,KAAAi9E,eACAj9E,KAAAi9E,cAAAjxD,SACA1nB,EAAAoT,QAAA,SAGApT,EAAAC,IAAAvE,KAAAi9E,cAAA14E,QAGAvE,KAAAi9E,cAAA34E,EAEAtE,KAAA6d,YAAA7d,KAAAi9E,cAAA,6BAAA,kBAGA6T,kBAAA,SAAAt6E,GACAxW,KAAAwwF,oBAAAltF,KAAAkT,IAGAm6E,qBAAA,SAAArsF,GACAtE,KAAA6d,YAAAvZ,EAAA,SAAA,WACAtE,KAAAqyD,iBAAA//C,SAAA,YAEAtS,KAAA6d,YAAAvZ,EAAA,QAAA,WACAtE,KAAAqyD,iBAAAx7C,YAAA,aAIAk6E,aAAA,WACA/wF,KAAAywF,kBAIAzwF,KAAAuwF,aACAvwF,KAAAuwF,WAAAvwF,KAAAowD,eAAAzwB,OAAA,GACA3/B,KAAAuwF,WAAAniF,KAAA,CACA9M,KAAA,OACA0vF,eAAA,QAEAhxF,KAAA2wF,qBAAA3wF,KAAAuwF,aAGAvwF,KAAA6wF,gBAAA7wF,KAAAuwF,YACAvwF,KAAA8wF,kBAAAjyF,MAAAc,EAAA,MAAA,SACAK,KAAAywF,iBAAA,IAGAG,aAAA,YAEA,IAAA5wF,KAAAywF,kBAIAzwF,KAAA6wF,gBAAA7wF,KAAAowD,gBACApwD,KAAA8wF,kBAAAjyF,MAAAc,EAAA,MAAA,SACAK,KAAAywF,iBAAA,EAGAzwF,KAAA6d,YAAA7d,KAAAowD,eAAA,UAAA,eAGA6gC,eAAA,WACAjxF,KAAAywF,gBACAzwF,KAAA4wF,eAEA5wF,KAAA+wF,eAGA/wF,KAAAyU,SAAA89C,cAAAvyD,KAAAi9E,gBAGAiU,UAAA,SAAAp5E,GACAA,EAAAC,UAAAlW,QAAAsvF,SAAAnxF,KAAAi9E,cAAA14E,QACAvE,KAAA+wF,eACA/wF,KAAAwwF,oBAAAl+E,SAAA,aACAtS,KAAA6d,YAAA7d,KAAAuwF,WAAA,QAAA,aAIAa,QAAA,SAAAt5E,GACAA,EAAAK,iBAEAL,EAAAC,UAAAlW,QAAAsvF,UACAnxF,KAAA4wF,eACA5wF,KAAAwwF,oBAAA35E,YAAA,eAIAw6E,cAAA,WACArxF,KAAAi9E,cAAA14E,MACAvE,KAAAwwF,oBAAA35E,YAAA,aAEA7W,KAAAwwF,oBAAAl+E,SAAA,cAIAs5C,QAAA,SAAA9zC,GACA,GAAA9X,KAAAi9E,cAAA,GAAAz4E,kBAAA,CACA,IAAAyjC,EAAAjoC,KAAAi9E,cAAA,GAAAh1C,eACAI,EAAAroC,KAAAi9E,cAAA,GAAA50C,aAEAroC,KAAAixF,iBACAjxF,KAAAi9E,cAAA,GAAAz4E,kBAAAyjC,EAAAI,QAEAroC,KAAAixF,mBAGA,CACAxzE,SAAA,CACA80C,cAAAj0D,EAAAqlB,QC/IA9kB,MAAAkzE,QAAAlwE,QAAAoa,KAAArd,OAAA,CACAu/B,YAAA,KAEAlf,OAAA,KACA8pB,iBAAA,KACAupC,QAAA,KACA36C,SAAA,KACA+zC,YAAA,KACA2hB,YAAA,KACAC,kBAAA,KACAC,iBAAA,KACA+D,eAAA,KACAC,WAAA,KACAC,YAAA,KACAC,qBAAA,KACAC,gBAAA,KACAC,YAAA,KACAC,YAAA,KACAC,wBAAA,KACArE,QAAA,KACAsE,cAAA,EACAC,WAAA,KACAtE,kBAAA,KAEA/a,UAAA,EACAmD,WAAA,EACAmc,aAAA,EAEAC,kBAAA,EACAC,uBAAA,KACAC,kBAAA,UACAC,kBAAA,KACAC,YAAA,GACAC,aAAA,GACAC,qBAAA,CACAC,MAAA,CACA55D,MAAA,IACA3K,OAAA,KAEAwkE,OAAA,CACA75D,MAAA,IACA3K,OAAA,OAIA8/C,QAAA,KACA1oE,IAAA,KACAuoF,OAAA,KAEA8E,aAAA,KACA9wE,UAAA,KAEAiqE,QAAA,KACAmC,qBAAA,KAEA2E,mBAAA,KAEAtE,aAAA,KACAC,iBAAA,KAEA9wE,KAAA,SAAA2gB,GACAn+B,KAAAm+B,YAAAA,EAEAn+B,KAAA2yF,mBAAA3yF,KAAAsvF,aAAArnE,KAAAjoB,MAEAA,KAAA+xF,WAAAzzF,EAAA,WAAA,CAAAgD,KAAA,SAAA4D,KAAA,qBAAAC,MAAA,MACAnF,KAAAytF,kBAAAnvF,EAAA,UAGA0B,KAAA+qC,YAAAlsC,MAAAmW,gBAAA,0BAAAnW,MAAAkzE,QAAA4c,qBAGA5jD,kBACA,OAAA/qC,KAAAquF,cAGAQ,sBACA,OAAA7uF,KAAAsuF,kBAGAvjD,gBAAAnS,GACA,IAAAk2D,EAGAl2D,GAAA,GACAk2D,EAAAl2D,EACAA,GAAA/2B,QAAAsf,KAAAyX,SAEAk2D,EAAAj+E,KAAAK,MAAA0nB,EAAA/2B,QAAAsf,KAAAyX,SAIAk2D,EAAAjwF,MAAAkzE,QAAAgd,qBAEAn2D,GADAk2D,EAAAjwF,MAAAkzE,QAAAgd,oBACAltF,QAAAsf,KAAAyX,SAGA54B,KAAAquF,aAAAz1D,EACA54B,KAAAsuF,iBAAAQ,GAGA9tF,KAAA,WACA,IAAAhB,KAAA0yE,SAAA,CASA,GALA1yE,KAAA0yE,UAAA,EACA1yE,KAAA0X,QAAA,cAEApZ,EAAAiI,SAAA0R,eAAAP,QAAA,SAEA1X,KAAAsyE,QAAA,CACAtyE,KAAAif,OAAA3gB,EAAA,SAAA,CAAAkd,MAAA,qBAAAhN,SAAA3M,QAAAqR,MACAlT,KAAAstF,kBAAAhvF,EAAA,SAAA,CAAAkd,MAAA,yBAAAhN,SAAA3M,QAAAqR,MACAlT,KAAA+oC,iBAAAzqC,EAAA,SAAA,CAAAkd,MAAA,wBAAAhN,SAAA3M,QAAAqR,MAEA,IAAA+7E,EAAA3wF,EAAA,YAAA,CAAAkd,MAAA,SAAAhN,SAAAxO,KAAA+oC,kBACA/oC,KAAAsyE,QAAAh0E,EAAA,UAAA,CAAAkd,MAAA,cAAAhN,SAAAxO,KAAA+oC,kBACA/oC,KAAAqtF,YAAA/uF,EAAA,SAAA,CAAAkd,MAAA,kBAAAhN,SAAAxO,KAAA+oC,kBACA,IAAAmmD,EAAA5wF,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,mBACA6O,SAAAygF,GAKA,GAJA3wF,EAAA,SAAA,CAAAkd,MAAA,cAAAhN,SAAAygF,GACAjvF,KAAA23B,SAAAr5B,EAAA,SAAA,CAAAkd,MAAA,iBAAAC,MAAA5c,MAAAc,EAAA,MAAA,YAAA6O,SAAAygF,GACAjvF,KAAA0rE,YAAAptE,EAAA,SAAA,CAAAkd,MAAA,cAAAhN,SAAAygF,GAEApwF,MAAA+zF,IAAA,CAIA,GAHA5yF,KAAAsxF,eAAAhzF,EAAA,YAAA,CAAAkd,MAAA,sBAAAhN,SAAAxO,KAAAstF,mBAGAttF,KAAAm+B,YAAA1pB,SAAA64D,eAAAhtE,OAAA,EAAA,CACAN,KAAAuxF,WAAAjzF,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,cACAlY,KAAAtD,KAAAm+B,YAAA1pB,SAAA64D,eAAA,GAAA92D,QACAhI,SAAAxO,KAAAsxF,gBACAtxF,KAAAwxF,YAAAlzF,EAAA,SAAA,CAAAkd,MAAA,wBAAAqe,YAAA75B,KAAAuxF,YACA,MAAAl/E,EAAA/T,EAAA,QAAA,CAAAkd,MAAA,WAAAhN,SAAAxO,KAAAwxF,aACA,IAAAj/E,EAAAmQ,EACA,IAAA,IAAArjB,EAAA,EAAAA,EAAAW,KAAAm+B,YAAA1pB,SAAA64D,eAAAhtE,OAAAjB,IACAkT,EAAAjU,EAAA,SAAAkQ,SAAA6D,GACAqQ,EAAApkB,EAAA,OAAA,CACAyI,KAAA,CAAA2W,OAAAre,GACAiE,KAAAtD,KAAAm+B,YAAA1pB,SAAA64D,eAAAjuE,GAAAmX,MACAgF,MAAA,IAAAnc,EAAA,MAAA,OACAmP,SAAA+D,GAEA,IAAA1Q,QAAAqZ,QAAAlb,KAAAuxF,WAAA,CACAviC,eAAA37B,IACArzB,KAAA6yF,aAAAv0F,EAAA+0B,GAAAtsB,KAAA,cAIAzI,EAAA,4BAAAkQ,SAAAxO,KAAAsxF,gBAIAtxF,KAAAyxF,qBAAAnzF,EAAA,SAAA,CACAkd,MAAA,0BACAia,KAAA,UACA/Z,aAAA7c,MAAAc,EAAA,MAAA,eACA+1B,SAAA,MACAlnB,SAAAxO,KAAAsxF,gBACAhzF,EAAA,YAAA,CACAgD,KAAA,SACAm0B,KAAA,SACAja,MAAA,yCACAC,MAAA5c,MAAAc,EAAA,MAAA,WACA+b,aAAA7c,MAAAc,EAAA,MAAA,WACAmzF,gBAAA,OACAp9D,SAAA,KACA3uB,KAAA,CACA6xB,MAAA,GACA3K,OAAA,GACA8kE,WAAA,aAEAvkF,SAAAxO,KAAAyxF,sBACAnzF,EAAA,YAAA,CACAgD,KAAA,SACAm0B,KAAA,SACAja,MAAA,iCACAC,MAAA5c,MAAAc,EAAA,MAAA,UACA+b,aAAA7c,MAAAc,EAAA,MAAA,UACAmzF,gBAAA,QACAp9D,SAAA,KACA3uB,KAAA,CACA6xB,MAAA,IACA3K,OAAA,KACA8kE,WAAA,YAEAvkF,SAAAxO,KAAAyxF,sBACAnzF,EAAA,YAAA,CACAgD,KAAA,SACAm0B,KAAA,SACAja,MAAA,gCACAC,MAAA5c,MAAAc,EAAA,MAAA,UACA+b,aAAA7c,MAAAc,EAAA,MAAA,UACAmzF,gBAAA,QACAp9D,SAAA,KACA3uB,KAAA,CACA6xB,MAAA,IACA3K,OAAA,IACA8kE,WAAA,WAEAvkF,SAAAxO,KAAAyxF,sBAEAnzF,EAAA,4BAAAkQ,SAAAxO,KAAAsxF,gBACA,MAAAl/B,EAAA9zD,EAAA,0BAAAkQ,SAAAxO,KAAAsxF,gBAGAtxF,KAAA0xF,gBAAApzF,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,eACAmC,YAAA,SACAmzD,SAAA,GACAkiB,cAAA,GACA1vF,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAA4jD,GACApyD,KAAA6d,YAAA7d,KAAA0xF,gBAAA,QAAA,qBAGA1xF,KAAA2xF,YAAArzF,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,aACAlY,KAAAzE,MAAAc,EAAA,MAAA,WACAge,YAAA,YACAnP,SAAA4jD,GACApyD,KAAAizF,oBACAjzF,KAAA6d,YAAA7d,KAAA2xF,YAAA,QAAA,KACA3xF,KAAAsvF,cAAA,GAAA,KAIAtvF,KAAAoyF,kBAAAvzF,MAAAmW,gBAAA,2BAGAhV,KAAA6d,YAAAvf,EAAA,OAAA0B,KAAAyxF,sBAAA,QAAA,oBAGAzxF,KAAA4xF,YAAAtzF,EAAA,SAAA,CACAkd,MAAA,mBAIAxb,KAAAutF,iBAAAjvF,EAAA,SAAA,CAAAkd,MAAA,wBAAAhN,SAAAxO,KAAAstF,mBAEAttF,KAAA4xF,aACA5xF,KAAAutF,iBAAA16E,OAAA7S,KAAA4xF,aAGA5xF,KAAA6rF,QAAA,IAAAhqF,QAAAkhF,SAAA/iF,KAAAqtF,YAAA,CACAtwD,KAAAl7B,QAAAmqF,OACA/oC,YAAAjjD,KAAAkjD,aAAAj7B,KAAAjoB,MACAwkF,OAAAxkF,KAAAisF,QAAAhkE,KAAAjoB,MACAqjD,WAAArjD,KAAAksF,YAAAjkE,KAAAjoB,QAGAA,KAAA6d,YAAAqxE,EAAA,QAAA,SACAlvF,KAAA6d,YAAA7d,KAAA0rE,YAAA,QAAA,KACA1rE,KAAAm+B,YAAAkwC,cAAAruE,KAAA0rE,eAKA1rE,KAAAm1D,qBACAn1D,KAAA6d,YAAAhc,QAAAsf,KAAA,SAAA,sBAEAnhB,KAAA+oC,iBAAAjnB,IAAAjjB,MAAAma,MAAAhZ,KAAA6uF,gBAAA,MACA7uF,KAAAstF,kBAAAxrE,IAAAjjB,MAAAoa,OAAAjZ,KAAAmvF,kBAGAnvF,KAAA4tF,OAAA,GACA,IAAAha,EAAAt1E,EAAA,mBAAAq2B,IAAAr2B,EAAA,2BAEA,GAAAs1E,EAAAtzE,OAAA,CAEAN,KAAA+xF,WAAAvqC,aAAAosB,EAAAlgD,IAAA,IAIA,IAAA,IAAAr0B,EAAA,EAAAA,EAAAu0E,EAAAtzE,OAAAjB,IAAA,CACA,IAAAgxE,EAAA/xE,EAAAs1E,EAAAv0E,IACA+vF,EAAApvF,KAAAqvF,UAAAhf,GAIArwE,KAAAytF,kBAAA5zD,YAAAw2C,GACAA,EAAArkD,SACAhsB,KAAAytF,kBAAAv2E,YAAAk4E,GACA/e,EAAA7hE,SAAAxO,KAAAsyE,SAEAtyE,KAAA4tF,OAAAluF,KAAA,CACA2wE,OAAAA,EACA+e,OAAAA,KAKApvF,KAAAsvF,eAEAtvF,KAAAm+B,YAAAtmB,GAAA,SAAA7X,KAAA2yF,oBACA9wF,QAAAgW,GAAAhZ,MAAAkW,kBAAA,cAAA/U,KAAA2yF,oBACA9wF,QAAAgW,GAAAhZ,MAAA6oC,iBAAA,OAAA1nC,KAAA2yF,oBAEA9zF,MAAAyiB,mBAAAg7D,WAEAt8E,KAAA0X,QAAA,UAGAw7E,cAAA,WACA,OAAAlzF,KAAAm+B,YAAA1pB,SAAA64D,eAAAttE,KAAAgyF,eAGAiB,kBAAA,WACA,MAAAv1E,EAAA1d,KAAAkzF,gBACA,cAAAx1E,EAAAy1E,SAAAz1E,EAAAy1E,QAGAnzF,KAAA2xF,YAAAr/E,SAAA,UAFAtS,KAAA2xF,YAAA96E,YAAA,WAMAg8E,aAAA,SAAAxzF,GACAW,KAAAgyF,aAAA3yF,EACAW,KAAAuxF,WAAAjuF,KAAAtD,KAAAm+B,YAAA1pB,SAAA64D,eAAAjuE,GAAAmX,OACAxW,KAAAwxF,YAAAn7E,KAAA,SAAAQ,YAAA,OACA7W,KAAAwxF,YAAAn7E,KAAA,KAAA1D,GAAAtT,GAAAiT,SAAA,OACAtS,KAAAsvF,cAAA,GACAtvF,KAAAizF,oBACAjzF,KAAA0X,QAAA,eAAA,CACA07E,cAAApzF,KAAAm+B,YAAA1pB,SAAA64D,eAAAjuE,MAIA81D,mBAAA,WAEAn1D,KAAA+qC,YAAA/qC,KAAA+qC,YAGA/qC,KAAA0vF,gBAGAH,QAAA,WACAvvF,KAAA0yE,WAAA1yE,KAAA61E,YAIAv3E,EAAA,QAAAgU,SAAA,YACAtS,KAAAif,OAAAlG,SAAA,UAEA/Y,KAAA+oC,iBAAA/Q,OAAAjf,SAAA,QAAAL,YAAA,EAAA,OAAA,KACA1Y,KAAA0X,QAAA,WACA7V,QAAAsf,KAAAzJ,QAAA,YAGA1X,KAAAstF,kBAAAt1D,OAAAjf,SAAA,QAAAG,aAAA,EAAA,OAAA,KACAlZ,KAAA6d,YAAAhc,QAAAqR,KAAA,SAAA,SAAA4E,GACAA,EAAAC,UAAAlW,QAAAkd,SACA/e,KAAAiB,aAKAjB,KAAA61E,WAAA,IAGA50E,MAAA,WACAjB,KAAA0yE,UAAA1yE,KAAA61E,YAIA71E,KAAA0X,QAAA,eAEApZ,EAAA,QAAAuY,YAAA,YAEA7W,KAAAsrB,eAAAzpB,QAAAsf,KAAA,UACAnhB,KAAAsrB,eAAAzpB,QAAAqR,KAAA,SAGAlT,KAAA+xF,WAAA/lE,SACAhsB,KAAA4uF,iBAEA5uF,KAAAif,OAAAq2C,MAAA,KAAAv8C,SAAA,WAEA/Y,KAAA+oC,iBAAAhwB,SAAA,QAAAL,aAAA1Y,KAAA6uF,gBAAA,OAAA,KACA,IAAA,IAAAxvF,EAAA,EAAAA,EAAAW,KAAA4tF,OAAAttF,OAAAjB,IACAW,KAAA4tF,OAAAvuF,GAAAswF,UAAAh0E,SAEA3b,KAAA+oC,iBAAAlhB,OACA7nB,KAAA0X,QAAA,cAGA1X,KAAAstF,kBAAAv0E,SAAA,QAAAG,cAAAlZ,KAAAmvF,iBAAA,OAAA,KACAnvF,KAAAstF,kBAAAzlE,OACA7nB,KAAAqzF,uBAGArzF,KAAAm+B,YAAAtc,IAAA,SAAA7hB,KAAA2yF,oBACA9wF,QAAAggB,IAAAhjB,MAAAkW,kBAAA,cAAA/U,KAAA2yF,oBACA9wF,QAAAggB,IAAAhjB,MAAA6oC,iBAAA,OAAA1nC,KAAA2yF,oBAEA9zF,MAAAyiB,mBAAAg7D,WAEAt8E,KAAA0yE,UAAA,EACA1yE,KAAA61E,WAAA,EACA71E,KAAA0X,QAAA,WAGAk3E,eAAA,WACA,IAAA,IAAAvvF,EAAA,EAAAA,EAAAW,KAAA4tF,OAAAttF,OAAAjB,IAAA,CACA,IAAAuwF,EAAA5vF,KAAA4tF,OAAAvuF,GACAuwF,EAAAD,UAAA3vF,KAAAqvF,UAAAO,EAAAvf,QAIArwE,KAAAytF,kBAAA5zD,YAAA+1D,EAAAvf,QACAuf,EAAAvf,OAAArkD,SACAhsB,KAAAytF,kBAAAv2E,YAAA04E,EAAAD,WACAC,EAAAR,OAAAl4E,YAAA04E,EAAAvf,QAGAxuE,QAAAsf,KAAAzJ,QAAA,UACA7V,QAAAka,KAAArE,QAAA,WAGAy3E,eAAA,WACA,OAAAttF,QAAAsf,KAAAyX,QAAA54B,KAAA6uF,iBAGAa,aAAA,WACA1vF,KAAA+oC,iBAAAjnB,IAAA,QAAA9hB,KAAA6uF,gBAAA,MACA7uF,KAAAstF,kBAAA10D,MAAA54B,KAAAmvF,kBACAnvF,KAAAszF,0BACAtzF,KAAAuzF,uBAIAC,kBAAA,WACA,OAAA,IAAA30F,MAAA40F,6BAGAnE,aAAA,SAAAoE,EAAA76B,GACA,IAAA74D,KAAA0yE,SACA,OAAA,EAIAghB,GAAA,IAAAA,EAEA,MAAAh2E,EAAA1d,KAAAkzF,gBACAC,KACAt6B,GACA74D,KAAA+tE,WAAA/tE,KAAA+tE,QAAA/tE,KAAAm+B,YAAA1pB,SAAAs5D,UACA/tE,KAAAwtF,UACAkG,QACA,IAAAh2E,EAAAy1E,UACAz1E,EAAAy1E,SAGAnzF,KAAA0X,QAAA,qBAAA,CACA07E,cAAA11E,EACAg2E,YAAAA,EACAP,QAAAA,IAIAA,EAKAnzF,KAAAm+B,YAAAszC,uBAAA/zD,EAAArY,IAAA,wBAAAmE,KAAAnE,IAEA,IAAAsuF,EACAD,EACA1zF,KAAA4hB,UAAA,KACA5hB,KAAA8xF,cAAA9xF,KAAAwtF,UACAxtF,KAAAwzF,qBACAxzF,KAAA0yF,aAAA1yF,KAAAwtF,QAAAv/D,SACAjuB,KAAA4hB,UAAA5hB,KAAAutF,iBAAA3rE,cAEA+xE,EAAA90F,MAAAyR,WAAAjL,GACAsuF,GAAA3zF,KAAAwtF,QAAA,GAAAqC,gBACA7vF,KAAA4hB,UAAAtjB,EAAA0B,KAAAwtF,QAAA,GAAAqC,cAAAtpF,UAAAqb,eAKA5hB,KAAA8xF,cAAA,EAEA,IAAAtE,EAAAlvF,EAAA,YAAA,CACAkd,MAAA,aACAo4E,YAAA,EACA5gF,IAAA3N,IAGArF,KAAAwtF,QACAxtF,KAAAwtF,QAAAt2E,YAAAs2E,GAEAA,EAAAh/E,SAAAxO,KAAAutF,kBAKAvtF,KAAAszF,2BACAtzF,KAAA6xF,0BACA7xF,KAAA6xF,wBAAAvzF,EAAA,SAAA,CACAkd,MAAA,gCAEAgyE,EAAAqG,KAAA,mDACA7zF,KAAA6xF,wBAAA7xF,KAAAutF,iBAAAl3E,KAAA,kCAKArW,KAAAwzF,qBACAE,GAAA,OAAA1zF,KAAA0yF,eACAlF,EAAAv/D,OAAAjuB,KAAA0yF,cACA1yF,KAAAutF,iBAAA3rE,UAAA5hB,KAAA4hB,YAGAkyE,aAAAx1F,EAAAM,OAAA,CACAm1F,aAAA,EAEAC,WAAA,EACAC,OAAAC,IACAl0F,KAAA8xF,cAAA,EACA9xF,KAAA0yF,aAAA,KACA1yF,KAAA4hB,UAAA,KACAsyE,EAAAF,UAAA,OAEAn1F,MAAA40F,6BAAA,IAAAjG,EAAA,KAEAA,EAAA31E,GAAA,OAAA,KACA7X,KAAA8xF,cAAA,GACA4B,GAAAC,GAAA,OAAA3zF,KAAA4hB,WACAtjB,EAAAkvF,EAAA,GAAAqC,cAAAtpF,UAAAqb,UAAA5hB,KAAA4hB,aAKA5hB,KAAAqF,IAAAA,EACArF,KAAAwtF,QAAAA,EAEAxtF,KAAAszF,0BACAtzF,KAAAuzF,sBAGAvzF,KAAA0X,QAAA,oBAAA,CACA07E,cAAApzF,KAAAm+B,YAAA1pB,SAAA64D,eAAAttE,KAAAgyF,cACAxE,QAAAxtF,KAAAwtF,UAGAxtF,KAAAuvF,YAtFAvvF,KAAAuvF,WA0FA+D,uBAAA,WACA,MAAA,YAAAtzF,KAAAmyF,mBAGAgC,iBAAA,SAAAr8E,GACA,GAAA9X,KAAAiyF,iBACA,OAAA,EAGAjyF,KAAAutF,iBAAA12E,YAAA,kCAEA,MAAA8D,EAAArc,EAAAwZ,EAAA4F,QACA02E,EAAAz5E,EAAA5T,KAAA,cAGA,GAAAqtF,IAAAp0F,KAAAmyF,kBACA,OAAA,EAIAnyF,KAAAmyF,kBAAAiC,EACAp0F,KAAAqyF,YAAA13E,EAAA5T,KAAA,SACA/G,KAAAsyF,aAAA33E,EAAA5T,KAAA,UAGA/G,KAAAyxF,qBAAAp7E,KAAA,QACAQ,YAAA,UACAzI,KAAA,gBAAA,SAEAuM,EACArI,SAAA,UACAlE,KAAA,gBAAA,QAGA,YAAApO,KAAAmyF,kBACAnyF,KAAAqzF,sBAEArzF,KAAAutF,iBAAAj7E,SAAA,iCACAtS,KAAAsvF,cAAA,GAAA,GACAtvF,KAAAuzF,wBAIAc,kBAAA,WAEA,GAAAr0F,KAAAiyF,mBAAAjyF,KAAAszF,yBACA,OAAA,EAIAtzF,KAAAoyF,mBAAA,aAAApyF,KAAAoyF,kBAGApyF,KAAAoyF,kBAAA,WAFApyF,KAAAoyF,kBAAA,YAMAvzF,MAAAwW,gBAAA,0BAAArV,KAAAoyF,mBAGApyF,KAAAutF,iBAAAj7E,SAAA,kCAGAtS,KAAAuzF,uBAGAA,oBAAA,WAEA,GAAAvzF,KAAAiyF,iBACA,OAAA,EAGAjyF,KAAAiyF,kBAAA,EAGAjyF,KAAA0xF,gBACA76E,YAAA,YACAwC,WAAA,YACAA,WAAA,eAGArZ,KAAAutF,iBAAAj7E,SAAA,2CAGA,WAAAtS,KAAAmyF,kBACAnyF,KAAAutF,iBAAAj7E,SAAA,+BAEAtS,KAAAutF,iBAAA12E,YAAA,+BAIA,IAAAy9E,EAAA,EACAC,EAAA,EACAz8C,EAAA,EACA08C,EAAAx0F,KAAAstF,kBAAAr/D,SAAA,GAAA,GACAwmE,EAAAz0F,KAAAstF,kBAAA10D,QAAA,GACA87D,EAAA10F,KAAAuyF,qBAAAvyF,KAAAmyF,mBAAAlkE,OACA0mE,EAAA30F,KAAAuyF,qBAAAvyF,KAAAmyF,mBAAAv5D,MAEA,cAAA54B,KAAAoyF,mBACAqC,EAAAC,IACAJ,EAAAG,EAAAC,GAEAF,EAAAG,IACAJ,EAAAC,EAAAG,KAGAH,EAAAE,IACAJ,EAAAE,EAAAE,GAEAD,EAAAE,IACAJ,EAAAE,EAAAE,IAIA78C,EAAAw8C,EACAC,EAAAD,IACAx8C,EAAAy8C,GAIA,MAAAz6C,GAAA,IAAAhC,EAAA,EACA88C,EAAA,cAAA50F,KAAAoyF,kBAAA,SAAA,OAGApyF,KAAA4xF,YAAA9vE,IAAA,CACA8W,MAAA54B,KAAAuyF,qBAAAvyF,KAAAmyF,mBAAAv5D,MAAA,KACA3K,OAAAjuB,KAAAuyF,qBAAAvyF,KAAAmyF,mBAAAlkE,OAAA,KACAkhC,UAAA,SAAArX,EAAA,eAAAgC,EAAA,MAAAA,EAAA,aAAA86C,EAAA,MAIA50F,KAAAkyF,wBACAvpE,aAAA3oB,KAAAkyF,wBAEAlyF,KAAAkyF,uBAAAtpE,WAAA,KAEA,cAAA5oB,KAAAoyF,kBACApyF,KAAA6xF,wBAAA/vE,IAAA,CACA8W,MAAA54B,KAAAsyF,aAAA,KACArkE,OAAAjuB,KAAAqyF,YAAA,KACAljC,UAAA,SAAArX,EAAA,eAAAgC,EAAA,MAAAA,EAAA,KACA+6C,UAAA,EACAC,WAAA,IAAA,GAAAh9C,EAAA,OAGA93C,KAAA6xF,wBAAA/vE,IAAA,CACA8W,MAAA54B,KAAAqyF,YAAA,KACApkE,OAAAjuB,KAAAsyF,aAAA,KACAnjC,UAAA,SAAArX,EAAA,eAAAgC,EAAA,MAAAA,EAAA,KACA+6C,UAAA,IAAA,GAAA/8C,EAAA,KACAg9C,WAAA,IAKA90F,KAAAutF,iBAAA12E,YAAA,kCACA7W,KAAAutF,iBAAA12E,YAAA,iCACA7W,KAAAiyF,kBAAA,GAEA,MAGAoB,mBAAA,WAEArzF,KAAAkyF,wBACAvpE,aAAA3oB,KAAAkyF,wBAEAlyF,KAAAmyF,kBAAA,UACAnyF,KAAAyxF,qBAAAp7E,KAAA,QACAQ,YAAA,UACAzI,KAAA,gBAAA,SACApO,KAAAyxF,qBAAAp7E,KAAA,gCACA/D,SAAA,UACAlE,KAAA,gBAAA,QACApO,KAAA0xF,gBACAp/E,SAAA,YACAlE,KAAA,WAAA,IACAA,KAAA,cAAA,IACApO,KAAAutF,iBAAA12E,YAAA,kCACA7W,KAAAutF,iBAAA12E,YAAA,2CACA7W,KAAAutF,iBAAA12E,YAAA,+BAGA7W,KAAA6xF,0BAEA7xF,KAAAwzF,qBACAxzF,KAAAwtF,QAAA,GAAAuH,cAAAC,kBAEAh1F,KAAA6xF,wBAAA7lE,SACAhsB,KAAA6xF,wBAAA,KACA7xF,KAAAwtF,QAAA,KACAxtF,KAAAsvF,cAAA,GAAA,IAGAtvF,KAAAiyF,kBAAA,GAGA5C,UAAA,SAAAhf,GACA,IAAA+e,EAAA/e,EAAA1wC,QAYA,OATA99B,QAAAyuF,gBAAAjgB,EAAA+e,GAGAA,EAAAhhF,KAAA,KAAA,IACAghF,EAAA/4E,KAAA,QAAAjI,KAAA,KAAA,IAGAghF,EAAA/4E,KAAA,UAAA+jB,KAAA,YAAA,GAEAg1D,GAGAlsC,aAAA,WACAljD,KAAAguF,qBAAAhuF,KAAA6uF,gBACA7uF,KAAAstF,kBAAAh7E,SAAA,aAGA25E,QAAA,WACA,QAAAptF,MAAAia,YACA9Y,KAAA+qC,YAAA/qC,KAAAguF,qBAAAhuF,KAAA6rF,QAAAc,WAEA3sF,KAAA+qC,YAAA/qC,KAAAguF,qBAAAhuF,KAAA6rF,QAAAc,WAGA3sF,KAAA0vF,gBAGAxD,YAAA,WACAlsF,KAAAstF,kBAAAz2E,YAAA,YACAhY,MAAAwW,gBAAA,0BAAArV,KAAA+qC,eAEA,CACA4jD,mBAAA,IACAI,mBAAA,MC1xBAlwF,MAAAkpC,iBAAAlmC,QAAA4+B,MAAA7hC,OAAA,CACA0rC,QAAA,KACA3S,SAAA,KACA4B,cAAA,KACAj4B,KAAA,KACAgoD,OAAA,KACAlD,UAAA,EAMA5oC,KAAA,SAAA8sB,EAAA/Q,EAAA9kB,GAKA,IAJAA,EAAAnW,EAAAM,OAAAoB,KAAAi1F,gBAAAxgF,IAEAqe,OAAA9yB,KAAAk1F,QAAAjtE,KAAAjoB,MAEAnB,MAAAkpC,iBAAA0iB,aAAA,CACA,IAAA0qC,EAAAt2F,MAAAkpC,iBAAA0iB,aAOA,OALA0qC,EAAA7qD,UAAAA,IACA6qD,EAAAC,UAAA9qD,EAAA71B,EAAAozB,cAAApzB,EAAAqzB,gBACAqtD,EAAA57D,cAAAA,GAGAv5B,KAAAye,UAGA5f,MAAAkpC,iBAAA0iB,aAAAzqD,KACAA,KAAAu5B,cAAAA,EAEAv5B,KAAAoT,WAAA9U,EAAA,6CAAAkQ,SAAA3M,QAAAqR,MAEAlT,KAAAqjB,KAAArjB,KAAAoT,WAAA9U,EAAAM,OAAA,CACAojC,WAAA,GACAvtB,IAGAzU,KAAAoT,aACApT,KAAAoT,WAAA2F,SAAA,QACA/Y,KAAAoT,WAAA4kB,OAAAlW,IAAA,UAAA,GAEA9hB,KAAAif,OAAAlG,SAAA,QACA/Y,KAAAif,OAAA+Y,OAAAlW,IAAA,UAAA,IAGA9hB,KAAAo1F,UAAA9qD,EAAA71B,EAAAozB,cAAApzB,EAAAqzB,iBAOAotD,QAAA,WAQA,OAPAr2F,MAAAkpC,iBAAA0iB,aAAA,KACAzqD,KAAAu5B,eACAv5B,KAAAu5B,cAAA87D,UAAAr1F,KAAAu5B,cAAAoxB,cAGA3qD,KAAAif,OAAAtD,SAEA3b,KAAAye,WAOAisC,aAAA,WACA,IAAAyqC,EAAAt2F,MAAAkpC,iBAAA0iB,aAQA,OANA0qC,EAAAttE,OACAstE,EAAAl2E,OAAAtD,SACAw5E,EAAA12E,UAEA5f,MAAAkpC,iBAAA0iB,aAAA,MAEA,GASA2qC,UAAA,SAAA9qD,EAAAzC,EAAAC,GACA9nC,KAAAsqC,QAAAA,EAEAtqC,KAAAoT,WAAAkiF,QACAt1F,KAAAspD,QAAA,EAEAtpD,KAAAu1F,cAAA,KACAv1F,KAAAw1F,aAAA,KAEA,IAAAC,EAAA,IAAA5zF,QAAAsf,KAAA8M,SACAynE,EAAA7kF,KAAAmkB,IAAAygE,EAAA,EAAA,EAAA5zF,QAAAsf,KAAAyX,QAAA,EAAA54B,KAAAyU,SAAAkhF,WAGA,GAFAF,EAAAC,EAAA,EAAA,EAEA7tD,GAAAC,EAAA,CACA,IAAAuJ,EAAAxJ,EAAAC,EACA4tD,EAAA7kF,KAAAmkB,IAAA6S,EAAAhmC,QAAAsf,KAAAyX,QAAA,EAAA54B,KAAAyU,SAAAkhF,YAEAD,GADAD,EAAA5kF,KAAAmkB,IAAA0gE,EAAArkD,EAAAxvC,QAAAsf,KAAA8M,SAAA,EAAAjuB,KAAAyU,SAAAkhF,YACAtkD,GAGAxgC,KAAAmkB,IAAA6S,EAAAhmC,QAAAsf,KAAAyX,QAAA,EAAA54B,KAAAyU,SAAAkhF,aAEAF,GADAC,EAAA7kF,KAAAmkB,IAAA6S,EAAAhmC,QAAAsf,KAAAyX,QAAA,EAAA54B,KAAAyU,SAAAkhF,YACAtkD,GAIArxC,KAAA41F,iBAAAF,EAAAD,GAEAz1F,KAAA23B,SAAAr5B,EAAA,2CAAAkQ,SAAAxO,KAAAoT,YACA,IAAA0lB,EAAA94B,KAAAoT,WAAA6a,SAAA,EAAAjuB,KAAA23B,SAAA1J,SAAA,EAAA,KACAjV,EAAAhZ,KAAAoT,WAAAwlB,QAAA,EAAA54B,KAAA23B,SAAAiB,QAAA,EAAA,KAEA54B,KAAA23B,SAAA7V,IAAA,CAAA9I,KAAAA,EAAA8f,IAAAA,EAAAqH,SAAA,aACAngC,KAAAomD,YAEAvnD,MAAAgI,kBAAA,sBAAA,CAAAyjC,QAAAA,EAAA8b,UAAApmD,KAAAomD,WAAA,CAAA17C,EAAA9C,KAKA,GAJA5H,KAAAoT,WAAAyD,YAAA,WACA7W,KAAA23B,SAAAhc,SACA3b,KAAAspD,QAAA,EAEA,YAAA1hD,EACA,GAAA8C,EAAAhD,QAAA,CACA,GAAAgD,EAAA07C,WAAApmD,KAAAomD,UACA,OAGA,IAAA17C,EAAAmrF,YAGA,OAFA71F,KAAAoT,WAAAd,SAAA,cACAtS,KAAAoT,WAAAP,OAAAvU,EAAA,OAAA,CAAAgF,KAAAzE,MAAAc,EAAA,MAAA,4BAIAK,KAAAoT,WAAAyD,YAAA,SACA7W,KAAAoT,WAAAP,OAAAnI,EAAAmrF,aACAh3F,MAAA2T,eAAA9H,EAAA8W,UACA3iB,MAAAiU,eAAApI,EAAA+W,eAEAxZ,MAAAyC,EAAA/C,OAEA3H,KAAA6nB,UAYA+tE,iBAAA,SAAAF,EAAAD,GACAz1F,KAAAoT,WAAA0O,IAAA,CACA8W,MAAA88D,EACApmD,YAAAomD,EACAI,YAAAJ,EACAznE,OAAAwnE,EACAlmD,aAAAkmD,EACA39B,aAAA29B,EACA38D,KAAAj3B,QAAAsf,KAAA8M,SAAAwnE,GAAA,EACAz8E,MAAAnX,QAAAsf,KAAAyX,QAAA88D,GAAA,MAGA,CACAT,gBAAA,CACAptD,cAAA,KACAC,eAAA,QC5KAjpC,MAAA6oD,YAAA7lD,QAAAoa,KAAArd,OAAA,CACAqiD,aAAA,KACA80C,kBAAA,KACAC,mBAAA,KAEAC,WAAA,EACAC,oBAAA,EACAC,eAAA,EAEA34E,KAAA,SAAArH,EAAAigF,GACAA,IACAp2F,KAAAm2F,eAAA,GAGAn2F,KAAAihD,aAAA3iD,EAAA,6CAAAkQ,SAAA2H,GACAnW,KAAA+1F,kBAAAz3F,EAAA,oCAAAkQ,SAAAxO,KAAAihD,cACAjhD,KAAAg2F,mBAAA13F,EAAA,6CAAAu7B,YAAA75B,KAAAihD,cAEAjhD,KAAA0kD,oBAMAA,iBAAA,WAGA1kD,KAAAupD,sBAAA,KACAvpD,KAAAihD,aAAA3uC,SAAA,WAGAtS,KAAA2kD,aAAA,GACA3kD,KAAAq2F,sBAAA,GACAr2F,KAAAg2F,mBAAAt3F,KAAA,IAEAsB,KAAAm2F,eACAn2F,KAAAihD,aAAA3uC,SAAA,eAOAgzC,gBAAA,WACAtlD,KAAAihD,aAAAq1C,OAAA,OAAA,IAAA,KACAt2F,KAAAihD,aAAA3uC,SAAA,UAAAgkF,OAAA,EAAA,EAAAh4F,EAAAqlB,QAEA3jB,KAAAg2F,mBAAAM,OAAA,OAAA,IAAA,KACAt2F,KAAAg2F,mBAAA1jF,SAAA,UAAAgkF,OAAA,EAAA,EAAAh4F,EAAAqlB,SAIAihC,gBAAA,WACA5kD,KAAAihD,aAAApqC,YAAA,UACA7W,KAAAg2F,mBAAAn/E,YAAA,WAGA8tC,aAAA,SAAAtuB,GACAr2B,KAAAi2F,WAAA5/D,GAGAkgE,mBAAA,SAAAlgE,GACAr2B,KAAAi2F,YAAA5/D,GAGAggE,sBAAA,SAAAhgE,GACAr2B,KAAAk2F,oBAAA7/D,GAGA4zB,4BAAA,SAAA5zB,GACAr2B,KAAAk2F,qBAAA7/D,GAGA6zB,kBAAA,WAEAlqD,KAAAi2F,WAAAplF,KAAA8b,IAAA3sB,KAAAi2F,WAAA,GAEA,IAAAr9D,EAAA/nB,KAAAmkB,IAAA,IAAAnkB,KAAAK,MAAA,IAAAlR,KAAAk2F,oBAAAl2F,KAAAi2F,aAEAj2F,KAAAupD,sBAAA3wB,GAEA54B,KAAAm2F,eACAn2F,KAAAg2F,mBAAAt3F,KAAAsB,KAAAk2F,oBAAA,MAAAl2F,KAAAi2F,aAIA1sC,sBAAA,SAAAitC,EAAA1hD,GACA,IAAA0hD,EACAx2F,KAAAihD,aAAA3uC,SAAA,YAEAtS,KAAAihD,aAAApqC,YAAA,WAEAi+B,EACA90C,KAAA+1F,kBAAAh9E,SAAA,QAAAA,SAAA,CAAA6f,MAAA49D,EAAA,KAAA,QAEAx2F,KAAA+1F,kBAAAh9E,SAAA,QAAA6f,MAAA49D,EAAA,SC/FA33F,MAAA4oD,cAAA5lD,QAAAoa,KAAArd,OAAA,CACAg0B,MAAA,KACA6jE,mBAAA,KACAC,QAAA,KACAC,iCAAA,KACAC,gCAAA,KACAC,6BAAA,KACAC,cAAA,KAEAC,SAAA,GACAC,qBAAA14F,EAAAqlB,KACAszE,uBAAA,GACAC,gBAAA,EAEAjyC,aAAA,WACAjlD,KAAA+2F,SAAA,GACA/2F,KAAAg3F,qBAAA14F,EAAAqlB,KACA3jB,KAAAi3F,uBAAA,GACAj3F,KAAAk3F,gBAAA,GAGA/xC,UAAA,SAAAE,GACArlD,KAAA+2F,SAAAr3F,KAAA2lD,IAGAI,eAAA,WACA,OAAAzlD,KAAA+2F,SAAAz2F,QAGAqlD,iBAAA,SAAA3+C,GACAhH,KAAAg3F,qBAAAhwF,EACAhH,KAAAi3F,uBAAA,GACAj3F,KAAAk3F,gBAAA,EAEAl3F,KAAAm3F,0BAGAA,uBAAA,WACA,IAAA9xC,EAAArlD,KAAA+2F,SAAA/2F,KAAAk3F,iBAAA7xC,OACA+xC,EAAAp3F,KAAA+2F,SAAAz2F,QAAAN,KAAAk3F,gBAAA,GAEAl3F,KAAAq3F,YAAAhyC,EAAAxlD,QAAAwlD,EAAAtD,QAAA/hD,KAAAs3F,4BAAArvE,KAAAjoB,MAAAo3F,IAUAE,4BAAA,SAAAxxC,EAAAyxC,GACA,IAAAlyC,EAAArlD,KAAA+2F,SAAA/2F,KAAAk3F,iBACAE,EAAAp3F,KAAA+2F,SAAAz2F,QAAAN,KAAAk3F,gBAAA,GAGAM,EAAAl5F,EAAAM,OAAAymD,EAAA,CAAAS,OAAAA,IACA9lD,KAAAi3F,uBAAAv3F,KAAA83F,GAGAJ,GAEAp3F,KAAAk3F,kBAGAK,EACAv3F,KAAAs3F,4BAAAxxC,GAAA,GAGA9lD,KAAAm3F,0BAIA,mBAAAn3F,KAAAg3F,sBACAh3F,KAAAg3F,qBAAAh3F,KAAAi3F,yBAaAI,YAAA,SAAAx3F,EAAAkiD,EAAA/6C,EAAAywF,GACAz3F,KAAA03F,gBAAA1wF,EAEA,OAAAhH,KAAA4yB,QACA5yB,KAAA4yB,MAAA,IAAA/wB,QAAA4+B,MAAA,CAAA/B,kBAAA,KAGA,OAAA1+B,KAAAy2F,qBACAz2F,KAAAy2F,mBAAAn4F,EAAA,iDAAAgU,WAAA9D,SAAA3M,QAAAqR,OAGAlT,KAAA02F,QAAAp4F,EAAA,4BAAAkQ,SAAAxO,KAAAy2F,mBAAAnB,SAEAt1F,KAAA23F,eAAAr5F,EAAA,2BAAAkQ,SAAAxO,KAAA02F,SAEA12F,KAAA43F,eAAAt5F,EAAA,+BAAAkQ,SAAAxO,KAAA02F,SAEA12F,KAAA22F,iCAAAr4F,EAAA,4CAAAkQ,SAAAxO,KAAA02F,SAAA7uE,OACA7nB,KAAA42F,gCAAAt4F,EAAA,4BAAAkQ,SAAAxO,KAAA22F,kCACA32F,KAAA62F,6BAAAv4F,EAAA,WAAAkQ,SAAAxO,KAAA22F,kCAEA32F,KAAA63F,eAAAv5F,EAAA,gCAAAkQ,SAAAxO,KAAA02F,SAEA12F,KAAA4yB,MAAAw0C,aAAApnE,KAAAy2F,oBAEAz2F,KAAA23F,eAAAj5F,KAAAmB,GAEA,IAAAod,EAAA3e,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,MACAlY,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAA63F,gBACAxa,EAAA/+E,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,sBACAlY,KAAAzE,MAAAc,EAAA,MAAA,QACA6O,SAAAxO,KAAA63F,gBAEA,IAAA,IAAAx4F,EAAA,EAAAA,EAAA0iD,EAAAzhD,OAAAjB,IAAA,CACA,IACAy4F,EADAx5F,EAAA,8DAAAyjD,EAAA1iD,GAAA8F,MAAA,OAAA48C,EAAA1iD,GAAAoc,MAAA,kBAAAjN,SAAAxO,KAAA43F,gBACAvhF,KAAA,SAEArW,KAAA6d,YAAAi6E,EAAA,SAAA,WACAza,EAAAxmE,YAAA,eAIA7W,KAAA6d,YAAAw/D,EAAA,YAAA,SAAAvlE,GACA,IAAAguC,EAAAxnD,EAAAwZ,EAAA8C,eAAAgX,QAAA,UAAAvb,KAAA,oCAAA9R,MACAgzF,EAAAv3F,KAAA42F,gCAAAx8D,KAAA,WAEAp6B,KAAA+3F,oBAAAjyC,EAAAyxC,MAGAv3F,KAAA6d,YAAAZ,EAAA,YAAA,WACA,IACAs6E,EAAAv3F,KAAA42F,gCAAAx8D,KAAA,WAEAp6B,KAAA+3F,oBAHA,SAGAR,MAGAE,IACAz3F,KAAA22F,iCAAA3+D,OACAh4B,KAAA62F,6BAAAn4F,KAAA,IAAAG,MAAAc,EAAA,MAAA,kDAAA,CAAA6B,OAAAi2F,MAGAz3F,KAAA4yB,MAAAoF,OACAh4B,KAAA4yB,MAAAtH,eAAAzpB,QAAA4+B,MAAAxhB,OAAA,SACAjf,KAAA6d,YAAAhc,QAAA4+B,MAAAxhB,OAAA,QAAA,kBAUA84E,oBAAA,SAAAjyC,EAAAyxC,GACAv3F,KAAA02F,QAAAsB,QAAA,OAAA,KACAh4F,KAAA4yB,MAAA/K,OACA7nB,KAAA03F,gBAAA5xC,EAAAyxC,MAOAU,cAAA,WACAj4F,KAAA+3F,oBAAA,UAAA,MCrLA,SAAAz5F,GAMAO,MAAA0jF,YAAA1gF,QAAAoa,KAAArd,OAAA,CACAo2B,IAAA,KACArI,IAAA,KACAurE,WAAA,KACA/yF,MAAA,KAEAiO,WAAA,KACAy1B,SAAA,KAEArrB,KAAA,SAAArY,EAAAsP,GACAzU,KAAAqa,YAAA5F,EAAA5V,MAAA0jF,YAAA9kE,UAEAzd,KAAAoT,WAAA9U,EAAA,SAAA,CACAkd,MAAA,eACAia,KAAA,SACAC,SAAA,IAGA11B,KAAAmzF,UACAnzF,KAAAq1C,SAAAlwC,GAAA,GAEAnF,KAAA6d,YAAA7d,KAAAoT,WAAA,UAAA0E,IACA,OAAAA,EAAAC,SACA,KAAAlW,QAAAgrF,OACA7sF,KAAAq1C,SAAAr1C,KAAAmF,MAAAnF,KAAAyU,SAAA+tE,MACA1qE,EAAAK,iBACA,MACA,KAAAtW,QAAAkrF,SACA/sF,KAAAq1C,SAAAr1C,KAAAmF,MAAAnF,KAAAyU,SAAA+tE,MACA1qE,EAAAK,iBACA,MACA,KAAAtW,QAAAiiC,UACA,QAAAjlC,MAAAia,YACA9Y,KAAAq1C,SAAAr1C,KAAAmF,MAAAnF,KAAAyU,SAAA+tE,MAEAxiF,KAAAq1C,SAAAr1C,KAAAmF,MAAAnF,KAAAyU,SAAA+tE,MAEA1qE,EAAAK,iBACA,MACA,KAAAtW,QAAAgiC,SACA,QAAAhlC,MAAAia,YACA9Y,KAAAq1C,SAAAr1C,KAAAmF,MAAAnF,KAAAyU,SAAA+tE,MAEAxiF,KAAAq1C,SAAAr1C,KAAAmF,MAAAnF,KAAAyU,SAAA+tE,MAEA1qE,EAAAK,qBAMAg7E,QAAA,WAMA,GAJAnzF,KAAAg1B,IAAAh1B,KAAAm4F,OACAn4F,KAAA2sB,IAAA3sB,KAAAo4F,OACAp4F,KAAAk4F,YAAAl4F,KAAA2sB,IAAA3sB,KAAAg1B,KAAAh1B,KAAAyU,SAAA+tE,MAEA6V,OAAAC,UAAAt4F,KAAAk4F,YACA,KAAA,6BAGAl4F,KAAA6oC,UACA7oC,KAAA6oC,SAAAltB,SAGA3b,KAAAoT,WAAAhF,KAAA,gBAAApO,KAAAg1B,KACAh1B,KAAAoT,WAAAhF,KAAA,gBAAApO,KAAA2sB,KACA3sB,KAAA6oC,SAAAvqC,IAGA,IAAA,IAAA6G,EAAAnF,KAAAg1B,IAAA7vB,GAAAnF,KAAA2sB,IAAAxnB,GAAAnF,KAAAyU,SAAA+tE,KACAxiF,KAAA6oC,SAAA7oC,KAAA6oC,SAAA3qB,IAAA5f,EAAA,OAAA,CACAmd,MAAAzb,KAAAyU,SAAAguE,WAAAt9E,GACA4B,KAAA,CAAA5B,MAAAA,MAMA,GAFAnF,KAAA6oC,SAAAr6B,SAAAxO,KAAAoT,YAEA,OAAApT,KAAAmF,MAAA,CACA,IAAAA,EAAAnF,KAAAmF,MACAnF,KAAAmF,MAAA,KACAnF,KAAAq1C,SAAAlwC,GAAA,GAGAnF,KAAA6d,YAAA7d,KAAA6oC,SAAA,YAAA/wB,IACA9X,KAAA6oC,SAAAhyB,YAAA,kCACAvY,EAAAwZ,EAAA8C,eACAtI,SAAA,kCACAimF,UAAAjmF,SAAA,kBAGAtS,KAAA6d,YAAA7d,KAAA6oC,SAAA,WAAA,KACA7oC,KAAA6oC,SAAAhyB,YAAA,kBAGA7W,KAAA6d,YAAA7d,KAAA6oC,SAAA,QAAA/wB,IACA9X,KAAAq1C,SAAA/2C,EAAAyI,KAAA+Q,EAAA8C,cAAA,UACA9C,EAAAM,kBACApY,KAAAoT,WAAAkF,WAIA+8B,SAAA,SAAAlwC,EAAAqzF,GAGA,GAFArzF,EAAA0L,KAAA8b,IAAA9b,KAAAmkB,IAAA7vB,EAAAnF,KAAA2sB,KAAA3sB,KAAAg1B,KAEAh1B,KAAAmF,SAAAnF,KAAAmF,MAAAA,GACA,OAGAnF,KAAAoT,WAAAhF,KAAA,CACAqqF,gBAAAz4F,KAAAmF,MACAuzF,iBAAA14F,KAAAyU,SAAAguE,WAAAziF,KAAAmF,SAGAnF,KAAA6oC,SAAAhyB,YAAA,sBACA,IAAA8hF,EAAA34F,KAAA6oC,SAAAl2B,IAAA3S,KAAAmF,MAAAnF,KAAAg1B,KAAAh1B,KAAAyU,SAAA+tE,MACAmW,EAAAz6E,IAAAy6E,EAAAJ,WAAAjmF,SAAA,UACAqmF,EAAArmF,SAAA,gBAEA,IAAAkmF,GACAx4F,KAAAyU,SAAAw9B,SAAA9sC,IAIAgzF,KAAA,WACA,MAAA,mBAAAn4F,KAAAyU,SAAAugB,IACAh1B,KAAAyU,SAAAugB,MAEAh1B,KAAAyU,SAAAugB,KAGAojE,KAAA,WACA,MAAA,mBAAAp4F,KAAAyU,SAAAkY,IACA3sB,KAAAyU,SAAAkY,MAEA3sB,KAAAyU,SAAAkY,MAEA,CACAlP,SAAA,CACAuX,IAAA,EACArI,IAAA,IACA61D,KAAA,GACAC,WAAA,KACAxwC,SAAA3zC,EAAAqlB,QAtJA,CAyJAnlB,QCvJAK,MAAAizC,eAAAjwC,QAAAoa,KAAArd,OAAA,CACAwU,WAAA,KACA8U,SAAA,KACAk4D,gBAAA,KACA97E,OAAA,KACAa,MAAA,KAEAyzF,eAAA,KAEAp7E,KAAA,SAAAlH,EAAA7B,GACAzU,KAAAqa,YAAA5F,EAAA5V,MAAAizC,eAAAmjD,iBAEAj1F,KAAAmF,MAAA,EACAnF,KAAA64F,gBAAA,GACA74F,KAAA84F,eAAA,GACA94F,KAAA+4F,UAAA,GACA/4F,KAAAg5F,SAAA,GAEAh5F,KAAAoT,WAAA9U,EAAA,IAAAgY,GACAtW,KAAAi5F,SAAA36F,EAAA,+BAAAkQ,SAAAxO,KAAAoT,YACApT,KAAAk5F,QAAA56F,EAAA,8BAAAkQ,SAAAxO,KAAAoT,YACApT,KAAAm5F,aAAA76F,EAAA,mCAAAkQ,SAAAxO,KAAAoT,YACApT,KAAAo5F,eAAA96F,EAAA,aAAAkQ,SAAAxO,KAAAm5F,cAEA,IAAA,IAAA95F,EAAAW,KAAA64F,eAAAx5F,GAAAW,KAAA84F,eAAAz5F,IAAA,CACA,IAAAkT,EAAAjU,EAAA,2CAAAe,EAAA,wBAAAA,EAAA,eAAAmP,SAAAxO,KAAAo5F,gBAEA/5F,EAAA,GAAA,GACAkT,EAAAD,SAAA,mBAGA,IAAAjT,GACAkT,EAAAD,SAAA,YAIAtS,KAAAkoB,SAAAloB,KAAAoT,WAAAiD,KAAA,eAEArW,KAAA6d,YAAA7d,KAAAoT,WAAA,SAAApT,KAAAq5F,cAAApxE,KAAAjoB,OACAA,KAAA6d,YAAA7d,KAAAoT,WAAA,WAAApT,KAAAs5F,gBAAArxE,KAAAjoB,OACAA,KAAA6d,YAAAhc,QAAAqR,KAAA,UAAAlT,KAAAu5F,eAAAtxE,KAAAjoB,OACAA,KAAA6d,YAAAhc,QAAAqR,KAAA,SAAAlT,KAAAw5F,cAAAvxE,KAAAjoB,OAMA4oB,WAAA,KAEA5oB,KAAAy5F,2BAAA,IAAAz5F,KAAAkoB,SAAA5nB,OAAA,GACAN,KAAAo5F,eAAAt3E,IAAA,QAAA9hB,KAAAy5F,2BAAA,EAAAz5F,KAAAoT,WAAAwlB,QAAA,IACA,KAGAygE,cAAA,WACA,IAAArgF,EAAAhZ,KAAA05F,gBAAA15F,KAAAmF,OACAnF,KAAAo5F,eAAAt3E,IAAA,OAAA9I,IAGAsgF,gBAAA,SAAAxhF,EAAA6hF,GACA7hF,EAAAK,iBAEAnY,KAAA44F,eAAAe,EAAAx5D,SAAA8L,EACAjsC,KAAA45F,UAAA55F,KAAAo5F,eAAAj5D,WAAAnnB,KAEAhZ,KAAAysF,UAAA,EACAzsF,KAAA+xC,WAGAwnD,eAAA,SAAAzhF,EAAA6hF,GACA,GAAA35F,KAAAysF,SAAA,CACA30E,EAAAK,iBAEA,IAAA0hF,EAAA75F,KAAA44F,eAAAe,EAAAx5D,SAAA8L,EACAjzB,EAAAhZ,KAAA45F,UAAAC,EACA10F,EAAAnF,KAAA85F,gBAAA9gF,GAEAhZ,KAAAq1C,SAAAlwC,GAEAnF,KAAAiyC,aAIAoD,SAAA,SAAAlwC,GACA,IAAA6T,EAAAhZ,KAAA05F,gBAAAv0F,GACAA,EAAAnF,KAAA+4F,UACA5zF,EAAAnF,KAAA+4F,SACA//E,EAAAhZ,KAAA05F,gBAAAv0F,IACAA,EAAAnF,KAAAg5F,WACA7zF,EAAAnF,KAAAg5F,SACAhgF,EAAAhZ,KAAA05F,gBAAAv0F,IAGAnF,KAAAo5F,eAAAt3E,IAAA,OAAA9I,GAEA7T,GAAAnF,KAAA+4F,UAAA5zF,GAAAnF,KAAAg5F,WACAh5F,KAAAkoB,SAAArR,YAAA,YAEAvY,EAAAyV,KAAA/T,KAAAkoB,UAAA,SAAAjpB,EAAAo0B,GACA/0B,EAAA+0B,GAAAtsB,KAAA,cAAA,GACAzI,EAAA+0B,GAAAtsB,KAAA,eAAA5B,GACA7G,EAAA+0B,GAAA/gB,SAAA,YAGAhU,EAAA+0B,GAAAtsB,KAAA,cAAA,GACAzI,EAAA+0B,GAAAtsB,KAAA,eAAA5B,GACA7G,EAAA+0B,GAAA/gB,SAAA,YAIA,GAAAhU,EAAA+0B,GAAAtsB,KAAA,eACAzI,EAAA+0B,GAAA/gB,SAAA,gBAKAtS,KAAAmF,MAAAA,GAGAq0F,cAAA,SAAA1hF,GACA9X,KAAAysF,WACA30E,EAAAK,iBACAnY,KAAAysF,UAAA,EACAzsF,KAAAoyC,UAIA0nD,gBAAA,SAAA35D,GACA,IAAA45D,GAAA,EAAA/5F,KAAA64F,eACAmB,GAAA,GAAAh6F,KAAA64F,eAAA74F,KAAA84F,gBAEA,OAAA94F,KAAAm5F,aAAAvgE,QAAA,GAAA,EAAAuH,GAAAngC,KAAAy5F,2BAAAO,EAAAD,GAGAL,gBAAA,SAAAv0F,GACA,IAAA40F,GAAA,EAAA/5F,KAAA64F,eACAmB,GAAA,GAAAh6F,KAAA64F,eAAA74F,KAAA84F,gBAEA,SAAA3zF,EAAA40F,GAAA/5F,KAAAy5F,2BAAAO,EAAAh6F,KAAAm5F,aAAAvgE,QAAA,IAGAmZ,QAAA,WACA,mBAAA/xC,KAAAyU,SAAAw9B,UACAjyC,KAAAyU,SAAAs9B,QAAA/xC,OAIAiyC,SAAA,WACA,mBAAAjyC,KAAAyU,SAAAw9B,UACAjyC,KAAAyU,SAAAw9B,SAAAjyC,OAIAoyC,MAAA,WACA,mBAAApyC,KAAAyU,SAAAw9B,UACAjyC,KAAAyU,SAAA29B,MAAApyC,OAIAi1F,gBAAA,CACAljD,QAAAzzC,EAAAqlB,KACAsuB,SAAA3zC,EAAAqlB,KACAyuB,MAAA9zC,EAAAqlB,QCpKA,SAAArlB,GAMAO,MAAAsf,SAAAtc,QAAAoa,KAAArd,OAAA,CACAisD,gBAAA,KACAz3C,WAAA,KACA6L,OAAA,KACAkE,QAAA,EAEA3F,KAAA,SAAA64C,EAAA5hD,GACAzU,KAAAqa,YAAA5F,EAAA5V,MAAAsf,SAAAV,UAEA5b,QAAA8f,oBACA3hB,KAAAif,OAAA3gB,EAAA,iCACAkQ,SAAA3M,QAAAqR,MAEAlT,KAAAyU,SAAA+J,mBACAxe,KAAA6d,YAAA7d,KAAAif,OAAA,QAAAnH,IACAA,EAAAM,kBACApY,KAAAiB,WAKAjB,KAAA6qD,gBAAAvsD,EAAA,SAAA,CAAAkd,MAAA,8BACAxb,KAAAoT,WAAA9U,EAAA,IAAA0B,KAAAyU,SAAA2J,qBAAApe,KAAAyU,SAAA4J,qBACA/L,SAAA,YACAO,OAAAwjD,GACAtvD,KAAA,WAAA/G,MACAwO,SAAAxO,KAAA6qD,iBAEAhpD,QAAA8f,mBACA3hB,KAAAoT,WAAAd,SAAA,aAGAzT,MAAA8Y,gBAAA3X,KAAAoT,YAEApT,KAAAyU,SAAAwlF,UACAj6F,KAAAgB,QAIAA,KAAA,WACAhB,KAAAmjB,SAIAnjB,KAAAk6F,6BAGAl6F,KAAAif,QACAjf,KAAAif,OACAzQ,SAAA3M,QAAAqR,MACA8kB,OAGAh4B,KAAA6qD,gBACAr8C,SAAA3M,QAAAqR,MACA2D,YAAA,UAEAhV,QAAA8f,kBACA3hB,KAAAoT,WAAA0O,IAAA,MAAA,SAEA9hB,KAAAoT,WAAA0O,IAAAjgB,QAAA+b,IAAA,OAAA,QAAA,SAGA5d,KAAAoT,WAAA8O,IAAA,yBAAA,KACArjB,MAAA2Z,eAAAxY,KAAAoT,cAGApT,KAAAif,SACAjf,KAAAif,OAAA,GAAA+C,YACAhiB,KAAAif,OAAA3M,SAAA,eAGAtS,KAAAoT,WAAA,GAAA4O,YACAnjB,MAAAsf,SAAAg8E,SAAAn6F,MAEAA,KAAAsZ,SACAzX,QAAA6c,gBAAAyD,WAEAniB,KAAAyU,SAAA8J,YACA1c,QAAA6c,gBAAAC,iBAAA9c,QAAAkd,QAAA,KACA/e,KAAAiB,UAIAjB,KAAAmjB,QAAA,EACAnjB,KAAA0X,QAAA,UAGAzW,MAAA,WACAjB,KAAAmjB,SAIAnjB,KAAA0X,QAAA,eACA1X,KAAAmZ,UACAnZ,KAAAmjB,QAAA,EAEAnjB,KAAAk6F,6BAEAl6F,KAAAif,SACAjf,KAAAsrB,eAAAtrB,KAAAif,OAAA,SACAjf,KAAAif,OACApI,YAAA,cACAqL,IAAA,yBAAA,KACAliB,KAAAif,OAAA4I,UAIAhpB,MAAAsf,SAAAi8E,YAAAp6F,MACA6B,QAAA6c,gBAAA0D,cACApiB,KAAAoT,WAAA8O,IAAA,yBAAA,KACAliB,KAAA6qD,gBAAAv4C,SAAA,UACAtS,KAAA0X,QAAA,aAIAwiF,2BAAA,WACAl6F,KAAAif,QACAjf,KAAAif,OAAA4C,IAAA,0BAGA7hB,KAAAoT,WAAAyO,IAAA,2BAMApD,QAAA,WACAze,KAAAif,SACAjf,KAAAif,OAAAtD,SACA3b,KAAAif,OAAA,MAGAjf,KAAA6qD,gBAAAlvC,SACA3b,KAAA6qD,gBAAA,KACA7qD,KAAAoT,WAAA,KAEApT,KAAAqjB,SAEA,CACA5F,SAAA,CACAW,iBAAA,MACAC,oBAAA,GACA47E,UAAA,EACA17E,YAAA,EACAC,mBAAA,GAEA67E,WAAA,GACAF,SAAA,SAAAG,GACAz7F,MAAAsf,SAAAk8E,WAAArsF,QAAAssF,GACAz4F,QAAA8f,kBACA24E,EAAAlnF,WAAA0O,IAAA,MAAA,GAEAjjB,MAAAsf,SAAAo8E,gBAGAH,YAAA,SAAAE,GACAz7F,MAAAsf,SAAAk8E,WAAAx7F,MAAAsf,SAAAk8E,WAAAz+E,OAAA7N,GAAAA,IAAAusF,GACAz4F,QAAA8f,kBACA24E,EAAAlnF,WAAA0O,IAAA,MAAA,UAEAw4E,EAAAlnF,WAAA0O,IAAAjgB,QAAA+b,IAAA,OAAA,QAAA,SACA/e,MAAAsf,SAAAo8E,iBAGAA,aAAA,WACA,MAAAC,EAAA37F,MAAAsf,SAAAk8E,WAAA/5F,OACAzB,MAAAsf,SAAAk8E,WAAAtxC,QAAA,CAAAuxC,EAAAj7F,KACAi7F,EAAAlnF,WAAA0O,IAAAjgB,QAAA+b,IAAA,OAAA,SAAA48E,EAAAn7F,GAAAm7F,EAAA,GAAA,QAGA,IAAAA,EACA34F,QAAAqR,KAAAZ,SAAA,aAEAzQ,QAAAqR,KAAA2D,YAAA,gBApLA,CAwLArY,QCnLAK,MAAA47F,cAAA57F,MAAAqjC,mBAAAtjC,OAAA,CACAmkC,oBAAA,SAAAF,GAKAA,GAHAA,EAAAA,EAAAlkC,QAAA,WAAA,KAGAA,QAAA,yBAAA,IAGAE,MAAA67F,uBACA73D,EAAAA,EAAA/yB,eAGAjR,MAAA87F,wBAEA93D,EAAAhkC,MAAAuS,YAAAyxB,EAAA7iC,KAAAyU,SAAApD,UAKA,IAAA84E,EAAAtrF,MAAAsQ,YAAAyrF,QAAAC,WAAAh4D,EAAA,CAAA+3D,QAAA,4BAEA,OAAAzQ,EAAA7pF,OACA6pF,EAAA1pF,KAAA5B,MAAAi8F,mBAEA,MCzBAj8F,MAAAk8F,UAAAl5F,QAAAoa,KAAArd,OAAA,CACA0X,GAAA,KAEAlD,WAAA,KACA+9B,MAAA,KACA6pD,cAAA,KAKAx9E,KAAA,SAAAlH,EAAAsB,EAAAnD,GACAzU,KAAAsW,GAAAA,EACAtW,KAAAoT,WAAA9U,EAAAsZ,GACA5X,KAAAqa,YAAA5F,EAAA5V,MAAAk8F,UAAAt9E,UAGAzd,KAAAoT,WAAArM,KAAA,eACAlF,QAAA2hC,IAAA,kDACAxjC,KAAAoT,WAAArM,KAAA,aAAA0X,WAGAze,KAAAoT,WAAArM,KAAA,YAAA/G,MAEAA,KAAAmxC,MAAA,GAEAnxC,KAAAyU,SAAAgT,YACAnpB,EAAAM,OAAAoB,KAAAmxC,MAAAtyC,MAAAmW,gBAAAhV,KAAAyU,SAAAgT,WAAA,UAGA,IAAAznB,KAAAmxC,MAAA1jB,sBACAztB,KAAAmxC,MAAA1jB,oBAAA,IAKA,IAFA,IAAAwtE,EAAAj7F,KAAAoT,WAAAiD,KAAA,MAAA+d,KAAA,QAEA/0B,EAAA,EAAAA,EAAA47F,EAAA36F,OAAAjB,IAAA,CACA,IAAAsmC,EAAArnC,EAAA28F,EAAA57F,IACAkT,EAAAozB,EAAA/d,SACAsD,EAAA5sB,EAAA,8BAAAO,MAAAc,EAAA,MAAA,sBAAA,OAAAksB,UAAA8Z,IAEA,IAAArnC,EAAA6O,QAAAw4B,EAAApqB,SAAA,YAAAxU,KAAA,MAAA/G,KAAAmxC,MAAA1jB,sBACAlb,EAAAD,SAAA,aAGAtS,KAAAk7F,WAAAhwE,GAGAlrB,KAAAyU,SAAA0nB,WACAn8B,KAAAg7F,cAAA,IAAAn8F,MAAAs8F,cAAAn7F,KAAAA,KAAAyU,SAAAmmE,YAGA56E,KAAAyU,SAAAomE,aACA76E,KAAAo7F,kBAAAp7F,KAAAoT,WAAAiD,KAAA,UAIA6kF,WAAA,SAAAhwE,GACAA,EAAArT,GAAA,QAAAC,IACA,IAAAvF,EAAAjU,EAAAwZ,EAAA8C,eAAAE,QAAA,MACAoB,EAAA3J,EAAAgJ,SAAA,QAAAlF,KAAA,kBAAAtP,KAAA,MACAs0F,EAAA/8F,EAAA6O,QAAA+O,EAAAlc,KAAAmxC,MAAA1jB,qBAEAlb,EAAA6D,SAAA,cACA7D,EAAAsE,YAAA,cAEA,IAAAwkF,GACAr7F,KAAAmxC,MAAA1jB,oBAAAje,OAAA6rF,EAAA,KAGA9oF,EAAAD,SAAA,cAEA,IAAA+oF,GACAr7F,KAAAmxC,MAAA1jB,oBAAA/tB,KAAAwc,IAIAlc,KAAAyU,SAAAgT,YACA5oB,MAAAwW,gBAAArV,KAAAyU,SAAAgT,WAAAznB,KAAAmxC,UAKAiqD,kBAAA,SAAAE,GACAt7F,KAAA6d,YAAAy9E,EAAA,QAAA,wBAGAC,oBAAA,SAAAzjF,GACA,IAAA6C,EAAArc,EAAAwZ,EAAA8C,eAEA,IAAAD,EAAA5T,KAAA,WAAA,CACA,IAAAmV,EAAAvB,EAAAiN,SAAArM,SAAA,YAAAxU,KAAA,MACA8zE,EAAAh8E,MAAA+F,OAAA5E,KAAAyU,SAAAomE,YAAA,YAAA3+D,GAEA5d,EAAA,sCAAAu8E,EAAA,KAAAh8E,MAAAc,EAAA,MAAA,aAAA,wBAAAk6B,YAAAlf,GAEA,IAAA9Y,QAAAqZ,QAAAP,GACA6gF,aAIAC,UAAA,SAAAC,GACA,OAAA78F,MAAAk8F,UAAAY,YAAAD,EAAA,GAAA78F,MAAAk8F,UAAAa,cAGAC,WAAA,SAAA1lF,GACA,IAAA5D,EAAAjU,EAAA,wBAAAkQ,SAAAxO,KAAAoT,YACAuyB,EAAArnC,EAAA,kCAAAO,MAAAma,KAAA,MAAAna,MAAAk8F,UAAAY,WAAA,eAAA98F,MAAAma,KAAA,KAAAna,MAAAk8F,UAAAY,WAAA,SAAAntF,SAAA+D,GASA,GAPAozB,EAAA9yB,OAAAsD,GAEAnW,KAAAyU,SAAA0nB,WACAwJ,EAAA9yB,OAAA,+BAAAhU,MAAAc,EAAA,MAAA,QAAA,UACAK,KAAAg7F,cAAAnwE,SAAAtY,IAGAvS,KAAAyU,SAAAomE,YAAA,CACA,IAAAihB,EAAAx9F,EAAA,8BAAAO,MAAAc,EAAA,MAAA,aAAA,UAAA6O,SAAAm3B,GACA3lC,KAAAo7F,kBAAAU,GAGAn2D,EAAA7jB,IAAA,iBAAA,IACA6jB,EAAA5sB,SAAA,CAAAiwE,gBAAA,GAAA,SAGAlrD,cAAA,SAAA3nB,GACA,IAMA4lF,EANAxpF,EAAA4D,EAAAyR,SAAAA,SAEA5nB,KAAAyU,SAAA0nB,UACAn8B,KAAAg7F,cAAA3vE,YAAA9Y,GAKAA,EAAAgiB,WAAAj0B,SACAy7F,EAAAxpF,EAAAqV,UAGArV,EAAAuP,IAAA,aAAA,UAAA/I,SAAA,CAAAowC,cAAA52C,EAAA0b,UAAA,OAAA,KACA1b,EAAAoJ,cAEA,IAAAogF,GACA/7F,KAAAg8F,UAAAD,MAKAC,UAAA,SAAA3pF,GACAA,EAAAkiB,SAAA,QAAAhZ,SAAA,WAAAI,SACAtJ,EAAAsJ,WAEA,CACAggF,WAAA,EACAC,aAAA,GAEAn+E,SAAA,CACAgK,WAAA,KACA0U,UAAA,EACA0+C,YAAA,KACAD,UAAA,QC9JA/7E,MAAAs8F,cAAAt5F,QAAAmhF,KAAApkF,OAAA,CACAq9F,UAAA,KACArhB,UAAA,KACAshB,aAAA,KAEAC,UAAA,KACAC,SAAA,KACAC,cAAA,KAEA7+E,KAAA,SAAAy+E,EAAArhB,GACA56E,KAAAi8F,UAAAA,EACAj8F,KAAA46E,UAAAA,EAEA56E,KAAAijF,WAAA3kF,EAAA,+BAEA,IAAAorB,EAAA1pB,KAAAi8F,UAAA7oF,WAAAiD,KAAA,MAEArW,KAAAqjB,KAAAqG,EAAA,CACAwQ,OAAA,8BACAyoB,OAAA3iD,KAAAgqE,UAAA/hD,KAAAjoB,SAIAgqE,UAAA,SAAA9pC,GACAlgC,KAAAm8F,UAAAj8D,EACA,IAAA7tB,EAAA/T,EAAA,sCAAAuU,OAAAqtB,GAGA,OAFAA,EAAApe,IAAA,WAAAjjB,MAAAma,KAAAhZ,KAAA+iD,SAAAjhC,IAAA,WAAAjjB,MAAAma,OACAknB,EAAA7pB,KAAA,SAAAgD,WAAA,SACAhH,GAGA4wC,YAAA,WACAjjD,KAAAo8F,SAAA99F,IAGA0B,KAAAulF,YAAAvlF,KAAAi8F,UAAA7oF,YAGApT,KAAAk8F,aAAA,EACA,IAAAI,EAAAt8F,KAAA+iD,SACA,GACA/iD,KAAAk8F,eACAI,EAAAA,EAAAjmF,KAAA,mBACAimF,EAAAh8F,QAGAN,KAAAq8F,cAAAr8F,KAAA+iD,SAAA90B,SACAjuB,KAAA+iD,SAAAhqC,SAAA,CACAkV,OAAA,GACA,OAAA,KACAjuB,KAAA+iD,SAAAzwC,SAAA,YAEAtS,KAAAqjB,OAEArjB,KAAA6d,YAAAhc,QAAAka,KAAA,WAAA,SAAAjE,GACAA,EAAAC,UAAAlW,QAAAkd,SACA/e,KAAAu8F,iBAKAhX,YAAA,SAAAlzE,GAGA,IAFA,IAAAmqF,EAAAnqF,EAAAkJ,WAAAoZ,IAAA30B,KAAA+iD,UAEA1jD,EAAA,EAAAA,EAAAm9F,EAAAl8F,OAAAjB,IAAA,CACA,IAAAkT,EAAAjU,EAAAk+F,EAAAn9F,IACAW,KAAAo8F,SAAAp8F,KAAAo8F,SAAAl+E,IAAA3L,EAAAgJ,SAAA,SAEAhJ,EAAA6D,SAAA,cACApW,KAAAulF,YAAAhzE,EAAAgJ,SAAA,SAKAipE,OAAA,WAaA,IAZAxkF,KAAAuxC,EAAAkrD,iBACAz8F,KAAAuxC,EAAAkrD,eAAA5lF,YAAA,aACA7W,KAAAijF,WAAAtnE,UAIA3b,KAAAuxC,EAAAkrD,eAAA,KACAz8F,KAAAuxC,EAAAmrD,iBAAA,KACA18F,KAAAuxC,EAAAorD,mBAAA,KACA38F,KAAAuxC,EAAAqrD,oBAAA,KACA58F,KAAAuxC,EAAAsrD,oBAAA,KAEA78F,KAAAuxC,EAAAlyC,EAAA,EAAAW,KAAAuxC,EAAAlyC,EAAAW,KAAAo8F,SAAA97F,SACAN,KAAAuxC,EAAAryB,QAAA5gB,EAAA0B,KAAAo8F,SAAAp8F,KAAAuxC,EAAAlyC,IACAW,KAAAuxC,EAAAurD,aAAA98F,KAAAuxC,EAAAryB,QAAAld,SACAhC,KAAAuxC,EAAAwrD,aAAA/8F,KAAAuxC,EAAAryB,QAAA6Z,cACA/4B,KAAAuxC,EAAAyrD,gBAAAh9F,KAAAuxC,EAAAurD,aAAAhkE,IAAA94B,KAAAuxC,EAAAwrD,aAAA,EACA/8F,KAAAuxC,EAAA0rD,YAAApsF,KAAA0mC,IAAAv3C,KAAA29C,OAAA39C,KAAAuxC,EAAAyrD,iBAEA,IAAAh9F,KAAAuxC,EAAAlyC,GAAAW,KAAA29C,QAAA39C,KAAAuxC,EAAAurD,aAAAhkE,IAAA,GAAA94B,KAAAuxC,EAAA0rD,YAAAj9F,KAAAuxC,EAAAorD,oBAPA38F,KAAAuxC,EAAAlyC,IAQAW,KAAAuxC,EAAAkrD,eAAAz8F,KAAAuxC,EAAAryB,QACAlf,KAAAuxC,EAAAmrD,iBAAA18F,KAAAuxC,EAAAlyC,EACAW,KAAAuxC,EAAAorD,mBAAA38F,KAAAuxC,EAAA0rD,YACAj9F,KAAAuxC,EAAAqrD,oBAAA58F,KAAAuxC,EAAAurD,aACA98F,KAAAuxC,EAAAsrD,oBAAA78F,KAAAuxC,EAAAwrD,aAOA,GAAA/8F,KAAAuxC,EAAAkrD,eAKA,GAAA,IAAAz8F,KAAAuxC,EAAAmrD,kBAAA18F,KAAA29C,OAAA39C,KAAAuxC,EAAAqrD,oBAAA9jE,IAAA,EACA94B,KAAAijF,WAAAp3D,UAAA7rB,KAAAi8F,UAAA7oF,iBAyBA,GAvBApT,KAAAuxC,EAAA2rD,iBAAAl9F,KAAAuxC,EAAAkrD,eAAA70E,SACA5nB,KAAAuxC,EAAA4rD,mBAAAn9F,KAAAuxC,EAAA2rD,iBAAAn2F,KAAA,SAGA/G,KAAAuxC,EAAAmrD,iBAAA18F,KAAAo8F,SAAA97F,OAAA,GACAN,KAAAuxC,EAAA6rD,cAAA9+F,EAAA0B,KAAAo8F,SAAAp8F,KAAAuxC,EAAAmrD,iBAAA,IAAA90E,SACA5nB,KAAAuxC,EAAA8rD,gBAAAr9F,KAAAuxC,EAAA6rD,cAAAr2F,KAAA,WAEA/G,KAAAuxC,EAAA6rD,cAAA,KACAp9F,KAAAuxC,EAAA8rD,gBAAA,MAIAr9F,KAAAuxC,EAAA+rD,oBAAAt9F,KAAA29C,QAAA39C,KAAAuxC,EAAAqrD,oBAAA9jE,IAAA94B,KAAAuxC,EAAAsrD,oBAAA,EAUA78F,KAAAuxC,EAAA6rD,eAAAp9F,KAAAuxC,EAAA8rD,iBAAAr9F,KAAAuxC,EAAA4rD,mBACAn9F,KAAAuxC,EAAA+rD,sBACAt9F,KAAA46E,WAAA56E,KAAA46E,WAAA56E,KAAAuxC,EAAA4rD,mBAAAn9F,KAAAk8F,aAAA,IAEAl8F,KAAAijF,WAAAppD,YAAA75B,KAAAuxC,EAAA2rD,oBAGAl9F,KAAA46E,WAAA56E,KAAA46E,WAAA56E,KAAAuxC,EAAA4rD,mBAAAn9F,KAAAk8F,eACAl8F,KAAAuxC,EAAAkrD,eAAAnqF,SAAA,kBAaA,GAAAtS,KAAAuxC,EAAA6rD,eAAAp9F,KAAAuxC,EAAA8rD,gBAAAr9F,KAAAuxC,EAAA4rD,qBACAn9F,KAAA46E,WAAA56E,KAAA46E,WAAA56E,KAAAuxC,EAAA8rD,gBAAAr9F,KAAAk8F,aAAA,KACAl8F,KAAAuxC,EAAA+rD,oBAEAt9F,KAAAijF,WAAAz7B,aAAAxnD,KAAAuxC,EAAA6rD,gBAEAp9F,KAAAuxC,EAAAkrD,eAAAnqF,SAAA,aACAtS,KAAAijF,WAAAz0E,SAAAxO,KAAAuxC,EAAA2rD,iBAAA3hF,SAAA,cAcA,GAAAvb,KAAAuxC,EAAA+rD,oBAAA,CAaA,IAXAt9F,KAAAuxC,EAAAgsD,SAAAv9F,KAAA09C,OAAA19C,KAAAw9F,qBAEA,QAAA3+F,MAAAia,cACA9Y,KAAAuxC,EAAAgsD,UAAAv9F,KAAAm8F,UAAAvjE,SAGA54B,KAAAuxC,EAAAksD,WAAAz9F,KAAAuxC,EAAAkrD,eAAAl6C,aAAAviD,KAAAi8F,UAAA7oF,WAAA,MACApT,KAAAuxC,EAAAmsD,iBAAA,KACA19F,KAAAuxC,EAAAosD,qBAAA,KACA39F,KAAAuxC,EAAAqsD,mBAAA,KAEA59F,KAAAuxC,EAAAlyC,EAAA,EAAAW,KAAAuxC,EAAAlyC,EAAAW,KAAAuxC,EAAAksD,WAAAn9F,OAAAN,KAAAuxC,EAAAlyC,IACAW,KAAAuxC,EAAAssD,UAAAv/F,EAAA0B,KAAAuxC,EAAAksD,WAAAz9F,KAAAuxC,EAAAlyC,IACAW,KAAAuxC,EAAAusD,UAAA99F,KAAAuxC,EAAAssD,UAAA77F,SAAAgX,KAEA,QAAAna,MAAAia,cACA9Y,KAAAuxC,EAAAusD,WAAA99F,KAAAuxC,EAAAssD,UAAAjlE,SAGA54B,KAAAuxC,EAAAwsD,cAAAltF,KAAA0mC,IAAAv3C,KAAAuxC,EAAAusD,UAAA99F,KAAAuxC,EAAAgsD,UACAv9F,KAAAuxC,EAAAysD,YAAAh+F,KAAAuxC,EAAAssD,UAAA92F,KAAA,WAEA/G,KAAA46E,WAAA56E,KAAA46E,WAAA56E,KAAAuxC,EAAAysD,YAAAh+F,KAAAk8F,aAAA,MACAl8F,KAAAuxC,EAAAmsD,kBACA19F,KAAAuxC,EAAAwsD,cAAA/9F,KAAAuxC,EAAAosD,wBACA39F,KAAAuxC,EAAA6rD,eAAAp9F,KAAAuxC,EAAAysD,aAAAh+F,KAAAuxC,EAAA8rD,oBAGAr9F,KAAAuxC,EAAAmsD,iBAAA19F,KAAAuxC,EAAAssD,UACA79F,KAAAuxC,EAAAosD,qBAAA39F,KAAAuxC,EAAAwsD,cACA/9F,KAAAuxC,EAAAqsD,mBAAA59F,KAAAuxC,EAAAysD,aAIAh+F,KAAAuxC,EAAAmsD,kBACA19F,KAAAijF,WAAAppD,YAAA75B,KAAAuxC,EAAAmsD,wBAGA19F,KAAA46E,WAAA56E,KAAA46E,WAAA56E,KAAAuxC,EAAA4rD,mBAAAn9F,KAAAk8F,eACAl8F,KAAAuxC,EAAAkrD,eAAAnqF,SAAA,cAOAiqF,WAAA,WACAv8F,KAAAijF,WAAAtnE,SAEA3b,KAAAuxC,EAAAkrD,gBACAz8F,KAAAuxC,EAAAkrD,eAAA5lF,YAAA,aAGA7W,KAAAi+F,aAGA56C,WAAA,WAEA,GAAArjD,KAAAuxC,EAAAkrD,iBAAAz8F,KAAAijF,WAAAr7D,SAAAtnB,QAAAN,KAAAuxC,EAAAkrD,eAAArmF,SAAA,cAAA,CACA,IAAA8nF,EACAC,EAOA,GAJAn+F,KAAA+iD,SAAAxuB,WAAAj0B,SACA49F,EAAAl+F,KAAA+iD,SAAAn7B,UAGA5nB,KAAAijF,WAAAr7D,SAAAtnB,OAAA,CAEA,IAAA89F,EAAAp+F,KAAAijF,WAAAjoE,OAAAkD,IAAAle,KAAAijF,WAAA7uD,SAEA,IAAA91B,EAAA6O,QAAAnN,KAAA+iD,SAAA,GAAAq7C,IACAp+F,KAAAijF,WAAA/rE,YAAAlX,KAAA+iD,UACAo7C,GAAA,IAEAn+F,KAAAijF,WAAAtnE,SACAwiF,GAAA,OAEA,CACA,IAAA9rF,EAAArS,KAAAuxC,EAAA2rD,iBAAA3hF,SAAA,MAGA,GAAA2iF,GAAA7rF,EAAA/R,QAAA+R,EAAA,KAAA6rF,EAAA,GAaAC,GAAA,MAbA,CACA,GAAA9rF,EAAA/R,OAKAN,KAAAuxC,EAAA2rD,iBAAA9mF,SAAA,cACApW,KAAAuxC,EAAAkrD,eAAAlhF,SAAA,WAAA7D,QAAA,aANA,CACA,IAAAwT,EAAA5sB,EAAA,8BAAAO,MAAAc,EAAA,MAAA,sBAAA,OAAAksB,UAAA7rB,KAAAuxC,EAAAkrD,gBACAz8F,KAAAi8F,UAAAf,WAAAhwE,GAEA7Y,EAAA/T,EAAA,QAAAkQ,SAAAxO,KAAAuxC,EAAA2rD,kBAKAl9F,KAAA+iD,SAAAv0C,SAAA6D,GACA8rF,GAAA,GASA,GAFAn+F,KAAAuxC,EAAAkrD,eAAA5lF,YAAA,aAEAsnF,EAAA,CAEAD,GACAl+F,KAAAi8F,UAAAD,UAAAkC,GAIA,IAEAjgE,EAFAogE,EAAAr+F,KAAA+iD,SAAAR,aAAAviD,KAAAi8F,UAAA7oF,WAAA,MAAA9S,OAAA,EAIA+9F,GAAAr+F,KAAA+iD,SAAAh8C,KAAA,WAEA,GAAA/G,KAAA+iD,SAAAh8C,KAAA,WACAk3B,EAAA,IACA,WAAAp/B,MAAAma,MAAA,GACAhZ,KAAAm8F,UAAApjF,SAAAklB,EAAA,SACA,GAAAogE,KACApgE,EAAA,IACA,WAAAp/B,MAAAma,MAAAna,MAAAk8F,UAAAY,WACA37F,KAAAm8F,UAAApjF,SAAAklB,EAAA,SAGAj+B,KAAAs+F,SAAAt+F,KAAA+iD,SAAAs7C,IAIA,IAAAloF,EAAAnW,KAAA+iD,SAAAxnC,SAAA,QAAAA,SAAA,YAEAxU,EAAA,CACAw3F,YAAAv+F,KAAAi8F,UAAA3lF,GACA4F,UAAA/F,EAAApP,KAAA,MACAwP,OAAAJ,EAAApP,KAAA,WACAy3F,OAAAx+F,KAAA+iD,SAAA3uB,OAAA7Y,SAAA,QAAAA,SAAA,YAAAxU,KAAA,MACAo/C,SAAAnmD,KAAA+iD,SAAAn7B,OAAA,MAAAA,OAAA,MAAArM,SAAA,QAAAA,SAAA,YAAAxU,KAAA,OAGAlI,MAAAgI,kBAAA,0BAAAE,GAAA,SAAA2D,EAAA9C,GACA,YAAAA,GACA/I,MAAAkJ,GAAA+a,cAAAjkB,MAAAc,EAAA,MAAA,yBAOAK,KAAA+iD,SAAAhqC,SAAA,QAAAlC,YAAA,UAAAkC,SAAA,CACAkV,OAAAjuB,KAAAq8F,eACA,OAAA,KACAr8F,KAAA+iD,SAAAjhC,IAAA,SAAA,UAGA9hB,KAAAimD,0BAEAjmD,KAAAqjB,QAGAi7E,SAAA,SAAA/rF,EAAAmpF,GACAnpF,EAAAxL,KAAA,QAAA20F,GAEA,IAAA+C,EAAAz+F,KAAAi8F,UAAAR,UAAAC,GAEA55E,EAAA,GACAA,EAAA,UAAAjjB,MAAAma,MAAA,IAAAylF,EAAA,KACA38E,EAAA,WAAAjjB,MAAAma,MAAAylF,EAAA,KACAz+F,KAAA+iD,SAAAxnC,SAAA,QAAAuG,IAAAA,GAIA,IAFA,IAAA48E,EAAAnsF,EAAAgJ,SAAA,MAAAA,WAEAlc,EAAA,EAAAA,EAAAq/F,EAAAp+F,OAAAjB,IACAW,KAAAs+F,SAAAhgG,EAAAogG,EAAAr/F,IAAAq8F,EAAA,MCpWA78F,MAAA8/F,qBAAA98F,QAAA86B,SAAA/9B,OAAA,CACAggG,UAAA,KACAL,YAAA,KACA3jB,UAAA,KAEAikB,aAAA,KACAC,cAAA,KAEA/zC,gBAAA,KACAg0C,kBAAA,KAEAC,2BAAA,KAEAC,WAAA,KACAC,sBAAA,KAEAC,cAAA,KACAC,mBAAA,KACAC,qBAAA,KACAC,2BAAA,EAEAC,aAAA,KACAC,mBAAA,KAEAC,iBAAA,KAKAjiF,KAAA,SAAAohF,EAAA74E,EAAAtR,GACAzU,KAAA4+F,UAAAA,EACA5+F,KAAAu+F,YAAAv+F,KAAA4+F,UAAA75D,OAAAh+B,KAAA,gBACA/G,KAAA46E,UAAAz4E,SAAAnC,KAAA4+F,UAAA75D,OAAA32B,KAAA,oBAEApO,KAAA6+F,aAAA,IAAA7+F,KAAA4+F,UAAAl7E,aAAAiD,QAAA,GAAA,IACA3mB,KAAA8+F,cAAA9+F,KAAA4+F,UAAAl7E,aAAAiD,QAAA,GAAA,EAEAlS,EAAAnW,EAAAM,OAAA,GAAAC,MAAA8/F,qBAAAlhF,SAAAhJ,EAAA,CACAylB,OAAA,QACA+C,kBAAA,EACAyiE,cAAA,EACAC,eAAA,EACAziE,eAAA,EACAylB,OAAA3iD,KAAAgqE,UAAA/hD,KAAAjoB,MACAm9B,cAAA,IACAJ,KAAAl7B,QAAAqoE,SAGAlqE,KAAAqjB,KAAA0C,EAAAtR,IAMAmrF,YAAA,WACA5/F,KAAAm/F,cAAAn/F,KAAAu/F,aAAAv/F,KAAA48B,YAAA71B,KAAA,SACA/G,KAAAo/F,mBAAA,EAKA,IAHA,IAAAr8C,EAAAzkD,EAAA0B,KAAA48B,aACAijE,EAAA7/F,KAAA48B,YAAA5hB,OAEA6kF,EAAAv/F,QAAA,CAEA,IAAAw/F,EAAAD,EAAA94F,KAAA,SAEA,GAAA+4F,GAAA9/F,KAAAm/F,cACA,MAIA,IAAAY,EAAAD,EAAA9/F,KAAAm/F,cAEAY,EAAA//F,KAAAo/F,qBACAp/F,KAAAo/F,mBAAAW,GAIAh9C,EAAAA,EAAA7kC,IAAA2hF,GACAA,EAAAA,EAAA7kF,OAQA,GAJAhb,KAAAq/F,sBAAAQ,EAAAv/F,OAKAN,KAAA46E,WACA56E,KAAAq/F,sBACAr/F,KAAA4+F,UAAA9jE,iBACA,CAEA96B,KAAAs/F,2BAAA,EAEA,IAAAv4F,EAAA/G,KAAAggG,iBAAAhgG,KAAA48B,aAEA/9B,MAAAgI,kBAAA,qCAAAE,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,IACA5H,KAAAs/F,2BAAA,EAEAt/F,KAAAysF,WACAzsF,KAAAo/F,mBAAA10F,EAAAu1F,MACAjgG,KAAAkgG,MAAA,OAMA,OAAAn9C,GAMAinB,UAAA,SAAAG,GACA,IAAAtf,EAAAvsD,EAAA,+CAAAkQ,SAAA3M,QAAAqR,MACA43C,EAAAxsD,EAAA,4BAAAkQ,SAAAq8C,GACA9lB,EAAAzmC,EAAA,yBAAAkQ,SAAAs8C,GACAlqB,EAAAtiC,EAAA,YAAAkQ,SAAAu2B,GAEAolC,EAAA37D,SAAAoyB,GAGA5gC,KAAA+qD,gBAAA/qD,KAAA4+F,UAAAxlE,kBAAA7d,SAAA,YAAAA,WAGA,IAFA,IAAAyvC,EAAAmf,EAAA5uD,WAEAlc,EAAA,EAAAA,EAAA2rD,EAAA1qD,OAAAjB,IAAA,CACA,IAAA4rD,EAAA3sD,EAAA0sD,EAAA3rD,IAGA,GAAA4rD,EAAA70C,SAAA,iBACA60C,EAAAtvC,aADA,CAMA,IAAAuvC,EAAA5sD,EAAA0B,KAAA+qD,gBAAA1rD,IACAu5B,EAAAsyB,EAAA,GAAA0M,wBAAAh/B,MAMA,GAJAsyB,EAAAppC,IAAA,QAAA8W,EAAA,MACAqyB,EAAAnpC,IAAA,QAAA8W,EAAA,MAGA/2B,QAAA0Y,QAAA2wC,EAAA,kBAAA,CACAlrD,KAAA++F,kBAAA9zC,EAEA9oD,SAAA+oD,EAAAppC,IAAA,WAAAjjB,MAAAma,OACAhZ,KAAAg/F,2BAAApmE,EAEAqyB,EAAAnpC,IAAA,WAAAjjB,MAAAma,KAAAhZ,KAAA6+F,gBAIA,OAAAh0C,GAMAs1C,gBAAA,SAAA5wC,GACA,OAAAvvD,KAAAs/F,4BAIA,IAAAt/F,KAAAogG,gBAAA7wC,EAAAn7B,OAAAm7B,IAMA8wC,eAAA,SAAA9wC,GACA,OAAAvvD,KAAAs/F,4BAIA,IAAAt/F,KAAAogG,gBAAA7wC,EAAAA,EAAAv0C,SASAioC,YAAA,WAEAjjD,KAAAi/F,WAAAj/F,KAAAsgG,cAAAtgG,KAAA48B,YAAA58B,KAAA48B,YAAA71B,KAAA,UAGA/G,KAAAugG,wBAGAvgG,KAAA4+F,UAAAtkE,gBAEAt6B,KAAAqjB,QAMAmhE,OAAA,WACAxkF,KAAAqjB,OACArjB,KAAAwgG,iBAMAC,uBAAA,WACAzgG,KAAAugG,wBACAvgG,KAAA0gG,gCACA1gG,KAAAqjB,QAMAggC,WAAA,WAOA,GANArjD,KAAAy/F,kBAAA,EACAz/F,KAAAqjB,OAKArjB,KAAAu/F,cAAAv/F,KAAAm/F,cAAA,CAGA,IAFA,IAAAwB,EAAA3gG,KAAAu/F,aAAAv/F,KAAAm/F,cAEA9/F,EAAA,EAAAA,EAAAW,KAAA+iD,SAAAziD,OAAAjB,IAAA,CACA,IAAA0jD,EAAAzkD,EAAA0B,KAAA+iD,SAAA1jD,IAEAg/F,EADAt7C,EAAAh8C,KAAA,SACA45F,EACAC,EAAA5gG,KAAA6+F,aAAA7+F,KAAA6gG,gBAAAxC,GAEAt7C,EAAAh8C,KAAA,QAAAs3F,GACAt7C,EAAA1sC,KAAA,YAAAtP,KAAA,QAAAs3F,GACAt7C,EAAAxnC,SAAA,0BAAAuG,IAAA,WAAAjjB,MAAAma,KAAA4nF,GAGA5gG,KAAAy/F,kBAAA,EAIA,GAAAz/F,KAAAy/F,iBAAA,CASA,IALA,IAAA14F,EAAA/G,KAAAggG,iBAAAhgG,KAAA+iD,UAGA+9C,EAAA9gG,KAAA+iD,SAAAxqC,QAAA6b,OAEA0sE,EAAAxgG,QAAA,CACA,IAAAygG,EAAAD,EAAA/5F,KAAA,SAEA,GAAAg6F,GAAA/gG,KAAAu/F,aAAA,CACAx4F,EAAAy3F,OAAAsC,EAAA/5F,KAAA,MACA,MAGA,GAAAg6F,EAAA/gG,KAAAu/F,aAAA,CACAx4F,EAAAo/C,SAAA26C,EAAA/5F,KAAA,MAGA,IAAAmkB,EAAA41E,EAAAzqF,KAAA,kBAEA,IAAA6U,EAAA9U,SAAA,YAAA,CAEA8U,EAAA5Y,SAAA,YAGA,IAAA0uF,EAAAhhG,KAAA4+F,UAAAqC,uBAAAH,GAGA9gG,KAAA4+F,UAAArlE,eACAv5B,KAAA4+F,UAAArlE,cAAAlO,YAAArrB,KAAA48B,aAGA58B,KAAAqrB,YAAArrB,KAAA48B,aACA58B,KAAA48B,YAAAjhB,SACA3b,KAAA4+F,UAAAnlE,gBAGA,MAGAqnE,EAAAA,EAAA1sE,OAGAv1B,MAAAgI,kBAAA,0BAAAE,EAAA,CAAA2D,EAAA9C,KACA,GAAA,YAAAA,EAAA,CACA,IAAA8C,EAAAhD,QAGA,OAFA7I,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,kCACAK,KAAA4+F,UAAAl7E,aAAA0F,iBAGAvqB,MAAAkJ,GAAA+a,cAAAjkB,MAAAc,EAAA,MAAA,wBACAK,KAAAkhG,mBAGAF,GAAAA,EAAAp5E,SAAAtnB,SACA0gG,EAAArlF,SACA3b,KAAA4+F,UAAAuC,eAAAj2E,GAAA,IAIArsB,MAAAkJ,GAAAkb,gBAMAma,aAAA,WACAp9B,KAAA4+F,UAAArlE,eACAv5B,KAAA4+F,UAAArlE,cAAA8D,iBAGAr9B,KAAAy/F,kBAAA,EACAz/F,KAAAqjB,QAGA69E,iBAAA,WACAr/F,QAAA0f,sBAAA,KACAvhB,KAAA0X,QAAA,kBACA1X,KAAAyU,SAAAysF,sBAIAE,0BAAA,WAMA,GALAphG,KAAA+qD,gBAAAjpC,IAAA,QAAA,IAKA9hB,KAAAq/F,sBAAAr/F,KAAA4+F,UAAA9jE,iBAAA,CAEA96B,KAAA4+F,UAAAnlE,eAAAz5B,KAAAqhG,kBAAA,GAAArhG,KAAAshG,kBAAA,GAEA,IAAAC,EAAAvhG,KAAA+iD,SAAA1qC,OAAAqwD,UAEA64B,EAAAjhG,SACAN,KAAAqrB,YAAAk2E,GACAA,EAAA5lF,SACA3b,KAAA4+F,UAAAtkE,iBAIAt6B,KAAAqjB,QAOA+8E,gBAAA,SAAAU,EAAAjB,GAgBA,GAdAA,GAAAA,EAAAv/F,OACAN,KAAAogG,gBAAAoB,UAAA3B,EAAA94F,KAAA,SAEA/G,KAAAogG,gBAAAoB,UAAA,EAIAV,GAAAA,EAAAxgG,OACAN,KAAAogG,gBAAAqB,UAAAX,EAAA/5F,KAAA,SAAA,EAEA/G,KAAAogG,gBAAAqB,UAAA,EAIAzhG,KAAA46E,UAAA,CAEA,GACA,GAAA56E,KAAAogG,gBAAAoB,WACAxhG,KAAAogG,gBAAAoB,UAAAxhG,KAAAo/F,mBAAAp/F,KAAA46E,UAEA,OAAA,EAIA56E,KAAAogG,gBAAAqB,UAAAzhG,KAAAo/F,mBAAAp/F,KAAA46E,YACA56E,KAAAogG,gBAAAqB,UAAAzhG,KAAA46E,UAAA56E,KAAAo/F,mBAEAp/F,KAAAogG,gBAAAqB,UAAAzhG,KAAAogG,gBAAAoB,YACAxhG,KAAAogG,gBAAAqB,UAAAzhG,KAAAogG,gBAAAoB,YAKA,MAAA,CACAxsE,IAAAh1B,KAAAogG,gBAAAoB,UACA70E,IAAA3sB,KAAAogG,gBAAAqB,YAOAlB,sBAAA,WACAvgG,KAAAw/F,mBAAAx/F,KAAAogG,gBACApgG,KAAA+iD,SAAAxqC,QAAA6b,OACAp0B,KAAA+iD,SAAA1qC,OAAA2C,SAOAwlF,cAAA,SAAAkB,GAKA1hG,KAAAwgG,cAAAmB,WAAA3hG,KAAA4hG,WAAA5hG,KAAA6hG,WAGA,QAAAhjG,MAAAia,cACA9Y,KAAAwgG,cAAAmB,aAAA,GAIA3hG,KAAAwgG,cAAAsB,iBAAAjxF,KAAAK,MAAAlR,KAAAwgG,cAAAmB,WAAA9iG,MAAA8/F,qBAAAoD,cAGA/hG,KAAAwgG,cAAAjB,aAAAv/F,KAAAm/F,cAAAn/F,KAAAwgG,cAAAsB,iBAGA9hG,KAAAwgG,cAAAjB,aAAAv/F,KAAAw/F,mBAAAxqE,KACAh1B,KAAAwgG,cAAAsB,kBAAA9hG,KAAAw/F,mBAAAxqE,IAAAh1B,KAAAwgG,cAAAjB,aACAv/F,KAAAwgG,cAAAjB,aAAAv/F,KAAAw/F,mBAAAxqE,KACAh1B,KAAAwgG,cAAAjB,aAAAv/F,KAAAw/F,mBAAA7yE,MACA3sB,KAAAwgG,cAAAsB,kBAAA9hG,KAAAwgG,cAAAjB,aAAAv/F,KAAAw/F,mBAAA7yE,IACA3sB,KAAAwgG,cAAAjB,aAAAv/F,KAAAw/F,mBAAA7yE,KAIA3sB,KAAAu/F,gBAAAv/F,KAAAu/F,aAAAv/F,KAAAwgG,cAAAjB,eAEAv/F,KAAA0gG,gCAOA1gG,KAAAwgG,cAAAwB,sBAAAhiG,KAAAwgG,cAAAmB,WAAA3hG,KAAAwgG,cAAAsB,iBAAAjjG,MAAA8/F,qBAAAoD,aAGA/hG,KAAAwgG,cAAAyB,cAAApxF,KAAAK,MAAAlR,KAAAwgG,cAAAwB,sBAAA,IAGAnxF,KAAA0mC,IAAAv3C,KAAAwgG,cAAAyB,eAAApjG,MAAA8/F,qBAAAuD,WACAliG,KAAAwgG,cAAAyB,eAAAjiG,KAAAwgG,cAAAyB,cAAA,EAAA,GAAA,GAAApjG,MAAA8/F,qBAAAuD,UAIAliG,KAAAwgG,cAAA2B,0BAAAniG,KAAA6gG,gBAAA7gG,KAAAu/F,cAAAv/F,KAAAwgG,cAAAyB,cACAjiG,KAAAskF,QAAA,GAAAxiE,IAAA,UAAAjjB,MAAAma,KAAAhZ,KAAAwgG,cAAA2B,0BAAAniG,KAAA8+F,eACA9+F,KAAA++F,kBAAAj9E,IAAA,QAAA9hB,KAAAg/F,2BAAAh/F,KAAAwgG,cAAA2B,4BAMAtB,gBAAA,SAAAnF,GACA,OAAAA,EAAA,GAAA78F,MAAA8/F,qBAAAoD,cAMA/B,iBAAA,SAAAr6D,GACA,MAAA,CACA44D,YAAAv+F,KAAAu+F,YACAriF,UAAAypB,EAAA5+B,KAAA,MACAwP,OAAAovB,EAAAtvB,KAAA,kBAAAtP,KAAA,aAOAu5F,cAAA,SAAA36D,EAAAy8D,GAGA,GAFApiG,KAAAsgG,cAAArB,WAAA,GAEA,GAAAmD,EAIA,IAHApiG,KAAAsgG,cAAA+B,OAAAD,EACApiG,KAAAsgG,cAAAgC,UAAA38D,EAAAvR,OAEAp0B,KAAAsgG,cAAAgC,UAAAhiG,UACAN,KAAAsgG,cAAAgC,UAAAv7F,KAAA,SAAA/G,KAAAsgG,cAAA+B,SACAriG,KAAAsgG,cAAArB,WAAAjxF,QAAAhO,KAAAsgG,cAAAgC,WACAtiG,KAAAsgG,cAAA+B,OAAAriG,KAAAsgG,cAAAgC,UAAAv7F,KAAA,SAGA,GAAA/G,KAAAsgG,cAAA+B,UAKAriG,KAAAsgG,cAAAgC,UAAAtiG,KAAAsgG,cAAAgC,UAAAluE,OAIA,OAAAp0B,KAAAsgG,cAAArB,YAMAyB,8BAAA,WACA1gG,KAAAk/F,uBACAr9F,QAAA0gG,qBAAAviG,KAAAk/F,uBAGAl/F,KAAAk/F,sBAAAr9F,QAAA0f,sBAAAvhB,KAAAwiG,iBAAAv6E,KAAAjoB,QAGAwiG,iBAAA,WAMA,IALAxiG,KAAAk/F,sBAAA,KAKAl/F,KAAAwiG,iBAAAjrC,GAAA,EAAAv3D,KAAAwiG,iBAAAjrC,GAAAv3D,KAAAi/F,WAAA3+F,OAAAN,KAAAwiG,iBAAAjrC,KACAv3D,KAAAwiG,iBAAAC,WAAAziG,KAAAi/F,WAAAj/F,KAAAwiG,iBAAAjrC,IAGAv3D,KAAAwiG,iBAAAC,WAAA17F,KAAA,cAAA/G,KAAAwiG,iBAAAC,WAAA17F,KAAA,eAAA,GAGA,GAAA/G,KAAAwiG,iBAAAC,WAAA17F,KAAA,gBAEA/G,KAAAwiG,iBAAAC,WAAApsF,KAAA,wBAAAsF,SASA,IAFA3b,KAAAwiG,iBAAAE,cAAA1iG,KAAAsgG,cAAAtgG,KAAA48B,YAAA58B,KAAAu/F,cAEAv/F,KAAAwiG,iBAAAjrC,GAAA,EAAAv3D,KAAAwiG,iBAAAjrC,GAAAv3D,KAAAwiG,iBAAAE,cAAApiG,OAAAN,KAAAwiG,iBAAAjrC,KACAv3D,KAAAwiG,iBAAAC,WAAAziG,KAAAwiG,iBAAAE,cAAA1iG,KAAAwiG,iBAAAjrC,IAGAv3D,KAAAwiG,iBAAAC,WAAA17F,KAAA,cAAA/G,KAAAwiG,iBAAAC,WAAA17F,KAAA,eAAA,GAGA,GAAA/G,KAAAwiG,iBAAAC,WAAA17F,KAAA,gBAEAzI,EAAA,wCAAAO,MAAAc,EAAA,MAAA,sBAAA,aACAk6B,YAAA75B,KAAAwiG,iBAAAC,WAAApsF,KAAA,qBAIArW,KAAAi/F,WAAAj/F,KAAAwiG,iBAAAE,qBAEA1iG,KAAAwiG,iBAAAjrC,UACAv3D,KAAAwiG,iBAAAC,kBACAziG,KAAAwiG,iBAAAE,gBAEA,CACAC,cAAA,EACAZ,aAAA,GACAG,SAAA,GAEAzkF,SAAA,CACAyjF,iBAAA5iG,EAAAqlB,QCpjBA9kB,MAAA0yB,sBAAA1yB,MAAAq6B,qBAAAt6B,OAAA,CACAmmC,OAAA,KACA69D,oBAAA,KAEAC,mBAAA,KAEAC,uCAAA,KACAC,uCAAA,EAEAjpE,oBAAA,WAGA,OADA95B,KAAA+kC,OAAA/kC,KAAAoT,WAAAiD,KAAA,eACArW,KAAA+kC,OAAAxpB,SAAA,gBAGAyN,UAAA,WAEAhpB,KAAAgjG,mBAIA,UAAAhjG,KAAA0jB,aAAAjP,SAAAiT,SACA,cAAA1nB,KAAA0jB,aAAA8I,4BACA3qB,QAAA0Y,QAAAva,KAAA+kC,OAAA,qBAEA/kC,KAAA6iG,mBAAA,IAAAhkG,MAAA8/F,qBAAA3+F,KAAAA,KAAAu6B,kBAEAv6B,KAAA6iG,mBAAA,KAIA,cAAA7iG,KAAA0jB,aAAA8I,4BACAxsB,KAAA6d,YAAA7d,KAAAo5B,kBAAA,SAAA,SAAAthB,GACA,IAAAoH,EAAA5gB,EAAAwZ,EAAA4F,QAEAwB,EAAA9I,SAAA,YACA,IAAApW,KAAAijG,iBAAA/jF,IACAlf,KAAAmhG,eAAAjiF,OAOA8jF,iBAAA,WAIA,IAHA,IAAAE,EAAAljG,KAAA0jB,aAAA8I,2BACA22E,EAAAnjG,KAAA+kC,OAAAxpB,SAAA,SAAAA,WAAAA,SAAA,oBAEAlc,EAAA,EAAAA,EAAA8jG,EAAA7iG,OAAAjB,IAAA,CACA,IAAA+c,EAAA+mF,EAAAxwF,GAAAtT,GACA+O,EAAAgO,EAAAhO,KAAA,kBAGA,GAAAA,IAAA80F,EAAA,CACAljG,KAAA4iG,oBAAAxmF,EACA,IAAAgnF,EAAApjG,KAAA0jB,aAAAgJ,2BAEAtQ,EACA9J,SAAA,WAAA8wF,GACAvrF,GAAA,QAAA7X,KAAAqjG,+BAAAp7E,KAAAjoB,WACA,CAEAA,KAAA0jB,aAAA8L,uBAAAphB,GAEA9N,QACA8b,EACA9J,SAAA,aACAuF,GAAA,QAAA7X,KAAAsjG,iCAAAr7E,KAAAjoB,UAMAi6B,eAAA,WACA,OAAA,GAGAW,gBAAA,WACA,OAAA56B,KAAAujG,wCACAvjG,KAAA8iG,uCAEA9iG,KAAAy5B,eAIAM,gBAAA,SAAAc,GACA76B,KAAAujG,wCACAvjG,KAAA8iG,uCAAAjoE,EAEA76B,KAAAy5B,cAAAoB,GAIAC,eAAA,WACA,OAAA96B,KAAAujG,wCACAvjG,KAAA+iG,sCAEA/iG,KAAA05B,cAIAM,eAAA,SAAAe,GACA/6B,KAAAujG,wCACAvjG,KAAA+iG,sCAAAhoE,EAEA/6B,KAAA05B,aAAA15B,KAAA+iG,sCAAAhoE,GAIAK,kBAAA,WACA,IAAAt7B,EAAAE,KAAAqjB,OAQA,OAJArjB,KAAAujG,0CACAzjG,EAAAsoB,SAAAo7E,gBAAAxjG,KAAA6iG,mBAAAjmE,YAAA71B,KAAA,OAGAjH,GAGAw7B,eAAA,SAAAD,GACAr7B,KAAAqjB,KAAAgY,GAEAr7B,KAAA6iG,oBACA7iG,KAAA6iG,mBAAAh4E,SAAAwQ,GAGAx8B,MAAAkJ,GAAAuvD,0BAGAziD,oBAAA,SAAAsB,GACAtX,MAAAgW,oBAAAsB,EAAApP,KAAA,QAAAoP,EAAA,CACArW,OAAA,CACA2jG,gCAAAzjG,KAAA0jB,aAAAU,WAEApB,cAAAtY,IACAA,EAAAg9D,iBACA1nE,KAAA0jG,uBAAAvtF,EAAAzL,EAAAg9D,kBAGAhkD,aAAA1jB,KAAA0jB,gBAIAu/E,iBAAA,SAAA/3E,EAAAkG,GACA,IAAAA,IAAAlG,EAAA9U,SAAA,YACA,OAAA,EAGA8U,EAAArU,YAAA,YAQA,IALA,IAAA8uB,EAAAza,EAAAtD,SAAAA,SACAtR,EAAAqvB,EAAA5+B,KAAA,MACA20F,EAAA/1D,EAAA5+B,KAAA,SACA84F,EAAAl6D,EAAA3qB,OAEA6kF,EAAAv/F,QAAA,CACA,IAAAuB,QAAA0Y,QAAAslF,EAAA,mBAAA,CACA,GAAAA,EAAA94F,KAAA,UAAA20F,EACA,MAGA17F,KAAAu5B,eACAv5B,KAAAu5B,cAAAlO,YAAAw0E,GAGA7/F,KAAA6iG,oBACA7iG,KAAA6iG,mBAAAx3E,YAAAw0E,GAGA7/F,KAAAy5B,gBAGA,IAAAkqE,EAAA9D,EAAA7kF,OACA6kF,EAAAlkF,SACAkkF,EAAA8D,EAIA3jG,KAAA0jB,aAAAG,cAAA4J,sBACAztB,KAAA0jB,aAAAG,cAAA4J,oBAAA,IAGAztB,KAAA0jB,aAAAG,cAAA4J,oBAAA/tB,KAAA4W,GACAtW,KAAA0jB,aAAAuI,iBAAA,sBAAAjsB,KAAA0jB,aAAAG,cAAA4J,qBAGAztB,KAAAs6B,iBAGA6mE,eAAA,SAAAj2E,EAAAkG,GACA,IAAAA,GAAAlG,EAAA9U,SAAA,YACA,OAAA,EAMA,GAHA8U,EAAA5Y,SAAA,YAGAtS,KAAA0jB,aAAAG,cAAA4J,oBAAA,CACA,IAAAkY,EAAAza,EAAAtD,SAAAA,SACAtR,EAAAqvB,EAAA5+B,KAAA,MACAhI,EAAAT,EAAA6O,QAAAmJ,EAAAtW,KAAA0jB,aAAAG,cAAA4J,qBAEA,IAAA,IAAA1uB,EAAA,CACAiB,KAAA0jB,aAAAG,cAAA4J,oBAAAje,OAAAzQ,EAAA,GACAiB,KAAA0jB,aAAAuI,iBAAA,sBAAAjsB,KAAA0jB,aAAAG,cAAA4J,qBAGA,IAAAuzE,EAAAhhG,KAAAihG,uBAAAt7D,GAGA,IAAA5+B,EAAAzI,EAAAM,QAAA,EAAA,GAAAoB,KAAAyU,SAAA3U,QACAiH,EAAAqhB,SAAAw7E,aAAAttF,EAEAzX,MAAAiK,kBAAA,OAAA9I,KAAAyU,SAAA0mB,uBAAA,CAAAp0B,KAAAA,IAAAyC,KAAAkB,IAEA,IAAAs2F,EAAAp5E,SAAAtnB,OACA,OAGA,IAAA+6B,EAAA/8B,EAAAoM,EAAA3D,KAAArI,MAGAm8B,EAAA76B,KAAAy5B,cAAA4B,EAAA/6B,OACAy6B,EAAA/6B,KAAAyU,SAAAwY,WAAAoO,EAAA/6B,SAAAN,KAAAyU,SAAAwY,UAEA,GAAA8N,EAAA,CAEA,IAAA8oE,EAAA7C,EAAAt4B,UAEA1oE,KAAAu5B,eACAv5B,KAAAu5B,cAAAlO,YAAAw4E,GAGA7jG,KAAA6iG,oBACA7iG,KAAA6iG,mBAAAx3E,YAAAw4E,GAGAA,EAAAloF,SACAkf,GAAAgpE,EAAAvjG,YAGAy6B,EAAA/6B,KAAA05B,aAGAsnE,EAAA9pF,YAAAmkB,GACAr7B,KAAAs5B,YAAAla,KAAAic,IAEAr7B,KAAA0jB,aAAAiD,SAAA3mB,KAAAyU,SAAAshB,cACA/1B,KAAAu5B,cAAA1O,SAAAwQ,EAAAzf,OAAA,oBACA5b,KAAA0jB,aAAAwL,wBAGAlvB,KAAA6iG,oBACA7iG,KAAA6iG,mBAAAh4E,SAAAwQ,GAGAx8B,MAAA2T,eAAA9H,EAAA3D,KAAAya,UACA3iB,MAAAiU,eAAApI,EAAA3D,KAAA0a,UACA5iB,MAAAkJ,GAAAuvD,yBAEAt3D,KAAA+5B,gBAAAc,GACA76B,KAAAg6B,eAAAe,GAGA/6B,KAAAs6B,kBACA7wB,MAAAkB,IACA9L,MAAAkJ,GAAAC,eACAg5F,EAAAp5E,SAAAtnB,YAQA2gG,uBAAA,SAAAt7D,GACA,OAAArnC,EACA,wDACAqnC,EAAApqB,WAAAjb,OADA,sCAKAu5B,YAAA8L,IAGA49D,sCAAA,WACA,OACAvjG,KAAA6iG,oBACA7iG,KAAA6iG,mBAAApW,UACAzsF,KAAA6iG,mBAAAxD,sBAIAgE,+BAAA,SAAAvrF,GACA,IAAAsE,EAAA9d,EAAAwZ,EAAA8C,eAEA,IAAAwB,EAAAhG,SAAA,WAAA,CAKA,IACA0tF,EAAA,QADA9jG,KAAA0jB,aAAAgJ,2BACA,OAAA,MAEA1sB,KAAA0jB,aAAAgM,iBAAAo0E,GACA9jG,KAAA+jG,uBAAAjsF,EAAAsE,KAGAknF,iCAAA,SAAAxrF,GACA,IAAAsE,EAAA9d,EAAAwZ,EAAA8C,eAEA,IAAAwB,EAAAhG,SAAA,WAAA,CAIA,IAAAhI,EAAAgO,EAAAhO,KAAA,kBAEApO,KAAA0jB,aAAAqI,iBAAA3d,GACApO,KAAA+jG,uBAAAjsF,EAAAsE,KAGA2nF,uBAAA,SAAAjsF,EAAAsE,GACApc,KAAA4iG,qBACA5iG,KAAA4iG,oBAAA/rF,YAAA,oBAGAuF,EAAAvF,YAAA,aAAAvE,SAAA,mBACAtS,KAAA0jB,aAAA6I,iCACAvsB,KAAA0jB,aAAA0F,iBAGAppB,KAAA0jB,aAAAkH,qBAGA84E,uBAAA,SAAAvtF,EAAAuxD,GACA,IAAA4O,EAAAngE,EAAA2E,QAAA,MAEA,IAAA,IAAA1M,KAAAs5D,EACAA,EAAAjoE,eAAA2O,IAIAkoE,EAAA/6D,SAAA,eAAAnN,EAAA,YAAA1P,KAAAgpE,EAAAt5D,OCzVAvP,MAAAmlG,eAAAnlG,MAAA48B,uBAAA78B,OAAA,CACAolB,cAAA,KACAigF,WAAA,KAEA7wF,WAAA,KACAwoB,mBAAA,KACA7V,UAAA,KACAm+E,aAAA,KACAvsE,SAAA,KAEAwsE,aAAA,EAEA3mF,KAAA,SAAA/I,GAKA,IAAAnW,EAAA0G,cAAAyP,GAAA,CAKA,IAHA,IAAAunB,EAAA,GACA77B,EAAA,CAAA,KAAA,OAAA,aAAA,mBAEAd,EAAA,EAAAA,EAAAc,EAAAG,aACA,IAAA27B,UAAA58B,GADAA,IAEA28B,EAAA77B,EAAAd,IAAA48B,UAAA58B,GAMAoV,EAAAunB,EAGAh8B,KAAAqjB,KAAA/kB,EAAAM,OAAA,GAAAC,MAAAmlG,eAAAvmF,SAAAhJ,IAEAzU,KAAAkkG,aAAAlkG,KAAAoT,WAAAmI,SAAA,QAAAA,SAAA,SACAvb,KAAA23B,SAAA33B,KAAAkkG,aAAAlpF,OAEAhb,KAAA6d,YAAA7d,KAAAkkG,aAAA,QAAA,KACAlkG,KAAAgkB,eACA2E,aAAA3oB,KAAAgkB,eAGAhkB,KAAAgkB,cAAA4E,WAAA5oB,KAAAokG,cAAAn8E,KAAAjoB,MAAA,OAGAA,KAAA6d,YAAA7d,KAAAkkG,aAAA,WAAA,SAAApsF,GAOA,OANAA,EAAAC,UAAAlW,QAAAinB,YACAhR,EAAAK,iBAKAL,EAAAC,SACA,KAAAlW,QAAAinB,WAKA,OAJAhR,EAAAK,sBACAnY,KAAAikG,YACAjkG,KAAAqkG,UAAArkG,KAAAikG,WAAA/7E,SAAAtM,OAAA,YAKA,KAAA/Z,QAAAkrF,SAEA,GADAj1E,EAAAK,iBACAnY,KAAAikG,WAAA,CACA,IAAAK,EAAAtkG,KAAAikG,WAAA/7E,SAAAtM,OAAA,UACA,GAAA0oF,EAAAhkG,OAAA,CACA,IAAAikG,EAAAD,EAAA18E,SAAA8gD,UAAAryD,KAAA,oBAAAkC,QACAgsF,EAAAjkG,QACAN,KAAAwkG,YAAAD,QAGAvkG,KAAAwkG,YAAAxkG,KAAAikG,WAAA/7E,SAAAvV,GAAA,IAGA,OAGA,KAAA9Q,QAAAgrF,OAEA,GADA/0E,EAAAK,iBACAnY,KAAAikG,WAAA,CACA,IAAAK,EAAAtkG,KAAAikG,WAAA/7E,SAAAtM,OAAA,UACA,GAAA0oF,EAAAhkG,OAAA,CACA,IAAAmkG,EAAAH,EAAA18E,SAAA2wE,UAAAliF,KAAA,oBAAAgC,OACAosF,EAAAnkG,QACAN,KAAAwkG,YAAAC,QAGAzkG,KAAAwkG,YAAAxkG,KAAAikG,WAAA/7E,SAAAvV,GAAA3S,KAAAikG,WAAA/7E,SAAA5nB,OAAA,IAGA,WAKAN,KAAA6d,YAAA7d,KAAAkkG,aAAA,SAAA,WACAlkG,KAAAikG,YACAjkG,KAAAikG,WAAAjsE,UAIAh4B,KAAA6d,YAAA7d,KAAAkkG,aAAA,QAAA,WACAlkG,KAAAmkG,YACAnkG,KAAAmkG,aAAA,EAIAv7E,WAAA,KACA5oB,KAAAikG,YACAjkG,KAAAikG,WAAAp8E,QAEA,OAIA28E,YAAA,SAAAzjF,GACA/gB,KAAAikG,WAAA/7E,SAAArR,YAAA,SACAkK,EAAAzO,SAAA,SACAtS,KAAAikG,WAAAn1C,UAAA1gD,KAAA,wBAAA2S,EAAA3S,KAAA,QAIAkuB,kBAAAh+B,EAAAqlB,KAEAqZ,mBAAA,WACA,OAAA,MAGAonE,cAAA,WAOA,GANApkG,KAAAikG,YACAjkG,KAAA0kG,iBAGA1kG,KAAAkkG,aAAA3/F,MAEA,CACAvE,KAAA23B,SAAA9gB,YAAA,UAIA,IAFA,IAAA8tF,EAAA,GAEAtlG,EAAA,EAAAA,EAAAW,KAAA+lB,UAAAzlB,OAAAjB,IAAA,CACA,IAAAiX,EAAAhY,EAAA0B,KAAA+lB,UAAA1mB,IAAA0H,KAAA,MAEAuP,GACAquF,EAAAjlG,KAAA4W,GAIAtW,KAAAyU,SAAAyqB,iBACAylE,EAAAjlG,KAAAM,KAAAyU,SAAAyqB,iBAGA,IAAAn4B,EAAA,CACAxB,OAAAvF,KAAAkkG,aAAA3/F,MACAqgG,WAAA5kG,KAAAyU,SAAAmwF,WACAD,WAAAA,GAGA9lG,MAAAgI,kBAAA,uBAAAE,EAAA,CAAA2D,EAAA9C,KAQA,GANA5H,KAAAikG,YACAjkG,KAAA0kG,iBAGA1kG,KAAA23B,SAAArlB,SAAA,UAEA,YAAA1K,EAAA,CAMA,IALA,IAGA2K,EAHAokB,EAAAr4B,EAAA,+BAAAkQ,SAAA3M,QAAAqR,MACAb,EAAA/T,EAAA,SAAAkQ,SAAAmoB,GAIAt3B,EAAA,EAAAA,EAAAqL,EAAAm6F,KAAAvkG,OAAAjB,IACAkT,EAAAjU,EAAA,SACAkQ,SAAA6D,GAEA/T,EAAA,wBACAkQ,SAAA+D,GACAjP,KAAAoH,EAAAm6F,KAAAxlG,GAAAoc,OACA1U,KAAA,KAAA2D,EAAAm6F,KAAAxlG,GAAAiX,IACAhE,SAAA5H,EAAAm6F,KAAAxlG,GAAAylG,QAAA,WAAA,IAGAp6F,EAAAq6F,aACAxyF,EAAAjU,EAAA,SAAAkQ,SAAA6D,GACA/T,EAAA,yBAAAkQ,SAAA+D,GAAAjP,KAAAyD,EAAAxB,SAGA8M,EAAAgE,KAAA,0BAAA/D,SAAA,SAEAtS,KAAAikG,WAAA,IAAApiG,QAAAmjG,KAAAruE,EAAA,CACAsuE,gBAAAjlG,KAAAkkG,aACAl1C,eAAAhvD,KAAAqkG,UAAAp8E,KAAAjoB,QAGAA,KAAA6d,YAAA8Y,EAAA,YAAA,KACA32B,KAAAmkG,aAAA,IAGAnkG,KAAAikG,WAAAjsE,eAIAh4B,KAAA23B,SAAArlB,SAAA,WAIA+xF,UAAA,SAAAhxE,GACA,IAAAtS,EAAAziB,EAAA+0B,GAEA,IAAAtS,EAAA3K,SAAA,YAAA,CAIA,IAAAE,EAAAyK,EAAAha,KAAA,MACA0U,EAAAsF,EAAAzd,OAEA6S,EAAA7X,EAAA,SAAA,CACAkd,MAAA,0BACAo8D,UAAAthE,EACA4uF,eAAAllG,KAAAyU,SAAA0wF,aACAC,aAAA3pF,EACA4pF,gBAAA,MACA72F,SAAAxO,KAAA47B,oBAEAt3B,EAAAhG,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAlF,KAAAyU,SAAAvP,KAAA,KACAC,MAAAmR,IACA9H,SAAA2H,GAEA7X,EAAA,OAAA,CACAkd,MAAA,cACAC,MAAA5c,MAAAc,EAAA,MAAA,YACA6O,SAAA2H,GAEA,IAAAmvF,EAAAhnG,EAAA,SAAA,CACAkd,MAAA,UACAhN,SAAA2H,GAEA7X,EAAA,UAAA,CACAkd,MAAA,QACAlY,KAAAmY,IACAjN,SAAA82F,GAEA,IAAAh3C,IAAAn4C,EAAA0iB,aAAA,IACA74B,KAAAkkG,aAAApiF,IAAA,UAAAjjB,MAAAma,KAAAs1C,EAAA,MAEA,IAAArwB,EAAA,GAYA,GAXAA,EAAA,UAAAp/B,MAAAma,MAAA,EACAhZ,KAAAkkG,aAAAnrF,SAAAklB,EAAA,QAEAj+B,KAAA+lB,UAAA/lB,KAAA+lB,UAAA7H,IAAA/H,GAEAnW,KAAA29B,YAAAxnB,GAEAnW,KAAA0kG,iBACA1kG,KAAAkkG,aAAA3/F,IAAA,IACAvE,KAAAkkG,aAAAxsF,QAAA,UAEApB,EAAA,CAEAH,EAAA7D,SAAA,oBAEA,IAAAvL,EAAA,CACAu3D,QAAAt+D,KAAAyU,SAAAmwF,WACAnpF,MAAAA,GAGA5c,MAAAgI,kBAAA,kBAAAE,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,GAAA8C,EAAAhD,SACAyO,EAAA/H,KAAA,UAAA1D,EAAA4L,IACAhS,EAAAC,IAAAmG,EAAA4L,IAEAH,EAAAU,YAAA,sBAEA7W,KAAA89B,cAAA3nB,GAEA,YAAAvO,GAEA/I,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,mCAOA+kG,eAAA,WACA1kG,KAAAikG,WAAAp8E,OACA7nB,KAAAikG,WAAAxlF,UACAze,KAAAikG,WAAA,OAEA,CACAxmF,SAAA,CACAmnF,WAAA,QCvSA/lG,MAAA2yB,uBAAA3yB,MAAAq6B,qBAAAt6B,OAAA,CACAk7B,oBAAA,WACA,OAAA95B,KAAAoT,WAAAmI,SAAA,SCLA1c,MAAAs4B,GACA,CACAohD,gBAAA,SAAAqJ,GACAA,EAAAtjF,EAAAM,OAAA,CACA2mG,cAAA,GACA3jB,GACA,IAAAt9E,EAAAhG,EAAA,WAAA,CACA8P,KAAA,CACAoN,MAAA,OACAla,KAAAsgF,EAAAtgF,MAAA,OACAkkG,UAAA5jB,EAAA4jB,UACAlvF,GAAAsrE,EAAAtrE,GACAK,KAAAirE,EAAAjrE,KACAzR,KAAA08E,EAAA18E,KACAC,MAAAy8E,EAAAz8E,MACAsgG,UAAA7jB,EAAA6jB,UACAC,UAAA1lG,KAAA2lG,kBAAA/jB,EAAA8jB,WACAH,aAAA,kBAAA3jB,EAAA2jB,aAAA3jB,EAAA2jB,aAAA,KAAA,MAAA3jB,EAAA2jB,aACAz0B,SAAA9wE,KAAA4lG,iBAAAhkB,EAAA9Q,UACA+0B,SAAAjkB,EAAAikB,SACApqF,MAAAmmE,EAAAnmE,MACAic,YAAAkqD,EAAAlqD,YACA8qD,KAAAZ,EAAAY,KACAxtD,IAAA4sD,EAAA5sD,IACArI,IAAAi1D,EAAAj1D,OA8BA,OA1BAi1D,EAAApmE,OACAlX,EAAAgO,SAAAsvE,EAAApmE,OAEAomE,EAAAlqD,aACApzB,EAAAgO,SAAA,YAEA,aAAAsvE,EAAAtgF,MACAgD,EAAAgO,SAAA,YAEAsvE,EAAA9Q,UACAxsE,EAAAgO,SAAA,YAEAsvE,EAAAjrE,MACArS,EAAAgO,SAAA,aAGAsvE,EAAAkkB,eAAAlkB,EAAA6jB,WACAnhG,EACA8J,KAAA,wBACA0T,IAAA,YAAA,QAAAjjB,MAAAia,YAAA,QAAA,QAAA,IAAA8oE,EAAA6jB,UAAA1zF,WAAAzR,OAAA,GAAA,OAGAshF,EAAAlqD,aAAAkqD,EAAAkkB,gBACA,IAAAjkG,QAAA6Y,SAAApW,GAGA,aAAAs9E,EAAAtgF,KACAhD,EAAA,kCAAAuU,OAAAvO,GAEAA,GAIAmzB,gBAAA,SAAAmqD,GAIA,OAHAA,EAAAtrE,KACAsrE,EAAAtrE,GAAA,OAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAAu4E,gBAAAqJ,GAAAA,IAGAmkB,oBAAA,SAAAnkB,GACA,IAAAtrE,EAAAsrE,EAAAtrE,IAAA,WAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,UACA8zF,EAAApkB,EAAAokB,UAAA1vF,EAAA,OAEAlD,EAAA9U,EAAA,SAAA,CACAkd,MAAA,aAGAlX,EAAAtE,KAAAu4E,gBAAAj6E,EAAAM,OAAA,GAAAgjF,EAAA,CACAikB,UAAA,KACAr3F,SAAA4E,GAmBA,OAjBA9U,EAAA,YAAA,CACAgD,KAAA,SACAgV,GAAA0vF,EACAxqF,MAAA,MACAmC,YAAA,YACAlC,MAAA5c,MAAAc,EAAA,MAAA,qBACA+b,aAAA7c,MAAAc,EAAA,MAAA,uBACA6O,SAAA4E,GAEAyE,GAAA,QAAA,KACAvT,EAAA,GAAA3C,SACA4E,SAAA0/F,YAAA,QACApnG,MAAAkJ,GAAA+a,cAAAjkB,MAAAc,EAAA,MAAA,yBACAyT,EAAAsE,QAAA,QACApT,EAAA,GAAAE,kBAAA,EAAA,KAGA4O,GAGA8yF,oBAAA,SAAAtkB,GAIA,OAHAA,EAAAtrE,KACAsrE,EAAAtrE,GAAA,WAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAA+lG,oBAAAnkB,GAAAA,IAGAukB,qBAAA,SAAAvkB,GACA,IAAAxuE,EAAA9U,EAAA,SAAA,CACAkd,MAAA,iBAEAkB,EAAApe,EAAA,SAAA,CACAkd,MAAA,SACAhN,SAAA4E,GACApT,KAAAkmG,oBAAA5nG,EAAAM,OAAA,CACA+X,KAAA9F,KAAA8b,IAAA9b,KAAAmkB,IAAA4sD,EAAAz8E,MAAA7E,OAAA,IAAA,KACAshF,IAAApzE,SAAAkO,GACA,IAAAkW,EAAA,IAAA/wB,QAAA4+B,MAAArtB,EAAA,CACAsrB,kBAAA,IAKA,OAHAtrB,EAAAyE,GAAA,OAAA,KACA+a,EAAA/K,SAEAzU,GAGAgzF,eAAA,SAAAxkB,GACA,IAAA/I,EAAAv6E,EAAA,cAAA,CACAkd,MAAA,OACA8jD,KAAAsiB,EAAAtiB,MAAA,EACA9lD,KAAAooE,EAAApoE,MAAA,GACAlD,GAAAsrE,EAAAtrE,GACApR,KAAA08E,EAAA18E,KACAugG,UAAA7jB,EAAA6jB,UACAC,UAAA9jB,EAAA8jB,YAAA7jG,QAAA8f,iBAAA,GACAmvD,WAAA8Q,EAAA9Q,SACAp5C,YAAAkqD,EAAAlqD,YACAh5B,KAAAkjF,EAAAz8E,QAeA,OAZAy8E,EAAAkkB,eACAjtB,EAAAzqE,KAAA,uBAAA,IAGAwzE,EAAApmE,OACAq9D,EAAAvmE,SAAAsvE,EAAApmE,OAGAomE,EAAAjrE,MACAkiE,EAAAvmE,SAAA,aAGAumE,GAGAwtB,oBAAA,SAAAzkB,GAIA,OAHAA,EAAAtrE,KACAsrE,EAAAtrE,GAAA,WAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAAomG,eAAAxkB,GAAAA,IAGA3Q,aAAA,SAAA2Q,GACA,IAAAxuE,EAAA9U,EAAA,SAAA,CACAkd,MAAA,WAGAomE,EAAApmE,OACApI,EAAAd,SAAAsvE,EAAApmE,OAGA,IAAA8qF,EAAAhoG,EAAA,YAAA,CACAgY,GAAAsrE,EAAAtrE,GACApR,KAAA08E,EAAA18E,KACAwgG,UAAA9jB,EAAA8jB,WAAA7jG,QAAA8f,iBAAA,GACAmvD,SAAA8Q,EAAA9Q,SACAy1B,qBAAA3kB,EAAAoD,eACAx2E,SAAA4E,GAGA,GAAA9U,EAAA0G,cAAA48E,EAAA36E,SAAA,CACA,IAAAA,EAAA,GACA,IAAA,IAAAhI,KAAA2iF,EAAA36E,QAAA,CACA,IAAA26E,EAAA36E,QAAAxH,eAAAR,GACA,SAEA,IAAAo0B,EAAAuuD,EAAA36E,QAAAhI,GACAX,EAAA0G,cAAAquB,QACA,IAAAA,EAAAmzE,SACAv/F,EAAAvH,KAAA2zB,GAEApsB,EAAAvH,KAAA,CACA8W,MAAA6c,EAAA7c,MACArR,WAAA,IAAAkuB,EAAAluB,MAAAkuB,EAAAluB,MAAAlG,EACA6xE,cAAA,IAAAz9C,EAAAy9C,UAAAz9C,EAAAy9C,WAIA7pE,EAAAvH,KAAA,CACA8W,MAAA6c,EACAluB,MAAAlG,IAIA2iF,EAAA36E,QAAAA,EAGA,IAAAw/F,EAAA,KAEA,IAAA,IAAApnG,EAAA,EAAAA,EAAAuiF,EAAA36E,QAAA3G,OAAAjB,IAAA,CACA,IAAAg0B,EAAAuuD,EAAA36E,QAAA5H,QAGA,IAAAg0B,EAAAmzE,SACAC,EAAAnoG,EAAA,cAAA,CACAkY,MAAA6c,EAAA7c,QACAhI,SAAA83F,GAEAhoG,EAAA,YAAA,CACA6G,MAAAkuB,EAAAluB,MACAuhG,SAAArzE,EAAAluB,OAAAy8E,EAAAz8E,MACA2rE,cAAA,IAAAz9C,EAAAy9C,UAAAz9C,EAAAy9C,SACApyE,KAAA20B,EAAA7c,QACAhI,SAAAi4F,GAAAH,GASA,OALA1kB,EAAAzI,SACAmtB,EAAAh0F,SAAA,eACA,IAAAzT,MAAAqb,YAAAosF,IAGAlzF,GAGAgkB,kBAAA,SAAAwqD,GAIA,OAHAA,EAAAtrE,KACAsrE,EAAAtrE,GAAA,SAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAAixE,aAAA2Q,GAAAA,IAGArY,eAAA,SAAAqY,GACA,IAAAtrE,EAAAsrE,EAAAtrE,IAAA,WAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,UAEA5N,EAAAhG,EAAA,WAAA,CACAgD,KAAA,WACA6D,WAAA,IAAAy8E,EAAAz8E,MAAAy8E,EAAAz8E,MAAA,IACAmR,GAAAA,EACAkF,MAAA,WACAtW,KAAA08E,EAAA18E,KACAgkD,QAAA04B,EAAA14B,QAAA,UAAA,KACAw8C,UAAA1lG,KAAA2lG,kBAAA/jB,EAAA8jB,WACA50B,SAAA9wE,KAAA4lG,iBAAAhkB,EAAA9Q,UACA61B,cAAA/kB,EAAAzI,OACAytB,sBAAAhlB,EAAAilB,gBAGAjlB,EAAApmE,OACAlX,EAAAgO,SAAAsvE,EAAApmE,QAGAomE,EAAAzI,QAAAyI,EAAAilB,iBACAviG,EAAAgO,SAAA,eACA,IAAAzT,MAAAqb,YAAA5V,IAGA,IAAAsoD,EAAAtuD,EAAA,WAAA,CACAwoG,IAAAxwF,EACA5X,KAAAkjF,EAAAprE,QAIA,OAAAorE,EAAA18E,OAAA08E,EAAA18E,KAAA5E,OAAA,GAAA,OAAAshF,EAAA18E,KAAAxD,QAAA,IACApD,EAAA,CACAA,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAA08E,EAAA18E,KACAC,MAAA,KACA,GACAb,EAAA,GACAsoD,EAAA,KAGAtuD,EAAA,CACAgG,EAAA,GACAsoD,EAAA,MAKAm6C,oBAAA,SAAAnlB,GACAA,EAAAtrE,KACAsrE,EAAAtrE,GAAA,WAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAGA,IAAAm+D,EAAA/xE,EAAA,qCAAA,CACAgY,GAAAsrE,EAAAtrE,GAAA,WAgBA,OAbAsrE,EAAArpE,OACA83D,EAAA/9D,SAAA,SAEAsvE,EAAAtY,cACA+G,EAAA/9D,SAAA,oBAGAtS,KAAAupE,eAAAqY,GAAApzE,SAAA6hE,GAEAuR,EAAAtY,cACAhrE,EAAA,+BAAAgF,KAAAs+E,EAAAtY,cAAA96D,SAAA6hE,GAGAA,GAGA22B,qBAAA,SAAAplB,GACA,IAMAqlB,EAAAC,EANA9zF,EAAA9U,EAAA,uCAEAsjF,EAAApmE,OACApI,EAAAd,SAAAsvE,EAAApmE,OAKAomE,EAAAulB,eACAF,EAAArlB,EAAAqlB,UAAA,IACAC,EAAAtlB,EAAArzE,QAAA04F,EAGA3oG,EAAA,UAAAkQ,SAAA4E,GAAAP,OACA7S,KAAAupE,eAAA,CACAjzD,GAAAsrE,EAAAtrE,GACAkF,MAAA,MACAhF,MAAA,OAAAorE,EAAAwlB,UAAAvoG,MAAAc,EAAA,MAAA,QAAA,OACAuF,KAAA08E,EAAA18E,KACAC,MAAA8hG,EACA/9C,QAAAg+C,EACAxB,UAAA9jB,EAAA8jB,cAIAwB,GAAA,EAIA,IAAA,IAAA7nG,EAAA,EAAAA,EAAAuiF,EAAA36E,QAAA3G,OAAAjB,IAAA,CACA,IAAAg0B,EAAAuuD,EAAA36E,QAAA5H,GAEAg0B,EAAAluB,OAAA8hG,GAIA3oG,EAAA,UAAAkQ,SAAA4E,GAAAP,OACA7S,KAAAupE,eAAA,CACA/yD,MAAA6c,EAAA7c,MACAtR,KAAA08E,EAAA18E,KAAA08E,EAAA18E,KAAA,KAAA,KACAC,MAAAkuB,EAAAluB,MACA+jD,QAAAg+C,IAAAtlB,EAAArzE,QAAA,IAAAe,SAAA+jB,EAAAluB,OACA2rE,SAAAo2B,KAOA,OAFA,IAAArlG,QAAAoY,eAAA7G,GAEAA,GAGAi0F,0BAAA,SAAAzlB,GAKA,OAJAA,EAAA0lB,UAAA,EACA1lB,EAAAtrE,KACAsrE,EAAAtrE,GAAA,iBAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAAgnG,qBAAAplB,GAAAA,IAGAxJ,kBAAA,SAAAwJ,GACA,IAAAz8E,EAAAy8E,EAAAz8E,OAAA,IACAqV,EAAAonE,EAAApnE,oBAAA,IAEApH,EAAA9U,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA,cACA+rF,aAAApiG,EACAqiG,2BAAAhtF,EACAlE,GAAAsrE,EAAAtrE,GACAmf,KAAA,WACAE,eAAAisD,EAAA/pE,GAAA,OAAA+pE,EAAAgK,cAAA,QAAA,QACA6b,kBAAA7lB,EAAA8lB,QACAf,cAAA/kB,EAAAzI,OACAytB,sBAAAhlB,EAAAilB,gBAyCA,OAtCAjlB,EAAA/pE,GACAzE,EAAAd,SAAA,MACAsvE,EAAAgK,eACAx4E,EAAAd,SAAA,iBAGAsvE,EAAA1J,OACA9kE,EAAAd,SAAA,SAGAsvE,EAAA9Q,UACA19D,EAAAd,SAAA,YAGAhU,EACA,uEAGAkQ,SAAA4E,GAEAwuE,EAAA18E,MACA5G,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAA08E,EAAA18E,KACAC,MAAAy8E,EAAA/pE,GAAA1S,EAAAy8E,EAAAgK,cAAApxE,EAAA,GACAs2D,SAAA8Q,EAAA9Q,WACAtiE,SAAA4E,IAGAwuE,EAAAzI,QAAAyI,EAAAilB,iBACAzzF,EAAAd,SAAA,eACA,IAAAzT,MAAAqb,YAAA9G,IAGA,IAAAvU,MAAA4b,YAAArH,EAAA,CACA6+B,SAAA2vC,EAAA3vC,UAAA3zC,EAAAqlB,OAGAvQ,GAGAo8D,uBAAA,SAAAoS,GAIA,OAHAA,EAAAtrE,KACAsrE,EAAAtrE,GAAA,cAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAAo4E,kBAAAwJ,GAAAA,GACAtvE,SAAA,sBAGAyzD,iBAAA,SAAA6b,GACA,MAAAtrE,EAAAsrE,EAAAtrE,IAAA,QAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,UACAy1F,EAAA/lB,EAAA+lB,aAAArxF,EAAA,aACApR,EAAA08E,EAAA18E,MAAA,KACAC,EAAAy8E,EAAAz8E,OAAA,KACA+yE,EAAA0J,EAAA1J,QAAA,EACAwtB,EAAA9jB,EAAA8jB,WAAA7jG,QAAA8f,iBAAA,GACAmvD,EAAA8Q,EAAA9Q,WAAA,EAEA19D,EAAA9U,EAAA,SAAA,CACAgY,GAAAqxF,EACAnsF,MAAA,yBAGAosF,EAAAtpG,EAAA,SAAA,CACAkd,MAAA,gBAAA08D,EAAA,SAAA,MACA1pE,SAAA4E,GAOA6+C,GALA3zD,EAAA,SAAA,CACAkd,MAAA,gBACA+rC,MAAAq6B,EAAAz8E,MAAA,CAAAu1C,gBAAAknC,EAAAz8E,OAAA,OACAqJ,SAAAo5F,GAEAtpG,EAAA,SAAA,CACAkd,MAAA,0BAEA3I,OACAvU,EAAA,SAAA,CACAkd,MAAA,iCACAw3E,cAAA,OACA1vF,KAAA,OAGAkL,SAAA4E,IAEApT,KAAAu4E,gBAAA,CACAjiE,GAAAA,EACApR,KAAAA,EACAC,MAAAtG,MAAAoQ,MAAA9J,EAAA,KACAwR,KAAA,GACA6E,MAAA,cACAkqF,UAAAA,EACA50B,SAAAA,EACAp1D,aAAA7c,MAAAc,EAAA,MAAA,qBACA6O,SAAAyjD,GAGA,OADA,IAAApzD,MAAA8mE,WAAAvyD,GACAA,GAGAy0F,iBAAA,SAAAjmB,GAKA,OAJAA,EAAA0lB,UAAA,EAAA75F,EACAm0E,EAAAtrE,KACAsrE,EAAAtrE,GAAA,QAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAA+lE,iBAAA6b,GAAAA,IAGAzJ,gBAAA,SAAAyJ,GACA,IAAAtrE,GAAAsrE,EAAAtrE,IAAA,OAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAAA,QACAhN,EAAA08E,EAAA18E,MAAA,KACAR,EAAAQ,EAAAA,EAAA,SAAA,KACAC,EAAAy8E,EAAAz8E,OAAA,mBAAAy8E,EAAAz8E,MAAA2iG,SAAAlmB,EAAAz8E,MAAA,KACA4iG,EAAA5iG,EAAAtG,MAAAyD,WAAA6C,GAAA,KACAugG,EAAA9jB,EAAA8jB,WAAA7jG,QAAA8f,iBAAA,GACAmvD,EAAA8Q,EAAA9Q,WAAA,EAEA19D,EAAA9U,EAAA,SAAA,CACAkd,MAAA,gBAGAlX,EAAAtE,KAAAu4E,gBAAA,CACAjiE,GAAAA,EACApR,KAAAR,EACAS,MAAA4iG,EACArwE,YAAA,IACA6tE,cAAA,EACAG,UAAAA,EACA50B,SAAAA,IACAtiE,SAAA4E,GAgBA,OAdA9U,EAAA,gCAAAkQ,SAAA4E,GAEAlO,GACA5G,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAA,EAAA,aACAX,IAAA1F,MAAAmpG,WACAx5F,SAAA4E,GAGA9O,EAAA7B,WAAAnE,EAAAM,OAAA,CACAqpG,YAAA9iG,GAAA,IAAA3C,MACA3D,MAAA6D,oBAEA0Q,GAGA80F,gBAAA,SAAAtmB,GAIA,OAHAA,EAAAtrE,KACAsrE,EAAAtrE,GAAA,OAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAAm4E,gBAAAyJ,GAAAA,IAGAumB,sBAAA,SAAAvmB,GACA,IAAA91C,EAAA,IAAAtpC,KACA4lG,EAAA,IAAA5lG,KAAAspC,EAAAu8D,cAAAv8D,EAAAg8D,WAAAh8D,EAAAw8D,WACA1mB,EAAAtjF,EAAAM,OAAA,CACA4c,MAAA,GACAvU,QAAA,CACA,QACA,WACA,YACA,WACA,YACA,aACA,aACA,YAEAgrC,SAAA3zC,EAAAqlB,KACA+iF,SAAA,KACA6B,UAAA,KACAC,QAAA,MACA5mB,GAEA,IAWAvuD,EACAC,EAZAqD,EAAAr4B,EAAA,SAAA,CAAAkd,MAAA,SACAnJ,EAAA/T,EAAA,QAAA,CAAAkd,MAAA,WAAAhN,SAAAmoB,GACA8xE,EAAAnqG,EAAA,QACAgU,SAAA,OACAhP,KAAAzE,MAAAc,EAAA,MAAA,QACAoH,KAAA,SAAA,OAEAzI,EAAA,SACAuU,OAAA41F,GACAj6F,SAAA6D,GAIA,IAAA,IAAAhT,EAAA,EAAAA,EAAAuiF,EAAA36E,QAAA3G,OAAAjB,IAAA,CACA,IAAA66B,EAAA0nD,EAAA36E,QAAA5H,GACA,OAAA66B,GACA,IAAA,QACA7G,EAAA,CACA7c,MAAA3X,MAAAc,EAAA,MAAA,SACA4oG,UAAAH,EACAI,QAAAJ,GAEA,MACA,IAAA,WACA,IAAAM,EAAA58D,EAAA68D,SAAA9pG,MAAA6D,kBAAAkmG,SACAF,EAAA,IACAA,GAAA,GAEAr1E,EAAA,CACA7c,MAAA3X,MAAAc,EAAA,MAAA,aACA4oG,UAAA,IAAA/lG,KAAAspC,EAAAu8D,cAAAv8D,EAAAg8D,WAAAh8D,EAAAw8D,UAAAI,GACAF,QAAAJ,GAEA,MACA,IAAA,YACA/0E,EAAA,CACA7c,MAAA3X,MAAAc,EAAA,MAAA,cACA4oG,UAAA,IAAA/lG,KAAAspC,EAAAu8D,cAAAv8D,EAAAg8D,YACAU,QAAAJ,GAEA,MACA,IAAA,WACA/0E,EAAA,CACA7c,MAAA3X,MAAAc,EAAA,MAAA,aACA4oG,UAAA,IAAA/lG,KAAAspC,EAAAu8D,cAAA,GACAG,QAAAJ,GAEA,MACA,IAAA,YACA/0E,EAAA,CACA7c,MAAA3X,MAAAc,EAAA,MAAA,kBAAA,CAAAurE,IAAA,IACAq9B,UAAA,IAAA/lG,KAAAspC,EAAAu8D,cAAAv8D,EAAAg8D,WAAAh8D,EAAAw8D,UAAA,GACAE,QAAAJ,GAEA,MACA,IAAA,aACA/0E,EAAA,CACA7c,MAAA3X,MAAAc,EAAA,MAAA,kBAAA,CAAAurE,IAAA,KACAq9B,UAAA,IAAA/lG,KAAAspC,EAAAu8D,cAAAv8D,EAAAg8D,WAAAh8D,EAAAw8D,UAAA,IACAE,QAAAJ,GAEA,MACA,IAAA,aACA/0E,EAAA,CACA7c,MAAA3X,MAAAc,EAAA,MAAA,kBAAA,CAAAurE,IAAA,KACAq9B,UAAA,IAAA/lG,KAAAspC,EAAAu8D,cAAAv8D,EAAAg8D,WAAAh8D,EAAAw8D,UAAA,IACAE,QAAAJ,GAEA,MACA,IAAA,WACA/0E,EAAA,CACA7c,MAAA3X,MAAAc,EAAA,MAAA,aACA4oG,UAAA,IAAA/lG,KAAAspC,EAAAu8D,cAAAv8D,EAAAg8D,WAAAh8D,EAAAw8D,UAAA,KACAE,QAAAJ,GAKA,IAAA71F,EAAAjU,EAAA,SACAokB,EAAApkB,EAAA,OAAA,CAAAgF,KAAA+vB,EAAA7c,QACAzP,KAAA,SAAAmzB,GACAnzB,KAAA,YAAAssB,EAAAk1E,WACAxhG,KAAA,UAAAssB,EAAAm1E,SACAzhG,KAAA,YAAAssB,EAAAk1E,UAAAl1E,EAAAk1E,UAAAl/F,UAAA,MACAtC,KAAA,UAAAssB,EAAAm1E,QAAAn1E,EAAAm1E,QAAAn/F,UAAA,MAEAu4E,EAAA8kB,UAAAxsE,GAAA0nD,EAAA8kB,WACApzE,EAAA5Q,EAAA,IAGAnQ,EAAAM,OAAA6P,GACAnQ,EAAA/D,SAAA6D,GAGA/T,EAAA,SAAAkQ,SAAAmoB,GAEA,IAAAkyE,EAAAvqG,EAAA,SAAA,CAAAkd,MAAA,4BAAAhN,SAAAmoB,GACAmyE,EAAA9oG,KAAAkoG,gBAAA,CAAA1xF,MAAA3X,MAAAc,EAAA,MAAA,UAAA6O,SAAAq6F,GAAAxyF,KAAA,SACA0yF,EAAA/oG,KAAAkoG,gBAAA,CAAA1xF,MAAA3X,MAAAc,EAAA,MAAA,QAAA6O,SAAAq6F,GAAAxyF,KAAA,SAGA2yF,EAAAF,EAAA5qF,IAAA6qF,GACAC,EAAAnxF,GAAA,SAAA,SAAAC,GACAA,EAAAC,UAAAlW,QAAAkd,SAAAzgB,EAAA0B,MAAA+G,KAAA,cAAAkiG,MAAAl1E,GAAA,aACAjc,EAAAM,qBAKA0wF,EAAA/hG,KAAA,cAAAkiG,MAAApxF,GAAA,aAAA,SAAAC,GACAA,EAAAM,qBAEA2wF,EAAAhiG,KAAA,cAAAkiG,MAAApxF,GAAA,aAAA,SAAAC,GACAA,EAAAM,qBAGA,IAAA2P,EAAA,IAAAlmB,QAAAmjG,KAAAruE,EAAA,CACAq4B,eAAA,SAAA37B,GACA,IAAAtS,EAAAziB,EAAA+0B,GACA1Y,EAAArX,KAAAyd,EAAAzd,QACAykB,EAAAmhF,8BACAvyE,EAAAtgB,KAAA,QAAAQ,YAAA,OACAkK,EAAAzO,SAAA,OAGAw2F,EAAArmG,WAAA,UAAAse,EAAAha,KAAA,cACAgiG,EAAAtmG,WAAA,UAAAse,EAAAha,KAAA,YAEA66E,EAAA3vC,SAAAlxB,EAAAha,KAAA,cAAA,KAAAga,EAAAha,KAAA,YAAA,KAAAga,EAAAha,KAAA,cAIAiiG,EAAAnxF,GAAA,UAAA,WAEA,IAMAkJ,EANAwnF,EAAAO,EAAArmG,WAAA,WACA+lG,EAAAO,EAAAtmG,WAAA,WACA0mG,EAAAZ,EAAAA,EAAAl/F,UAAA,KACA+/F,EAAAZ,EAAAA,EAAAn/F,UAAA,KAEA6e,EAAA7V,EAAAgE,KAAA,KAEAgzF,GAAA,EAEA,IAAA,IAAAhqG,EAAA,EAAAA,EAAA6oB,EAAA5nB,OAAAjB,IAEA,GADA0hB,EAAAmH,EAAAvV,GAAAtT,GAEA8pG,KAAApoF,EAAAha,KAAA,cAAA,OACAqiG,KAAAroF,EAAAha,KAAA,YAAA,MACA,CACAghB,EAAAwH,aAAAxO,EAAA,IACAsoF,GAAA,EACAznB,EAAA3vC,SAAA,KAAA,KAAAlxB,EAAAha,KAAA,WACA,MAIAsiG,IACA1yE,EAAAtgB,KAAA,QAAAQ,YAAA,OACAgyF,EAAAv2F,SAAA,OAEA62F,GAAAC,EAEAD,GAAAC,EACAzuF,EAAArX,KAAAwlG,EAAAvkG,MAAA,MAAAwkG,EAAAxkG,OACA4kG,EACAxuF,EAAArX,KAAAzE,MAAAc,EAAA,MAAA,cAAA,CAAA4C,KAAAumG,EAAAvkG,SAEAoW,EAAArX,KAAAzE,MAAAc,EAAA,MAAA,YAAA,CAAA4C,KAAAwmG,EAAAxkG,SANAoW,EAAArX,KAAAzE,MAAAc,EAAA,MAAA,QAQAooB,EAAAmhF,8BAEAtnB,EAAA3vC,SAAAs2D,EAAAC,EAAA,cAIAzgF,EAAAlQ,GAAA,QAAA,WACAixF,EAAArmG,WAAA,QACAsmG,EAAAtmG,WAAA,WAGA,IAAA6mG,EAAA,cACA1nB,EAAApmE,QACA8tF,EAAAA,EAAA,IAAA1nB,EAAApmE,OAGA,IAAAb,EAAArc,EAAA,YAAA,CACAgD,KAAA,SACAka,MAAA8tF,EACA3rF,YAAA,OACAra,KAAAzE,MAAAc,EAAA,MAAA,SAqBA,OAlBA,IAAAkC,QAAAqZ,QAAAP,EAAAoN,GAEAuL,GACAvL,EAAAwH,aAAA+D,GAGAsuD,EAAA2mB,WACAO,EAAArmG,WAAA,UAAAm/E,EAAA2mB,WAGA3mB,EAAA4mB,SACAO,EAAAtmG,WAAA,UAAAm/E,EAAA4mB,UAGA5mB,EAAA2mB,WAAA3mB,EAAA4mB,UACAQ,EAAAtxF,QAAA,UAGAiD,GAGA29D,gBAAA,SAAAsJ,GACA,IAAAtrE,GAAAsrE,EAAAtrE,IAAA,OAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAAA,QACAhN,EAAA08E,EAAA18E,MAAA,KACAR,EAAAQ,EAAAA,EAAA,SAAA,KACAC,EAAAy8E,EAAAz8E,OAAA,mBAAAy8E,EAAAz8E,MAAA2iG,SAAAlmB,EAAAz8E,MAAA,KACAugG,EAAA9jB,EAAA8jB,WAAA7jG,QAAA8f,iBAAA,GACAmvD,EAAA8Q,EAAA9Q,WAAA,EAEA19D,EAAA9U,EAAA,SAAA,CACAkd,MAAA,gBAGAlX,EAAAtE,KAAAu4E,gBAAA,CACAjiE,GAAAA,EACApR,KAAAR,EACAgzB,YAAA,IACA6tE,cAAA,EACAG,UAAAA,EACA50B,SAAAA,IACAtiE,SAAA4E,GAiBA,OAfA9U,EAAA,gCAAAkQ,SAAA4E,GAEAlO,GACA5G,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAA,EAAA,aACAX,IAAA1F,MAAAmpG,WACAx5F,SAAA4E,GAGA9O,EAAAilG,WAAA1qG,MAAA2qG,mBACArkG,GACAb,EAAAilG,WAAA,UAAA,KAAApkG,EAAAskG,WAAA,GAAAtkG,EAAAukG,aAAAvkG,EAAAwkG,cAGAv2F,GAGAw2F,gBAAA,SAAAhoB,GAIA,OAHAA,EAAAtrE,KACAsrE,EAAAtrE,GAAA,OAAAzF,KAAAC,MAAA,IAAAD,KAAAqB,WAEAlS,KAAAqpE,YAAArpE,KAAAs4E,gBAAAsJ,GAAAA,IAGAvY,YAAA,SAAAhlE,EAAAu9E,GACA,IAAAprE,EAAAorE,EAAAprE,OAAA,cAAAorE,EAAAprE,MAAAorE,EAAAprE,MAAA,KAGA65D,GAFAxxE,MAAAohB,aAAA2hE,EAAArrE,QAAAqrE,EAAArrE,OAEAjY,EAAAsjF,EAAA0lB,SAAA,cAAA,SAAA,CACA9rF,MAAA,QACAlF,GAAAsrE,EAAArhD,UAAAqhD,EAAAtrE,GAAAsrE,EAAAtrE,GAAA,SAAA,SAOA,GAJAsrE,EAAArpE,OACA83D,EAAA/9D,SAAA,SAGAkE,EACA,CAAA,IAAAmd,EAAAr1B,EAAA,0BAAAkQ,SAAA6hE,GAEA/xE,EAAAsjF,EAAA0lB,SAAA,YAAA,WAAA,CACAhxF,GAAAsrE,EAAA8lB,UAAA9lB,EAAAtrE,GAAA,GAAAsrE,EAAAtrE,MAAAsrE,EAAA0lB,SAAA,SAAA,UAAA,MACA9rF,MAAAomE,EAAAkB,SAAA,WAAA,KACAgkB,KAAAllB,EAAA0lB,UAAA1lB,EAAAtrE,GACAhT,KAAAkT,IACAhI,SAAAmlB,GAiBA,OAdAiuD,EAAAtY,cACAhrE,EAAA,+BAAAgF,KAAAs+E,EAAAtY,cAAA96D,SAAA6hE,GAGA/xE,EAAA,wBAAAuU,OAAAxO,GAAAmK,SAAA6hE,GAEAuR,EAAAioB,SACAvrG,EAAA,wBAAAgF,KAAAs+E,EAAAioB,SAAAr7F,SAAA6hE,GAGAuR,EAAAxvE,QACApS,KAAA8pG,iBAAAz5B,EAAAuR,EAAAxvE,QAGAi+D,GAGAl+D,gBAAA,SAAAC,GACA,IAAAiiB,EAAA/1B,EAAA,wBAMA,OAJA8T,GACApS,KAAA+pG,gBAAA11E,EAAAjiB,GAGAiiB,GAGA01E,gBAAA,SAAA11E,EAAAjiB,GACA,IAAA,IAAA/S,EAAA,EAAAA,EAAA+S,EAAA9R,OAAAjB,IACAf,EAAA,SAAAgF,KAAA8O,EAAA/S,IAAAmP,SAAA6lB,IAIAy1E,iBAAA,SAAAz5B,EAAAj+D,GACA,GAAAA,EAAA,CAIAi+D,EAAA/9D,SAAA,cACA+9D,EAAA90D,SAAA,UAAAjJ,SAAA,UAEA,IAAA03F,EAAA35B,EAAA90D,SAAA,aAEAyuF,EAAA1pG,SACA0pG,EAAAhqG,KAAAmS,kBAAA3D,SAAA6hE,IAGArwE,KAAA+pG,gBAAAC,EAAA53F,KAGA63F,qBAAA,SAAA55B,GACAA,EAAAx5D,YAAA,cACAw5D,EAAA90D,SAAA,UAAA1E,YAAA,UACAw5D,EAAA90D,SAAA,aAAAI,UAGAgqF,kBAAA,SAAAD,GACA,OAAAA,IAAA7jG,QAAA8f,iBAAA,GAAA,YAAA,MAGAikF,iBAAA,SAAA90B,GACA,OAAAA,EAAA,WAAA,OC94BAjyE,MAAAypD,SAAAzmD,QAAAoa,KAAArd,OAAA,CACAuiD,SAAA,KACAkH,aAAA,KACAlyC,SAAA,KACA1B,SAAA,KACAy1F,eAAA,GACAC,eAAA,KACAC,kBAAA,EACAC,kBAAA,EAEA7sF,KAAA,SAAArH,EAAA1B,GACAzU,KAAAkqG,eAAA,CAAAvzF,KAAA,GAAArV,KAAA,GAAA4rB,MAAA,IACAltB,KAAAmW,SAAAA,EACAnW,KAAAqoD,aAAA,KACAroD,KAAAmqG,eAAA,KACAnqG,KAAAoqG,kBAAA,EACApqG,KAAAqqG,kBAAA,EAIA,IAAAxiD,GAFApzC,EAAAnW,EAAAM,OAAA,GAAAC,MAAAypD,SAAA7qC,SAAAhJ,IAEAozC,OAeA,IAAA,IAAA1oC,YAdA1K,EAAAozC,OAEApzC,EAAA4zC,cAAA5zC,EAAA4zC,aAAA/nD,SACA,iBAAAmU,EAAA4zC,eACA5zC,EAAA4zC,aAAA,CAAA5zC,EAAA4zC,eAGAroD,KAAAqoD,aAAA5zC,EAAA4zC,oBACA5zC,EAAA4zC,cAGA5zC,EAAA61F,YAAA,EAEAtqG,KAAAmhD,SAAAnhD,KAAAmW,SAAAo0F,WAAA91F,GACAozC,EACAA,EAAApoD,eAAA0f,IAIAnf,KAAAmhD,SAAAtpC,GAAAsH,EAAA0oC,EAAA1oC,IAGAnf,KAAAyU,SAAAA,EAEAzU,KAAAmhD,SAAAtpC,GAAA,gBAAA7X,KAAAwqG,UAAAviF,KAAAjoB,QAMA2oD,UAAA,SAAA8hD,QAEA,IAAA5rG,MAAA8H,oBAAA,IAAA9H,MAAA+H,iBAEA6jG,EAAA5rG,MAAA8H,eAAA9H,MAAA+H,gBAGA5G,KAAAmhD,SAAAopD,WAAA,SAAA,CAAAx8C,SAAA08C,KAMAC,cAAA,WACA,OAAA1qG,KAAAmhD,SAAAopD,WAAA,WAMA5gD,aAAA,WAEA,OAAA3pD,KAAA0qG,gBAAA,GAMAF,UAAA,SAAA7/F,EAAA5D,GACA4D,EAAAyN,kBAEA,IAAAovB,GAAA,EA8CA,OA5CAxnC,KAAAqoD,eACAroD,KAAAmqG,gBACAnqG,KAAA2qG,uBAGAnjE,GAAA,GAIAzgC,EAAA6jG,UAAAC,KAAA,KACA,IAAAnhD,EAAA3iD,EAAAyiD,MAAA,GACAshD,GAAA,EACA,GAAAtjE,EAAA,CACA,IACAujE,EADArhD,EAAAxkD,KAAAQ,MAAA,oBACA,IACA,IAAApH,EAAA6O,QAAA49F,EAAAj7F,cAAA9P,KAAAmqG,kBACAW,GAAA,EACA9qG,KAAAkqG,eAAA5oG,KAAA5B,KAAA,IAAAgqD,EAAAxkD,KAAA,MAIAwkD,EAAA/yC,KAAA3W,KAAAyU,SAAAu2F,cACAhrG,KAAAkqG,eAAAvzF,KAAAjX,KAAA,IAAAgqD,EAAAxkD,KAAA,KACA4lG,GAAA,GAIAA,GAAA,mBAAA9qG,KAAAyU,SAAAw5C,kBAAAjuD,KAAAyU,SAAAw5C,gBAAAjuD,KAAAqqG,qBACArqG,KAAAkqG,eAAAh9E,MAAAxtB,KAAA,IAAAgqD,EAAAxkD,KAAA,KACA4lG,GAAA,GAGAA,IACA9qG,KAAAqqG,oBACAtjG,EAAAyvD,YAGAx2D,KAAAoqG,oBAAArjG,EAAAkkG,cAAA3qG,SACAN,KAAAoqG,kBAAA,EACApqG,KAAAqqG,kBAAA,EACArqG,KAAAkrG,2BAIA,GAMAA,qBAAA,WACA,IAAA7nG,EAEArD,KAAAkqG,eAAA5oG,KAAAhB,SAEA+C,EADA,IAAArD,KAAAkqG,eAAA5oG,KAAAhB,OACA,+EAEA,gFAGA+C,EAAAxE,MAAAc,EAAA,MAAA0D,EAAA,CAAAmmD,MAAAxpD,KAAAkqG,eAAA5oG,KAAAb,KAAA,MAAA0qG,MAAAnrG,KAAAqoD,aAAA5nD,KAAA,QACAT,KAAAkqG,eAAA5oG,KAAA,GACA2G,MAAA5E,IAGArD,KAAAkqG,eAAAvzF,KAAArW,SAEA+C,EADA,IAAArD,KAAAkqG,eAAAvzF,KAAArW,OACA,gGAEA,oGAGA+C,EAAAxE,MAAAc,EAAA,MAAA0D,EAAA,CAAAmmD,MAAAxpD,KAAAkqG,eAAAvzF,KAAAlW,KAAA,MAAAkW,KAAA3W,KAAAorG,cAAAvsG,MAAAwsG,iBACArrG,KAAAkqG,eAAAvzF,KAAA,GACA1O,MAAA5E,IAGArD,KAAAkqG,eAAAh9E,MAAA5sB,SAEA+C,EADA,IAAArD,KAAAkqG,eAAAh9E,MAAA5sB,OACA,oFAEA,qFAGA+C,EAAAxE,MAAAc,EAAA,MAAA0D,EAAA,CAAAmmD,MAAAxpD,KAAAkqG,eAAAh9E,MAAAzsB,KAAA,QACAT,KAAAkqG,eAAAh9E,MAAA,GACAjlB,MAAA5E,KAIA+nG,cAAA,SAAAE,GAGA,GAAAA,EAFA,KAGA,OAAAA,EAAA,KAGA,IAEAC,GAAA,EAEA,GACAD,GAXA,OAYAC,QAEAD,GAdA,MAgBA,OAAAA,EAAAE,QAAA,GAAA,IAVA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAUAD,IAGAZ,qBAAA,WACA3qG,KAAAmqG,eAAA,GAEA,IAAA,IAAA9qG,EAAA,EAAAA,EAAAW,KAAAqoD,aAAA/nD,OAAAjB,IAAA,CACA,IAAAosG,EAAAzrG,KAAAqoD,aAAAhpD,GAEA,QAAA,IAAAR,MAAA6sG,UAAAD,GACA,IAAA,IAAAhxC,EAAA,EAAAA,EAAA57D,MAAA6sG,UAAAD,GAAAE,WAAArrG,OAAAm6D,IAAA,CACA,IAAAhyB,EAAA5pC,MAAA6sG,UAAAD,GAAAE,WAAAlxC,GACAz6D,KAAAmqG,eAAAzqG,KAAA+oC,MAMAhqB,QAAA,WACAze,KAAAmW,SAAAo0F,WAAA,WACAvqG,KAAAqjB,SAEA,CACA5F,SAAA,CACAmqC,SAAA,KACAgkD,UAAA,KACAjkD,UAAA,KACAkkD,mBAAA,EACAb,YAAAnsG,MAAAwsG,cACAhjD,aAAA,KACAR,OAAA,GACAoG,gBAAA,KACAzmD,QAAA,CAAAskG,OAAA,oCACAl+F,UAAA,mBChOA/O,MAAAktG,mBAAAltG,MAAAqjC,mBAAAtjC,OAAA,CACAmkC,oBAAA,SAAAF,GAKAA,GAHAA,EAAAA,EAAAlkC,QAAA,aAAA,KAGAmR,cAOA+yB,GADAA,GAHAA,EAAAhkC,MAAAuS,YAAAyxB,IAGAlkC,QAAA,WAAA,KACAA,QAAA,cAAA,IAGA,IAEAqtG,EAFAntG,MAAAsQ,YAAA0zB,EAAA3hC,MAAA,eAEAT,KAAA5B,MAAAi8F,mBAMA,OAJAkR,GAAAhsG,KAAAyU,SAAAw3F,SACAD,GAAAhsG,KAAAyU,SAAAw3F,QAGAD,K1D7BA,CA0uxBGxtG","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        uuid: function() {\n            if (typeof crypto.randomUUID === 'function') {\n                return crypto.randomUUID();\n            }\n\n            // h/t https://stackoverflow.com/a/2117523/1688568\n            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n              (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n            );\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n            $('.datewrapper > input[type=\"date\"], .timewrapper > input[type=\"time\"]', $container).datetimeinput();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('').trigger('input').trigger('change');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().filter('[type=\"text\"]').focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n\n        datetimeinput: function() {\n            return this.each(function() {\n                const $input = $(this);\n                const checkValue = () => {\n                    if ($input.val() === '') {\n                        $input.addClass('empty-value');\n                    } else {\n                        $input.removeClass('empty-value');\n                    }\n                };\n                $input.on('input', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $searchContainer: null,\n    $search: null,\n    $filterBtn: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    filterHuds: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n\n        this.$searchContainer = this.$toolbar.find('.search:first')\n        this.$search = this.$searchContainer.children('input:first');\n        this.$filterBtn = this.$searchContainer.children('.filter-btn:first');\n        this.$clearSearchBtn = this.$searchContainer.children('.clear:first');\n\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Filter HUDs\n        this.filterHuds = {};\n        this.addListener(this.$filterBtn, 'click', 'showFilterHud');\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].serialized) {\n            params.condition = this.filterHuds[this.sourceKey].serialized;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        // Filter HUD\n        // ----------------------------------------------------------------------\n\n        this.updateFilterBtn();\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n            delete params.collapsedElementIds;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    },\n\n    showFilterHud: function() {\n        if (!this.filterHuds[this.sourceKey]) {\n            this.filterHuds[this.sourceKey] = new FilterHud(this, this.sourceKey);\n        } else {\n            this.filterHuds[this.sourceKey].show();\n        }\n    },\n\n    updateFilterBtn: function() {\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].hasRules()) {\n            this.$filterBtn.addClass('active');\n        } else {\n            this.$filterBtn.removeClass('active');\n        }\n    },\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\nconst FilterHud = Garnish.HUD.extend({\n    elementIndex: null,\n    sourceKey: null,\n    loading: true,\n    serialized: null,\n\n    init: function(elementIndex, sourceKey) {\n        this.elementIndex = elementIndex;\n        this.sourceKey = sourceKey;\n\n        const $spinner = $('<div/>', {\n            class: 'spinner',\n        });\n\n        this.base(this.elementIndex.$filterBtn, $spinner, {\n            hudClass: 'hud element-filter-hud loading',\n        });\n\n        this.$tip.remove();\n        this.$tip = null;\n\n        const id = `element-filter-${Math.floor(Math.random() * 1000000000)}`;\n\n        Craft.sendActionRequest('POST', 'element-indexes/filter-hud', {\n            data: {\n                elementType: this.elementIndex.elementType,\n                source: this.sourceKey,\n                baseInputName: id,\n                id: id,\n            },\n        }).then(response => {\n            this.loading = false;\n            this.$hud.removeClass('loading');\n            $spinner.remove();\n\n            this.$main.append(response.data.hudHtml);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.bodyHtml);\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        });\n    },\n\n    updateSizeAndPositionInternal: function() {\n        const searchOffset = this.elementIndex.$searchContainer.offset();\n\n        this.$hud.css({\n            width: this.elementIndex.$searchContainer.outerWidth() - 2,\n            top: searchOffset.top + this.elementIndex.$searchContainer.outerHeight(),\n            left: searchOffset.left + 1,\n        });\n    },\n\n    onShow: function() {\n        this.elementIndex.$filterBtn.addClass('active');\n        this.base();\n    },\n\n    onHide: function() {\n        this.base();\n\n        this.elementIndex.updateFilterBtn();\n\n        // If something changed, update the elements\n        if (this.serialized !== (this.serialized = this.serialize())) {\n            this.elementIndex.updateElements();\n        }\n    },\n\n    hasRules: function() {\n        return this.$main.has('.condition-rule').length !== 0;\n    },\n\n    serialize: function() {\n        return this.hasRules() ? this.$body.serialize() : null;\n    }\n})\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n    replaceAsset: null,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    if (this.replaceAsset) {\n                        this.settings.input.replaceElement(this.$element.data('id'), this.replaceAsset);\n                    } else {\n                        this.settings.input.refreshThumbnail(this.$element.data('id'));\n                    }\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n\n            onSave: (data) => {\n                if (data.elementId) {\n                    this.settings.elementId = this.replaceAsset = data.elementId;\n                }\n\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave(data);\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function(data) {\n        this.settings.onSave(data);\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    replaceElement: function(elementId, replaceWithId) {\n        var parameters = {\n            elementId: replaceWithId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                this.removeElement($existing);\n                let elementInfo = Craft.getElementInfo(data.html);\n                this.selectElements([elementInfo]);\n            }\n        });\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    isMobile: null,\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.isMobile = Garnish.isMobileBrowser();\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (!this.isMobile && this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        if (this.isMobile) {\n            return;\n        }\n\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $newSourceBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    elementTypeName: null,\n    availableTableAttributes: null,\n\n    conditionBuilderHtml: null,\n    conditionBuilderJs: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        const $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        Craft.sendActionRequest('POST', 'element-index-settings/get-customize-sources-modal-data', {\n            data: {\n                elementType: this.elementIndex.elementType,\n            },\n        }).then(response => {\n            this.$saveBtn.removeClass('disabled');\n            this.buildModal(response.data);\n        }).finally(() => {\n            this.$loadingSpinner.remove();\n        });\n\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        this.availableTableAttributes = response.availableTableAttributes;\n        this.elementTypeName = response.elementTypeName;\n        this.conditionBuilderHtml = response.conditionBuilderHtml;\n        this.conditionBuilderJs = response.conditionBuilderJs;\n\n        if (response.headHtml) {\n            Craft.appendHeadHtml(response.headHtml);\n        }\n        if (response.bodyHtml) {\n            Craft.appendFootHtml(response.bodyHtml);\n        }\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (let i = 0; i < response.sources.length; i++) {\n            this.sources.push(this.addSource(response.sources[i]));\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n\n        const $menuBtnContainer = $('<div class=\"buttons left\"/>').appendTo(this.$footer);\n        const $menuBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn add icon',\n            'aria-label': Craft.t('app', 'Add…'),\n            title: Craft.t('app', 'Add…'),\n        }).appendTo($menuBtnContainer);\n\n        const $menu = $('<div/>', {\n            class: 'menu',\n        }).appendTo($menuBtnContainer);\n        const $ul  = $('<ul/>').append(\n          $('<li/>').append(\n            $('<a/>', {\n                text: Craft.t('app', 'New heading'),\n                'data-type': 'heading',\n            })\n          )\n        ).appendTo($menu);\n\n        if (response.conditionBuilderHtml) {\n            $('<li/>').append(\n              $('<a/>', {\n                  text: Craft.t('app', 'New custom source'),\n                  'data-type': 'custom',\n              })\n            ).appendTo($ul);\n        }\n\n        new Garnish.MenuBtn($menuBtn, {\n            onOptionSelect: option => {\n                const sourceData = {\n                    type: $(option).data('type'),\n                };\n                if (sourceData.type === 'custom') {\n                    sourceData.key = `custom:${Craft.uuid()}`;\n                    sourceData.tableAttributes = [];\n                    sourceData.availableTableAttributes = [];\n                }\n                const source = this.addSource(sourceData);\n                Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n                source.select();\n                this.updateSourcesOnSave = true;\n            }\n        });\n    },\n\n    addSource: function(sourceData) {\n        const $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        const $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        const $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        let source;\n\n        if (sourceData.type === 'heading') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            if (sourceData.type === 'native') {\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            } else {\n                source = new Craft.CustomizeSourcesModal.CustomSource(this, $item, $itemLabel, $itemInput, sourceData);\n            }\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n        return source;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'element-index-settings/save-customize-sources-modal-settings', {\n            data: this.$container.serialize() + '&elementType=' + this.elementIndex.elementType,\n        }).then(() => {\n            // Have any changes been made to the source list?\n            if (this.updateSourcesOnSave) {\n                if (this.$elementIndexSourcesContainer.length) {\n                    let $lastSourceItem = null,\n                      $pendingHeading;\n\n                    for (let i = 0; i < this.sourceSort.$items.length; i++) {\n                        const $item = this.sourceSort.$items.eq(i),\n                          source = $item.data('source'),\n                          $indexSourceItem = source.getIndexSourceItem();\n\n                        if (!$indexSourceItem) {\n                            continue;\n                        }\n\n                        if (source.isHeading()) {\n                            $pendingHeading = $indexSourceItem;\n                            continue;\n                        }\n\n                        if ($pendingHeading) {\n                            this.appendIndexSourceItem($pendingHeading, $lastSourceItem);\n                            $lastSourceItem = $pendingHeading;\n                            $pendingHeading = null;\n                        }\n\n                        const isNew = !$indexSourceItem.parent().length;\n                        this.appendIndexSourceItem($indexSourceItem, $lastSourceItem);\n                        if (isNew) {\n                            this.elementIndex.initSource($indexSourceItem.children('a'));\n                        }\n                        $lastSourceItem = $indexSourceItem;\n                    }\n\n                    // Remove any additional sources (most likely just old headings)\n                    if ($lastSourceItem) {\n                        const $extraSources = $lastSourceItem.nextAll();\n                        this.elementIndex.sourceSelect.removeItems($extraSources);\n                        $extraSources.remove();\n                    }\n                }\n            }\n\n            // If a source is selected, have the element index select that one by default on the next request\n            if (this.selectedSource && this.selectedSource.sourceData.key) {\n                this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                this.elementIndex.updateElements();\n            }\n\n            Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n            this.hide();\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        }).finally(() => {\n            this.$saveSpinner.addClass('hidden');\n        });\n    },\n\n    appendIndexSourceItem: function($sourceItem, $lastSourceItem) {\n        if (!$lastSourceItem) {\n            $sourceItem.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $sourceItem.insertAfter($lastSourceItem);\n        }\n    },\n\n    destroy: function() {\n        for (let i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = $('<div/>').appendTo(this.modal.$sourceSettingsContainer);\n            this.createSettings(this.$settingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n    },\n\n    getIndexSourceItem: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        if (val) {\n            this.$itemLabel.text(val);\n        } else {\n            this.$itemLabel.html('&nbsp;');\n        }\n    },\n\n    destroy: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.data('source', null);\n        this.$item.remove();\n\n        if (this.$settingsContainer) {\n            this.$settingsContainer.remove();\n        }\n\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function($container) {\n        this.createTableAttributesField($container);\n    },\n\n    createTableAttributesField: function($container) {\n        if (!this.sourceData.tableAttributes.length && !this.modal.availableTableAttributes.length) {\n            return;\n        }\n\n        const $columnCheckboxes = $('<div/>');\n        const selectedAttributes = [];\n\n        $(`<input type=\"hidden\" name=\"sources[${this.sourceData.key}][tableAttributes][]\" value=\"\"/>`).appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        const availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            const [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        }).appendTo($container);\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n          .append('<div class=\"icon move\"/>')\n          .append(\n            Craft.ui.createCheckbox({\n                label: Craft.escapeHtml(label),\n                name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                value: key,\n                checked: checked,\n            })\n          );\n    },\n\n    getIndexSourceItem: function() {\n        const $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.CustomSource = Craft.CustomizeSourcesModal.Source.extend({\n    $labelInput: null,\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Label'),\n            name: `sources[${this.sourceData.key}][label]`,\n            value: this.sourceData.label,\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n        const defaultId = `condition${Math.floor(Math.random() * 1000000)}`;\n\n        const swapPlaceholders = str => str\n          .replace(/__ID__/g, defaultId)\n          .replace(/__SOURCE_KEY__(?=-)/g, Craft.formatInputId(this.sourceData.key))\n          .replace(/__SOURCE_KEY__/g, this.sourceData.key);\n\n        const conditionBuilderHtml = this.sourceData.conditionBuilderHtml ||\n            swapPlaceholders(this.modal.conditionBuilderHtml);\n        const conditionBuilderJs = this.sourceData.conditionBuilderJs ||\n            swapPlaceholders(this.modal.conditionBuilderJs);\n\n        Craft.ui.createField($('<div/>').append(conditionBuilderHtml), {\n            id: 'criteria',\n            label: Craft.t('app', '{type} Criteria', {\n                type: this.modal.elementTypeName,\n            }),\n        }).appendTo($container);\n        Craft.appendFootHtml(conditionBuilderJs);\n\n        this.createTableAttributesField($container);\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete custom source'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    getIndexSourceItem: function() {\n        let $source = this.base();\n        if ($source || !this.$settingsContainer) {\n            if (this.$settingsContainer) {\n                $source.find('.label').text(this.$labelInput.val());\n            }\n            return $source;\n        }\n        return $('<li/>').append(\n          $('<a/>', {\n              'data-key': this.sourceData.key,\n          }).append(\n            $('<span/>', {\n                class: 'label',\n                text: this.$labelInput.val(),\n            })\n          )\n        );\n    },\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading || '',\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    getIndexSourceItem: function() {\n        const label = (this.$labelInput ? this.$labelInput.val() : null) || this.sourceData.heading || '';\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (BroadcastChannel && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSites && this.settings.addlSites.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site, status) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: typeof status != 'undefined'\n                ? status\n                : (this.settings.siteStatuses.hasOwnProperty(site.id) ? this.settings.siteStatuses[site.id] : true),\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(site => {\n            return !this.siteIds.includes(site.id) && this.settings.addlSites.some(s => s.siteId == site.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            const addlSiteInfo = this.settings.addlSites.find(s => s.siteId == site.id);\n            this._createSiteStatusField(site, addlSiteInfo.enabledByDefault);\n            this._updateGlobalStatus();\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSites: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n\n        this.addListener(this.$passwordWrapper.closest('form'), 'submit', 'hidePassword');\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        uuid: function() {\n            if (typeof crypto.randomUUID === 'function') {\n                return crypto.randomUUID();\n            }\n\n            // h/t https://stackoverflow.com/a/2117523/1688568\n            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n              (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n            );\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n            $('.datewrapper > input[type=\"date\"], .timewrapper > input[type=\"time\"]', $container).datetimeinput();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('').trigger('input').trigger('change');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().filter('[type=\"text\"]').focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n\n        datetimeinput: function() {\n            return this.each(function() {\n                const $input = $(this);\n                const checkValue = () => {\n                    if ($input.val() === '') {\n                        $input.addClass('empty-value');\n                    } else {\n                        $input.removeClass('empty-value');\n                    }\n                };\n                $input.on('input', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $searchContainer: null,\n    $search: null,\n    $filterBtn: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    filterHuds: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n\n        this.$searchContainer = this.$toolbar.find('.search:first')\n        this.$search = this.$searchContainer.children('input:first');\n        this.$filterBtn = this.$searchContainer.children('.filter-btn:first');\n        this.$clearSearchBtn = this.$searchContainer.children('.clear:first');\n\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Filter HUDs\n        this.filterHuds = {};\n        this.addListener(this.$filterBtn, 'click', 'showFilterHud');\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].serialized) {\n            params.condition = this.filterHuds[this.sourceKey].serialized;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        // Filter HUD\n        // ----------------------------------------------------------------------\n\n        this.updateFilterBtn();\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n            delete params.collapsedElementIds;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    },\n\n    showFilterHud: function() {\n        if (!this.filterHuds[this.sourceKey]) {\n            this.filterHuds[this.sourceKey] = new FilterHud(this, this.sourceKey);\n        } else {\n            this.filterHuds[this.sourceKey].show();\n        }\n    },\n\n    updateFilterBtn: function() {\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].hasRules()) {\n            this.$filterBtn.addClass('active');\n        } else {\n            this.$filterBtn.removeClass('active');\n        }\n    },\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\nconst FilterHud = Garnish.HUD.extend({\n    elementIndex: null,\n    sourceKey: null,\n    loading: true,\n    serialized: null,\n\n    init: function(elementIndex, sourceKey) {\n        this.elementIndex = elementIndex;\n        this.sourceKey = sourceKey;\n\n        const $spinner = $('<div/>', {\n            class: 'spinner',\n        });\n\n        this.base(this.elementIndex.$filterBtn, $spinner, {\n            hudClass: 'hud element-filter-hud loading',\n        });\n\n        this.$tip.remove();\n        this.$tip = null;\n\n        const id = `element-filter-${Math.floor(Math.random() * 1000000000)}`;\n\n        Craft.sendActionRequest('POST', 'element-indexes/filter-hud', {\n            data: {\n                elementType: this.elementIndex.elementType,\n                source: this.sourceKey,\n                baseInputName: id,\n                id: id,\n            },\n        }).then(response => {\n            this.loading = false;\n            this.$hud.removeClass('loading');\n            $spinner.remove();\n\n            this.$main.append(response.data.hudHtml);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.bodyHtml);\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        });\n    },\n\n    updateSizeAndPositionInternal: function() {\n        const searchOffset = this.elementIndex.$searchContainer.offset();\n\n        this.$hud.css({\n            width: this.elementIndex.$searchContainer.outerWidth() - 2,\n            top: searchOffset.top + this.elementIndex.$searchContainer.outerHeight(),\n            left: searchOffset.left + 1,\n        });\n    },\n\n    onShow: function() {\n        this.elementIndex.$filterBtn.addClass('active');\n        this.base();\n    },\n\n    onHide: function() {\n        this.base();\n\n        this.elementIndex.updateFilterBtn();\n\n        // If something changed, update the elements\n        if (this.serialized !== (this.serialized = this.serialize())) {\n            this.elementIndex.updateElements();\n        }\n    },\n\n    hasRules: function() {\n        return this.$main.has('.condition-rule').length !== 0;\n    },\n\n    serialize: function() {\n        return this.hasRules() ? this.$body.serialize() : null;\n    }\n})\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n    replaceAsset: null,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    if (this.replaceAsset) {\n                        this.settings.input.replaceElement(this.$element.data('id'), this.replaceAsset);\n                    } else {\n                        this.settings.input.refreshThumbnail(this.$element.data('id'));\n                    }\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n\n            onSave: (data) => {\n                if (data.elementId) {\n                    this.settings.elementId = this.replaceAsset = data.elementId;\n                }\n\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave(data);\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function(data) {\n        this.settings.onSave(data);\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    replaceElement: function(elementId, replaceWithId) {\n        var parameters = {\n            elementId: replaceWithId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                this.removeElement($existing);\n                let elementInfo = Craft.getElementInfo(data.html);\n                this.selectElements([elementInfo]);\n            }\n        });\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    isMobile: null,\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.isMobile = Garnish.isMobileBrowser();\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (!this.isMobile && this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        if (this.isMobile) {\n            return;\n        }\n\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $newSourceBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    elementTypeName: null,\n    availableTableAttributes: null,\n\n    conditionBuilderHtml: null,\n    conditionBuilderJs: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        const $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        Craft.sendActionRequest('POST', 'element-index-settings/get-customize-sources-modal-data', {\n            data: {\n                elementType: this.elementIndex.elementType,\n            },\n        }).then(response => {\n            this.$saveBtn.removeClass('disabled');\n            this.buildModal(response.data);\n        }).finally(() => {\n            this.$loadingSpinner.remove();\n        });\n\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        this.availableTableAttributes = response.availableTableAttributes;\n        this.elementTypeName = response.elementTypeName;\n        this.conditionBuilderHtml = response.conditionBuilderHtml;\n        this.conditionBuilderJs = response.conditionBuilderJs;\n\n        if (response.headHtml) {\n            Craft.appendHeadHtml(response.headHtml);\n        }\n        if (response.bodyHtml) {\n            Craft.appendFootHtml(response.bodyHtml);\n        }\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (let i = 0; i < response.sources.length; i++) {\n            this.sources.push(this.addSource(response.sources[i]));\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n\n        const $menuBtnContainer = $('<div class=\"buttons left\"/>').appendTo(this.$footer);\n        const $menuBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn add icon',\n            'aria-label': Craft.t('app', 'Add…'),\n            title: Craft.t('app', 'Add…'),\n        }).appendTo($menuBtnContainer);\n\n        const $menu = $('<div/>', {\n            class: 'menu',\n        }).appendTo($menuBtnContainer);\n        const $ul  = $('<ul/>').append(\n          $('<li/>').append(\n            $('<a/>', {\n                text: Craft.t('app', 'New heading'),\n                'data-type': 'heading',\n            })\n          )\n        ).appendTo($menu);\n\n        if (response.conditionBuilderHtml) {\n            $('<li/>').append(\n              $('<a/>', {\n                  text: Craft.t('app', 'New custom source'),\n                  'data-type': 'custom',\n              })\n            ).appendTo($ul);\n        }\n\n        new Garnish.MenuBtn($menuBtn, {\n            onOptionSelect: option => {\n                const sourceData = {\n                    type: $(option).data('type'),\n                };\n                if (sourceData.type === 'custom') {\n                    sourceData.key = `custom:${Craft.uuid()}`;\n                    sourceData.tableAttributes = [];\n                    sourceData.availableTableAttributes = [];\n                }\n                const source = this.addSource(sourceData);\n                Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n                source.select();\n                this.updateSourcesOnSave = true;\n            }\n        });\n    },\n\n    addSource: function(sourceData) {\n        const $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        const $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        const $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        let source;\n\n        if (sourceData.type === 'heading') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            if (sourceData.type === 'native') {\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            } else {\n                source = new Craft.CustomizeSourcesModal.CustomSource(this, $item, $itemLabel, $itemInput, sourceData);\n            }\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n        return source;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'element-index-settings/save-customize-sources-modal-settings', {\n            data: this.$container.serialize() + '&elementType=' + this.elementIndex.elementType,\n        }).then(() => {\n            // Have any changes been made to the source list?\n            if (this.updateSourcesOnSave) {\n                if (this.$elementIndexSourcesContainer.length) {\n                    let $lastSourceItem = null,\n                      $pendingHeading;\n\n                    for (let i = 0; i < this.sourceSort.$items.length; i++) {\n                        const $item = this.sourceSort.$items.eq(i),\n                          source = $item.data('source'),\n                          $indexSourceItem = source.getIndexSourceItem();\n\n                        if (!$indexSourceItem) {\n                            continue;\n                        }\n\n                        if (source.isHeading()) {\n                            $pendingHeading = $indexSourceItem;\n                            continue;\n                        }\n\n                        if ($pendingHeading) {\n                            this.appendIndexSourceItem($pendingHeading, $lastSourceItem);\n                            $lastSourceItem = $pendingHeading;\n                            $pendingHeading = null;\n                        }\n\n                        const isNew = !$indexSourceItem.parent().length;\n                        this.appendIndexSourceItem($indexSourceItem, $lastSourceItem);\n                        if (isNew) {\n                            this.elementIndex.initSource($indexSourceItem.children('a'));\n                        }\n                        $lastSourceItem = $indexSourceItem;\n                    }\n\n                    // Remove any additional sources (most likely just old headings)\n                    if ($lastSourceItem) {\n                        const $extraSources = $lastSourceItem.nextAll();\n                        this.elementIndex.sourceSelect.removeItems($extraSources);\n                        $extraSources.remove();\n                    }\n                }\n            }\n\n            // If a source is selected, have the element index select that one by default on the next request\n            if (this.selectedSource && this.selectedSource.sourceData.key) {\n                this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                this.elementIndex.updateElements();\n            }\n\n            Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n            this.hide();\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        }).finally(() => {\n            this.$saveSpinner.addClass('hidden');\n        });\n    },\n\n    appendIndexSourceItem: function($sourceItem, $lastSourceItem) {\n        if (!$lastSourceItem) {\n            $sourceItem.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $sourceItem.insertAfter($lastSourceItem);\n        }\n    },\n\n    destroy: function() {\n        for (let i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = $('<div/>').appendTo(this.modal.$sourceSettingsContainer);\n            this.createSettings(this.$settingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n    },\n\n    getIndexSourceItem: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        if (val) {\n            this.$itemLabel.text(val);\n        } else {\n            this.$itemLabel.html('&nbsp;');\n        }\n    },\n\n    destroy: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.data('source', null);\n        this.$item.remove();\n\n        if (this.$settingsContainer) {\n            this.$settingsContainer.remove();\n        }\n\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function($container) {\n        this.createTableAttributesField($container);\n    },\n\n    createTableAttributesField: function($container) {\n        if (!this.sourceData.tableAttributes.length && !this.modal.availableTableAttributes.length) {\n            return;\n        }\n\n        const $columnCheckboxes = $('<div/>');\n        const selectedAttributes = [];\n\n        $(`<input type=\"hidden\" name=\"sources[${this.sourceData.key}][tableAttributes][]\" value=\"\"/>`).appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        const availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            const [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        }).appendTo($container);\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n          .append('<div class=\"icon move\"/>')\n          .append(\n            Craft.ui.createCheckbox({\n                label: Craft.escapeHtml(label),\n                name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                value: key,\n                checked: checked,\n            })\n          );\n    },\n\n    getIndexSourceItem: function() {\n        const $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.CustomSource = Craft.CustomizeSourcesModal.Source.extend({\n    $labelInput: null,\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Label'),\n            name: `sources[${this.sourceData.key}][label]`,\n            value: this.sourceData.label,\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n        const defaultId = `condition${Math.floor(Math.random() * 1000000)}`;\n\n        const swapPlaceholders = str => str\n          .replace(/__ID__/g, defaultId)\n          .replace(/__SOURCE_KEY__(?=-)/g, Craft.formatInputId(this.sourceData.key))\n          .replace(/__SOURCE_KEY__/g, this.sourceData.key);\n\n        const conditionBuilderHtml = this.sourceData.conditionBuilderHtml ||\n            swapPlaceholders(this.modal.conditionBuilderHtml);\n        const conditionBuilderJs = this.sourceData.conditionBuilderJs ||\n            swapPlaceholders(this.modal.conditionBuilderJs);\n\n        Craft.ui.createField($('<div/>').append(conditionBuilderHtml), {\n            id: 'criteria',\n            label: Craft.t('app', '{type} Criteria', {\n                type: this.modal.elementTypeName,\n            }),\n        }).appendTo($container);\n        Craft.appendFootHtml(conditionBuilderJs);\n\n        this.createTableAttributesField($container);\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete custom source'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    getIndexSourceItem: function() {\n        let $source = this.base();\n        if ($source || !this.$settingsContainer) {\n            if (this.$settingsContainer) {\n                $source.find('.label').text(this.$labelInput.val());\n            }\n            return $source;\n        }\n        return $('<li/>').append(\n          $('<a/>', {\n              'data-key': this.sourceData.key,\n          }).append(\n            $('<span/>', {\n                class: 'label',\n                text: this.$labelInput.val(),\n            })\n          )\n        );\n    },\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading || '',\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    getIndexSourceItem: function() {\n        const label = (this.$labelInput ? this.$labelInput.val() : null) || this.sourceData.heading || '';\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (BroadcastChannel && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSites && this.settings.addlSites.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site, status) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: typeof status != 'undefined'\n                ? status\n                : (this.settings.siteStatuses.hasOwnProperty(site.id) ? this.settings.siteStatuses[site.id] : true),\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(site => {\n            return !this.siteIds.includes(site.id) && this.settings.addlSites.some(s => s.siteId == site.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            const addlSiteInfo = this.settings.addlSites.find(s => s.siteId == site.id);\n            this._createSiteStatusField(site, addlSiteInfo.enabledByDefault);\n            this._updateGlobalStatus();\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSites: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n\n        this.addListener(this.$passwordWrapper.closest('form'), 'submit', 'hidePassword');\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}