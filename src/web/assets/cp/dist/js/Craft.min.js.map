{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","_processedApiHeaders","sendApiRequest","uri","cancelToken","getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","apiResponse","_apiHeaders","window","cmsLicenseKey","_resolveHeaderWaitlist","_apiHeaderWaitlist","_loadingApiHeaders","response","e","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","remove","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","first","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","$scrollContainer","scrollTop","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","aria-expanded","aria-label","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","validateDeleteInputs","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$notesTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","newSites","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","autosaveDrafts","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","site","siteStatuses","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","addlSiteOptions","addlSiteIds","serializedStatuses","$addlSiteSelectContainer","createSelect","$addlSiteSelect","_removeField","_updateSiteStatuses","$field","overflow","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","$lightswitch","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnsavedDraft","saveDraft","isActive","draftNotes","$spinners","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","applyDraftAction","canDeleteDraft","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","currentTargets","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$deleteLink","saveMeta","onMetaHudHide","onMetaHudEscape","onNotesKeydown","shakeMetaHud","deleteDraft","deleteDraftAction","handleFormSubmit","abort","hashedRedirectUrl","enabledGlobally","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","focus","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","onToggleMouseDown","$targetBtn","$targetMenu","iframeLoaded","$tempInput","activeTarget","iframeHeight","_updateIframeProxy","$previewHeader","switchTarget","previewTarget","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","iFrameResize","checkOrigin","scrolling","onInit","iframe","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","inputmode","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","num","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                    this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        isDirty: function() {\n            return this.hud.$body.serialize() !== this.initialData;\n        },\n\n        maybeCloseHud: function(ev) {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n                this.closeHud();\n            }\n        },\n\n        closeHud: function() {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        exportersByType: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Don't let the criteria override the selected site\n            if (this.settings.criteria && this.settings.criteria.siteId) {\n                delete this.settings.criteria.siteId;\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav > ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            return this.selectSource($source);\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n            };\n\n            // Only set trashed/drafts/draftOf params when needed, so we don't potentially override a source's criteria\n            if (this.trashed) {\n                criteria.trashed = true;\n            }\n            if (this.drafts) {\n                criteria.drafts = true;\n                criteria.draftOf = false;\n            }\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n                this._updateView(params, response.data);\n            }).catch(e => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode') || 'table';\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw `View mode \"${mode}\" not supported.`;\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            let firstSite = this.siteId === null;\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            // Select a new source automatically if a site is already selected, but we don't have a selected source\n            // (or if the currently selected source ends up not supporting the new site)\n            var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (this.initialized && selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.next('.toggle').attr({\n                'aria-expanded': 'true',\n                'aria-label': Craft.t('app', 'Hide nested sources'),\n            });\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.next('.toggle').attr({\n                'aria-expanded': 'false',\n                'aria-label': Craft.t('app', 'Show nested sources'),\n            });\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n            this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            let $typeSelect = $typeField.find('select');\n            this.addListener($typeSelect, 'change', () => {\n                let type = $typeSelect.val();\n                if (this.exportersByType[type].formattable) {\n                    $formatField.removeClass('hidden');\n                } else {\n                    $formatField.addClass('hidden');\n                }\n            });\n            $typeSelect.trigger('change');\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n        $addElementBtnContainer: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n\n            this.$addElementBtn = this.getAddElementsBtn();\n            if (this.$addElementBtn) {\n                this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n                if (!this.$addElementBtnContainer.length) {\n                    this.$addElementBtnContainer = null;\n                }\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            Garnish.requestAnimationFrame(() => {\n                this._initialized = true;\n            });\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.find('.btn.add:first');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.addClass('hidden');\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.removeClass('hidden');\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, () => {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            if (this.settings.allowDegreeFractions === null) {\n                this.settings.allowDegreeFractions = Craft.isImagick;\n            }\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: null,\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop'),\n                helperBaseZindex: 800\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        $uploadBtn: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n\n            if (this.settings.canUpload) {\n                this._attachUploader();\n            }\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            if (this.$addElementBtn) {\n                this.$uploadBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn dashed',\n                    'data-icon': 'upload',\n                    text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                }).insertAfter(this.$addElementBtn);\n                options.fileInput = $('<input/>', {\n                    type: 'file',\n                    class: 'hidden',\n                    multiple: this.settings.limit != 1,\n                }).insertAfter(this.$uploadBtn);\n\n                // Trigger a window resize in case the field is inside an element editor HUD\n                Garnish.$win.trigger('resize');\n            }\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            if (this.$uploadBtn) {\n                this.$uploadBtn.on('click', $.proxy(function(ev) {\n                    // We can't store a reference to the file input, because it gets replaced with a new input\n                    // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                    this.$uploadBtn.next('input[type=file]').trigger('click');\n                }, this));\n            }\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n\n            this.updateSidebarMenuLabel();\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            let m = (window.devicePixelRatio > 1 ? 2 : 1);\n            this._canvasSize = 18 * m;\n            this._arcPos = this._canvasSize / 2;\n            this._arcRadius = 7 * m;\n            this._lineWidth = 3 * m;\n\n            this._$bgCanvas = this._createCanvas('bg', '#61666b');\n            this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n            this._$hoverCanvas = this._createCanvas('hover', '#fff');\n            this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n            this._staticCtx = this._$staticCanvas[0].getContext('2d');\n            this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n            this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n            this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (progress == 0) {\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n            } else {\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                if (this.progress && progress > this.progress) {\n                    this._animateArc(0, progress / 100);\n                }\n                else {\n                    this._setArc(0, progress / 100);\n                }\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            this._animateArc(0, 1, $.proxy(function() {\n                this._$bgCanvas.velocity('fadeOut');\n\n                this._animateArc(1, 1, $.proxy(function() {\n                    this.$a.remove();\n                    this.destroy();\n                }, this));\n            }, this));\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            this._$bgCanvas.hide();\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n            this._$failCanvas.show();\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            this._$bgCanvas.show();\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            this._$failCanvas.hide();\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user'),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            let $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.settings.draftNotes = $('#revision-notes').val();\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        let $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish changes\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // If autosaving is disabled, add a \"Save draft\" button\n                        if (!Craft.autosaveDrafts) {\n                            $('<button/>', {\n                                type: 'submit',\n                                class: 'btn submit',\n                                text: Craft.t('app', 'Save draft'),\n                            }).appendTo($actionButtonContainer);\n                        }\n\n                        // Remove the revision notes field\n                        $('#revision-notes').remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += `&draftId=${this.settings.draftId}`;\n            }\n\n            if (this.settings.draftName !== null) {\n                data += `&draftName=${this.settings.draftName}`;\n            }\n\n            if (this.settings.draftNotes !== null) {\n                data += `&draftNotes=${this.settings.draftNotes}`;\n            }\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            let $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // Is this a normal draft, and was this a normal save (either via submit button or save shortcut)?\n            if (this.settings.draftId && !this.settings.isUnsavedDraft && !ev.customTrigger) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.parent().height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            if (this.rowCount === 0) {\n                this.$table.addClass('hidden');\n            }\n\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n            this.$table.removeClass('hidden');\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': col.rows || 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n        this.renameTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                previewTarget: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                previewTarget: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n                }\n\n                let $option;\n\n                switch (ev.keyCode) {\n                    case Garnish.RETURN_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            this.selectTag(this.searchMenu.$options.filter('.hover'));\n                        }\n                        return;\n                    }\n\n                    case Garnish.DOWN_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            let $hoverOption = this.searchMenu.$options.filter('.hover');\n                            if ($hoverOption.length) {\n                                let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                                if ($nextOption.length) {\n                                    this.focusOption($nextOption);\n                                }\n                            } else {\n                                this.focusOption(this.searchMenu.$options.eq(0));\n                            }\n                        }\n                        return;\n                    }\n\n                    case Garnish.UP_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            let $hoverOption = this.searchMenu.$options.filter('.hover');\n                            if ($hoverOption.length) {\n                                let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                                if ($prevOption.length) {\n                                    this.focusOption($prevOption);\n                                }\n                            } else {\n                                this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                            }\n                        }\n                        return;\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        focusOption: function($option) {\n            this.searchMenu.$options.removeClass('hover');\n            $option.addClass('hover');\n            this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                    this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        isDirty: function() {\n            return this.hud.$body.serialize() !== this.initialData;\n        },\n\n        maybeCloseHud: function(ev) {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n                this.closeHud();\n            }\n        },\n\n        closeHud: function() {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        exportersByType: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Don't let the criteria override the selected site\n            if (this.settings.criteria && this.settings.criteria.siteId) {\n                delete this.settings.criteria.siteId;\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav > ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            return this.selectSource($source);\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n            };\n\n            // Only set trashed/drafts/draftOf params when needed, so we don't potentially override a source's criteria\n            if (this.trashed) {\n                criteria.trashed = true;\n            }\n            if (this.drafts) {\n                criteria.drafts = true;\n                criteria.draftOf = false;\n            }\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n                this._updateView(params, response.data);\n            }).catch(e => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode') || 'table';\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw `View mode \"${mode}\" not supported.`;\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            let firstSite = this.siteId === null;\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            // Select a new source automatically if a site is already selected, but we don't have a selected source\n            // (or if the currently selected source ends up not supporting the new site)\n            var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (this.initialized && selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.next('.toggle').attr({\n                'aria-expanded': 'true',\n                'aria-label': Craft.t('app', 'Hide nested sources'),\n            });\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.next('.toggle').attr({\n                'aria-expanded': 'false',\n                'aria-label': Craft.t('app', 'Show nested sources'),\n            });\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n            this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            let $typeSelect = $typeField.find('select');\n            this.addListener($typeSelect, 'change', () => {\n                let type = $typeSelect.val();\n                if (this.exportersByType[type].formattable) {\n                    $formatField.removeClass('hidden');\n                } else {\n                    $formatField.addClass('hidden');\n                }\n            });\n            $typeSelect.trigger('change');\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n        $addElementBtnContainer: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n\n            this.$addElementBtn = this.getAddElementsBtn();\n            if (this.$addElementBtn) {\n                this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n                if (!this.$addElementBtnContainer.length) {\n                    this.$addElementBtnContainer = null;\n                }\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            Garnish.requestAnimationFrame(() => {\n                this._initialized = true;\n            });\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.find('.btn.add:first');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.addClass('hidden');\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.removeClass('hidden');\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, () => {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            if (this.settings.allowDegreeFractions === null) {\n                this.settings.allowDegreeFractions = Craft.isImagick;\n            }\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: null,\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop'),\n                helperBaseZindex: 800\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        $uploadBtn: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n\n            if (this.settings.canUpload) {\n                this._attachUploader();\n            }\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            if (this.$addElementBtn) {\n                this.$uploadBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn dashed',\n                    'data-icon': 'upload',\n                    text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                }).insertAfter(this.$addElementBtn);\n                options.fileInput = $('<input/>', {\n                    type: 'file',\n                    class: 'hidden',\n                    multiple: this.settings.limit != 1,\n                }).insertAfter(this.$uploadBtn);\n\n                // Trigger a window resize in case the field is inside an element editor HUD\n                Garnish.$win.trigger('resize');\n            }\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            if (this.$uploadBtn) {\n                this.$uploadBtn.on('click', $.proxy(function(ev) {\n                    // We can't store a reference to the file input, because it gets replaced with a new input\n                    // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                    this.$uploadBtn.next('input[type=file]').trigger('click');\n                }, this));\n            }\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n\n            this.updateSidebarMenuLabel();\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            let m = (window.devicePixelRatio > 1 ? 2 : 1);\n            this._canvasSize = 18 * m;\n            this._arcPos = this._canvasSize / 2;\n            this._arcRadius = 7 * m;\n            this._lineWidth = 3 * m;\n\n            this._$bgCanvas = this._createCanvas('bg', '#61666b');\n            this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n            this._$hoverCanvas = this._createCanvas('hover', '#fff');\n            this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n            this._staticCtx = this._$staticCanvas[0].getContext('2d');\n            this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n            this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n            this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (progress == 0) {\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n            } else {\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                if (this.progress && progress > this.progress) {\n                    this._animateArc(0, progress / 100);\n                }\n                else {\n                    this._setArc(0, progress / 100);\n                }\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            this._animateArc(0, 1, $.proxy(function() {\n                this._$bgCanvas.velocity('fadeOut');\n\n                this._animateArc(1, 1, $.proxy(function() {\n                    this.$a.remove();\n                    this.destroy();\n                }, this));\n            }, this));\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            this._$bgCanvas.hide();\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n            this._$failCanvas.show();\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            this._$bgCanvas.show();\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            this._$failCanvas.hide();\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user'),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            let $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.settings.draftNotes = $('#revision-notes').val();\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        let $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish changes\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // If autosaving is disabled, add a \"Save draft\" button\n                        if (!Craft.autosaveDrafts) {\n                            $('<button/>', {\n                                type: 'submit',\n                                class: 'btn submit',\n                                text: Craft.t('app', 'Save draft'),\n                            }).appendTo($actionButtonContainer);\n                        }\n\n                        // Remove the revision notes field\n                        $('#revision-notes').remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += `&draftId=${this.settings.draftId}`;\n            }\n\n            if (this.settings.draftName !== null) {\n                data += `&draftName=${this.settings.draftName}`;\n            }\n\n            if (this.settings.draftNotes !== null) {\n                data += `&draftNotes=${this.settings.draftNotes}`;\n            }\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            let $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // Is this a normal draft, and was this a normal save (either via submit button or save shortcut)?\n            if (this.settings.draftId && !this.settings.isUnsavedDraft && !ev.customTrigger) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.parent().height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            if (this.rowCount === 0) {\n                this.$table.addClass('hidden');\n            }\n\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n            this.$table.removeClass('hidden');\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': col.rows || 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n        this.renameTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                previewTarget: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                previewTarget: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n                }\n\n                let $option;\n\n                switch (ev.keyCode) {\n                    case Garnish.RETURN_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            this.selectTag(this.searchMenu.$options.filter('.hover'));\n                        }\n                        return;\n                    }\n\n                    case Garnish.DOWN_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            let $hoverOption = this.searchMenu.$options.filter('.hover');\n                            if ($hoverOption.length) {\n                                let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                                if ($nextOption.length) {\n                                    this.focusOption($nextOption);\n                                }\n                            } else {\n                                this.focusOption(this.searchMenu.$options.eq(0));\n                            }\n                        }\n                        return;\n                    }\n\n                    case Garnish.UP_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            let $hoverOption = this.searchMenu.$options.filter('.hover');\n                            if ($hoverOption.length) {\n                                let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                                if ($prevOption.length) {\n                                    this.focusOption($prevOption);\n                                }\n                            } else {\n                                this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                            }\n                        }\n                        return;\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        focusOption: function($option) {\n            this.searchMenu.$options.removeClass('hover');\n            $option.addClass('hover');\n            this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n"]}