{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebarShade","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","prependTo","target","data-icon","ltr","addListener","hideSidebar","showSidebar","isMobileBrowser","$siteSelectOuterContainer","Slideout","add","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_sidebarStyles","_openedSidebarStyles","one","addLayer","removeLayer","headerHeight","outerHeight","top","height","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","$target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","event","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","$allInstructions","$instructions","$label","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","forEach","timestamp","heading","onShow","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","primarySiteId","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","select","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdProvisionalDraft","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","autosaveDrafts","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","_saveSuccessMessage","_saveFailMessage","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","deltaCallback","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","$statusIcons","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","$hud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","hudClass","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","o","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebarShade: null,\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'}).prependTo(this.$body);\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade = $('<div/>', {class: 'ee-sidebar-shade hidden'}).appendTo(this.$body);\n\n            this.addListener(this.$sidebarShade, 'click', ev => {\n                ev.stopPropagation();\n                this.hideSidebar();\n            });\n        }\n\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout(this.$body.add(this.$footer), {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade\n                .removeClass('hidden')\n                .css(this._sidebarStyles());\n        }\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade.addClass('hidden');\n        }\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _sidebarStyles: function() {\n        const headerHeight = this.$header.outerHeight();\n        return {\n            top: `${headerHeight}px`,\n            height: `calc(100% - ${headerHeight}px`,\n        };\n    },\n\n    _openedSidebarStyles: function() {\n        return $.extend(this._sidebarStyles(), {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        });\n    },\n\n    _closedSidebarStyles: function() {\n        return $.extend(this._sidebarStyles(), {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        });\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container.editable'), 'click', 'showImageEditor');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.group(Craft.announcements, 'timestamp').forEach(([announcements, timestamp]) => {\n                        announcements.forEach((a, i) => {\n                            contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                                (i === 0 ? `<div class=\"timestamp\">${a.timestamp}</div>` : '') +\n                                `<h2>${a.heading}</h2>` +\n                                `<p>${a.body}</p>` +\n                                '</div>';\n                        });\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            this.checkForm();\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, (deltaName, params)  => {\n                if (!this.settings.isUnpublishedDraft && params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            });\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject();\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).closest('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                resolve();\n            }).catch(() => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    this._showFailStatus();\n                    reject();\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue') || '');\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames(), deltaCallback);\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebarShade: null,\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'}).prependTo(this.$body);\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade = $('<div/>', {class: 'ee-sidebar-shade hidden'}).appendTo(this.$body);\n\n            this.addListener(this.$sidebarShade, 'click', ev => {\n                ev.stopPropagation();\n                this.hideSidebar();\n            });\n        }\n\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout(this.$body.add(this.$footer), {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade\n                .removeClass('hidden')\n                .css(this._sidebarStyles());\n        }\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade.addClass('hidden');\n        }\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _sidebarStyles: function() {\n        const headerHeight = this.$header.outerHeight();\n        return {\n            top: `${headerHeight}px`,\n            height: `calc(100% - ${headerHeight}px`,\n        };\n    },\n\n    _openedSidebarStyles: function() {\n        return $.extend(this._sidebarStyles(), {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        });\n    },\n\n    _closedSidebarStyles: function() {\n        return $.extend(this._sidebarStyles(), {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        });\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container.editable'), 'click', 'showImageEditor');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.group(Craft.announcements, 'timestamp').forEach(([announcements, timestamp]) => {\n                        announcements.forEach((a, i) => {\n                            contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                                (i === 0 ? `<div class=\"timestamp\">${a.timestamp}</div>` : '') +\n                                `<h2>${a.heading}</h2>` +\n                                `<p>${a.body}</p>` +\n                                '</div>';\n                        });\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            this.checkForm();\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, (deltaName, params)  => {\n                if (!this.settings.isUnpublishedDraft && params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            });\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject();\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).closest('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                resolve();\n            }).catch(() => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    this._showFailStatus();\n                    reject();\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue') || '');\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames(), deltaCallback);\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}